name: HumanEval_118_get_closest_vowel
language: julia
results:
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    if vowels_len == 0 \n        return \"\"\n    \n  \
    \  vowels_index = word[vowels_len]\n    \n    if vowels_index == \"a\" \n    \
    \    return \"a\"\n    \n    if vowels_index == \"e\" \n        return \"e\"\n\
    \    \n    if vowels_index == \"i\" \n        return \"i\"\n    \n    if vowels_index\
    \ == \"o\" \n        return \"o\"\n    \n    if vowels_index == \"u\" \n     \
    \   return \"u\"\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.4>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp96ko70rs.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp96ko70rs.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    vowels_count = vowels_count - 1\n    if vowels_count\
    \ < 0 \n        vowels_count = 0\n    \n    if vowels_count > 0 \n        vowels_count\
    \ = vowels_count - 1\n    \n    if vowels_count < 0 \n        vowels_count = 0\n\
    \    \n    if vowels_count > 0 \n        vowels_count = vowels_count - 1\n   \
    \ \n    if vowels_count < 0 \n        vowels_count = 0\n    \n    if vowels_count\
    \ > 0 \n        vowels_count = vowels_count - 1\n    \n    if vowels_count < 0\
    \ \n        vowels_count = 0\n    \n    if vowels_count > 0 \n        vowels_count\
    \ = vowels_count - 1\n    \n    if vowels_count < 0 \n        vowels_count = 0\n\
    \    \n    if vowels_count > 0 \n        vowels_count = vowels_count - 1\n   \
    \ \n    if vowels_count < 0 \n        vowels_count = 0\n    \n    if vowels_count\
    \ > 0 \n        vowels_count = vowels_count - 1\n    \n    if vowels_count < 0\
    \ \n        vowels_count = 0\n    \n    if vowels_count > 0 \n        vowels_count\
    \ = vowels_count - 1\n    \n    if vowels_count < 0 \n        vowels_count = 0\n\
    \    \n    if vowels_count > 0 \n        vowels_count = vowels_count - 1\n   \
    \ \n    if vowels_count < 0 \n        vowels_count = 0\n    \n    if vowels_count\
    \ > 0 \n        vowels_count = vowels_count - 1\n    \n    if vowels_count < 0\
    \ \n        vowels_count = 0\n    \n    if vowels_count > 0 \n        vowels_count\
    \ = vowels_count - 1\n    \n    if vowels_count < 0 \n        vowels_count = 0\n\
    \    \n    if vowels_count > 0 \n        vowels_count = vowels_count - 1\n   \
    \ \n    if vowels_count < 0 \n        vowels_count = 0\n    \n    if vowels_count\
    \ > 0 \n        vowels_count = vowels_count - 1\n    \n    if vowels_count < 0\
    \ \n        vowels_count = 0\n    \n    if vowels_count > 0 \n        vowels_count\
    \ = vowels_count - 1\n    \n    if vowels_count < 0 \n        vowels_count = 0\n\
    \    \n    if vowels_count > 0 \n        vowels_count = vowels_count - 1\n   \
    \ \n    if vowels_count < 0 \n        vowels_count = 0\n    \n    if vowels_count\
    \ > 0 \n        vowels_count = vowels_count - 1\n    \n    if vowels_count \n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1a2ku45t.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1a2ku45t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    for char in word:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    if vowels_count == 0:\n     \
    \   return \"\"\n    vowels_count -= 1\n    vowels_count %= vowels_len\n    vowels_count\
    \ += vowels_len\n    vowels_count %= vowels_len\n    vowels_count += vowels_len\n\
    \    vowels_count %= vowels_len\n    vowels_count += vowels_len\n    vowels_count\
    \ %= vowels_len\n    vowels_count += vowels_len\n    vowels_count %= vowels_len\n\
    \    vowels_count += vowels_len\n    vowels_count %= vowels_len\n    vowels_count\
    \ += vowels_len\n    vowels_count %= vowels_len\n    vowels_count += vowels_len\n\
    \    vowels_count %= vowels_len\n    vowels_count += vowels_len\n    vowels_count\
    \ %= vowels_len\n    vowels_count += vowels_len\n    vowels_count %= vowels_len\n\
    \    vowels_count += vowels_len\n    vowels_count %= vowels_len\n    vowels_count\
    \ += vowels_len\n    vowels_count %= vowels_len\n    vowels_count += vowels_len\n\
    \    vowels_count %= vowels_len\n    vowels_count += vowels_len\n    vowels_count\
    \ %= vowels_len\n    vowels_count += vowels_len\n    vowels_count %= vowels_len\n\
    \    vowels_count += vowels_len\n    vowels_count %= vowels_len\n    vowels_count\
    \ += vowels_len\n    vowels_count %= vowels_len\n    vowels_count += vowels_len\n\
    \    vowels_count %= vowels_len\n    vowels_count += vowels_len\n    vowels_count\
    \ %= vowels_len\n    vowels_count += vowels_len\n    vowels_count %= vowels_len\n\
    \    vowels_count += vowels_len\n    vowels_count %= vowels_len\n    vowels_count\
    \ += vowels_len\n    vowels_count %= vowels_len\n    vowels_count += vowels_len\n\
    \    vowels_count %= vowels_len\n    vowels_count += vowels_len\n    vowels_count\
    \ %= vowels_len\n    vowels_count += vowels_len\n    vowels_count %= vowels_len\n\
    \    vowels_count += vowels_len\n    vowels_count %= vowels_len\n    \nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9fcw7voi.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9fcw7voi.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n\
    \    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count -= 1\n    vowels_count\
    \ -= 1\n    vowels_count -= 1\n    vowels_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpplrdn3hf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpplrdn3hf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpplrdn3hf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    vowels_index_count\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphwzm071a.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphwzm071a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphwzm071a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = []\n    for index, letter in enumerate(word):\n\
    \        if letter in vowels:\n            vowels_index.append(index)\n    vowels_index.sort()\n\
    \    vowels_index.reverse()\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_len]\n    vowels_index = vowels_index[vowels_len-1:vowels_len]\n\
    \    vowels_index = vowels_index[vowels_len-1:vowels_len]\n    vowels_index =\
    \ vowels_index[vowels_len-1:vowels_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplbc97o86.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplbc97o86.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_3x9yn9e.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_3x9yn9e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_3x9yn9e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1 \n      \
    \  return \"\"\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx < 0 \n        vowels_idx = vowels.length\n    vowels_idx\
    \ = vowels_idx - 1\n    if vowels_idx < 0 \n        vowels_idx = vowels.length\n\
    \    vowels_idx = vowels_idx + 1\n    if vowels_idx < 0 \n        vowels_idx =\
    \ vowels.length\n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0 \n   \
    \     vowels_idx = vowels.length\n    vowels_idx = vowels_idx + 1\n    if vowels_idx\
    \ < 0 \n        vowels_idx = vowels.length\n    vowels_idx = vowels_idx - 1\n\
    \    if vowels_idx < 0 \n        vowels_idx = vowels.length\n    vowels_idx =\
    \ vowels_idx + 1\n    if vowels_idx < 0 \n        vowels_idx = vowels.length\n\
    \    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0 \n        vowels_idx =\
    \ vowels.length\n    vowels_idx = vowels_idx + 1\n    if vowels_idx < 0 \n   \
    \     vowels_idx = vowels.length\n    vowels_idx = vowels_idx - 1\n    if vowels_idx\
    \ < 0 \n        vowels_idx = vowels.length\n    vowels_idx = vowels_idx + 1\n\
    \    if vowels_idx < 0 \n        vowels_idx = vowels.length\n    vowels_idx =\
    \ vowels_idx - 1\n    if vowels_idx < 0 \n        vowels_idx = vowels.length\n\
    \    vowels_idx = vowels_idx + 1\n    if vowels_idx < 0 \n        vowels_idx =\
    \ vowels.length\n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0 \n   \
    \     vowels_idx = vowels.length\n    vowels_idx = vowels_idx + 1\n    if vowels_idx\
    \ < 0 \n        vowels_idx = vowels.length\n    vowels_idx = vowels_idx - 1\n\
    \    if vowels_idx < 0 \n        vowels_idx = vowels.length\n    vowels_idx =\
    \ vowels_idx + 1\n    if vowels_idx < 0 \n        vowels_idx = vowels.length\n\
    \    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0 \n        vowels_idx =\
    \ vowels.length\n    vowels_idx = vowels_idx + 1\n    if vowels_idx < 0 \n   \
    \     vowels_idx = vowels.length\n    vowels_idx = vowels_idx - 1\n    if vowels_idx\
    \ < 0 \n        vowels_idx = vowels.length\n    vowels_idx = vowels_idx + 1\n\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7lj_nk5o.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7lj_nk5o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels[vowels_idx]\
    \ == word[vowels_idx + 1]\n        return word[vowels_idx]\n    \n    if vowels[vowels_idx]\
    \ == word[vowels_idx - 1]\n        return word[vowels_idx]\n    \n    return \"\
    \"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string as input\
    \ and returns a string with all the characters of the string in reverse order.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_xpt60qx.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_xpt60qx.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_idx == -1 \n        return\
    \ \"\"\n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0 \n        vowels_idx\
    \ = vowels.length\n    vowels_idx = vowels_idx + 1\n    if vowels_idx > vowels.length\
    \ \n        vowels_idx = 0\n    return vowels[vowels_idx]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp39uy8hc3.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp39uy8hc3.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = count(vowels)\n    vowels_count = vowels_count\
    \ - 2\n    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n  \
    \  vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n  \
    \  vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count \nusing Test\n\n\
    @testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwrop971d.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrop971d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = findlastindex(word, vowels)\n    if vowels_index\
    \ == -1 \n        error(\"No vowel found\")\n    \n    vowels_index_2 = findlastindex(word[vowels_index+1:],\
    \ vowels)\n    if vowels_index_2 == -1\n        error(\"No vowel found\")\n  \
    \  \n    vowels_index_3 = findlastindex(word[vowels_index_2+1:], vowels)\n   \
    \ if vowels_index_3 == -1\n        error(\"No vowel found\")\n    \n    if vowels_index_3\
    \ > vowels_index_2\n        vowels_index_3 = vowels_index_3 - 1\n    \n    if\
    \ vowels_index_3 > vowels_index\n        vowels_index_3 = vowels_index_3 - 1\n\
    \    \n    if vowels_index_3 > vowels_index_2\n        vowels_index_3 = vowels_index_3\
    \ - 1\n    \n    if vowels_index_3 > vowels_index\n        vowels_index_3 = vowels_index_3\
    \ - 1\n    \n    if vowels_index_3 > vowels_index_2\n        vowels_index_3 =\
    \ vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index\n        vowels_index_3\
    \ = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index_2\n       \
    \ vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index_2\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index_2\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index_2\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index_2\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index\n\
    \        vowels_index_3 = vowels_index_3 - 1\n    \n    if vowels_index_3 > vowels_index_2\n\
    \        vowels_index_3 = vowels_index_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(vowels_index + 1):\"\
    \ range expression \nStacktrace:\n [1] top-level scope at /tmp/tmplg4mexve.jl:22\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplg4mexve.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains)\n    vowels_idx = vowels_idx + 1 if vowels_idx\
    \ < vowels.length - 1 else 0\n    vowels_idx = vowels_idx - 1 if vowels_idx >\
    \ 0 else vowels_idx - vowels.length\n    return word[vowels_idx]\nend\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"\
    FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"\
    ab\") ==> \"\"\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels found in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp1pcj8bif.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1pcj8bif.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_idx = word.rfind(vowels)\n    if vowels_idx == -1:\n\
    \        return \"\"\n    \n    vowels_idx = vowels_idx - vowels_len\n    vowels_idx\
    \ = vowels_idx % vowels_len\n    \n    vowels_idx = vowels_idx + vowels_len\n\
    \    \n    vowel = vowels[vowels_idx]\n    return vowel\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0xluz15o.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xluz15o.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowel_start = word[vowels_len]\n    vowel_end = word[vowels_len-1]\n\
    \    \n    vowel_start_index = vowels.index(vowel_start)\n    vowel_end_index\
    \ = vowels.index(vowel_end)\n    \n    if vowel_start_index == vowel_end_index:\n\
    \        return \"\"\n    \n    vowel_start_index += 1\n    vowel_end_index -=\
    \ 1\n    \n    vowel_start_index = vowels.index(vowel_start, vowel_start_index)\n\
    \    vowel_end_index = vowels.index(vowel_end, vowel_end_index)\n    \n    if\
    \ vowel_start_index == vowel_end_index:\n        return \"\"\n    \n    vowel_start_index\
    \ += 1\n    vowel_end_index -= 1\n    \n    vowel_start_index = vowels.index(vowel_start,\
    \ vowel_start_index)\n    vowel_end_index = vowels.index(vowel_end, vowel_end_index)\n\
    \    \n    if vowel_start_index == vowel_end_index:\n        return \"\"\n   \
    \ \n    vowel_start_index += 1\n    vowel_end_index -= 1\n    \n    vowel_start_index\
    \ = vowels.index(vowel_start, vowel_start_index)\n    vowel_end_index = vowels.index(vowel_end,\
    \ vowel_end_index)\n    \n    if vowel_start_index == vowel_end_index:\n     \
    \   return \"\"\n    \n    vowel_start_index += 1\n    vowel_end_index -= 1\n\
    \    \n    vowel_start_index = vowels.index(vowel_start, vowel_start_index)\n\
    \    vowel_end_index = vowels.index(vowel_end, vowel_end_index)\n    \n    if\
    \ vowel_start_index == vowel_end_index:\n        return \"\"\n    \n    vowel_start_index\
    \ += 1\n    vowel_end_index -= 1\n    \n    vowel_start_index = vowels.index(vowel_start,\
    \ vowel_start_index)\n    vowel_end_index = vowels.index(vowel_end, vowel_end_index)\n\
    \    \n    if vowel_start_index == vowel_end_index:\n        return \"\"\n   \
    \ \n    vowel_start_index += 1\n    vowel_end_index -= 1\n    \n    vowel_start_index\
    \ = vowels.index(vowel_start, vowel_start_index)\n    vowel_end_index = vowels.index(vowel_end,\
    \ vowel_end_index)\n    \n    if vowel_start_index == vowel_end_index:\n     \
    \   return \"\"\n    \n    vowel_start_index += 1\n    vowel_end_index -= 1\n\
    \    \n    vowel_start_index = vowels.index(vowel_start, vowel_start_index)\n\
    \    vowel_end_index = vowels.index(vowel_end, vowel_end_index)\nusing Test\n\n\
    @testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq6jd_ew2.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq6jd_ew2.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        return \"\"\n    \n\
    \    vowels_count = count(vowels, word[end])\n    if vowels_count > 1\n      \
    \  return \"\"\n    \n    vowels_count = count(vowels, word[end - 1])\n    if\
    \ vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[end - 2])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[end - 3])\n    if vowels_count > 1\n        return \"\"\
    \n    \n    vowels_count = count(vowels, word[end - 4])\n    if vowels_count >\
    \ 1\n        return \"\"\n    \n    vowels_count = count(vowels, word[end - 5])\n\
    \    if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[end - 6])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[end - 7])\n    if vowels_count > 1\n        return \"\"\
    \n    \n    vowels_count = count(vowels, word[end - 8])\n    if vowels_count >\
    \ 1\n        return \"\"\n    \n    vowels_count = count(vowels, word[end - 9])\n\
    \    if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[end - 10])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[end - 11])\n    if vowels_count > 1\n        return \"\"\
    \n    \n    vowels_count = count(vowels, word[end - 12])\n    if vowels_count\
    \ > 1\n        return \"\"\n    \n    vowels_count = count(vowels, word[end -\
    \ 13])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count =\
    \ count(vowels, word[end - 14])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[end - 15])\n    if vowels_count >\
    \ 1\n        return \"\"\n    \n    vowels_count = count(vowels, word[end - 16])\n\
    \    if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[end - 17])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[end - 18])\n    if vowels_count > 1\n        return \"\"\
    \n    \n    vowels_count = count(vowels, word[end - 19])\n    if vowel\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpco2e4bmk.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpco2e4bmk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx < 0 \n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n\
    \    \n    if vowels_idx < 0 \n        vowels_idx = vowels.lenght - 1\n    \n\
    \    if vowels_idx >= vowels.lenght \n        vowels_idx = 0\n    \n    return\
    \ vowels[vowels_idx]\nend\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp00ka3uu2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp00ka3uu2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = word.find_first_of(\"aeiouAEIOU\")\n    if vowels_idx == -1 \n        return\
    \ \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\")\n    if vowels_idx\
    \ == -1 \n        return \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\"\
    , vowels_idx + 1)\n    if vowels_idx == -1 \n        return \"\"\n    vowels_idx\
    \ = word.find_last_of(\"aeiouAEIOU\", vowels_idx - 1)\n    if vowels_idx == -1\
    \ \n        return \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\", vowels_idx\
    \ + 1)\n    if vowels_idx == -1 \n        return \"\"\n    vowels_idx = word.find_last_of(\"\
    aeiouAEIOU\", vowels_idx - 1)\n    if vowels_idx == -1 \n        return \"\"\n\
    \    vowels_idx = word.find_last_of(\"aeiouAEIOU\", vowels_idx + 1)\n    if vowels_idx\
    \ == -1 \n        return \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\"\
    , vowels_idx - 1)\n    if vowels_idx == -1 \n        return \"\"\n    vowels_idx\
    \ = word.find_last_of(\"aeiouAEIOU\", vowels_idx + 1)\n    if vowels_idx == -1\
    \ \n        return \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\", vowels_idx\
    \ - 1)\n    if vowels_idx == -1 \n        return \"\"\n    vowels_idx = word.find_last_of(\"\
    aeiouAEIOU\", vowels_idx + 1)\n    if vowels_idx == -1 \n        return \"\"\n\
    \    vowels_idx = word.find_last_of(\"aeiouAEIOU\", vowels_idx - 1)\n    if vowels_idx\
    \ == -1 \n        return \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\"\
    , vowels_idx + 1)\n    if vowels_idx == -1 \n        return \"\"\n    vowels_idx\
    \ = word.find_last_of(\"aeiouAEIOU\", vowels_idx - 1)\n    if vowels_idx == -1\
    \ \n        return \"\"\n    vowels_idx = word.find_last_of(\"aeiouAEIOU\", vowels_idx\
    \ + 1)\n    if vowels_idx == -1 \n        return \"\"\n    vowels_idx = word.find_last_of(\"\
    aeiouAEIOU\", vowels_idx - 1)\n    if vowels_idx == -1 \n        return \"\"\n\
    \    vowels_idx = word.find_last_of(\"aeiouAEIOU\", vowels_idx + 1)\n    if vowels_idx\
    \ == -1 \n        return \"\"\n\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi21sq23j.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi21sq23j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|x| word.ends_with?(x)}\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n\
    \    \n    if vowels[vowels_idx] == word[vowels_idx]\n        return word[vowels_idx]\n\
    \    else\n        return \"\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise\
    \ 2\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppu6k_rqq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppu6k_rqq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1 \n      \
    \  return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0 \n        vowels_idx = vowels.length\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.length \n        vowels_idx = 0\n    \n\
    \    return vowels[vowels_idx]\nend\n</cell>\n<code language=julia-1.4>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nPart 2:\
    \ String Manipulation\nStrings are immutable data structures in Julia. Hence,\
    \ any operation that changes the string will create a new string and leave the\
    \ original untouched.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplrx0l7x8.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplrx0l7x8.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = findfirst(vowels, word)\n    if vowels_index == -1\n        return \"\"\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = findfirst(vowels, word,\
    \ vowels_index)\n    if vowels_index == -1\n        return \"\"\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n    if vowels_index\
    \ == -1\n        return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = findfirst(vowels, word, vowels_index)\n    if vowels_index == -1\n       \
    \ return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index = findfirst(vowels,\
    \ word, vowels_index)\n    if vowels_index == -1\n        return \"\"\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n    if vowels_index\
    \ == -1\n        return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = findfirst(vowels, word, vowels_index)\n    if vowels_index == -1\n       \
    \ return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index = findfirst(vowels,\
    \ word, vowels_index)\n    if vowels_index == -1\n        return \"\"\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n    if vowels_index\
    \ == -1\n        return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = findfirst(vowels, word, vowels_index)\n    if vowels_index == -1\n       \
    \ return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index = findfirst(vowels,\
    \ word, vowels_index)\n    if vowels_index == -1\n        return \"\"\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = findfirst(vowels, word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = findfirst(vowels, word, \nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_phr_o_r.jl:80\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_phr_o_r.jl:80\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains)\n    if vowels_index == -1 \n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.size - 1 \n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuio5w1p5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuio5w1p5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = find(vowels, word) \n    if vowels_index == -1 \n        return \"\"\n   \
    \ \n    vowels_index = vowels_index + 1\n    \n    vowels_index_2 = find(vowels,\
    \ word, vowels_index)\n    if vowels_index_2 == -1 \n        return \"\"\n   \
    \ \n    vowels_index_2 = vowels_index_2 + 1\n    \n    if vowels_index_2 < vowels_index\
    \ \n        return \"\"\n    \n    vowels_index_3 = find(vowels, word, vowels_index_2)\n\
    \    if vowels_index_3 == -1 \n        return \"\"\n    \n    vowels_index_3 =\
    \ vowels_index_3 + 1\n    \n    if vowels_index_3 < vowels_index_2 \n        return\
    \ \"\"\n    \n    vowels_index_4 = find(vowels, word, vowels_index_3)\n    if\
    \ vowels_index_4 == -1 \n        return \"\"\n    \n    vowels_index_4 = vowels_index_4\
    \ + 1\n    \n    if vowels_index_4 < vowels_index_3 \n        return \"\"\n  \
    \  \n    vowels_index_5 = find(vowels, word, vowels_index_4)\n    if vowels_index_5\
    \ == -1 \n        return \"\"\n    \n    vowels_index_5 = vowels_index_5 + 1\n\
    \    \n    if vowels_index_5 < vowels_index_4 \n        return \"\"\n    \n  \
    \  vowels_index_6 = find(vowels, word, vowels_index_5)\n    if vowels_index_6\
    \ == -1 \n        return \"\"\n    \n    vowels_index_6 = vowels_index_6 + 1\n\
    \    \n    if vowels_index_6 < vowels_index_5 \n        return \"\"\n    \n  \
    \  vowels_index_7 = find(vowels, word, vowels_index_6)\n    if vowels_index_7\
    \ == -1 \n        return \"\"\n    \n    vowels_index_7 = vowels_index_7 + 1\n\
    \    \n    if vowels_index_7 < vowels_index_6 \n        return \"\"\n    \n  \
    \  vowels_index_8 = find(vowels, word, vowels_index_7)\n    if vowels_index_8\
    \ == -1 \n        return \"\"\n    \n    vowels_index_8 = vowels_index_8 + 1\n\
    \    \n    if vowels_index_8 < vowels_index_7 \n        return \"\"\n    \n  \
    \  vowels_index_9 = find(vowels, word, vowels_index_8)\n    if vowels_index_9\
    \ == -1 \n        return \"\"\n    \n    vowels_index_9 = vowels_index_9 + 1\n\
    \    \n    if vowels_index_9 < vowels_index_8 \n        return \"\"\n    \n  \
    \  vowels_index_10 = find(vowels, word, vowels_index_9)\n    if vowels_index_10\
    \ == -1 \n        return \"\"\n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp78993zp_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp78993zp_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzpiz3nc0.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzpiz3nc0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzpiz3nc0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_index = 0\n    vowels_index_count\
    \ = 0\n    vowels_index_count_2 = 0\n    vowels_index_count_3 = 0\n    vowels_index_count_4\
    \ = 0\n    vowels_index_count_5 = 0\n    vowels_index_count_6 = 0\n    vowels_index_count_7\
    \ = 0\n    vowels_index_count_8 = 0\n    vowels_index_count_9 = 0\n    vowels_index_count_10\
    \ = 0\n    vowels_index_count_11 = 0\n    vowels_index_count_12 = 0\n    vowels_index_count_13\
    \ = 0\n    vowels_index_count_14 = 0\n    vowels_index_count_15 = 0\n    vowels_index_count_16\
    \ = 0\n    vowels_index_count_17 = 0\n    vowels_index_count_18 = 0\n    vowels_index_count_19\
    \ = 0\n    vowels_index_count_20 = 0\n    vowels_index_count_21 = 0\n    vowels_index_count_22\
    \ = 0\n    vowels_index_count_23 = 0\n    vowels_index_count_24 = 0\n    vowels_index_count_25\
    \ = 0\n    vowels_index_count_26 = 0\n    vowels_index_count_27 = 0\n    vowels_index_count_28\
    \ = 0\n    vowels_index_count_29 = 0\n    vowels_index_count_30 = 0\n    vowels_index_count_31\
    \ = 0\n    vowels_index_count_32 = 0\n    vowels_index_count_33 = 0\n    vowels_index_count_34\
    \ = 0\n    vowels_index_count_35 = 0\n    vowels_index_count_36 = 0\n    vowels_index_count_37\
    \ = 0\n    vowels_index_count_38 = 0\n    vowels_index_count_39 = 0\n    vowels_index_count_40\
    \ = 0\n    vowels_index_count_41 = 0\n    vowels_index_count_42 = 0\n    vowels_index_count_43\
    \ = 0\n    vowels_index_count_44 = 0\n    vowels_index_count_45 = 0\n    vowels_index_count_46\
    \ = 0\n    vowels_index_count_47 = 0\n    vowels_index_count_48 = 0\n    vowels_index_count_49\
    \ = 0\n    vowels_index_count_50 = 0\n    vowels_index_count_51 = 0\n    vowels_index_count_52\
    \ = 0\n    vowels_index_count_53 = 0\n    vowels_index_count_54 = 0\n    vowels_index_count_55\
    \ = 0\n    vowels_index_count_56 = 0\n    vowels_index_count_57 = 0\n    vowels_index_count_58\
    \ = 0\n    vowels_index_count_59 = 0\n    vowels_index_count_60 = 0\n    vowels_index_count_61\
    \ = 0\n    vowel\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxcf_ut6t.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxcf_ut6t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxcf_ut6t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = count(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0\
    \ else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0\
    \ else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowel\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmpg4gyl4.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmpg4gyl4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowel_start = word.rfind(vowels)\n    vowel_end = word.rfind(vowels,\
    \ 0, vowel_start-1)\n    \n    if vowel_start == -1 or vowel_end == -1:\n    \
    \    return \"\"\n    \n    vowel_len = vowel_end - vowel_start + 1\n    \n  \
    \  if vowel_len == 1:\n        return word[vowel_start]\n    elif vowel_len ==\
    \ 2:\n        return word[vowel_start-1:vowel_start+1]\n    elif vowel_len ==\
    \ 3:\n        return word[vowel_start-1:vowel_start+2]\n    elif vowel_len ==\
    \ 4:\n        return word[vowel_start-1:vowel_start+3]\n    elif vowel_len ==\
    \ 5:\n        return word[vowel_start-1:vowel_start+4]\n    elif vowel_len ==\
    \ 6:\n        return word[vowel_start-1:vowel_start+5]\n    elif vowel_len ==\
    \ 7:\n        return word[vowel_start-1:vowel_start+6]\n    elif vowel_len ==\
    \ 8:\n        return word[vowel_start-1:vowel_start+7]\n    elif vowel_len ==\
    \ 9:\n        return word[vowel_start-1:vowel_start+8]\n    elif vowel_len ==\
    \ 10:\n        return word[vowel_start-1:vowel_start+9]\n    elif vowel_len ==\
    \ 11:\n        return word[vowel_start-1:vowel_start+10]\n    elif vowel_len ==\
    \ 12:\n        return word[vowel_start-1:vowel_start+11]\n    elif vowel_len ==\
    \ 13:\n        return word[vowel_start-1:vowel_start+12]\n    elif vowel_len ==\
    \ 14:\n        return word[vowel_start-1:vowel_start+13]\n    elif vowel_len ==\
    \ 15:\n        return word[vowel_start-1:vowel_start+14]\n    elif vowel_len ==\
    \ 16:\n        return word[vowel_start-1:vowel_start+15]\n    elif vowel_len ==\
    \ 17:\n        return word[vowel_start-1:vowel_start+16]\n    elif vowel_len ==\
    \ 18:\n        return word[vowel_start-1:vowel_start+17]\n    elif vowel_len ==\
    \ 19:\n        return word[vowel_start-1:vowel_start+18]\n    elif vowel_len ==\
    \ 20:\n        return word[vowel_start-1:vowel_start+19]\n    elif vowel_len ==\
    \ 21:\n        return word[vowel_start-1:vowel_start+20]\n    elif vowel_len ==\
    \ 22:\n        return word[vowel_start-1:vowel_start+21]\n    elif vowel_len ==\
    \ 23:\n        return word[vowel_start-1:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowel_end\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaoacokkv.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpaoacokkv.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = 0\n    vowels_index_end = vowels_len - 1\n\
    \    vowels_index_start = vowels_len - 1\n    vowels_index_middle = vowels_len\
    \ - 1\n    \n    for char in word:\n        if char in vowels:\n            vowels_index\
    \ = vowels_index + 1\n            if vowels_index == vowels_len:\n           \
    \     vowels_index = vowels_index_start\n        elif char in \"AEIOU\":\n   \
    \         vowels_index_end = vowels_index_end - 1\n            if vowels_index_end\
    \ < 0:\n                vowels_index_end = vowels_index_start\n        elif char\
    \ in \"AEIOU\":\n            vowels_index_start = vowels_index_start - 1\n   \
    \         if vowels_index_start < 0:\n                vowels_index_start = vowels_index_end\n\
    \        elif char in \"AEIOU\":\n            vowels_index_middle = vowels_index_middle\
    \ - 1\n            if vowels_index_middle < 0:\n                vowels_index_middle\
    \ = vowels_index_end\n    \n    if vowels_index == vowels_len:\n        return\
    \ \"\"\n    elif vowels_index == 0:\n        return word[vowels_index_middle]\n\
    \    elif vowels_index == vowels_len - 1:\n        return word[vowels_index_end]\n\
    \    else:\n        return word[vowels_index_middle]\nend\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzzusso_h.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzzusso_h.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1\n       \
    \ return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0\n        vowels_idx = vowels.size - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = 0\n   \
    \ \n    return vowels[vowels_idx]\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in it.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp78cgrz0g.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp78cgrz0g.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 2\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count \n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm80rou8n.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm80rou8n.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_start = 0\n    vowels_count_end\
    \ = 0\n    vowels_count_start_end = 0\n    vowels_count_start_end_count = 0\n\
    \    vowels_count_start_end_count_start = 0\n    vowels_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end = 0\n    vowels_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start = 0\n    vowels_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end = 0\n    vowels_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_end =\
    \ 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6mza7vwz.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6mza7vwz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6mza7vwz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    \n    for char in word:\n        if\
    \ char in vowels:\n            vowels_count += 1\n            if vowels_count\
    \ > vowels_count_left:\n                vowels_count_left = vowels_count\n   \
    \         if vowels_count > vowels_count_right:\n                vowels_count_right\
    \ = vowels_count\n            if vowels_count > vowels_count_left_right:\n   \
    \             vowels_count_left_right = vowels_count\n    \n    if vowels_count\
    \ > vowels_count_left:\n        return word[vowels_count_left]\n    elif vowels_count\
    \ > vowels_count_right:\n        return word[vowels_count_right]\n    elif vowels_count\
    \ > vowels_count_left_right:\n        return word[vowels_count_left_right]\n \
    \   else:\n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of vowels present\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp74pm9jzg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp74pm9jzg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx > -1 && vowels_idx\
    \ < vowels.length - 1 \n        && vowels[vowels_idx + 1] == word[vowels_idx +\
    \ 1]\n        && vowels[vowels_idx - 1] == word[vowels_idx - 1]\n        && vowels[vowels_idx\
    \ + 2] == word[vowels_idx + 2]\n        && vowels[vowels_idx - 2] == word[vowels_idx\
    \ - 2]\n        && vowels[vowels_idx + 3] == word[vowels_idx + 3]\n        &&\
    \ vowels[vowels_idx - 3] == word[vowels_idx - 3]\n        && vowels[vowels_idx\
    \ + 4] == word[vowels_idx + 4]\n        && vowels[vowels_idx - 4] == word[vowels_idx\
    \ - 4]\n        && vowels[vowels_idx + 5] == word[vowels_idx + 5]\n        &&\
    \ vowels[vowels_idx - 5] == word[vowels_idx - 5]\n        && vowels[vowels_idx\
    \ + 6] == word[vowels_idx + 6]\n        && vowels[vowels_idx - 6] == word[vowels_idx\
    \ - 6]\n        && vowels[vowels_idx + 7] == word[vowels_idx + 7]\n        &&\
    \ vowels[vowels_idx - 7] == word[vowels_idx - 7]\n        && vowels[vowels_idx\
    \ + 8] == word[vowels_idx + 8]\n        && vowels[vowels_idx - 8] == word[vowels_idx\
    \ - 8]\n        && vowels[vowels_idx + 9] == word[vowels_idx + 9]\n        &&\
    \ vowels[vowels_idx - 9] == word[vowels_idx - 9]\n        && vowels[vowels_idx\
    \ + 10] == word[vowels_idx + 10]\n        && vowels[vowels_idx - 10] == word[vowels_idx\
    \ - 10]\n        && vowels[vowels_idx + 11] == word[vowels_idx + 11]\n       \
    \ && vowels[vowels_idx - 11] == word[vowels_idx - 11]\n        && vowels[vowels_idx\
    \ + 12] == word[vowels_idx + 12]\n        && vowels[vowels_idx - 12] == word[vowels_idx\
    \ - 12]\n        && vowels[vowels_idx + 13] == word[vowels_idx + 13]\n       \
    \ && vowels[vowels_idx - 13] == word[vowels_idx - 13]\n        && vowels[vowels_idx\
    \ + 14] == word[vowels_idx + 14]\n        && vowels[vowels_idx - 14] == word[vowels_idx\
    \ - 14]\n        && vowels[vowels_idx + 15] == word[vowels_idx + 15]\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70vaevt5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70vaevt5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = []\n    \n    for char in word:\n        if\
    \ char in vowels:\n            vowels_index.append(vowels.index(char))\n    \n\
    \    vowels_index.sort()\n    \n    if vowels_index[0] < vowels_index[1]:\n  \
    \      return vowels[vowels_index[0]]\n    else:\n        return \"\"\nend\n</cell>\n\
    <code language=julia-1.4>\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"\
    FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"\
    ab\") ==> \"\"\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels found in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzdqqvrt1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzdqqvrt1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = find(vowels, word[end])\n    if vowels_index == -1 || vowels_index == length(word)\n\
    \        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = find(vowels, word[end - 1])\n    if vowels_index == -1 || vowels_index ==\
    \ length(word)\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n\
    \    vowels_index = find(vowels, word[end - 2])\n    if vowels_index == -1 ||\
    \ vowels_index == length(word)\n        return \"\"\n    \n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = find(vowels, word[end - 3])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 4])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 5])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 6])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 7])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 8])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 9])\n    if vowels_index\
    \ == -1 || vowels_index == length(word)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = find(vowels, word[end - 10])\n    if\
    \ vowels_index == -1 || vowels_index == length(word)\n        return \"\"\n  \
    \  \n    vowels_index = vowels_index + 1\n    vowels_index = find(vowels, word[end\
    \ - 11])\n    if vowels_index == -1 || vowels_index == length(word)\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = find(vowels,\
    \ word[end - 12])\n    if vowels_index == -1 \nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8bzabr6p.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8bzabr6p.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpyaq7xzuj.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpyaq7xzuj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpyaq7xzuj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        vowels_count = vowels_count\
    \ - 1\n        vowels_index = find(vowels, word)\n        vowels_index = vowels_index\
    \ + 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n        vowels_index = vowels_index\
    \ - 1\n        vowels_index = vowels_index - 1\n\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpap65jfwa.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpap65jfwa.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_total\
    \ = 0\n    vowels_count_total = 0\n    vowels_count_total = 0\n    vowels_count_\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp69uxv9bf.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp69uxv9bf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp69uxv9bf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = find(vowels, word) \n    if vowels_idx < length(word) - 1 \n        vowels_idx\
    \ = vowels_idx + 1\n        vowels_idx = find(vowels, word, vowels_idx)\n    \
    \    if vowels_idx < length(word) - 1 \n            return word[vowels_idx]\n\
    \        end\n    end\n    return \"\"\nend\n</cell>\n<code language=julia-1.0>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of vowels present in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ilkpbi9.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ilkpbi9.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_counter\
    \ = 0\n    vowel_position = -1\n    \n    for char in word\n        if char in\
    \ vowels\n            vowel_counter += 1\n            if vowel_counter == 1\n\
    \                vowel_position = word.index(char)\n            end\n        end\n\
    \    end\n    \n    if vowel_position == -1\n        return \"\"\n    end\n  \
    \  \n    vowel_position -= 1\n    \n    if vowel_position < 0\n        vowel_position\
    \ += length(word)\n    end\n    \n    vowel_position -= 1\n    \n    if vowel_position\
    \ < 0\n        vowel_position += length(word)\n    end\n    \n    vowel_position\
    \ -= 1\n    \n    if vowel_position < 0\n        vowel_position += length(word)\n\
    \    end\n    \n    vowel_position -= 1\n    \n    if vowel_position < 0\n   \
    \     vowel_position += length(word)\n    end\n    \n    vowel_position -= 1\n\
    \    \n    if vowel_position < 0\n        vowel_position += length(word)\n   \
    \ end\n    \n    vowel_position -= 1\n    \n    if vowel_position < 0\n      \
    \  vowel_position += length(word)\n    end\n    \n    vowel_position -= 1\n  \
    \  \n    if vowel_position < 0\n        vowel_position += length(word)\n    end\n\
    \    \n    vowel_position -= 1\n    \n    if vowel_position < 0\n        vowel_position\
    \ += length(word)\n    end\n    \n    vowel_position -= 1\n    \n    if vowel_position\
    \ < 0\n        vowel_position += length(word)\n    end\n    \n    vowel_position\
    \ -= 1\n    \n    if vowel_position < 0\n        vowel_position += length(word)\n\
    \    end\n    \n    vowel_position -= 1\n    \n    if vowel_position < 0\n   \
    \     vowel_position += length(word)\n    end\n    \n    vowel_position -= 1\n\
    \    \n    if vowel_position < 0\n        vowel_position += length(word)\n   \
    \ end\n    \n    vowel_position -= 1\n    \n    if vowel_position < 0\n      \
    \  vowel_position += length(word)\n    end\n    \n    vowel_position -= 1\n  \
    \  \n    if vowel_position < 0\n        vowel_position += length(word)\n    end\n\
    \    \n    vowel_position -= 1\n    \n    if vowel_position < 0\n        vowel_position\
    \ += length(word)\n    end\n    \n    vowel_position -= 1\n    \n    if vowel_position\
    \ < 0\n        vowel_position += length(word)\n    end\n    \n    vowel_position\
    \ -= 1\n\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe0a6z2q3.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe0a6z2q3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe0a6z2q3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.find{|x| word.ends_with?(x)}\n    vowels_index = if vowels_index ==\
    \ -1 then 0 else vowels_index\n    vowels_index = if vowels_index == -1 then 0\
    \ else vowels_index + 1\n    vowels_index = if vowels_index == -1 then 0 else\
    \ vowels_index\n    vowels_index = if vowels_index == -1 then 0 else vowels_index\
    \ + 1\n    vowels_index = if vowels_index == -1 then 0 else vowels_index + 1\n\
    \    vowels_index = if vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index\
    \ = if vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index = if\
    \ vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index = if vowels_index\
    \ == -1 then 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1\
    \ then 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1 then\
    \ 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1 then 0 else\
    \ vowels_index + 1\n    vowels_index = if vowels_index == -1 then 0 else vowels_index\
    \ + 1\n    vowels_index = if vowels_index == -1 then 0 else vowels_index + 1\n\
    \    vowels_index = if vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index\
    \ = if vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index = if\
    \ vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index = if vowels_index\
    \ == -1 then 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1\
    \ then 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1 then\
    \ 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1 then 0 else\
    \ vowels_index + 1\n    vowels_index = if vowels_index == -1 then 0 else vowels_index\
    \ + 1\n    vowels_index = if vowels_index == -1 then 0 else vowels_index + 1\n\
    \    vowels_index = if vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index\
    \ = if vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index = if\
    \ vowels_index == -1 then 0 else vowels_index + 1\n    vowels_index = if vowels_index\
    \ == -1 then 0 else vowels_index + 1\n    vowels_index = if vowels_index == -1\
    \ then 0 else vowels_index + 1\n    vowels_index = if vowels_index == \nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphh_m4w2y.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphh_m4w2y.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 2\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    \n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    \n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    \n    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    \n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    \n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    \n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    \n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    \n    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    \n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    \n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    \n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    \n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    \n    vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwd0180cy.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpwd0180cy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels)\
    \ else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count +\
    \ 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels)\
    \ else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count +\
    \ 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count \nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpah_uvfyq.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpah_uvfyq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= 4\n    \n    if vowels_count == 0:\n        return \"\
    \"\n    elif vowels_count == 1:\n        return vowels[vowels_count]\n    elif\
    \ vowels_count == 2:\n        return vowels[vowels_count-1]\n    elif vowels_count\
    \ == 3:\n        return vowels[vowels_count-2]\n    else:\n        return \"\"\
    \nend\n</cell>\n<code language=julia-1.0>\nget_closest_vowel(\"yogurt\")\n</cell>\n\
    <code language=julia-1.0>\nget_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.0>\n\
    get_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.0>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsqv2ahe3.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsqv2ahe3.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowel_counter = 0\n    vowel_counter = vowels.count(word[vowel_counter])\n\
    \    if vowel_counter == 0 \n        vowel_counter = vowels.count(word[vowel_counter])\n\
    \    ending_vowel_counter = 0\n    ending_vowel_counter = vowels.count(word[ending_vowel_counter])\n\
    \    if ending_vowel_counter == 0 \n        ending_vowel_counter = vowels.count(word[ending_vowel_counter])\n\
    \    \n    if vowel_counter > ending_vowel_counter\n        closest_vowel = word[vowel_counter]\n\
    \    else\n        closest_vowel = word[ending_vowel_counter]\n    end\n    return\
    \ closest_vowel\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6_3rzvrw.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6_3rzvrw.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_index == -1 \n      \
    \  then return \"\"\n    else \n        vowels_index += end\n        vowels_index\
    \ %= vowels.length\n        return vowels[vowels_index]\nend\n</cell>\n<code language=julia-1.4>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp62vdb5zj.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp62vdb5zj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n\
    \    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n\
    \    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n\
    \    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n\
    \    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n\
    \    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n\
    \    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + vowels_count\n    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n\
    \    vowels_count -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n\
    \    vowels_count %= vowels_count + vowels_count\n    vowels_count -= 1\n    vowels_\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuighu7je.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuighu7je.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuighu7je.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    if vowels_count < 2:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_index = vowels.index(\"\
    u\")\n    vowels_index += vowels.index(\"o\")\n    vowels_index += vowels.index(\"\
    e\")\n    vowels_index += vowels.index(\"a\")\n    \n    vowels_index = vowels_index\
    \ - vowels_count if vowels_index > 0 else 0\n    \n    vowels_index = vowels_index\
    \ if vowels_index < len(vowels) else len(vowels)-1\n    \n    vowel = vowels[vowels_index]\n\
    \    \n    if vowel in word:\n        return vowel\n    \n    return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"u\"\n\
    get_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\n\
    get_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a string and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbsql64t1.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbsql64t1.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    if vowels_len == 0 \n        return \"\"\n    \n  \
    \  vowels_idx = word.rindex(vowels)\n    \n    if vowels_idx == -1 \n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels[vowels_idx]\
    \ == \"a\" \n        return \"a\"\n    \n    if vowels[vowels_idx] == \"e\" \n\
    \        return \"e\"\n    \n    if vowels[vowels_idx] == \"i\" \n        return\
    \ \"i\"\n    \n    if vowels[vowels_idx] == \"o\" \n        return \"o\"\n   \
    \ \n    if vowels[vowels_idx] == \"u\" \n        return \"u\"\n    \n    return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\"\
    )\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of vowels found in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppzb4bmvn.jl:46\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppzb4bmvn.jl:46\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(x => x == word[end])\n    if vowels_idx > -1 && vowels_idx\
    \ < word.length \n        && vowels[vowels_idx+1] == word[end+1]\n        then\
    \ word[end+1]\n        else \"\"\n    end\nend\n</cell>\n<text>\nSolution\nLet's\
    \ see how we implement this in Julia:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid identifier name \"&&\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbrcqz1_i.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbrcqz1_i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu1gu299i.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu1gu299i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains)\n    vowels_idx = vowels_idx + 1\n \
    \   vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowel\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpglc1bmt8.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpglc1bmt8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpglc1bmt8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq51tacyz.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq51tacyz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq51tacyz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        vowels_index = find(vowels,\
    \ word, 1)\n        if vowels_index == length(word)\n            return \"\"\n\
    \        else\n            vowels_index = vowels_index + 1\n            vowels_index\
    \ = find(vowels, word, vowels_index)\n            if vowels_index == length(word)\n\
    \                return \"\"\n            else\n                return word[vowels_index]\n\
    \            end\n        end\n    else\n        return \"\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <text>\nProblem 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in the string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi56yn_rh.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi56yn_rh.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    if vowels[vowels_idx] == word[vowels_idx + 1]\n        return\
    \ word[vowels_idx]\n    else\n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprd21eo4r.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprd21eo4r.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpse4a6c25.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpse4a6c25.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpse4a6c25.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(x => x == word)\n    if vowels_index == -1 \n        return\
    \ \"\"\n    \n    vowels_index_start = vowels_index + 1\n    vowels_index_end\
    \ = vowels_index + 2\n    \n    if vowels_index_start == vowels_index_end\n  \
    \      return \"\"\n    \n    vowels_index_start_2 = vowels_index_start + 1\n\
    \    vowels_index_end_2 = vowels_index_end + 1\n    \n    if vowels_index_start_2\
    \ == vowels_index_end_2\n        return \"\"\n    \n    vowels_index_start_3 =\
    \ vowels_index_start + 2\n    vowels_index_end_3 = vowels_index_end + 2\n    \n\
    \    if vowels_index_start_3 == vowels_index_end_3\n        return \"\"\n    \n\
    \    vowels_index_start_4 = vowels_index_start + 3\n    vowels_index_end_4 = vowels_index_end\
    \ + 3\n    \n    if vowels_index_start_4 == vowels_index_end_4\n        return\
    \ \"\"\n    \n    vowels_index_start_5 = vowels_index_start + 4\n    vowels_index_end_5\
    \ = vowels_index_end + 4\n    \n    if vowels_index_start_5 == vowels_index_end_5\n\
    \        return \"\"\n    \n    vowels_index_start_6 = vowels_index_start + 5\n\
    \    vowels_index_end_6 = vowels_index_end + 5\n    \n    if vowels_index_start_6\
    \ == vowels_index_end_6\n        return \"\"\n    \n    vowels_index_start_7 =\
    \ vowels_index_start + 6\n    vowels_index_end_7 = vowels_index_end + 6\n    \n\
    \    if vowels_index_start_7 == vowels_index_end_7\n        return \"\"\n    \n\
    \    vowels_index_start_8 = vowels_index_start + 7\n    vowels_index_end_8 = vowels_index_end\
    \ + 7\n    \n    if vowels_index_start_8 == vowels_index_end_8\n        return\
    \ \"\"\n    \n    vowels_index_start_9 = vowels_index_start + 8\n    vowels_index_end_9\
    \ = vowels_index_end + 8\n    \n    if vowels_index_start_9 == vowels_index_end_9\n\
    \        return \"\"\n    \n    vowels_index_start_10 = vowels_index_start + 9\n\
    \    vowels_index_end_10 = vowels_index_end + 9\n    \n    if vowels_index_start_10\
    \ == vowels_index_end_10\n        return \"\"\n    \n    vowels_index_start_11\
    \ = vowels_index_start + 10\n    vowels_index_end_11 = vowels_index_end + 10\n\
    \    \n    if vowels_index_start_11 == vowels_index_\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_wbp5rpv.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_wbp5rpv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|v| word =~ /[#{v}]/}\n    if vowels_idx == -1\n        return\
    \ \"\"\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[vowels_idx]}]+/\n        ending_vowel_idx += 1\n    ending_vowel\
    \ = vowels[ending_vowel_idx]\n    vowels_idx = vowels.find{|v| word =~ /[#{v}]/}\n\
    \    if vowels_idx == -1\n        return \"\"\n    vowels_idx = vowels_idx + 1\n\
    \    while vowels[vowels_idx] =~ /[#{vowels[ending_vowel_idx]}]+/\n        vowels_idx\
    \ += 1\n    vowel = vowels[vowels_idx]\n    if vowel =~ /[#{vowel}]/\n       \
    \ return vowel\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[vowels_idx]}]+/\n        ending_vowel_idx += 1\n    ending_vowel\
    \ = vowels[ending_vowel_idx]\n    if ending_vowel =~ /[#{vowel}]/\n        return\
    \ ending_vowel\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[vowels_idx]}]+/\n        ending_vowel_idx += 1\n    ending_vowel\
    \ = vowels[ending_vowel_idx]\n    if ending_vowel =~ /[#{vowel}]/\n        return\
    \ ending_vowel\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[vowels_idx]}]+/\n        ending_vowel_idx += 1\n    ending_vowel\
    \ = vowels[ending_vowel_idx]\n    if ending_vowel =~ /[#{vowel}]/\n        return\
    \ ending_vowel\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[vowels_idx]}]+/\n        ending_vowel_idx += 1\n    ending_vowel\
    \ = vowels[ending_vowel_idx]\n    if ending_vowel =~ /[#{vowel}]/\n        return\
    \ ending_vowel\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[vowels_idx]}]+/\n        ending_vowel_idx += 1\n    ending_vowel\
    \ = vowels[ending_vowel_idx]\n    if ending_vowel =~ /[#{vowel}]/\n        return\
    \ ending_vowel\n    ending_vowel_idx = vowels_idx + 1\n    while vowels[ending_vowel_idx]\
    \ =~ /[#{vowels[\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq97mrp78.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq97mrp78.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0lkvve7g.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0lkvve7g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0lkvve7g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 1\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 1\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 1\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 1\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 1\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 1\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n    vowels_count = vowels_count if\
    \ \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfyihowjt.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpfyihowjt.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1 \n      \
    \  return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0 \n        vowels_idx = vowels.length\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.length \n        vowels_idx = 0\n    \n\
    \    vowel = vowels[vowels_idx]\n    \n    return vowel\nend\n</cell>\n<code language=julia-1.6>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.6>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.6>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.6>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4e61emo.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4e61emo.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    if vowels_len == 0 \n        error(\"vowels length\
    \ is zero\")\n    \n    if word.length == 0 \n        error(\"word length is zero\"\
    )\n    \n    vowels_count = 0\n    \n    for i in word\n        if vowels.contains(i)\n\
    \            vowels_count += 1\n    \n    if vowels_count == 0\n        error(\"\
    word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count\
    \ < 0\n        error(\"word doesn't contain any vowel\")\n    \n    vowels_count\
    \ -= 1\n    \n    if vowels_count < 0\n        error(\"word doesn't contain any\
    \ vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count < 0\n     \
    \   error(\"word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n \
    \   \n    if vowels_count < 0\n        error(\"word doesn't contain any vowel\"\
    )\n    \n    vowels_count -= 1\n    \n    if vowels_count < 0\n        error(\"\
    word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count\
    \ < 0\n        error(\"word doesn't contain any vowel\")\n    \n    vowels_count\
    \ -= 1\n    \n    if vowels_count < 0\n        error(\"word doesn't contain any\
    \ vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count < 0\n     \
    \   error(\"word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n \
    \   \n    if vowels_count < 0\n        error(\"word doesn't contain any vowel\"\
    )\n    \n    vowels_count -= 1\n    \n    if vowels_count < 0\n        error(\"\
    word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count\
    \ < 0\n        error(\"word doesn't contain any vowel\")\n    \n    vowels_count\
    \ -= 1\n    \n    if vowels_count < 0\n        error(\"word doesn't contain any\
    \ vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count < 0\n     \
    \   error(\"word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n \
    \   \n    if vowels_count < 0\n        error(\"word doesn't contain any vowel\"\
    )\n    \n    vowels_count -= 1\n    \n    if vowels_count < 0\n        error(\"\
    word doesn't contain any vowel\")\n    \n    vowels_count -= 1\n    \n    if vowels_count\
    \ < 0\n        error(\"word doesn't contain any vowel\")\n    \n    vowels_count\
    \ -= 1\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp83rmvv78.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp83rmvv78.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|v| word.endwith?(v)} \n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    vowels_idx = vowels_idx - 1\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppuc8gvwp.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppuc8gvwp.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp325ig8_h.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp325ig8_h.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqo5iqhn6.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqo5iqhn6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqo5iqhn6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n       \
    \ vowels_idx = vowels.lenght - 1\n    \n    vowels_idx = vowels_idx + 1\n    if\
    \ vowels_idx > vowels.lenght - 1\n        vowels_idx = 0\n    \n    return vowels[vowels_idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmim1rf7_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmim1rf7_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count += 2\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowels_count += 2\n    \n    vowels_count\
    \ %= len(vowels)\n    \n    vowels_count += 2\n    \n    vowels_count %= len(vowels)\n\
    \    \n    vowels_count += 2\n    \n    vowels_count %= len(vowels)\n    \n  \
    \  vowels_count += 2\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count\
    \ += 2\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count += 2\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count += 2\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowels_count += 2\n    \n    vowels_count\
    \ %= len(vowels)\n    \n    vowels_count += 2\n    \n    vowels_count %= len(vowels)\n\
    \    \n    vowels_count += 2\n    \n    vowels_count %= len(vowels)\n    \n  \
    \  vowels_count += 2\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count\
    \ += 2\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count += 2\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count += 2\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowels_count += 2\n    \n    vowels_count\
    \ %= len(vowels)\n    \n    vowels_count += 2\n    \n    vowels_count %= len(vowels)\n\
    \    \n    vowels_count += 2\n    \n    vowels_count %= len(vowels)\n    \n  \
    \  vowels_count += 2\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count\
    \ += 2\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count += 2\n \
    \   \n    vowels_count %= len(vowels)\n    \n\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsekf7kzk.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsekf7kzk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsekf7kzk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_total = 0\n    vowels_count_left\
    \ = 0\n    vowels_count_right = 0\n    vowels_count_left_total = 0\n    vowels_count_right_total\
    \ = 0\n    vowels_count_left_left = 0\n    vowels_count_left_right = 0\n    vowels_count_right_left\
    \ = 0\n    vowels_count_right_right = 0\n    \n    for char in word\n        if\
    \ char in vowels\n            vowels_count += 1\n            vowels_count_total\
    \ += 1\n            if vowels_count_total == 1\n                vowels_count_left\
    \ = vowels_count_right\n                vowels_count_left_total = vowels_count_right_total\n\
    \                vowels_count_left_left = vowels_count_right_left\n          \
    \      vowels_count_left_right = vowels_count_right_right\n            else\n\
    \                if vowels_count_left == 0\n                    vowels_count_left\
    \ = vowels_count_right\n                    vowels_count_left_total = vowels_count_right_total\n\
    \                    vowels_count_left_left = vowels_count_right_left\n      \
    \              vowels_count_left_right = vowels_count_right_right\n          \
    \      else\n                    if vowels_count_left_total == 0\n           \
    \             vowels_count_left_total = vowels_count_right_total\n           \
    \             vowels_count_left_left = vowels_count_right_left\n             \
    \           vowels_count_left_right = vowels_count_right_right\n             \
    \       else\n                        if vowels_count_left == vowels_count_left_total\n\
    \                            vowels_count_left_left = vowels_count_right_left\n\
    \                            vowels_count_left_right = vowels_count_right_right\n\
    \                        else\n                            if vowels_count_left\
    \ == vowels_count_left_left\n                                vowels_count_left_right\
    \ = vowels_count_right_left\n                                vowels_count_left_right\
    \ = vowels_count_right_right\n                            else\n             \
    \                   if vowels_count_left == vowels_count_left_right\n        \
    \                            vowels_count_left_right = vowels_count_right_left\n\
    \                                    vowels_count_left_right = vowels_count_right_right\n\
    \                                else\n                                    if\
    \ vowels_count_left == vowels_count_left_right\n                             \
    \           vowels_count_left_right = vowels_count_right_left\n              \
    \                          vowels_count_left_right = vowels_count_right_right\n\
    \                                    else\n                                  \
    \      if vowels_count_left == vowels_count_left_right\n                     \
    \                       vowels_count_left_right = vowels_count_right_left\n  \
    \                                          vowels_count_left_right = vowels_count_right_right\n\
    \                                        else\n                              \
    \              if vowels_count_left == vowels_count_left_right\n             \
    \                                   vowels_count_left_right = vowels_count_right_left\n\
    \                                                vowels_count_left_right = vowels_count_right_right\n\
    \                                            else\n                          \
    \                      if vowels_count_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5c1qvg1.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5c1qvg1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= 4\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    vowels_count -= 1\n    vowels_count %= \nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq2rvivyv.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq2rvivyv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq2rvivyv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = vowels.count(\"aeiou\")\n    vowels_count = vowels_count + vowels.count(\"\
    AEIOU\")\n    vowels_count = vowels_count + vowels.count(\"a\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"A\")\n    vowels_count = vowels_count + vowels.count(\"\
    e\")\n    vowels_count = vowels_count + vowels.count(\"E\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"i\")\n    vowels_count = vowels_count + vowels.count(\"\
    I\")\n    vowels_count = vowels_count + vowels.count(\"o\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"O\")\n    vowels_count = vowels_count + vowels.count(\"\
    u\")\n    vowels_count = vowels_count + vowels.count(\"U\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"y\")\n    vowels_count = vowels_count + vowels.count(\"\
    Y\")\n    vowels_count = vowels_count + vowels.count(\"r\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"R\")\n    vowels_count = vowels_count + vowels.count(\"\
    l\")\n    vowels_count = vowels_count + vowels.count(\"L\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"s\")\n    vowels_count = vowels_count + vowels.count(\"\
    S\")\n    vowels_count = vowels_count + vowels.count(\"c\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"C\")\n    vowels_count = vowels_count + vowels.count(\"\
    p\")\n    vowels_count = vowels_count + vowels.count(\"P\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"f\")\n    vowels_count = vowels_count + vowels.count(\"\
    F\")\n    vowels_count = vowels_count + vowels.count(\"v\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"V\")\n    vowels_count = vowels_count + vowels.count(\"\
    k\")\n    vowels_count = vowels_count + vowels.count(\"K\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"m\")\n    vowels_count = vowels_count + vowels.count(\"\
    M\")\n    vowels_count = vowels_count + vowels.count(\"b\")\n    vowels_count\
    \ = vowels_count + vowels.count(\"B\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo6my0jhp.jl:56\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo6my0jhp.jl:56\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n    vowels_count\
    \ %= len(vowels)\n    \n    vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n\
    \    \n    vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n    \n  \
    \  vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n    vowels_count\
    \ %= len(vowels)\n    \n    vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n\
    \    \n    vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n    \n  \
    \  vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n    vowels_count\
    \ %= len(vowels)\n    \n    vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n\
    \    \n    vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n    \n  \
    \  vowels_count -= 1\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= len(vowels)\n    \n    vowels_count -= 1\n    \n   \
    \ vowels_count %= len(vowels)\n    \n    vowel\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfiuac5mm.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfiuac5mm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfiuac5mm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1\n       \
    \ return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0\n        vowels_idx = vowels.size - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = 0\n   \
    \ \n    return vowels[vowels_idx]\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string as input and returns the number of vowels present in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprcsd0quq.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprcsd0quq.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    \n    for letter\
    \ in word:\n        if letter in vowels:\n            vowels_count += 1\n    \
    \        vowels_index += 1\n            if vowels_index == vowels_len:\n     \
    \           return letter\n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\") ==> \"U\"\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\") ==> \"\"\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\"\
    ) ==> \"\"\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string as\
    \ input and returns the number of vowels \n    in the string. \n    \n    Example:\n\
    \    count_vowels(\"yogurt\") ==> 2\n    count_vowels(\"FULL\") ==> 0\n    count_vowels(\"\
    quick\") ==> 0\n    count_vowels(\"ab\") ==> 0\n    count_vowels(\"a\") ==> 0\n\
    \    count_vowels(\"\") ==> 0\n    count_vowels(\" \") ==> 0\n    count_vowels(\"\
    aa \") ==> 0\n    count_vowels(\"aaa\") ==> 0\n    count_vowels(\"aaaa\") ==>\
    \ 0\n    count_vowels(\"aaaaa\") ==> 0\n    count_vowels(\"aaaaaa\") ==> 0\n \
    \   count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n   \
    \ count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"\
    aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\"\
    ) ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==>\
    \ 0\n    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n\
    \    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n  \
    \  count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"\
    aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\") ==> 0\n    count_vowels(\"aaaaaaa\"\
    ) ==> 0\n    count_vowels(\"aaaaaaa\") ==\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbzjddugv.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbzjddugv.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowel_start = word[vowels_len-2]\n    vowel_end = word[vowels_len-1]\n\
    \    \n    if vowel_start in vowels and vowel_end in vowels:\n        return vowel_start\n\
    \    elif vowel_start in vowels and vowel_end not in vowels:\n        return vowel_end\n\
    \    elif vowel_start not in vowels and vowel_end in vowels:\n        return vowel_end\n\
    \    elif vowel_start not in vowels and vowel_end not in vowels:\n        return\
    \ \"\"\n    else:\n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\n\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowel_end\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxoee6d1g.jl:22\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxoee6d1g.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|v| word.ends_with?(v)} \n    vowels_idx == -1 ? \"\" : vowels[vowels_idx..-1]\n\
    end\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") \n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"FULL\") \n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"quick\") \n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\") \n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the number of vowels found in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojafcbrj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpojafcbrj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = find(vowels, word)\n    if vowels_index == -1\n        return \"\"\n    \n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > length(word) - 2\n        vowels_index = length(word)\
    \ - 2\n    \n    vowels_index = vowels_index + 1\n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp67_45fsg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp67_45fsg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        return \"\"\n    \n\
    \    vowels_count = count(vowels, word[1:end-1])\n    if vowels_count > 1\n  \
    \      return \"\"\n    \n    vowels_count = count(vowels, word[2:end])\n    if\
    \ vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[3:end])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[4:end])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[5:end])\n    if vowels_count > 1\n\
    \        return \"\"\n    \n    vowels_count = count(vowels, word[6:end])\n  \
    \  if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[7:end])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[8:end])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[9:end])\n    if vowels_count > 1\n\
    \        return \"\"\n    \n    vowels_count = count(vowels, word[10:end])\n \
    \   if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[11:end])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[12:end])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[13:end])\n    if vowels_count > 1\n\
    \        return \"\"\n    \n    vowels_count = count(vowels, word[14:end])\n \
    \   if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[15:end])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[16:end])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[17:end])\n    if vowels_count > 1\n\
    \        return \"\"\n    \n    vowels_count = count(vowels, word[18:end])\n \
    \   if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[19:end])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpalswvv8b.jl:98\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpalswvv8b.jl:98\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1\n       \
    \ return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if\
    \ vowels_idx >= length(vowels)\n        return \"\"\n    \n    return vowels[vowels_idx]\n\
    end\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"\
    u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\
    \"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmf5q2f0h.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmf5q2f0h.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count_right = count(vowels,1)\n    vowels_count_left\
    \ = count(vowels,-1)\n    \n    if vowels_count > 0 and vowels_count_right > 0\
    \ and vowels_count_left > 0:\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left - 1\n        \n        vowels_count_right\
    \ = vowels_count_right - 1\n        vowels_count_left = vowels_count_left - 1\n\
    \        \n        vowels_count_right = vowels_count_right - 1\n        vowels_count_left\
    \ = vowels_count_left - 1\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left - 1\n        \n        vowels_count_right\
    \ = vowels_count_right - 1\n        vowels_count_left = vowels_count_left - 1\n\
    \        \n        vowels_count_right = vowels_count_right - 1\n        vowels_count_left\
    \ = vowels_count_left - 1\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left - 1\n        \n        vowels_count_right\
    \ = vowels_count_right - 1\n        vowels_count_left = vowels_count_left - 1\n\
    \        \n        vowels_count_right = vowels_count_right - 1\n        vowels_count_left\
    \ = vowels_count_left - 1\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left - 1\n        \n        vowels_count_right\
    \ = vowels_count_right - 1\n        vowels_count_left = vowels_count_left - 1\n\
    \        \n        vowels_count_right = vowels_count_right - 1\n        vowels_count_left\
    \ = vowels_count_left - 1\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left - 1\n        \n        vowels_count_right\
    \ = vowels_count_right - 1\n        vowels_count_left = vowels_count_left - 1\n\
    \        \n        vowels_count_right = vowels_count_right - 1\n        vowels_count_left\
    \ = vowels_count_left - 1\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left - 1\n        \n        vowels_count_right\
    \ = vowels_count_right - 1\n        vowels_count_left = vowels_count_left - 1\n\
    \        \n        vowels_count_right = vowels_count_right - 1\n        vowels_count_left\
    \ = vowels_count_left - 1\n        \n        vowels_count_right = vowels_count_right\
    \ - 1\n        vowels_count_left = vowels_count_left \nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowels_count_right\" after end\
    \ of expression\nStacktrace:\n [1] top-level scope at /tmp/tmpd8zqiv8o.jl:21\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd8zqiv8o.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count\
    \ %= vowels_count + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count\
    \ + 1\n    vowels_count -= 1\n    vowels_count %= vowels_count + 1\n    vowels_count\
    \ -= 1\n    vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5rlj80hr.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5rlj80hr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5rlj80hr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_pos\
    \ = word.rfindAll(vowels)\n    if vowel_pos == -1\n        return \"\"\n    \n\
    \    vowel_pos = vowel_pos[-1]\n    vowel_pos = vowel_pos - 1\n    \n    vowel_pos_2\
    \ = word.rfindAll(vowels, vowel_pos)\n    if vowel_pos_2 == -1\n        return\
    \ \"\"\n    \n    vowel_pos_2 = vowel_pos_2[-1]\n    vowel_pos_2 = vowel_pos_2\
    \ - 1\n    \n    if vowel_pos > vowel_pos_2\n        return \"\"\n    \n    if\
    \ vowel_pos < vowel_pos_2\n        return \"\"\n    \n    vowel_pos_3 = word.rfindAll(vowels,\
    \ vowel_pos_2)\n    if vowel_pos_3 == -1\n        return \"\"\n    \n    vowel_pos_3\
    \ = vowel_pos_3[-1]\n    vowel_pos_3 = vowel_pos_3 - 1\n    \n    if vowel_pos\
    \ == vowel_pos_2 and vowel_pos == vowel_pos_3\n        return \"\"\n    \n   \
    \ if vowel_pos == vowel_pos_2 and vowel_pos > vowel_pos_3\n        return \"\"\
    \n    \n    if vowel_pos == vowel_pos_2 and vowel_pos < vowel_pos_3\n        return\
    \ \"\"\n    \n    if vowel_pos == vowel_pos_3 and vowel_pos == vowel_pos_2\n \
    \       return \"\"\n    \n    if vowel_pos == vowel_pos_3 and vowel_pos > vowel_pos_2\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_3 and vowel_pos < vowel_pos_2\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_2 and vowel_pos == vowel_pos_3\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_2 and vowel_pos > vowel_pos_3\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_2 and vowel_pos < vowel_pos_3\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_3 and vowel_pos == vowel_pos_2\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_3 and vowel_pos > vowel_pos_2\n\
    \        return \"\"\n    \n    if vowel_pos == vowel_pos_3 and vowel_pos < vowel_pos_2\n\
    \        return \"\"\n    \n    return word[vowel_pos]\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowel_pos\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqo9wpz1g.jl:44\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpqo9wpz1g.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_left = 0\n    vowels_count_left_right = 0\n    vowels_count_right_left\
    \ = 0\n    vowels_count_right_right = 0\n    for letter in word\n        if letter\
    \ in vowels\n            vowels_count += 1\n            if vowels_count > 1\n\
    \                vowels_count_left += 1\n                if vowels_count_left\
    \ > 1\n                    vowels_count_left_left += 1\n                    if\
    \ vowels_count_left_left > 1\n                        vowels_count_left_right\
    \ += 1\n                        if vowels_count_left_right > 1\n             \
    \               vowels_count_right_left += 1\n                            if vowels_count_right_left\
    \ > 1\n                                vowels_count_right_right += 1\n       \
    \                         if vowels_count_right_right > 1\n                  \
    \                  return letter\n                            end\n          \
    \              end\n                    end\n                end\n           \
    \ end\n        end\n    end\n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of vowels\
    \ found in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp75fh3p4g.jl:48\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp75fh3p4g.jl:48\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowel_start = 0\n    vowel_end = vowels_len\n    \n\
    \    vowel_found = False\n    \n    for char in word:\n        if char in vowels:\n\
    \            vowel_start = char\n            vowel_end = char\n            vowel_found\
    \ = True\n            break\n    \n    if vowel_found:\n        vowel_start +=\
    \ 1\n        vowel_end -= 1\n        \n        if vowel_start > vowel_end:\n \
    \           vowel_start = vowel_end\n            vowel_end = vowel_start\n   \
    \         \n        vowel_mid = vowel_start + (vowel_end - vowel_start) / 2\n\
    \        \n        if vowel_mid < vowel_end:\n            return vowels[vowel_mid]\n\
    \        else:\n            return \"\"\n    else:\n        return \"\"\nend\n\
    </cell>\n<code language=julia-1.3>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code\
    \ language=julia-1.3>\nget_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.3>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.3>\nget_closest_vowel(\"\
    ab\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7cn5twpo.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7cn5twpo.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowel_counter = 0\n    vowel_counter = vowels.count(\"a\"\
    )\n    vowel_counter = vowel_counter + vowels.count(\"e\")\n    vowel_counter\
    \ = vowel_counter + vowels.count(\"i\")\n    vowel_counter = vowel_counter + vowels.count(\"\
    o\")\n    vowel_counter = vowel_counter + vowels.count(\"u\")\n    \n    if vowel_counter\
    \ == 4:\n        return \"u\"\n    elif vowel_counter == 3:\n        return \"\
    u\"\n    elif vowel_counter == 2:\n        return \"u\"\n    elif vowel_counter\
    \ == 1:\n        return \"u\"\n    elif vowel_counter == 0:\n        return \"\
    \"\n    else:\n        return \"\"\nend\n</cell>\n<code language=julia-1.1>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp36swro7l.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp36swro7l.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk0n19ps_.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk0n19ps_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk0n19ps_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_index == -1\n       \
    \ return \"\"\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index -\
    \ 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index +\
    \ 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n\
    \    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n  \
    \  vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index -\
    \ 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index +\
    \ 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n\
    \    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n  \
    \  vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    vowels_index = vowels_index + 1\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpttix9nva.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpttix9nva.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_index == -1\n     \
    \   return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    \n    if vowels_index > 0\n        return word[vowels_index]\n\
    \    \n    if vowels_index < len(word)\n        return word[vowels_index]\n  \
    \  \n    return \"\"\nend\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiww4814b.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiww4814b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_start = 0\n    vowels_count_end\
    \ = 0\n    vowels_count_start_end = 0\n    vowels_count_start_end_count = 0\n\
    \    vowels_count_start_end_count_start = 0\n    vowels_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end = 0\n    vowels_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start = 0\n    vowels_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end = 0\n    vowels_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_end =\
    \ 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpenxe7x0l.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpenxe7x0l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpenxe7x0l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpim_bdcmr.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpim_bdcmr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpim_bdcmr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_counter\
    \ = 0\n    vowel_position = 0\n    \n    for letter in word\n        if letter\
    \ in vowels\n            vowel_counter += 1\n            vowel_position = vowel_counter\n\
    \        else\n            break\n    end\n    \n    if vowel_position == 0\n\
    \        return \"\"\n    end\n    \n    vowel_position -= 1\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n    end\n    \n    if vowel_position\
    \ < 0\n        vowel_position += vowel_counter\n\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojftrlen.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpojftrlen.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(w => w == word)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.length\n        return \"\"\n    \n    vowels_index = vowels_index -\
    \ 1\n    \n    if vowels_index < 0\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    \n    if vowels_index > vowels.length\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index <\
    \ 0\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n  \
    \  if vowels_index > vowels.length\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index < 0\n        return \"\"\n   \
    \ \n    vowels_index = vowels_index + 1\n    \n    if vowels_index > vowels.length\n\
    \        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if\
    \ vowels_index < 0\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > vowels.length\n        return \"\"\n    \n\
    \    vowels_index = vowels_index - 1\n    \n    if vowels_index < 0\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ vowels.length\n        return \"\"\n    \n    vowels_index = vowels_index -\
    \ 1\n    \n    if vowels_index < 0\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    \n    if vowels_index > vowels.length\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index <\
    \ 0\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n  \
    \  if vowels_index > vowels.length\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index < 0\n        return \"\"\n   \
    \ \n    vowels_index = vowels_index + 1\n    \n    if vowels_index > vowels.length\n\
    \        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if\
    \ vowels_index < 0\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > vowels.length\n        return \"\"\n    \n\
    \    vowels_index = vowels_index - 1\n    \n    if vowels_index < 0\n        return\
    \ \"\"\n    \n    vowels_index = vowels_\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeunjh8x9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeunjh8x9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa57q0g7b.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa57q0g7b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa57q0g7b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    if vowels_len == 0 \n        return \"No vowels found\"\
    \n    \n    vowels_index = -1\n    \n    for index in (word.length() - 1)::-1\
    \ \n        if vowels[index] == word[index + 1]\n            vowels_index = index\n\
    \            break\n    \n    if vowels_index == -1\n        return \"No vowels\
    \ found\"\n    \n    vowels_index_2 = -1\n    \n    for index in (word.length()\
    \ - 1)::-1 \n        if vowels[index] == word[index + vowels_len]\n          \
    \  vowels_index_2 = index\n            break\n    \n    if vowels_index_2 == -1\n\
    \        return \"No vowels found\"\n    \n    if vowels_index == vowels_index_2\n\
    \        return \"\"\n    \n    vowels_index_3 = -1\n    \n    for index in (word.length()\
    \ - 1)::-1 \n        if vowels[index] == word[index + 2 * vowels_len]\n      \
    \      vowels_index_3 = index\n            break\n    \n    if vowels_index_3\
    \ == -1\n        return \"No vowels found\"\n    \n    if vowels_index == vowels_index_3\n\
    \        return \"\"\n    \n    vowels_index_4 = -1\n    \n    for index in (word.length()\
    \ - 1)::-1 \n        if vowels[index] == word[index + 3 * vowels_len]\n      \
    \      vowels_index_4 = index\n            break\n    \n    if vowels_index_4\
    \ == -1\n        return \"No vowels found\"\n    \n    if vowels_index == vowels_index_4\n\
    \        return \"\"\n    \n    vowels_index_5 = -1\n    \n    for index in (word.length()\
    \ - 1)::-1 \n        if vowels[index] == word[index + 4 * vowels_len]\n      \
    \      vowels_index_5 = index\n            break\n    \n    if vowels_index_5\
    \ == -1\n        return \"No vowels found\"\n    \n    if vowels_index == vowels_index_5\n\
    \        return \"\"\n    \n    vowels_index_6 = -1\n    \n    for index in (word.length()\
    \ - 1)::-1 \n        if vowels[index] == word[index + 5 * vowels_len]\n      \
    \      vowels_index_6 = index\n            break\n    \n    if vowels_index_6\
    \ == -1\n        return \"No vowels found\"\n    \n    if vowels_index == vowels_index_6\n\
    \        return \"\"\n    \n    vowels_index_7 = -1\n    \n    for index in (word.length()\
    \ - 1)::-1 \n        if vowels[index] == word[index + 6 * vowels_len]\n      \
    \      vowels_index_7 = index\n            break\n    \n    if vowels_index_7\
    \ == -1\n        return \"No \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: cannot juxtapose string literal\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0wsm0u7u.jl:111\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0wsm0u7u.jl:111\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    if vowels_count > 0 and\
    \ vowels_count < 4:\n        return \"\"\n    \n    vowels_count = 0\n    vowels_count\
    \ += vowels.count(\"A\")\n    vowels_count += vowels.count(\"E\")\n    vowels_count\
    \ += vowels.count(\"I\")\n    vowels_count += vowels.count(\"O\")\n    vowels_count\
    \ += vowels.count(\"U\")\n    \n    if vowels_count > 0 and vowels_count < 4:\n\
    \        return \"\"\n    \n    vowels_count = 0\n    vowels_count += vowels.count(\"\
    a\")\n    vowels_count += vowels.count(\"e\")\n    vowels_count += vowels.count(\"\
    i\")\n    vowels_count += vowels.count(\"o\")\n    vowels_count += vowels.count(\"\
    u\")\n    \n    if vowels_count > 0 and vowels_count < 4:\n        return \"\"\
    \n    \n    vowels_count = 0\n    vowels_count += vowels.count(\"A\")\n    vowels_count\
    \ += vowels.count(\"E\")\n    vowels_count += vowels.count(\"I\")\n    vowels_count\
    \ += vowels.count(\"O\")\n    vowels_count += vowels.count(\"U\")\n    \n    if\
    \ vowels_count > 0 and vowels_count < 4:\n        return \"\"\n    \n    vowels_count\
    \ = 0\n    vowels_count += vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    if vowels_count > 0 and\
    \ vowels_count < 4:\n        return \"\"\n    \n    vowels_count = 0\n    vowels_count\
    \ += vowels.count(\"A\")\n    vowels_count += vowels.count(\"E\")\n    vowels_count\
    \ += vowels.count(\"I\")\n    vowels_count += vowels.count(\"O\")\n    vowels_count\
    \ += vowels.count(\"U\")\n    \n    if vowels_count > 0 and vowels_count < 4:\n\
    \        return \"\"\n    \n    vowels_count = 0\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowels_count\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp7t5716zd.jl:23\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp7t5716zd.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    \n    for char\
    \ in word:\n        if char in vowels:\n            vowels_count += 1\n      \
    \      if vowels_count > vowels_len:\n                vowels_index = vowels_count\
    \ - 1\n                break\n        else:\n            vowels_count = 0\n  \
    \          vowels_index += 1\n    \n    if vowels_index == 0:\n        return\
    \ \"\"\n    else:\n        return vowels[vowels_index - 1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <text>\nProblem 4\nWrite a function that takes a string as input and returns the\
    \ number of vowels \n    in the string. \n    \n    Example:\n    count_vowels(\"\
    yogurt\") ==> 3\n    count_vowels(\"FULL\") ==> 0\n    count_vowels(\"quick\"\
    ) ==> 0\n    count_vowels(\"ab\") ==> 0\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ef4hdwy.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ef4hdwy.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_from_right = 0\n    vowels_count_from_left\
    \ = 0\n    vowels_count_from_both = 0\n    vowels_count_from_both_from_right =\
    \ 0\n    vowels_count_from_both_from_left = 0\n    vowels_count_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_right = 0\n    vowels_count_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_left = 0\n    vowels_count_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_right = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowel\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn1sghg9k.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn1sghg9k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn1sghg9k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx >= vowels.length\n        return \"\"\n    \n \
    \   vowel = vowels[vowels_idx]\n    \n    if vowel == word[vowels_idx + 1]\n \
    \       return vowel\n    \n    if vowel == word[vowels_idx - 1]\n        return\
    \ vowel\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of vowels found in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2yj77hnh.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2yj77hnh.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    \n    for char\
    \ in word:\n        if char in vowels:\n            vowels_count += 1\n      \
    \      if vowels_count == vowels_len:\n                vowels_index = vowels_count\n\
    \                break\n    \n    if vowels_index == 0:\n        return \"\"\n\
    \    \n    vowels_index -= 1\n    \n    vowels_index = vowels_index if vowels_index\
    \ >= 0 else vowels_index+vowels_len\n    \n    vowels_index = vowels_index if\
    \ vowels_index < 0 else vowels_index+vowels_len\n    \n    vowels_index = vowels_index\
    \ if vowels_index >= 0 else vowels_index+vowels_len\n    \n    vowel = vowels[vowels_index]\n\
    \    \n    return vowel\n</cell>\n<cell>\nget_closest_vowel(\"yogurt\")\n</cell>\n\
    <cell>\nget_closest_vowel(\"FULL\")\n</cell>\n<cell>\nget_closest_vowel(\"quick\"\
    )\n</cell>\n<cell>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes a string as input and returns the number of vowels present\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdio4jopv.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdio4jopv.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx+1\n    \n    vowels_idx = vowels_idx-1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx+1\n\
    \    \n    vowels_idx = vowels_idx-1\n    \n    if vowels_idx < 0\n        return\
    \ \"\"\n    \n\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjgjm5_0y.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjgjm5_0y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_index == -1 \n    \
    \    return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index\
    \ >= len(vowels)\n        return \"\"\n    \n    vowels_index = vowels_index -\
    \ 1\n    \n    if vowels_index < 0\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    \n    if vowels_index >= len(vowels)\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index <\
    \ 0\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n  \
    \  if vowels_index >= len(vowels)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index < 0\n        return \"\"\n   \
    \ \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >= len(vowels)\n\
    \        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if\
    \ vowels_index < 0\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index >= len(vowels)\n        return \"\"\n    \n \
    \   vowels_index = vowels_index - 1\n    \n    if vowels_index < 0\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >=\
    \ len(vowels)\n        return \"\"\n    \n    vowels_index = vowels_index - 1\n\
    \    \n    if vowels_index < 0\n        return \"\"\n    \n    vowels_index =\
    \ vowels_index + 1\n    \n    if vowels_index >= len(vowels)\n        return \"\
    \"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index < 0\n\
    \        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if\
    \ vowels_index >= len(vowels)\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index < 0\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    \n    if vowels_index >= len(vowels)\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index <\
    \ 0\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n  \
    \  if vowels_index >= len(vowels)\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index < 0\n        return \"\"\n   \
    \ \n    vowels_index = vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_r21__z.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_r21__z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    for char in word:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count = 0\n    for char in word[::-1]:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count = 0\n    for char in word[::-1]:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count = 0\n    for char in word[::-1]:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count = 0\n    for char in word[::-1]:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count = 0\n    for char in word[::-1]:\n        if char\
    \ in vowels:\n            vowels_count += 1\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count = 0\n\
    \    for char in word[::-1]:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph5ajewht.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph5ajewht.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_max = 0\n    vowels_count_min\
    \ = 0\n    vowels_count_max = 0\n    vowels_count_min = 0\n    for letter in word:\n\
    \        if letter in vowels:\n            vowels_count += 1\n            if vowels_count\
    \ > vowels_count_max:\n                vowels_count_max = vowels_count\n     \
    \       if vowels_count < vowels_count_min:\n                vowels_count_min\
    \ = vowels_count\n        else:\n            vowels_count = 0\n    if vowels_count_min\
    \ == vowels_count_max:\n        return \"\"\n    else:\n        return vowels[vowels_count_min\
    \ - 1]\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef vowel_finder(word):\n\
    \    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    vowel_count_max\
    \ = 0\n    vowel_count_min = 0\n    vowel_count_max = 0\n    vowel_count_min =\
    \ 0\n    for letter in word:\n        if letter in vowels:\n            vowel_count\
    \ += 1\n            if vowel_count > vowel_count_max:\n                vowel_count_max\
    \ = vowel_count\n            if vowel_count < vowel_count_min:\n             \
    \   vowel_count_min = vowel_count\n        else:\n            vowel_count = 0\n\
    \    if vowel_count_min == vowel_count_max:\n        return \"\"\n    else:\n\
    \        return vowels[vowel_count_min - 1]\n</code>\n<|/ a tags=python,python-3.x\
    \ |>\n<| c |>\nPlease don't post only code as an answer, but also provide an explanation\
    \ of what your code does and how it solves the problem of the question. Answers\
    \ with an explanation are usually more helpful and of better quality, and are\
    \ more likely to attract upvotes.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef vowel_finder(word):\n\
    \    vowels = ['a','e','i','o','u']\n    vowel_count = 0\n    vowel_count_max\
    \ = 0\n    vowel_count_min = 0\n    vowel_count_max = 0\n    vowel_count_min =\
    \ 0\n    for letter in word:\n        if letter in vowels:\n            vowel_count\
    \ += 1\n            if vowel_count > vowel_count_max:\n                vowel_count_max\
    \ = vowel_count\n            if vowel_count < vowel_count_min:\n             \
    \   vowel_count_min = vowel_count\n        else:\n            vowel_count = 0\n\
    \    if vowel_count_min == vowel_count_max:\n        return \"\"\n    else:\n\
    \        return vowels[vowel\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9jjdb0jt.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9jjdb0jt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n\
    \    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count\
    \ += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n\
    \    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count\
    \ %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n\
    \    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count\
    \ += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n\
    \    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count\
    \ %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n\
    \    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count\
    \ += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n\
    \    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count\
    \ %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n\
    \    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count\
    \ += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count %= 4\n\
    \    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n    vowels_count\
    \ %= 4\n    vowels_count += 2\n    vowels_count %= 4\n    vowels_count += 2\n\
    \    vowels_count %= 4\n    vowels_count += 2\n    \nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpej9c_bxu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpej9c_bxu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpej9c_bxu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = find(vowels, word) \n    if vowels_index == -1 \n        \"\"\n    elseif\
    \ vowels_index > length(word)-1 \n        \"\"\n    elseif vowels_index == length(word)-1\
    \ \n        word[vowels_index]\n    else\n        word[vowels_index+1]\n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a Julia function that takes a string as\
    \ input and returns the number of vowels \n    in the string. \n    \n    Example:\n\
    \    count_vowels(\"yogurt\") ==> 3\n    count_vowels(\"FULL\") ==> 2\n    count_vowels(\"\
    quick\") ==> 0\n    count_vowels(\"ab\") ==> 0\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo1gfjueh.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1gfjueh.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx < 0 \n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if vowels_idx < vowels.length\n\
    \        return vowels[vowels_idx]\n    \n    vowels_idx = vowels_idx - 1\n  \
    \  if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx < vowels.length\n        return vowels[vowels_idx]\n  \
    \  \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx + 1\n    if vowels_idx < vowels.length\n\
    \        return vowels[vowels_idx]\n    \n    vowels_idx = vowels_idx - 1\n  \
    \  if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx < vowels.length\n        return vowels[vowels_idx]\n  \
    \  \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx + 1\n    if vowels_idx < vowels.length\n\
    \        return vowels[vowels_idx]\n    \n    vowels_idx = vowels_idx - 1\n  \
    \  if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx < vowels.length\n        return vowels[vowels_idx]\n  \
    \  \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx + 1\n    if vowels_idx < vowels.length\n\
    \        return vowels[vowels_idx]\n    \n    vowels_idx = vowels_idx - 1\n  \
    \  if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx < vowels.length\n        return vowels[vowels_idx]\n  \
    \  \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx + 1\n    if vowels_idx < vowels.length\n\
    \        return vowels[vowels_idx]\n    \n    vowels_idx = vowels_idx - 1\n  \
    \  if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx < vowels.length\n        return vowels[vowels_idx]\n  \
    \  \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowel\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4dtjk12_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4dtjk12_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3xca_8nw.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3xca_8nw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3xca_8nw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(x -> x == word[end])\n    if vowels_idx == -1\n     \
    \   return \"\"\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx\
    \ - 1\n    if vowels_idx < 0\n        return \"\"\n    return vowels[vowels_idx]\n\
    end\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"\
    u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\
    \"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd3ncevvx.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd3ncevvx.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp12ihd8ic.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp12ihd8ic.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = 0\n    vowels_count_max = 0\n    vowels_count_min\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index\
    \ = 0\n    vowels_count_max_index = 0\n    vowels_count_min_index = 0\n    vowels_count_max_index\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10hc2jf5.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp10hc2jf5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp10hc2jf5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.find{|vowel| vowel == word[vowels.rindex(\"A\")..-1]}\n    if vowels_index\
    \ != -1 \n        vowels_index = vowels.rindex(\"A\")\n    else\n        vowels_index\
    \ = vowels.rindex(\"E\")\n    end\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index -\
    \ 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index +\
    \ 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n\
    \    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n  \
    \  vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index -\
    \ 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index +\
    \ 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n\
    \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp_o8zuq_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp_o8zuq_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 1\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    \n    vowels_index = find(vowels,\
    \ word[vowels_count:])\n    vowels_index = vowels_index if vowels_index > 0 else\
    \ len(word)\n    vowels_index = vowels_index if vowels_index < len(word) else\
    \ 0\n    \n    vowels_index = vowels_index - vowels_count if vowels_index > 0\
    \ else 0\n    vowels_index = vowels_index - vowels_count if vowels_index < 0 else\
    \ 0\n    \n    vowels_index = vowels_index if vowels_index > 0 else 0\n    vowels_index\
    \ = vowels_index if vowels_index < 0 else 0\n    \n    vowels_index = vowels_index\
    \ if vowels_index > 0 else 0\n    vowels_index = vowels_index if vowels_index\
    \ < 0 else 0\n    \n    vowels_index = vowels_index if vowels_index > 0 else 0\n\
    \    vowels_index = vowels_index if vowels_index < 0 else 0\n    \n    vowels_index\
    \ = vowels_index if vowels_index > 0 else 0\n    vowels_index = vowels_index if\
    \ vowels_index < 0 else 0\n    \n    vowels_index = vowels_index if vowels_index\
    \ > 0 else 0\n    vowels_index = vowels_index if vowels_index < 0 else 0\n   \
    \ \n    vowels_index = vowels_index if vowels_index > 0 else 0\n    vowels_index\
    \ = vowels_index if vowels_index < 0 else 0\n    \n    vowels_index = vowels_index\
    \ if vowels_index > 0 else 0\n    vowels_index = vowels_index if vowels_index\
    \ < 0 else 0\n    \n    vowels_index = vowels_index if vowels_index > 0 else 0\n\
    \    vowels_index = vowels_index if vowels_index < 0 else 0\n    \n    vowels_index\
    \ = vowels_index if vowels_index > 0 else 0\n    vowels_index = vowels_index if\
    \ vowels_index < 0 else 0\n    \n    vowels_index = vowels_index if vowels_index\
    \ > 0 else 0\n    vowels_index = vowels_index if vowels_index < 0 else 0\n   \
    \ \n    vowels_index = vowels_index if vowels_index > 0 else 0\n    vowels_index\
    \ = vowels_index if vowels_index < 0 else 0\n    \n    vowels_index = vowels_index\
    \ if vowels_index > 0 else 0\n    vowels_index = vowels_index\nusing Test\n\n\
    @testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw_xwda8a.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_xwda8a.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = find(vowels, word[end])\n    if vowels_index == -1\n        return \"\"\n\
    \    \n    vowels_index = vowels_index + 1\n    \n    vowels_index_2 = find(vowels,\
    \ word[end - 1])\n    if vowels_index_2 == -1\n        return \"\"\n    \n   \
    \ if vowels_index > vowels_index_2\n        return word[end - 1]\n    \n    return\
    \ word[end - 1]\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of vowels found in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpazo2qax4.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpazo2qax4.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_index = 0\n    vowels_index_count\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index = 0\n    vowels_index_count_min_index\
    \ = 0\n    vowels_index_count_max_index\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp994yb0kh.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp994yb0kh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp994yb0kh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowel_counter = 0\n    vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    if vowel_counter == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    vowel_counter = vowels.count(word[vowel_counter:])\n    if vowel_counter\
    \ == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n    vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    if vowel_counter == 0 \n        vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    if vowel_counter == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    vowel_counter = vowels.count(word[vowel_counter:])\n    if vowel_counter\
    \ == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n    vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    if vowel_counter == 0 \n        vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    if vowel_counter == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    vowel_counter = vowels.count(word[vowel_counter:])\n    if vowel_counter\
    \ == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n    vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    if vowel_counter == 0 \n        vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    if vowel_counter == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    vowel_counter = vowels.count(word[vowel_counter:])\n    if vowel_counter\
    \ == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n    vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    if vowel_counter == 0 \n        vowel_counter\
    \ = vowels.count(word[vowel_counter:])\n    vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    if vowel_counter == 0 \n        vowel_counter = vowels.count(word[vowel_counter:])\n\
    \    vowel_counter = vowels.count(word[vowel_counter\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"vowel_counter:\" range\
    \ expression \nStacktrace:\n [1] top-level scope at /tmp/tmp5mvyr8qt.jl:18\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5mvyr8qt.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = 0\n    vowels_index_end = 0\n    vowels_index_start\
    \ = 0\n    vowels_index_end_start = 0\n    \n    for letter in word:\n       \
    \ if letter in vowels:\n            vowels_index = vowels_index + 1\n        \
    \    if vowels_index == vowels_len:\n                vowels_index_end = vowels_index_end\
    \ + 1\n                if vowels_index_end == vowels_len:\n                  \
    \  vowels_index_start = vowels_index_start + 1\n                    if vowels_index_start\
    \ == vowels_len:\n                        return \"\"\n                    else:\n\
    \                        return vowels[vowels_index_start]\n                else:\n\
    \                    return vowels[vowels_index_end]\n            else:\n    \
    \            return vowels[vowels_index]\n        else:\n            return \"\
    \"\n    \nend\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string\
    \ and returns the number of vowels present in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppiazvbhn.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppiazvbhn.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = count(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowel\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9cc0kd4k.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9cc0kd4k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9cc0kd4k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains(word))\n    if vowels_idx == -1\n   \
    \     return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx < 0\n        vowels_idx = vowels.lenght - 1\n \
    \   \n    vowel = vowels[vowels_idx]\n    \n    return vowel\nend\n</cell>\n<code\
    \ language=julia-1.4>\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"\
    FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"\
    ab\") ==> \"\"\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of vowels present in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphastq8ip.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphastq8ip.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    \n    for char in word\n        if char in vowels\n            vowels_count\
    \ += 1\n            if vowels_count > 1\n                vowels_count_left +=\
    \ 1\n            if vowels_count < 1\n                vowels_count_right += 1\n\
    \    \n    if vowels_count_left == 0 and vowels_count_right == 0\n        return\
    \ \"\"\n    \n    if vowels_count_left == 0 and vowels_count_right == 1\n    \
    \    return word[word.index(vowels[vowels_count_right])+1:]\n    \n    if vowels_count_left\
    \ == 1 and vowels_count_right == 0\n        return word[word.index(vowels[vowels_count_left])+1:]\n\
    \    \n    if vowels_count_left == 1 and vowels_count_right == 1\n        return\
    \ word[word.index(vowels[vowels_count_left])+1:word.index(vowels[vowels_count_right])]\n\
    \    \n    if vowels_count_left == 0 and vowels_count_right == 1\n        return\
    \ word[word.index(vowels[vowels_count_right])+1:]\n    \n    if vowels_count_left\
    \ == 1 and vowels_count_right == 1\n        return word[word.index(vowels[vowels_count_left])+1:word.index(vowels[vowels_count_right])]\n\
    \    \n    if vowels_count_left == 1 and vowels_count_right == 0\n        return\
    \ word[word.index(vowels[vowels_count_left])+1:]\n    \n    if vowels_count_left\
    \ == 0 and vowels_count_right == 1\n        return word[word.index(vowels[vowels_count_right])+1:]\n\
    \    \n    if vowels_count_left == 1 and vowels_count_right == 0\n        return\
    \ word[word.index(vowels[vowels_count_left])+1:]\n    \n    if vowels_count_left\
    \ == 0 and vowels_count_right == 0\n        return \"\"\n    \n    if vowels_count_left\
    \ == 0 and vowels_count_right == 1\n        return word[word.index(vowels[vowels_count_right])+1:]\n\
    \    \n    if vowels_count_left == 1 and vowels_count_right == 0\n        return\
    \ word[word.index(vowels[vowels_count_left])+1:]\n    \n    if vowels_count_left\
    \ == 1 and vowels_count_right == 1\n        return word[word.index(vowels[vowels_count_left])+1:word.index(vowels[vowels_count_right])]\n\
    \    \n    if vowels_count_left == 0 and vowels_count_right == 1\n        return\
    \ word[word.index(vowels[vowels_count_right\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowels_count_right\" after end\
    \ of expression\nStacktrace:\n [1] top-level scope at /tmp/tmpds8mdzu3.jl:29\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpds8mdzu3.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = count(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0\
    \ else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0\
    \ else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowel\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp12ydweco.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp12ydweco.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_index == -1\n       \
    \ return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end -\
    \ 1])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 2])\n    if vowels_index == -1\n   \
    \     return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 3])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 4])\n    if vowels_index == -1\n   \
    \     return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 5])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 6])\n    if vowels_index == -1\n   \
    \     return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 7])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 8])\n    if vowels_index == -1\n   \
    \     return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 9])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 10])\n    if vowels_index == -1\n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 11])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 12])\n    if vowels_index == -1\n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 13])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 14])\n    if vowels_index == -1\n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 15])\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 16])\n    if vowels_index == -1\n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 17])\n    if \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmphs9pidzy.jl:86\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphs9pidzy.jl:87\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphs9pidzy.jl:87\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_positions\
    \ = find_vowel_positions(word)\n    \n    if vowel_positions == []\n        return\
    \ \"\"\n    \n    vowel_positions = vowel_positions[1..end]\n    \n    closest_vowel\
    \ = vowels[minimum(vowel_positions)]\n    \n    return closest_vowel\nend\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <text>\nProblem 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in it.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr7w947p3.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr7w947p3.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(x => x == word)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    \n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == -1\n        return \"\"\n \
    \   \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    \n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    \n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == -1\n        return \"\"\n \
    \   \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    \n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    \n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == -1\n        return \"\"\n \
    \   \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    \n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    \n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == -1\n        return \"\"\n \
    \   \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    \n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    \n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == -1\n        return \"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjonaz__j.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjonaz__j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx == -1\n        return\
    \ \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx = vowels.find{|v|\
    \ word.starts_with?(v)} \n    if vowels_idx == -1\n        return \"\"\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels_idx - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx\
    \ - 1\n    vowels_idx = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvqb_3iq4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvqb_3iq4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx < 0\n        vowels_idx = vowels.length\n    \n\
    \    vowel = vowels[vowels_idx]\n    \n    if vowel == word[vowels_idx + 1]\n\
    \        return vowel\n    \n    if vowel == word[vowels_idx - 1]\n        return\
    \ vowel\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nProblem 3\nWrite a function that takes\
    \ a string and returns the number of vowels present in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8tlaed10.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8tlaed10.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_index == -1 \n      \
    \  return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end -\
    \ 1])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 2])\n    if vowels_index == -1 \n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 3])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 4])\n    if vowels_index == -1 \n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 5])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 6])\n    if vowels_index == -1 \n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 7])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 8])\n    if vowels_index == -1 \n  \
    \      return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 9])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 10])\n    if vowels_index == -1 \n \
    \       return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 11])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 12])\n    if vowels_index == -1 \n \
    \       return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 13])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 14])\n    if vowels_index == -1 \n \
    \       return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 15])\n    if vowels_index == -1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels.findIndex(x -> x == word[end - 16])\n    if vowels_index == -1 \n \
    \       return \"\"\n    \n    vowels_index = vowels.findIndex(x -> x == word[end\
    \ - 17])\n    if \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing condition in \"if\" at /tmp/tmp4fz4kn08.jl:86\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp4fz4kn08.jl:87\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp4fz4kn08.jl:87\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index >\
    \ 0\n        vowels_index = vowels_index - 1\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > len(word) - 2\n        vowels_index = len(word)\
    \ - 2\n    \n    vowels_index = vowels_index - 1\n\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgt03hhfl.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgt03hhfl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_max = 0\n    vowels_count_min\
    \ = 0\n    vowels_count_max = 0\n    vowels_count_min = 0\n    for letter in word\n\
    \        if letter in vowels\n            vowels_count += 1\n            if vowels_count\
    \ > vowels_count_max\n                vowels_count_max = vowels_count\n      \
    \      if vowels_count < vowels_count_min\n                vowels_count_min =\
    \ vowels_count\n            vowels_count = 0\n        end\n    end\n    if vowels_count_min\
    \ == vowels_count_max\n        return \"\"\n    elseif vowels_count_min == vowels_count_max\n\
    \        return vowels[vowels_count_min]\n    elseif vowels_count_min > vowels_count_max\n\
    \        return vowels[vowels_count_min]\n    else\n        return vowels[vowels_count_max]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj1l776q7.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj1l776q7.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowels_count = 0\n    \n    for char in word:\n   \
    \     if char in vowels:\n            vowels_count += 1\n    \n    if vowels_count\
    \ > vowels_len:\n        return \"\"\n    \n    vowels_count = 0\n    \n    for\
    \ char in word:\n        if char in vowels:\n            vowels_count += 1\n \
    \   \n    if vowels_count < vowels_len:\n        return \"\"\n    \n    vowels_count\
    \ = 0\n    \n    for char in word:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count == vowels_len:\n        return \"\"\n    \n\
    \    vowels_count = 0\n    \n    for char in word:\n        if char in vowels:\n\
    \            vowels_count += 1\n    \n    if vowels_count > vowels_len:\n    \
    \    return \"\"\n    \n    vowels_count = 0\n    \n    for char in word:\n  \
    \      if char in vowels:\n            vowels_count += 1\n    \n    if vowels_count\
    \ < vowels_len:\n        return \"\"\n    \n    vowels_count = 0\n    \n    for\
    \ char in word:\n        if char in vowels:\n            vowels_count += 1\n \
    \   \n    if vowels_count == vowels_len:\n        return \"\"\n    \n    vowels_count\
    \ = 0\n    \n    for char in word:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count > vowels_len:\n        return \"\"\n    \n \
    \   vowels_count = 0\n    \n    for char in word:\n        if char in vowels:\n\
    \            vowels_count += 1\n    \n    if vowels_count < vowels_len:\n    \
    \    return \"\"\n    \n    vowels_count = 0\n    \n    for char in word:\n  \
    \      if char in vowels:\n            vowels_count += 1\n    \n    if vowels_count\
    \ == vowels_len:\n        return \"\"\n    \n    vowels_count = 0\n    \n    for\
    \ char in word:\n        if char in vowels:\n            vowels_count += 1\n \
    \   \n    if vowels_count > vowels_len:\n        return \"\"\n    \n    vowels_count\
    \ = 0\n    \n    for char in word:\n        if char in vowels:\n            vowels_count\
    \ += 1\n    \n    if vowels_count < vowels_len:\n        return \"\"\n    \n \
    \   vowels_count = 0\n    \n    for char in word:\n        if char in vowels:\n\
    \            vowels_count += 1\n    \n    if vowels_count == vowels_len:\n   \
    \     return \"\"\n    \n    vowels_count = 0\n    \n    for char in word:\n \
    \       if char in vowels:\n            vowels_count += 1\n    \n    if vowels_count\
    \ > vowels_len:\n        return \"\"\n    \n    vowels_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvufvkarr.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvufvkarr.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowels_count = 0\n    \n    for char in word:\n   \
    \     if char in vowels:\n            vowels_count += 1\n    \n    if vowels_count\
    \ == 0:\n        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_index\
    \ = vowels_count % vowels_len\n    \n    vowel_start = vowels_len - vowels_index\n\
    \    \n    vowel_end = vowels_len + vowels_index\n    \n    vowel_char = word[vowel_start:vowel_end]\n\
    \    \n    return vowel_char\n    \nend\n</cell>\n<code language=julia-1.4>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of vowels present in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf58rtg5a.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf58rtg5a.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels)\
    \ else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels)\
    \ else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpum967ohq.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpum967ohq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    \n    vowels_count -= 1\n \
    \   \n    vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n\
    \    vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n   \
    \ vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n    vowels_count\
    \ %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n    vowels_count %=\
    \ vowels_count + 1\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count\
    \ + 1\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n\
    \    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n   \
    \ \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n    \n\
    \    vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n    \n   \
    \ vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_count + 1\n    \n    vowels_count -=\
    \ 1\n    \n    vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n\
    \    \n    vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n   \
    \ \n    vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n\
    \    vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n   \
    \ vowels_count %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n    vowels_count\
    \ %= vowels_count + 1\n    \n    vowels_count -= 1\n    \n    vowels_count %=\
    \ vowels_count + 1\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count\
    \ + 1\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n\
    \    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_count + 1\n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3qcbub9y.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3qcbub9y.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3qcbub9y.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    word = word.lower()\n    \n    vowel_start = word[vowels_len]\n\
    \    vowel_end = word[vowels_len-1]\n    \n    if vowel_start == vowel_end:\n\
    \        return \"\"\n    \n    vowel_start_idx = word.index(vowel_start)\n  \
    \  vowel_end_idx = word.index(vowel_end)\n    \n    if vowel_start_idx < vowel_end_idx:\n\
    \        vowel_start_idx += 1\n    else:\n        vowel_end_idx -= 1\n    \n \
    \   vowel_start_idx = vowel_start_idx%vowels_len\n    vowel_end_idx = vowel_end_idx%vowels_len\n\
    \    \n    if vowel_start_idx == vowel_end_idx:\n        return \"\"\n    \n \
    \   return vowels[vowel_start_idx:vowel_end_idx]\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7gvby9ua.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7gvby9ua.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_idx = word.rindex(vowels)\n    if vowels_idx < 0 \n\
    \        error(\"No vowel found\")\n    ending_vowel_idx = vowels_idx + vowels_len\n\
    \    if ending_vowel_idx > len(word)\n        error(\"No vowel found\")\n    \n\
    \    vowel_start = word.rindex(vowels, 0, ending_vowel_idx)\n    vowel_end = word.rindex(vowels,\
    \ ending_vowel_idx, len(word))\n    \n    if vowel_start == -1 or vowel_end ==\
    \ -1\n        error(\"No vowel found\")\n    \n    vowel = word[vowel_start:vowel_end]\n\
    \    return vowel\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the number of vowels found in the string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowel_end\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpw7xj28gc.jl:28\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpw7xj28gc.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels)\
    \ else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels)\
    \ else len(vowels)\n    vowels_count = vowels_count - 1 if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count - 1 if vowels_count > 0 else 0\n    vowels_count = vowels_count\
    \ + 1 if vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ - 1 if vowels_count > \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoyn6q7j5.jl:18\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpoyn6q7j5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = word.index(vowels)\n    vowels_index_right\
    \ = word.rindex(vowels)\n    \n    if vowels_index == -1 or vowels_index_right\
    \ == -1:\n        return \"\"\n    \n    if vowels_index > vowels_index_right:\n\
    \        vowels_index_right = vowels_index\n    \n    vowels_index_left = word.rindex(vowels,\
    \ 0, vowels_index_right + 1)\n    \n    if vowels_index_left == -1:\n        return\
    \ \"\"\n    \n    if vowels_index_left > vowels_index_right:\n        vowels_index_left\
    \ = vowels_index_right\n    \n    vowels_index_left_right = word.rindex(vowels,\
    \ 0, vowels_index_left + 1)\n    \n    if vowels_index_left_right == -1:\n   \
    \     return \"\"\n    \n    if vowels_index_left_right > vowels_index_right:\n\
    \        vowels_index_left_right = vowels_index_right\n    \n    vowels_index_right_left\
    \ = word.rindex(vowels, 0, vowels_index_right + 1)\n    \n    if vowels_index_right_left\
    \ == -1:\n        return \"\"\n    \n    if vowels_index_right_left > vowels_index_right:\n\
    \        vowels_index_right_left = vowels_index_right\n    \n    vowels_index_right_left_right\
    \ = word.rindex(vowels, 0, vowels_index_right_left + 1)\n    \n    if vowels_index_right_left_right\
    \ == -1:\n        return \"\"\n    \n    if vowels_index_right_left_right > vowels_index_right:\n\
    \        vowels_index_right_left_right = vowels_index_right\n    \n    vowels_index_right_left_right_right\
    \ = word.rindex(vowels, 0, vowels_index_right_left_right + 1)\n    \n    if vowels_index_right_left_right_right\
    \ == -1:\n        return \"\"\n    \n    if vowels_index_right_left_right_right\
    \ > vowels_index_right:\n        vowels_index_right_left_right_right = vowels_index_right\n\
    \    \n    vowels_index_right_left_right_right_right = word.rindex(vowels, 0,\
    \ vowels_index_right_left_right_right + 1)\n    \n    if vowels_index_right_left_right_right_right\
    \ == -1:\n        return \"\"\n    \n    if vowels_index_right_left_right_right_right\
    \ > vowels_index_right:\n        vowels_index_right_left_right_right_right = vowels_index_right\n\
    \    \n    vowels_index_right_left_right_right_right_right = word.rindex(vowels,\
    \ 0, vowels_index_right_left_right_right_right + 1)\n    \n    if vowels_index_right_left_right_right_right_right\
    \ == -1:\n        return \"\"\n    \n    if vowels_index_right_left_right_\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowels_index_right\" after end\
    \ of expression\nStacktrace:\n [1] top-level scope at /tmp/tmp9klu_cp2.jl:21\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9klu_cp2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_positions\
    \ = []\n    for letter in word\n        if letter in vowels\n            vowel_positions.append(vowels.index(letter))\n\
    \    vowel_positions.sort()\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1]\
    \ == len(vowels)-1\n        return \"\"\n    \n    if vowel_positions[0] == 0\
    \ and vowel_positions[-1] == len(vowels)-1\n        return \"\"\n    \n    if\
    \ vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n        return\
    \ \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n\
    \        return \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1]\
    \ == len(vowels)-1\n        return \"\"\n    \n    if vowel_positions[0] == 0\
    \ and vowel_positions[-1] == len(vowels)-1\n        return \"\"\n    \n    if\
    \ vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n        return\
    \ \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n\
    \        return \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1]\
    \ == len(vowels)-1\n        return \"\"\n    \n    if vowel_positions[0] == 0\
    \ and vowel_positions[-1] == len(vowels)-1\n        return \"\"\n    \n    if\
    \ vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n        return\
    \ \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n\
    \        return \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1]\
    \ == len(vowels)-1\n        return \"\"\n    \n    if vowel_positions[0] == 0\
    \ and vowel_positions[-1] == len(vowels)-1\n        return \"\"\n    \n    if\
    \ vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n        return\
    \ \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n\
    \        return \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1]\
    \ == len(vowels)-1\n        return \"\"\n    \n    if vowel_positions[0] == 0\
    \ and vowel_positions[-1] == len(vowels)-1\n        return \"\"\n    \n    if\
    \ vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n        return\
    \ \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1] == len(vowels)-1\n\
    \        return \"\"\n    \n    if vowel_positions[0] == 0 and vowel_positions[-1]\
    \ == len(vowels)-1\n        return \"\"\n    \n    if vowel_positions[0]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowel_positions\" after end of\
    \ expression\nStacktrace:\n [1] top-level scope at /tmp/tmpc17qoi3o.jl:23\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc17qoi3o.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1 \n      \
    \  return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx\
    \ + 1\n    if vowels_idx >= vowels.length \n        return \"\"\n    \n    vowel\
    \ = vowels[vowels_idx]\n    return vowel\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nPart 2\nThe second part of this problem is to find the closest\
    \ vowel from the given word that stands between two consonants from the left side\
    \ of the word. \n    \n    You may assume that the given string contains English\
    \ letter only.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd6frvtg6.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd6frvtg6.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = count(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowel\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplilzqrhc.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplilzqrhc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplilzqrhc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    \n    for char\
    \ in word:\n        if char in vowels:\n            vowels_count += 1\n      \
    \      if vowels_count > vowels_len:\n                vowels_index = vowels_count\
    \ - 1\n                break\n        else:\n            vowels_count = 0\n  \
    \          vowels_index += 1\n    \n    if vowels_index == 0:\n        return\
    \ \"\"\n    else:\n        return vowels[vowels_index - 1]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzo0l_4pd.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzo0l_4pd.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpip6ppjd9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpip6ppjd9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpip6ppjd9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_counter\
    \ = 0\n    vowel_found = False\n    \n    for char in word:\n        if char in\
    \ vowels:\n            vowel_counter += 1\n            if vowel_counter == 2:\n\
    \                vowel_found = True\n                break\n    \n    if vowel_found:\n\
    \        return word[vowel_counter:]\n    else:\n        return \"\"\nend\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    quick\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels found in the string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3kspezq9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3kspezq9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.find{|vowel| vowel in word}\n    if vowels_index == -1\n        return\
    \ \"\"\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index -\
    \ 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index +\
    \ 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n\
    \    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n  \
    \  vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index -\
    \ 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n  \
    \  vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index =\
    \ vowels_index + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index +\
    \ 1\n    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n\
    \    vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n  \
    \  vowels_index = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index\
    \ - 1\n    vowels_index = vowels_index + 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpokxmov90.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpokxmov90.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = 0\n    vowels_count_right = 0\n    vowels_count_left\
    \ = 0\n    vowels_count_both = 0\n    vowels_count_right_left = 0\n    vowels_count_right_both\
    \ = 0\n    vowels_count_left_both = 0\n    vowels_count_both_right = 0\n    vowels_count_both_left\
    \ = 0\n    vowels_count_both_both = 0\n    vowels_count_right_left_both = 0\n\
    \    vowels_count_right_both_left = 0\n    vowels_count_left_both_right = 0\n\
    \    vowels_count_left_both_both = 0\n    vowels_count_both_right_left = 0\n \
    \   vowels_count_both_right_both = 0\n    vowels_count_both_left_left = 0\n  \
    \  vowels_count_both_left_both = 0\n    vowels_count_left_right_left = 0\n   \
    \ vowels_count_left_right_both = 0\n    vowels_count_left_both_right = 0\n   \
    \ vowels_count_left_both_left = 0\n    vowels_count_right_left_left = 0\n    vowels_count_right_left_both\
    \ = 0\n    vowels_count_right_both_left = 0\n    vowels_count_right_both_both\
    \ = 0\n    vowels_count_left_right_left = 0\n    vowels_count_left_right_both\
    \ = 0\n    vowels_count_left_both_right = 0\n    vowels_count_left_both_left =\
    \ 0\n    vowels_count_right_left_left = 0\n    vowels_count_right_left_both =\
    \ 0\n    vowels_count_right_both_left = 0\n    vowels_count_right_both_both =\
    \ 0\n    vowels_count_left_right_left = 0\n    vowels_count_left_right_both =\
    \ 0\n    vowels_count_left_both_right = 0\n    vowels_count_left_both_left = 0\n\
    \    vowels_count_right_left_left = 0\n    vowels_count_right_left_both = 0\n\
    \    vowels_count_right_both_left = 0\n    vowels_count_right_both_both = 0\n\
    \    vowels_count_left_right_left = 0\n    vowels_count_left_right_both = 0\n\
    \    vowels_count_left_both_right = 0\n    vowels_count_left_both_left = 0\n \
    \   vowels_count_right_left_left = 0\n    vowels_count_right_left_both = 0\n \
    \   vowels_count_right_both_left = 0\n    vowels_count_right_both_both = 0\n \
    \   vowels_count_left_right_left = 0\n    vowels_count_left_right_both = 0\n \
    \   vowels_count_left_both_right = 0\n    vowels_count_left_both_left = 0\n\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6hvx3cw_.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6hvx3cw_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6hvx3cw_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = count(vowels)\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = \nusing Test\n\n\
    @testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4nborhd7.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4nborhd7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4nborhd7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    vowels_index_count\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\
    \ = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max\
    \ = 0\n    vowels_index_count_min = 0\n    vowels_index_count_max = 0\n    vowels_index_count_min\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx2gdt82e.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx2gdt82e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx2gdt82e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.length - 1 \n        return \"\"\n   \
    \ \n    vowel = vowels[vowels_idx]\n    \n    if vowel in \"aeiouAEIOU\"\n   \
    \     return vowel\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwcb7ha_0.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwcb7ha_0.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowels_count = 0\n    \n    for char in word:\n   \
    \     if char in vowels:\n            vowels_count += 1\n    \n    if vowels_count\
    \ > 0:\n        vowels_count -= 1\n    \n    vowels_count %= vowels_len\n    \n\
    \    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count -= 1\n\
    \    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n     \
    \   return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= vowels_len\n    \n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    \n    vowels_count %= vowels_len\n\
    \    \n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    \n    vowels_count %= \nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiv7kc_5x.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiv7kc_5x.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdjhmsfdg.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdjhmsfdg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdjhmsfdg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains)\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.size - 1\n        vowels_idx = vowels.size\
    \ - 1\n    \n    vowels_idx = \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbaug6xtd.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbaug6xtd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_index == -1\n     \
    \   return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index\
    \ > len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index >\
    \ len(vowels)\n        vowels_index = 0\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    vowels_index = vowels_index + 1\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqzqjec2r.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqzqjec2r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = -1\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index\
    \ = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_index = 0\n    vowels_\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq6ndhhsy.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq6ndhhsy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq6ndhhsy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    if vowels_len == 0 \n        return \"\"\n    \n  \
    \  vowels_index = 0\n    \n    for char in word\n        if char in vowels\n \
    \           vowels_index = vowels_index + 1\n    \n    if vowels_index == 0 \n\
    \        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if\
    \ vowels_index >= vowels_len\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index >= vowels_len\n        return \"\"\n    \n  \
    \  vowels_index = vowels_index - 1\n    \n    if vowels_index >= vowels_len\n\
    \        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if\
    \ vowels_index >= vowels_len\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index >= vowels_len\n        return \"\"\n    \n  \
    \  vowels_index = vowels_index + 1\n    \n    if vowels_index >= vowels_len\n\
    \        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if\
    \ vowels_index >= vowels_len\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index >= vowels_len\n        return \"\"\n    \n  \
    \  vowels_index = vowels_index - 1\n    \n    if vowels_index >= vowels_len\n\
    \        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if\
    \ vowels_index >= vowels_len\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index >= vowels_len\n        return \"\"\n    \n  \
    \  vowels_index = vowels_index + 1\n    \n    if vowels_index >= vowels_len\n\
    \        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if\
    \ vowels_index >= vowels_len\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index >= vowels_len\n        return \"\"\n    \n  \
    \  vowels_index = vowels_index - 1\n    \n    if vowels_index >= vowels_len\n\
    \        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if\
    \ vowels_index >= vowels_len\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index >= vowels_len\n        return \"\"\n    \n  \
    \  vowels_index = vowels_index + 1\n    \n    if vowels_index >= \nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgq6xj1nq.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgq6xj1nq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp23md2np1.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp23md2np1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp23md2np1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg7ws6sl2.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg7ws6sl2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg7ws6sl2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains)\n    \n    if vowels_idx < 0 \n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if vowels_idx == vowels.length\n\
    \        return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if\
    \ vowels_idx == vowels.length\n        return \"\"\n    \n    vowels_idx = vowels_idx\
    \ - 1\n    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx\
    \ = vowels_idx + 1\n    \n    if vowels_idx == vowels.length\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx < 0\n     \
    \   return \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if vowels_idx\
    \ == vowels.length\n        return \"\"\n    \n    vowels_idx = vowels_idx - 1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx == vowels.length\n        return \"\"\n    \n \
    \   vowels_idx = vowels_idx - 1\n    \n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if vowels_idx == vowels.length\n\
    \        return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if\
    \ vowels_idx == vowels.length\n        return \"\"\n    \n    vowels_idx = vowels_idx\
    \ - 1\n    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx\
    \ = vowels_idx + 1\n    \n    if vowels_idx == vowels.length\n        return \"\
    \"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx < 0\n     \
    \   return \"\"\n    \n    vowels_idx = vowels_idx + 1\n    \n    if vowels_idx\
    \ == vowels.length\n        return \"\"\n    \n    vowels_idx = vowels_idx - 1\n\
    \    \n    if vowels_idx < 0\n        return \"\"\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx == vowels.length\n        return \"\"\n    \n \
    \   vowels_idx = vowels_idx - 1\n    \n    if vowels_idx < 0\n        return \"\
    \"\n    \n    vowels_idx = vowels_id\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8gnbtbcz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8gnbtbcz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_positions\
    \ = findall(x->x in vowels, word)\n    vowel_positions = sort(vowel_positions)\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:end]\n\
    \    vowel_positions = vowel_positions[2:end]\n    vowel_positions = vowel_positions[2:\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeyqleojp.jl:59\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeyqleojp.jl:59\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_positions\
    \ = [i for i,v in enumerate(vowels) if v == word[end-1:end]]\n    closest_vowel\
    \ = vowels[min(vowel_positions)]\n    return closest_vowel\nend\n</cell>\n<code\
    \ language=julia-1.3>\nget_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"\
    FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"\
    ab\") ==> \"\"\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of vowels present in the string. \n    \n    Example:\n\
    \    count_vowels(\"yogurt\") ==> 3\n    count_vowels(\"ab\") ==> 0\n    count_vowels(\"\
    abba\") ==> 2\n    count_vowels(\"abbaab\") ==> 4\n    count_vowels(\"abbaabb\"\
    ) ==> 5\n    count_vowels(\"abbaabbb\") ==> 6\n    count_vowels(\"abbaabbbc\"\
    ) ==> 7\n    count_vowels(\"abbaabbbbc\") ==> 8\n    count_vowels(\"abbaabbbbcc\"\
    ) ==> 9\n    count_vowels(\"abbaabbbbccc\") ==> 10\n    count_vowels(\"abbaabbbbcccc\"\
    ) ==> 11\n    count_vowels(\"abbaabbbbccccc\") ==> 12\n    count_vowels(\"abbaabbbbcccccc\"\
    ) ==> 13\n    count_vowels(\"abbaabbbbccccccc\") ==> 14\n    count_vowels(\"abbaabbbbcccccccd\"\
    ) ==> 15\n    count_vowels(\"abbaabbbbcccccccdd\") ==> 16\n    count_vowels(\"\
    abbaabbbbcccccccddd\") ==> 17\n    count_vowels(\"abbaabbbbcccccccdddd\") ==>\
    \ 18\n    count_vowels(\"abbaabbbbcccccccddddd\") ==> 19\n    count_vowels(\"\
    abbaabbbbcccccccdddddd\") ==> 20\n    count_vowels(\"abbaabbbbcccccccddddddd\"\
    ) ==> 21\n    count_vowels(\"abbaabbbbcccccccdddddddd\") ==> 22\n    count_vowels(\"\
    abbaabbbbcccccccdddddddddd\") ==> 23\n    count_vowels(\"abbaabbbbcccccccddddddddddd\"\
    ) \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid iteration specification\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqg00v1yq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqg00v1yq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1\n       \
    \ return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    if vowels_idx\
    \ < 0\n        vowels_idx = vowels.lenght - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx > vowels.lenght - 1\n        vowels_idx = 0\n \
    \   \n    return vowels[vowels_idx]\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of vowels found in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptd6su9z2.jl:33\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptd6su9z2.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_from_right = 0\n    vowels_count_from_left\
    \ = 0\n    vowels_count_from_middle = 0\n    vowels_count_from_middle2 = 0\n \
    \   vowels_count_from_middle3 = 0\n    vowels_count_from_middle4 = 0\n    vowels_count_from_middle5\
    \ = 0\n    vowels_count_from_middle6 = 0\n    vowels_count_from_middle7 = 0\n\
    \    vowels_count_from_middle8 = 0\n    vowels_count_from_middle9 = 0\n    vowels_count_from_middle10\
    \ = 0\n    vowels_count_from_middle11 = 0\n    vowels_count_from_middle12 = 0\n\
    \    vowels_count_from_middle13 = 0\n    vowels_count_from_middle14 = 0\n    vowels_count_from_middle15\
    \ = 0\n    vowels_count_from_middle16 = 0\n    vowels_count_from_middle17 = 0\n\
    \    vowels_count_from_middle18 = 0\n    vowels_count_from_middle19 = 0\n    vowels_count_from_middle20\
    \ = 0\n    vowels_count_from_middle21 = 0\n    vowels_count_from_middle22 = 0\n\
    \    vowels_count_from_middle23 = 0\n    vowels_count_from_middle24 = 0\n    vowels_count_from_middle25\
    \ = 0\n    vowels_count_from_middle26 = 0\n    vowels_count_from_middle27 = 0\n\
    \    vowels_count_from_middle28 = 0\n    vowels_count_from_middle29 = 0\n    vowels_count_from_middle30\
    \ = 0\n    vowels_count_from_middle31 = 0\n    vowels_count_from_middle32 = 0\n\
    \    vowels_count_from_middle33 = 0\n    vowels_count_from_middle34 = 0\n    vowels_count_from_middle35\
    \ = 0\n    vowels_count_from_middle36 = 0\n    vowels_count_from_middle37 = 0\n\
    \    vowels_count_from_middle38 = 0\n    vowels_count_from_middle39 = 0\n    vowels_count_from_middle40\
    \ = 0\n    vowels_count_from_middle41 = 0\n    vowels_count_from_middle42 = 0\n\
    \    vowels_count_from_middle43 = 0\n    vowels_count_from_middle44 = 0\n    vowels_count_from_middle45\
    \ = 0\n    vowels_count_from_middle46 = 0\n    vowels_count_from_middle47 = 0\n\
    \    vowels_count_from_middle48 = 0\n    vowels_count_from_middle49 = 0\n    vowels_count_from_middle50\
    \ = 0\n    vowels_count_from_middle51 = 0\n    vowels_count_from_middle52 = 0\n\
    \    vowels_count_from_middle53 = 0\n    vowel\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2n4i1el0.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2n4i1el0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2n4i1el0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_positions\
    \ = find_vowel_positions(word)\n    \n    if vowel_positions == []\n        return\
    \ \"\"\n    \n    closest_vowel = find_closest_vowel(vowel_positions)\n    \n\
    \    return closest_vowel\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise 2\nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc3mxrcrf.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc3mxrcrf.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findLastIndex(vowels.contains)\n    if vowels_idx == -1 \n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    \n    vowels_idx = vowels_idx\
    \ + 1\n    \n    if vowels_idx < 0 \n        vowels_idx = vowels.length\n    \n\
    \    vowel = vowels[vowels_idx]\n    \n    if vowel == word[vowels_idx + 1]\n\
    \        return vowel\n    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpawypmjat.jl:35\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpawypmjat.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_end = 0\n    vowels_count_start\
    \ = 0\n    vowels_count_start_end = 0\n    vowels_count_start_end_count = 0\n\
    \    vowels_count_start_end_count_end = 0\n    vowels_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count = 0\n    vowels_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end = 0\n    vowels_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_end =\
    \ 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end_count_start_end\
    \ = 0\n    vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3ybqxi4j.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3ybqxi4j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3ybqxi4j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count % len(vowels)\n    vowels_index = vowels_count - 1\n    \n  \
    \  if vowels_index == -1:\n        return \"\"\n    \n    vowel_start = vowels[vowels_index]\n\
    \    vowel_end = vowels[vowels_index + 1]\n    \n    if vowel_start == vowel_end:\n\
    \        return vowel_start\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = vowel_start_index\
    \ + 1\n    vowel_end_index = vowel_end_index - 1\n    \n    if vowel_start_index\
    \ > vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    \    vowel_end_index = word.index(vowel_end)\n    \n    if vowel_start_index >\
    \ vowel_end_index:\n        return \"\"\n    \n    vowel_start_index = word.index(vowel_start)\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1dmmnvz6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1dmmnvz6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcy4_n5et.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcy4_n5et.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcy4_n5et.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(w => w == word[end])\n    if vowels_idx == -1\n        return\
    \ \"\"\n    \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n       \
    \ vowels_idx = vowels.length - 1\n    \n    vowels_idx = vowels_idx + 1\n    if\
    \ vowels_idx >= vowels.length\n        vowels_idx = 0\n    \n    return vowels[vowels_idx]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppqjhkxkl.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppqjhkxkl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_index == -1\n     \
    \   return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index =\
    \ vowels_index - 1\n    \n    if vowels_index > 0\n        return word[vowels_index]\n\
    \    \n    if vowels_index < len(word)\n        return word[vowels_index]\n  \
    \  \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a string and returns the number of vowels present\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz2dsb3e2.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz2dsb3e2.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        return \"\"\n    \n\
    \    vowels_count = count(vowels, word[::-1])\n    if vowels_count > 1\n     \
    \   return \"\"\n    \n    vowels_count = count(vowels, word[1:-1])\n    if vowels_count\
    \ > 1\n        return \"\"\n    \n    vowels_count = count(vowels, word[2:])\n\
    \    if vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[:-2])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[2:-1])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[:1])\n    if vowels_count > 1\n \
    \       return \"\"\n    \n    vowels_count = count(vowels, word[2:])\n    if\
    \ vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[:-2])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[1:-1])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[:1])\n    if vowels_count > 1\n \
    \       return \"\"\n    \n    vowels_count = count(vowels, word[2:])\n    if\
    \ vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[:-2])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[1:-1])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[:1])\n    if vowels_count > 1\n \
    \       return \"\"\n    \n    vowels_count = count(vowels, word[2:])\n    if\
    \ vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[:-2])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[1:-1])\n    if vowels_count > 1\n        return \"\"\n\
    \    \n    vowels_count = count(vowels, word[:1])\n    if vowels_count > 1\n \
    \       return \"\"\n    \n    vowels_count = count(vowels, word[2:])\n    if\
    \ vowels_count > 1\n        return \"\"\n    \n    vowels_count = count(vowels,\
    \ word[:-2])\n    if vowels_count > 1\n        return \"\"\n    \n    vowels_count\
    \ = count(vowels, word[1:-1])\n    if vowels_count > \nusing Test\n\n@testset\
    \ begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"\
    u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\
    \")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\"\
    )\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\"\
    )\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t\
    @test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t\
    @test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"::-1\"\nStacktrace:\n [1] top-level scope at /tmp/tmpr_bv72w0.jl:21\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr_bv72w0.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1\n       \
    \ return \"\"\n    vowels_idx = vowels_idx - 1\n    vowels_idx = vowels_idx +\
    \ 1\n    if vowels_idx >= length(word)\n        return \"\"\n    vowel = vowels[vowels_idx]\n\
    \    if vowel == word[vowels_idx]\n        return vowel\n    return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"u\"\n\
    get_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\n\
    get_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkityan2l.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkityan2l.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 2\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count if\
    \ vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word)\
    \ else len(word)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n\
    \    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count if\
    \ vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word)\
    \ else len(word)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n\
    \    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count if\
    \ vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word)\
    \ else len(word)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n\
    \    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8_zq2mtq.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_zq2mtq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1\n       \
    \ return \"\"\n    \n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0\n\
    \        vowels_idx = vowels.lenght - 1\n    \n    vowels_idx = vowels_idx + 1\n\
    \    if vowels_idx > vowels.lenght - 1\n        vowels_idx = 0\n    \n    return\
    \ vowels[vowels_idx]\nend\n</cell>\n<code language=julia-1.4>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu1zifawt.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu1zifawt.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n   \
    \     return \"\"\n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count\
    \ == 0:\n        return \"\"\n    vowels_count -= 1\n    vowels_count %= 4\n \
    \   if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n   \
    \     return \"\"\n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count\
    \ == 0:\n        return \"\"\n    vowels_count -= 1\n    vowels_count %= 4\n \
    \   if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n\
    \    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n   \
    \     return \"\"\n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count\
    \ == 0:\n        return \"\"\n    vowels_count -= 1\n    vowels_count %= 4\n \
    \   if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    if vowels_count == 0:\n        return \"\"\n    vowels_count -= 1\n\
    \    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n    \n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnrzvl6w.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwnrzvl6w.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdd80tjwv.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdd80tjwv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdd80tjwv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(word) else len(word)\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(word) else len(word)\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count if vowels_count > 0 else\
    \ 0\n    vowels_count = vowels_count if vowels_count < len(word) else len(word)\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(word) else\
    \ len(word)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(word) else len(word)\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpco43z5zz.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpco43z5zz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    vowel_start = vowels[(vowels.size - vowels_len)::-1]\n\
    \    vowel_end = vowels[-1:1:-1]\n    \n    vowel_start_idx = word.index(vowel_start)\n\
    \    vowel_end_idx = word.index(vowel_end)\n    \n    if vowel_start_idx < 0 or\
    \ vowel_end_idx < 0:\n        return \"\"\n    \n    if vowel_start_idx > vowel_end_idx:\n\
    \        return word[vowel_end_idx:vowel_start_idx]\n    \n    return word[vowel_start_idx:vowel_end_idx]\n\
    end\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"\
    u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\
    \"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a string and returns the number of vowels present in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: expected \"]\" or separator in arguments to \"\
    [ ]\"; got \"(vowels.size - vowels_len)::-1\"\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_5949ckh.jl:19\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp_5949ckh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    \n    for char in word:\n        if char in vowels:\n            vowels_count\
    \ += 1\n            if vowels_count > vowels_count_left:\n                vowels_count_left\
    \ = vowels_count\n            if vowels_count < vowels_count_right:\n        \
    \        vowels_count_right = vowels_count\n        else:\n            vowels_count\
    \ = 0\n    \n    if vowels_count_left == vowels_count_right:\n        return \"\
    \"\n    else:\n        return vowels[vowels_count_right - vowels_count_left +\
    \ 1]\nend\n</cell>\n<text>\nSolution\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprlo4k_sz.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprlo4k_sz.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(x -> x == word[end])\n    if vowels_idx == -1 \n        \"\
    \"\n    else\n        vowels[vowels_idx + 1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\") \n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\") \n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\") \n\
    </cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\") \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of vowels found in the string.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsbcunqqm.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsbcunqqm.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_from_right = 0\n    vowels_count_from_left\
    \ = 0\n    vowels_count_from_both = 0\n    vowels_count_from_both_from_right =\
    \ 0\n    vowels_count_from_both_from_left = 0\n    vowels_count_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_right = 0\n    vowels_count_from_both_from_both_from_left\
    \ = 0\n    vowels_count_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_left = 0\n    vowels_count_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_right = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both_from_right\
    \ = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_left = 0\n\
    \    vowels_count_from_both_from_both_from_both_from_both_from_both = 0\n    vowels_count_from_both_from_both_from_both_from_both_from_both\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe7hvkpxv.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe7hvkpxv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe7hvkpxv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_index\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_index == -1 \n    \
    \    return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index\
    \ > vowels.size - 1 \n        return \"\"\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index == 0 \n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    \n    if vowels_index > vowels.size - 1 \n        return\
    \ \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index ==\
    \ 0 \n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n \
    \   if vowels_index > vowels.size - 1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == 0 \n        return \"\"\n \
    \   \n    vowels_index = vowels_index + 1\n    \n    if vowels_index > vowels.size\
    \ - 1 \n        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n\
    \    if vowels_index == 0 \n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > vowels.size - 1 \n        return \"\"\n   \
    \ \n    vowels_index = vowels_index - 1\n    \n    if vowels_index == 0 \n   \
    \     return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n    if vowels_index\
    \ > vowels.size - 1 \n        return \"\"\n    \n    vowels_index = vowels_index\
    \ - 1\n    \n    if vowels_index == 0 \n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    \n    if vowels_index > vowels.size - 1 \n        return\
    \ \"\"\n    \n    vowels_index = vowels_index - 1\n    \n    if vowels_index ==\
    \ 0 \n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    \n \
    \   if vowels_index > vowels.size - 1 \n        return \"\"\n    \n    vowels_index\
    \ = vowels_index - 1\n    \n    if vowels_index == 0 \n        return \"\"\n \
    \   \n    vowels_index = vowels_index + 1\n    \n    if vowels_index > vowels.size\
    \ - 1 \n        return \"\"\n    \n    vowels_index = vowels_index - 1\n    \n\
    \    if vowels_index == 0 \n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    \n    if vowels_index > vowels.size - 1 \n        return \"\"\n   \
    \ \n    vowels_index = vowels_index - 1\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgtc83loe.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgtc83loe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpadp20agu.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpadp20agu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpadp20agu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = -1\n    vowels_index = get_vowels_index(word,\
    \ vowels_index)\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = get_vowels_index(word, vowels_index)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = get_vowels_index(word,\
    \ vowels_index)\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = get_vowels_index(word, vowels_index)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = get_vowels_index(word,\
    \ vowels_index)\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n    if vowels_index\
    \ == -1\n        return \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index\
    \ = get_vowels_index(word, vowels_index)\n    if vowels_index == -1\n        return\
    \ \"\"\n    \n    vowels_index = vowels_index + 1\n    vowels_index = get_vowels_index(word,\
    \ vowels_index)\n    if vowels_index == -1\n        return \"\"\n    \n    vowels_index\
    \ = vowels_index + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n\
    \    if vowels_index == -1\n        return \"\"\n    \n    vowels_index = vowels_index\
    \ + 1\n    vowels_index = get_vowels_index(word, vowels_index)\n\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptnytcqs6.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptnytcqs6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        vowels_index = find(vowels,\
    \ word, 1)\n        if vowels_index > 0\n            vowels_index = vowels_index\
    \ - 1\n            vowels_index = vowels_index - 1\n            vowels_index =\
    \ vowels_index - 1\n            vowels_index = vowels_index - 1\n            vowels_index\
    \ = vowels_index - 1\n            vowels_index = vowels_index - 1\n          \
    \  vowels_index = vowels_index - 1\n            vowels_index = vowels_index -\
    \ 1\n            vowels_index = vowels_index - 1\n            vowels_index = vowels_index\
    \ - 1\n            vowels_index = vowels_index - 1\n            vowels_index =\
    \ vowels_index - 1\n            vowels_index = vowels_index - 1\n            vowels_index\
    \ = vowels_index - 1\n            vowels_index = vowels_index - 1\n          \
    \  vowels_index = vowels_index - 1\n            vowels_index = vowels_index -\
    \ 1\n            vowels_index = vowels_index - 1\n            vowels_index = vowels_index\
    \ - 1\n            vowels_index = vowels_index - 1\n            vowels_index =\
    \ vowels_index - 1\n            vowels_index = vowels_index - 1\n            vowels_index\
    \ = vowels_index - 1\n            vowels_index = vowels_index - 1\n          \
    \  vowels_index = vowels_index - 1\n            vowels_index = vowels_index -\
    \ 1\n            vowels_index = vowels_index - 1\n            vowels_index = vowels_index\
    \ - 1\n            vowels_index = vowels_index - 1\n            vowels_index =\
    \ vowels_index - 1\n            vowels_index = vowels_index - 1\n            vowels_index\
    \ = vowels_index - 1\n            vowels_index = vowels_index - 1\n          \
    \  vowels_index = vowels_index - 1\n            vowels_index = vowels_index -\
    \ 1\n            vowels_index = vowels_index - 1\n            vowels_index = vowels_index\
    \ - 1\n            vowels_index = vowels_index - 1\n            vowels_index =\
    \ vowels_index - 1\n            vowels_index = vowels_index - 1\n            vowels_index\
    \ = vowels_index - 1\n            vowels_index = vowels_index - 1\n          \
    \  vowels_index = vowels_index - 1\n            vowels_index = vowels_index -\
    \ 1\n            vowels_index = vowels_index - 1\n            vowels_index = vowels_index\
    \ - 1\n            vowels_index = vowels_index - 1\n            vowels_index =\
    \ vowels_index - 1\n            vowels_index = vowels_index - 1\n            vowels_index\
    \ = vowels_index - 1\n            vowels_index = vowels_index - 1\n          \
    \  vowels_index = vowels_index - 1\n            \nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplo746txb.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplo746txb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|v| v == word[word.length-1]}\n    if vowels_idx == -1\n     \
    \   return \"\"\n    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n\
    \    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx\
    \ = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n\
    \    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx\
    \ = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n\
    \    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx\
    \ = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n\
    \    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx\
    \ = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n\
    \    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx\
    \ = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n\
    \    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx\
    \ = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n\
    \    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx\
    \ = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n\
    \    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx\
    \ = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n\
    \    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx\
    \ = vowels_idx+1\n    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n\
    \    vowels_idx = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx\
    \ = vowels_idx-1\n    vowels_idx = vowels_idx+1\n    vowels_idx = vowels_idx-1\n\
    \    vowels_idx = \nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj3mldgc3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj3mldgc3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ %= 4\n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count\
    \ -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n\
    \    \n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    vowels_count %= 4\n   \
    \ if vowels_count == 0:\n        return \"\"\n    \n    vowels_count -= 1\n  \
    \  vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n    \n \
    \   vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n    \
    \    return \"\"\n    \n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count\
    \ == 0:\n        return \"\"\n    \n    vowels_count -= 1\n    vowels_count %=\
    \ 4\n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count -=\
    \ 1\n    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n \
    \   \n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    vowels_count %= 4\n   \
    \ if vowels_count == 0:\n        return \"\"\n    \n    vowels_count -= 1\n  \
    \  vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n    \n \
    \   vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n    \
    \    return \"\"\n    \n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count\
    \ == 0:\n        return \"\"\n    \n    vowels_count -= 1\n    vowels_count %=\
    \ 4\n    if vowels_count == 0:\n        return \"\"\n    \n    vowels_count -=\
    \ 1\n    vowels_count %= 4\n    if vowels_count == 0:\n        return \"\"\n \
    \   \n    vowels_count -= 1\n    vowels_count %= 4\n    if vowels_count == 0:\n\
    \        return \"\"\n    \n    vowels_count -= 1\n    vowels_count %= 4\n   \
    \ if vowels_count == 0:\n        return \"\"\n    \n    vowels_count -= 1\n  \
    \  vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t\
    @test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\
    \t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t\
    @test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"\
    most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\"\
    ) == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmj8s0kwc.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmj8s0kwc.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = 0\n    vowels_index2 = vowels_len\n    \n\
    \    for char in word:\n        if char in vowels:\n            vowels_index =\
    \ vowels_index + 1\n            if vowels_index == vowels_len:\n             \
    \   vowels_index = 0\n        if char in vowels:\n            vowels_index2 =\
    \ vowels_index2 + 1\n            if vowels_index2 == vowels_len:\n           \
    \     vowels_index2 = 0\n    \n    vowels_index = vowels_index - vowels_index2\n\
    \    \n    if vowels_index == 0:\n        return \"\"\n    elif vowels_index ==\
    \ 1:\n        return word[vowels_index:]\n    elif vowels_index == 2:\n      \
    \  return word[vowels_index-1:vowels_index+2]\n    elif vowels_index == 3:\n \
    \       return word[vowels_index-2:vowels_index+3]\n    elif vowels_index == 4:\n\
    \        return word[vowels_index-3:vowels_index+4]\n    elif vowels_index ==\
    \ 5:\n        return word[vowels_index-4:vowels_index+5]\n    elif vowels_index\
    \ == 6:\n        return word[vowels_index-5:vowels_index+6]\n    elif vowels_index\
    \ == 7:\n        return word[vowels_index-6:vowels_index+7]\n    elif vowels_index\
    \ == 8:\n        return word[vowels_index-7:vowels_index+8]\n    elif vowels_index\
    \ == 9:\n        return word[vowels_index-8:vowels_index+9]\n    elif vowels_index\
    \ == 10:\n        return word[vowels_index-9:vowels_index+10]\n    elif vowels_index\
    \ == 11:\n        return word[vowels_index-10:vowels_index+11]\n    elif vowels_index\
    \ == 12:\n        return word[vowels_index-11:vowels_index+12]\n    elif vowels_index\
    \ == 13:\n        return word[vowels_index-12:vowels_index+13]\n    elif vowels_index\
    \ == 14:\n        return word[vowels_index-13:vowels_index+14]\n    elif vowels_index\
    \ == 15:\n        return word[vowels_index-14:vowels_index+15]\n    elif vowels_index\
    \ == 16:\n        return word[vowels_index-15:vowels_index+16]\n    elif vowels_index\
    \ == 17:\n        return word[vowels_index-16:vowels_index+17]\n    elif vowels_index\
    \ == 18:\n        return word[vowels_index-17:vowels_index+18]\n    elif vowels_index\
    \ == 19:\n        return word\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcxouasrs.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcxouasrs.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count +\
    \ 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n\
    \    vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n  \
    \  vowels_count = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count\
    \ = vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count =\
    \ vowels_count - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count\
    \ - 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count -\
    \ 1\n    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n\
    \    vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n  \
    \  vowels_count = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count\
    \ = vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count =\
    \ vowels_count + 1\n    vowels_count = vowels_count - 1\n    vowels_count = vowels_count\
    \ + 1\n    vowels_count = vowels_count - 1\nusing Test\n\n@testset begin\n\ncandidate\
    \ = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoh9e7_q7.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoh9e7_q7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoh9e7_q7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        vowels_index = find(vowels,\
    \ word)\n        vowels_index = vowels_index - vowels_count + 1\n        vowel\
    \ = vowels[vowels_index]\n        return vowel\n    else\n        return \"\"\n\
    end\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"\
    u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\
    \"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_61gzsu3.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_61gzsu3.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = word.rindex(vowels)\n    if vowels_index ==\
    \ -1 or vowels_index == len(word) - vowels_len + 1:\n        return \"\"\n   \
    \ \n    vowels_index = vowels_index + 1\n    vowels_index = vowels_index - 1\n\
    \    \n    if vowels[vowels_index] == word[vowels_index]:\n        return vowels[vowels_index]\n\
    \    else:\n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of vowels\
    \ present in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowels_index\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjnp2b7sb.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpjnp2b7sb.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa12i3lmh.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa12i3lmh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa12i3lmh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.findIndex(vowels.contains(word))\n    if vowels_idx == -1 \n      \
    \  return \"\"\n    vowels_idx = vowels_idx - 1\n    if vowels_idx < 0 \n    \
    \    vowels_idx = vowels.length\n    vowels_idx = vowels_idx + 1\n    if vowels_idx\
    \ > vowels.length \n        vowels_idx = 0\n    return vowels[vowels_idx]\nend\n\
    </cell>\n<code language=julia-1.5>\nget_closest_vowel(\"yogurt\") ==> \"u\"\n\
    get_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"quick\") ==> \"\"\n\
    get_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of vowels found in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbhsh9jh2.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbhsh9jh2.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\",\"e\",\"i\",\"\
    o\",\"u\"]\n    vowels_count = vowels.count(\"a\")\n    vowels_count += vowels.count(\"\
    e\")\n    vowels_count += vowels.count(\"i\")\n    vowels_count += vowels.count(\"\
    o\")\n    vowels_count += vowels.count(\"u\")\n    vowels_count -= 1\n    vowels_count\
    \ /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n\
    \    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count\
    \ -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n\
    \    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count\
    \ /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n\
    \    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count\
    \ -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n\
    \    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count\
    \ /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n\
    \    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count\
    \ -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n\
    \    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count\
    \ /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n\
    \    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count\
    \ -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n\
    \    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count\
    \ /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n\
    \    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= 2\n    vowels_count\
    \ -= 1\n    vowels_count /= 2\n    vowels_count -= 1\n    vowels_count /= \nusing\
    \ Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg7mq7pyc.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg7mq7pyc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg7mq7pyc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels)\n    vowels_count = vowels_count - 2\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n  \
    \  vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n  \
    \  vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowels) else len(vowels)\n    vowels_count\
    \ = vowels_count if vowels_count > 0 else 0\n    vowels_count = vowels_count if\
    \ vowels_count < len(vowels) else len(vowels)\n    vowels_count = vowels_count\
    \ if vowels_count > 0 else 0\n    vowels_count = vowels_count if vowels_count\
    \ < len(vowels) else len(vowels)\n    vowels_count = vowels_count if vowels_count\
    \ > 0 else 0\n    vowels_count = vowels_count if vowels_count < len(vowels) else\
    \ len(vowels)\n    vowels_count = vowels_count if vowels_count > 0 else 0\n  \
    \  vowels_count = vowels_count if vowels_count < len(vowels) else len(vowels)\n\
    \    vowels_count = vowels_count if vowels_count > 0 else 0\n    vowels_count\
    \ = vowels_count if vowels_count < len(vowel\nusing Test\n\n@testset begin\n\n\
    candidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"\
    full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"\
    eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\"\
    ) == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\")\
    \ == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\") ==\
    \ \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\") ==\
    \ \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpp2etjspj.jl:19\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp2etjspj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowel_counter\
    \ = 0\n    vowel_counter = vowels.count(word[vowel_counter:])\n    if vowel_counter\
    \ > 0 \n        vowel_counter = vowels.count(word[vowel_counter-1:])\n       \
    \ if vowel_counter > 0 \n            vowel_counter = vowels.count(word[vowel_counter-2:])\n\
    \            if vowel_counter > 0 \n                vowel_counter = vowels.count(word[vowel_counter-3:])\n\
    \                if vowel_counter > 0 \n                    vowel_counter = vowels.count(word[vowel_counter-4:])\n\
    \                    if vowel_counter > 0 \n                        vowel_counter\
    \ = vowels.count(word[vowel_counter-5:])\n                        if vowel_counter\
    \ > 0 \n                            vowel_counter = vowels.count(word[vowel_counter-6:])\n\
    \                            if vowel_counter > 0 \n                         \
    \       vowel_counter = vowels.count(word[vowel_counter-7:])\n               \
    \                 if vowel_counter > 0 \n                                    vowel_counter\
    \ = vowels.count(word[vowel_counter-8:])\n                                   \
    \ if vowel_counter > 0 \n                                        vowel_counter\
    \ = vowels.count(word[vowel_counter-9:])\n                                   \
    \     if vowel_counter > 0 \n                                            vowel_counter\
    \ = vowels.count(word[vowel_counter-10:])\n                                  \
    \          if vowel_counter > 0 \n                                           \
    \     vowel_counter = vowels.count(word[vowel_counter-11:])\n                \
    \                                if vowel_counter > 0 \n                     \
    \                               vowel_counter = vowels.count(word[vowel_counter-12:])\n\
    \                                                    if vowel_counter > 0 \n \
    \                                                       vowel_counter = vowels.count(word[vowel_counter-13:])\n\
    \                                                        if vowel_counter > 0\
    \ \n                                                            vowel_counter\
    \ = vowels.count(word[vowel_counter-14:])\n                                  \
    \                              if vowel_counter > 0 \n                       \
    \                                             vowel_counter = vowels.count(word[vowel_counter-15:])\n\
    \                                                                        if vowel_counter\
    \ > 0 \n                                                                     \
    \       vowel_counter = vowels.count(word[vowel_counter-16:])\n              \
    \                                                                  if vowel_counter\
    \ > 0 \n                                                                     \
    \               vowel_counter = vowels.count(word[vowel_counter-17:])\n      \
    \                                                                            \
    \      if vowel_counter > 0 \n                                               \
    \                                             vowel_counter = vowels.count(word[vowel_counter-18:])\n\
    \                                                                            \
    \                    if vowel_counter > 0 \n                                 \
    \                                                                   vowel_counter\
    \ = vowels.count(word[vowel_counter-19:])\n                                  \
    \                                                                      if vowel_counter\
    \ > 0 \n                                                                     \
    \                                       vowel_counter = vowels.count(word[vowel_counter-20:])\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"vowel_counter:\" range\
    \ expression \nStacktrace:\n [1] top-level scope at /tmp/tmpcgrb7cgy.jl:18\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcgrb7cgy.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_idx\
    \ = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx == -1\n        return\
    \ \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx = vowels.find{|v|\
    \ word.ends_with?(v)} \n    if vowels_idx == -1\n        return \"\"\n    ending_vowel_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels.find{|v| word.ends_with?(v)} \n  \
    \  if vowels_idx == -1\n        return \"\"\n    ending_vowel_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx\
    \ == -1\n        return \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx == -1\n        return\
    \ \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx = vowels.find{|v|\
    \ word.ends_with?(v)} \n    if vowels_idx == -1\n        return \"\"\n    ending_vowel_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels.find{|v| word.ends_with?(v)} \n  \
    \  if vowels_idx == -1\n        return \"\"\n    ending_vowel_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx\
    \ == -1\n        return \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx == -1\n        return\
    \ \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx = vowels.find{|v|\
    \ word.ends_with?(v)} \n    if vowels_idx == -1\n        return \"\"\n    ending_vowel_idx\
    \ = vowels_idx + 1\n    vowels_idx = vowels.find{|v| word.ends_with?(v)} \n  \
    \  if vowels_idx == -1\n        return \"\"\n    ending_vowel_idx = vowels_idx\
    \ + 1\n    vowels_idx = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx\
    \ == -1\n        return \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx\
    \ = vowels.find{|v| word.ends_with?(v)} \n    if vowels_idx == -1\n        return\
    \ \"\"\n    ending_vowel_idx = vowels_idx + 1\n    vowels_idx = vowels.find{\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"|\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9wkyap_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl9wkyap_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    \n    if vowels_len == 0 \n        return \"\"\n    \n  \
    \  vowels_idx = word.rindex(vowels)\n    \n    if vowels_idx == -1 \n        return\
    \ \"\"\n    \n    vowels_idx_2 = vowels_idx + vowels_len\n    \n    if vowels_idx_2\
    \ > len(word)\n        return \"\"\n    \n    vowels_idx_3 = vowels_idx_2 + vowels_len\n\
    \    \n    if vowels_idx_3 > len(word)\n        return \"\"\n    \n    vowels_idx_4\
    \ = vowels_idx_3 + vowels_len\n    \n    if vowels_idx_4 > len(word)\n       \
    \ return \"\"\n    \n    vowels_idx_5 = vowels_idx_4 + vowels_len\n    \n    if\
    \ vowels_idx_5 > len(word)\n        return \"\"\n    \n    vowels_idx_6 = vowels_idx_5\
    \ + vowels_len\n    \n    if vowels_idx_6 > len(word)\n        return \"\"\n \
    \   \n    vowels_idx_7 = vowels_idx_6 + vowels_len\n    \n    if vowels_idx_7\
    \ > len(word)\n        return \"\"\n    \n    vowels_idx_8 = vowels_idx_7 + vowels_len\n\
    \    \n    if vowels_idx_8 > len(word)\n        return \"\"\n    \n    vowels_idx_9\
    \ = vowels_idx_8 + vowels_len\n    \n    if vowels_idx_9 > len(word)\n       \
    \ return \"\"\n    \n    vowels_idx_10 = vowels_idx_9 + vowels_len\n    \n   \
    \ if vowels_idx_10 > len(word)\n        return \"\"\n    \n    vowels_idx_11 =\
    \ vowels_idx_10 + vowels_len\n    \n    if vowels_idx_11 > len(word)\n       \
    \ return \"\"\n    \n    vowels_idx_12 = vowels_idx_11 + vowels_len\n    \n  \
    \  if vowels_idx_12 > len(word)\n        return \"\"\n    \n    vowels_idx_13\
    \ = vowels_idx_12 + vowels_len\n    \n    if vowels_idx_13 > len(word)\n     \
    \   return \"\"\n    \n    vowels_idx_14 = vowels_idx_13 + vowels_len\n    \n\
    \    if vowels_idx_14 > len(word)\n        return \"\"\n    \n    vowels_idx_15\
    \ = vowels_idx_14 + vowels_len\n    \n    if vowels_idx_15 > len(word)\n     \
    \   return \"\"\n    \n    vowels_idx_16 = vowels_idx_15 + vowels_len\n    \n\
    \    if vowels_idx_16 > len(word)\n        return \"\"\n    \n    vowels_idx_17\
    \ = vowels_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t\
    @test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\
    \t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t\
    @test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"\
    most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\"\
    ) == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp98l7di1h.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp98l7di1h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowels_count = 0\n    vowels_count_left = 0\n    vowels_count_right\
    \ = 0\n    vowels_count_left_right = 0\n    vowels_count_left_right_count = 0\n\
    \    vowels_count_left_right_count_left = 0\n    vowels_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right = 0\n    vowels_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left = 0\n    vowels_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right = 0\n   \
    \ vowels_count_left_right_count_left_right_count_left_right_count = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count\
    \ = 0\n    vowels_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left_right_count_left\
    \ = 0\n    vowels_count_\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjbngjbx9.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjbngjbx9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjbngjbx9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_idx = 1\n    vowels_idx_end = vowels_len\n    vowels_idx_start\
    \ = vowels_len\n    vowels_idx_mid = 0\n    \n    while vowels_idx < vowels_idx_end\
    \ do\n        if word[vowels_idx] == vowels[vowels_idx_start] then\n         \
    \   vowels_idx_start = vowels_idx\n        elseif word[vowels_idx] == vowels[vowels_idx_end]\
    \ then\n            vowels_idx_end = vowels_idx\n        elseif word[vowels_idx]\
    \ == vowels[vowels_idx_mid] then\n            vowels_idx_mid = vowels_idx\n  \
    \      end\n        vowels_idx = vowels_idx + 1\n    end\n    \n    if vowels_idx_start\
    \ > vowels_idx_mid then\n        return \"\"\n    elseif vowels_idx_end < vowels_idx_mid\
    \ then\n        return \"\"\n    elseif vowels_idx_start < vowels_idx_mid then\n\
    \        return vowels[vowels_idx_mid]\n    else\n        return vowels[vowels_idx_start]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of vowels present in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\"\
    ) == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\"\
    ) == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") ==\
    \ \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\") ==\
    \ \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\"\
    )\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") == \"i\"\
    )\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") == \"o\"\
    )\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid \"do\" syntax\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjl9ux09t.jl:23\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpjl9ux09t.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = [\"a\", \"e\", \"i\"\
    , \"o\", \"u\"]\n    vowel_counter = 0\n    vowel_counter = vowels.count(\"a\"\
    )\n    vowel_counter = vowels.count(\"e\")\n    vowel_counter = vowels.count(\"\
    i\")\n    vowel_counter = vowels.count(\"o\")\n    vowel_counter = vowels.count(\"\
    u\")\n    \n    if vowel_counter > 0 and vowel_counter < 4:\n        return word[word.rfind(\"\
    -\") + 1]\n    elif vowel_counter == 4:\n        return word[word.rfind(\"-\"\
    ) + 1]\n    elif vowel_counter == 3:\n        return word[word.rfind(\"-\") +\
    \ 1]\n    elif vowel_counter == 2:\n        return word[word.rfind(\"-\") + 1]\n\
    \    elif vowel_counter == 1:\n        return word[word.rfind(\"-\") + 1]\n  \
    \  else:\n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"FULL\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    ab\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<code language=juli\n\
    using Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\t@test(candidate(\"\
    yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"\
    easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\"\
    ) == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t@test(candidate(\"most\")\
    \ == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"ba\") ==\
    \ \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\") ==\
    \ \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\") ==\
    \ \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"vowel_counter\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzo1wbtv3.jl:24\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzo1wbtv3.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_count = 0\n    vowels_index = 0\n    \n    for char\
    \ in word:\n        if char in vowels:\n            vowels_count += 1\n      \
    \      vowels_index = vowels_count - 1\n    \n    if vowels_count == 0:\n    \
    \    return \"\"\n    \n    if vowels_index == 0:\n        return word[vowels_index:]\n\
    \    \n    if vowels_index == vowels_len - 1:\n        return word[:vowels_index]\n\
    \    \n    return word[vowels_index-1:vowels_index+1]\nend\n</cell>\n<code language=julia-1.4>\n\
    get_closest_vowel(\"yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\
    \nget_closest_vowel(\"quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of vowels found in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = get_closest_vowel;\n\t@test(candidate(\"yogurt\") == \"u\")\n\t\
    @test(candidate(\"full\") == \"u\")\n\t@test(candidate(\"easy\") == \"\")\n\t\
    @test(candidate(\"eAsy\") == \"\")\n\t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"\
    bad\") == \"a\")\n\t@test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"\
    ab\") == \"\")\n\t@test(candidate(\"ba\") == \"\")\n\t@test(candidate(\"quick\"\
    ) == \"\")\n\t@test(candidate(\"anime\") == \"i\")\n\t@test(candidate(\"Asia\"\
    ) == \"\")\n\t@test(candidate(\"Above\") == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpccrlh004.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpccrlh004.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_len\
    \ = len(vowels)\n    vowels_index = -1\n    \n    for index in (word.end-1)::-1\
    \ do \n        if vowels[index] == vowels[vowels_index] then \n            vowels_index\
    \ = index\n            break\n    end\n    \n    if vowels_index == -1 then \n\
    \        return \"\"\n    end\n    \n    vowels_index += 1 \n    \n    if vowels[vowels_index]\
    \ == vowels[vowels_index+1] then \n        return vowels[vowels_index]\n    end\n\
    \    \n    return \"\"\nend\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    yogurt\") ==> \"u\"\nget_closest_vowel(\"FULL\") ==> \"U\"\nget_closest_vowel(\"\
    quick\") ==> \"\"\nget_closest_vowel(\"ab\") ==> \"\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels present\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"do\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpu11azvnv.jl:20\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu11azvnv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a word. Your task is to find the closest vowel that\
    \ stands between \n    two consonants from the right side of the word (case sensitive).\n\
    \    \n    Vowels in the beginning and ending doesn't count. Return empty string\
    \ if you didn't\n    find any vowel met the above condition. \n\n    You may assume\
    \ that the given string contains English letter only.\n\n    Example:\n    get_closest_vowel(\"\
    yogurt\") ==> \"u\"\n    get_closest_vowel(\"FULL\") ==> \"U\"\n    get_closest_vowel(\"\
    quick\") ==> \"\"\n    get_closest_vowel(\"ab\") ==> \"\"\n    \"\"\"\nfunction\
    \ get_closest_vowel(word::String)::String \n    vowels = \"aeiouAEIOU\"\n    vowels_count\
    \ = count(vowels, word)\n    if vowels_count > 1\n        vowels_index = find_index(vowels,\
    \ word)\n        vowels_index_2 = find_index(vowels, word, 2)\n        if vowels_index\
    \ == vowels_index_2\n            return word[vowels_index+1]\n        elseif vowels_index\
    \ > vowels_index_2\n            return word[vowels_index-1]\n        else\n  \
    \          return word[vowels_index]\n    elseif vowels_count == 1\n        return\
    \ word[vowels_index+1]\n    else\n        return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    get_closest_vowel(\"yogurt\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"\
    FULL\")\n</cell>\n<code language=julia-1.5>\nget_closest_vowel(\"quick\")\n</cell>\n\
    <code language=julia-1.5>\nget_closest_vowel(\"ab\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of vowels found\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = get_closest_vowel;\n\
    \t@test(candidate(\"yogurt\") == \"u\")\n\t@test(candidate(\"full\") == \"u\"\
    )\n\t@test(candidate(\"easy\") == \"\")\n\t@test(candidate(\"eAsy\") == \"\")\n\
    \t@test(candidate(\"ali\") == \"\")\n\t@test(candidate(\"bad\") == \"a\")\n\t\
    @test(candidate(\"most\") == \"o\")\n\t@test(candidate(\"ab\") == \"\")\n\t@test(candidate(\"\
    ba\") == \"\")\n\t@test(candidate(\"quick\") == \"\")\n\t@test(candidate(\"anime\"\
    ) == \"i\")\n\t@test(candidate(\"Asia\") == \"\")\n\t@test(candidate(\"Above\"\
    ) == \"o\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"if\" at /tmp/tmp5b5thh17.jl:23 expected \"\
    end\", got \"elseif\"\nStacktrace:\n [1] top-level scope at /tmp/tmp5b5thh17.jl:27\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5b5thh17.jl:27\n"
  exit_code: 1
  status: Exception
