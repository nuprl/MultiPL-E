name: HumanEval_7_filter_by_substring
language: julia
prompt: "\"\"\" Filter an input list of strings only for ones that contain given substring\n\
  \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
  \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"\nfunction\
  \ filter_by_substring(strings::Vector{String}, substring::String)::Vector{String}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = filter_by_substring;\n\t@test(candidate(Vector{String}([]),\
  \ \"john\") == Vector{String}([]))\n\t@test(candidate([\"xxx\", \"asd\", \"xxy\"\
  , \"john doe\", \"xxxAAA\", \"xxx\"], \"xxx\") == [\"xxx\", \"xxxAAA\", \"xxx\"\
  ])\n\t@test(candidate([\"xxx\", \"asd\", \"aaaxxy\", \"john doe\", \"xxxAAA\", \"\
  xxx\"], \"xx\") == [\"xxx\", \"aaaxxy\", \"xxxAAA\", \"xxx\"])\n\t@test(candidate([\"\
  grunt\", \"trumpet\", \"prune\", \"gruesome\"], \"run\") == [\"grunt\", \"prune\"\
  ])\nend\n"
completions: ["    \n    filtered_strings = Vector{String}()\n    \n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an\
    \ input list of strings only for ones that do not contain given substring\n  \
    \  >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'cde']\n    \"\"\"", "  \
    \  filter_by_substring(strings, substring, true)\nend", "    strings = strings[findall(x\
    \ -> contains(x, substring), strings)]\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and returns a vector of strings that contains all strings from the input\
    \ vector that contain \"a\" somewhere in their string representation. Test it\
    \ on some examples:", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as inputs\
    \ and returns a vector of strings as output. The function should return all strings\
    \ in the input vector that do not contain the strings in the input vector. For\
    \ example, if the input vector is [\"abc\", \"bacd\", \"cde\", \"array\"] and\
    \ the input vector is [\"a\", \"b\", \"c\", \"d\"], then the function should return\
    \ [\"abc\", \"bacd\", \"array\"].", "    \n    substring = lowercase(substring)\n\
    \    \n    strings = strings[:]\n    \n    strings = filter((x) -> contains(lowercase(x),\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'e')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'g')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'h')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'i')\n['array']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'j')\n['array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'k')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'm')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'n')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'o')\n['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'p')\n\
    ['array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'q')\n['array']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'r')\n['array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 's')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 't')\n['array']\n>>> filter_by_substring(", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ the number of times the string occurs in the string. \nWrite a function that\
    \ takes a string and returns the number of times the string occurs in the string.\
    \ \nWrite a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that takes a string and returns the\
    \ number of times the string occurs in the string. \nWrite a function that takes\
    \ a string and returns the number of times the string occurs in the string. \n\
    Write a function that takes a string and returns the number of times the string\
    \ occurs in the string. \nWrite a function that ", "    \n    filtered_strings\
    \ = Set{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return collect(filtered_strings)\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and returns a vector of strings containing\
    \ only the strings that begin with the substring 'a'.", "    \n    strings = filter(x->contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters an input list of strings only for ones that do not\
    \ contain given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ab')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cd')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'de')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'array')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'abd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bac')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bcd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cde')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cda')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdb')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdc')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdea')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdeb')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cdec')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cded')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde", "    \n    filtered_strings = Vector{String}()\n    \n    for\
    \ string in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and a substring and returns all strings that contain that substring.\
    \ \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\", \"ab\", \"ac\"\
    , \"bcd\", \"bde\", \"cd\", \"de\", \"ef\", \"f\"], \nthe function should return\
    \ [\"abc\", \"bacd\", \"array\", \"ab\", \"ac\", \"bcd\", \"bde\", \"cd\", \"\
    de\", \"ef\", \"f\"].", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3],\
    \ \"a\")", "    \n    strings = strings[findall(x -> contains(x, substring), strings)]\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter\
    \ a DataFrame for rows that contain a given substring\nWrite a function that filters\
    \ a DataFrame for rows that contain a given substring. \nThe function should take\
    \ two arguments: the first is the DataFrame to filter, the second is the substring\
    \ to look for. \nThe function should return a new DataFrame that only contains\
    \ rows that contain the given substring.", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring", "    strings = filter(x->contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.", "    \n    filtered_strings =\
    \ Vector{String}()\n    for string in strings\n        if string.contains(substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns a new string where all occurrences\
    \ of \"a\" have been replaced with \"A\"", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters an input list of strings only for those that contain all given substrings\n\
    >>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\")\n[]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\")\n[\"\
    abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\", \"cde\"\
    , \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\")\n[]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\",\
    \ \"h\", \"i\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\")\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\", \"c\", \"d\", \"e\", \"f\"\
    , \"g\", \"h\", \"i\", \"j\", \"k\", \"l\")\n[\"abc\", \"bacd\", \"array\"]\n\
    >>> filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", \"b\"\
    , \"c\", \"d\", \"e\", \"f\", \"g\", \"h\", \"i\", \"j\", \"k\", \"l\", \"m\"\
    )\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substrings([\"abc\", \"bacd\"\
    , \"c", "    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings containing only the strings that contain the substring.", "    \n\
    \    strings = strings[findall(strings, substring .==. true)]\n    \n    return\
    \ strings\nend", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    filter_by_substring(strings, substring, true)\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if string.contains(substring)\n    \
    \        strings.remove(string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns all strings that contain\
    \ that substring. \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\"\
    , \"ab\", \"abba\", \"abb\"], return [\"abc\", \"bacd\", \"array\"].", "    \n\
    \    strings = strings[:]\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring!", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ given substring\nand are longer than a given length\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 2)\n[\"abc\", \"bacd\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 3)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 4)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 5)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 6)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 7)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 8)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 9)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 10)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 11)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 12)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 13)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", 14)\n[\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", 15)\n[\"abc\", \"bacd\", \"array\"\
    ]\n>>> filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\", 16)\n\
    [\"abc\", \"bacd\", \"array\"]\n>>> filter_by_substring([\"abc\", \"", "    \n\
    \    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    strings = filter(x->contains(x, substring), strings)\n\
    \    return strings\nend", "    \n    filtered_strings = Vector{String}()\n  \
    \  \n    for string in strings\n        if contains(string, substring)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring.", "    \n    filtered_strings =\
    \ Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(filtered_strings, string)\n        end\n    end\n    \n   \
    \ return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a given list of strings only for those that contain\
    \ at least two of the given substrings.", "    \n    strings = strings[:]\n  \
    \  \n    strings = filter( x -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    strings = strings[findall(strings,substring)]\n    return\
    \ strings\nend", "    filter_by_substring(strings, substring, true)\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\", true)\n</cell>\n<text>\nfilter_by_substring!\n\
    filter_by_substring!() modifies the input list in-place to only contain strings\
    \ that contain the given substring", "    \n    strings = strings[:]\n    \n \
    \   strings = filter((x) -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a vector of strings and returns a vector of strings with\
    \ all but the first character removed. For example, given [\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], return [\"bc\", \"cd\", \"de\", \"array\"].", "    \n \
    \   strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns a list of\
    \ all characters that are not in the given string. \nFor example, given \"abcabc\"\
    , your function should return [\"a\", \"b\", \"c\"].", "    \n    strings = filter(\
    \ x -> contains(x, substring), strings)\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and a vector of strings as inputs and returns a vector of strings\
    \ as output. The function should return all strings in the input vector that do\
    \ not contain any of the strings in the input vector. For example, if the input\
    \ vector is [\"abc\", \"bacd\", \"cde\", \"array\"] and the input vector is [\"\
    a\", \"b\", \"c\"], then the output vector should be [\"abc\", \"bacd\", \"array\"\
    ].", "    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end", "    \n    strings = strings[:]\n    \n    for string in strings\n     \
    \   if string.contains(substring)\n            strings.remove(string)\n      \
    \  end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters strings by a regular expression.\
    \ \nThe function should take two arguments: a list of strings, and a regular expression.\
    \ \nThe function should return a list of strings that match the regular expression.\
    \ \nThe function should ignore case when matching.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n['abc', 'cde']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'ab')\n['abc', 'cde']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'ba')\n['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd')\n['bacd', 'cde']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdc')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdca')\n['bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ '", "    strings = [s for s in strings if substring in s]\n    return strings\n\
    end", "    \n    strings = strings[findall(strings,substring)]\n    \n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings,substring)]\n  \
    \  return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a vector of substrings and returns\
    \ a vector of strings that only contain the substrings.", "    \n    strings =\
    \ strings[findall(strings, substring .== true)]\n    \n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n  \
    \  filtered_strings = Vector{String}()\n    for string in strings\n        if\
    \ contains(string, substring)\n            push!(filtered_strings, string)\n \
    \       end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    strings\
    \ = filter( x -> contains(substring,x), strings)\n    return strings\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that filters an input list of strings only\
    \ for ones that do not contain given substring\n>>> filter_by_substring([], 'a')\n\
    []\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc', 'cde']\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n\
    ['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    strings\
    \ = filter(x->contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings containing only the strings that\
    \ begin with the substring \"ab\"", "    \n    strings = strings[findall(strings,\
    \ substring .== true)]\n    return strings\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that filters input list for strings that contain a given substring\n\
    and that do not contain a given substring\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a', false)\n['abc', 'bacd']\n</text>\n<code language=julia-1.5>",
  "    filter_by_substring(strings, substring, true)\nend", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\ne.g. filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\nshould return ['abc', 'cde']", "    strings =\
    \ filter((x) -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n\
    <text>\nExercise 2: filter_by_substring\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substring\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacd', false)\n['abc', 'bacd', 'cde', 'array']\n>>>\
    \ filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd', true)\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bacd',\
    \ false)\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'bacd', true)\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc",
  "    \n    strings = strings[findall(strings, substring .== \"_\")]\n    \n    return\
    \ strings\nend", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    \n    filtered_strings = Vector{String}()\n    \n    for string in\
    \ strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string with all the characters in lowercase and all the characters\
    \ in uppercase. \nFor example, \n\"abc\" -> \"ABC\"\n\"AbC\" -> \"ABC\"\n\"aBc\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\
    \n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\
    ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\
    \n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"\
    ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\"\
    \ -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"aBcD\" -> \"ABC\"\n\"\
    aBcD\" -> \"ABC\"\n\"aBcD\" -> \"", "    strings = [s for s in strings if substring\
    \ in s]\n    return strings\nend\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of strings and a vector of strings as arguments\
    \ and returns a vector of the same length with strings containing all the substrings\
    \ given in the second argument that appear in the first argument.", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<text>\nExercise 3: Filtering by substring\nWrite a function that filters\
    \ an input list of strings only for ones that contain given substring\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ab')\n['abc', 'bacd']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'cd')\n['cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'array')\n['array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'abd')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'bacd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'bacdab')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'bacdabda')\n['ba", "    \n    strings = strings[:]\n\
    \    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n  \
    \  return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that filters an input list of strings\
    \ only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'g')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'r')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 's')\n['abc', 'bacd', 'array']", "    \n    strings\
    \ = strings[findall(strings, substring)]\n    \n    return strings\nend", "  \
    \  \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters strings by a regular expression.", "    strings = [string for string\
    \ in strings if string.contains(substring)]\n    return strings\nend", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend",
  "    \n    strings = strings[:]\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            remove!(strings, string)\n        end\n    end\n   \
    \ \n    return strings\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ takes a vector of strings and a substring and returns all strings that contain\
    \ the substring. Test it on some examples:", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.4>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters an input list of strings only\
    \ for those that contain given substring\n    >>> filter_by_substring([], 'a')\n\
    \    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n \
    \   ['abc', 'bacd', 'array']\n    \"\"\"", "    \n    strings = filter( x -> contains(x,\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()\nfilter_by_substring() is a higher-order function\
    \ that takes a function and a list of strings and returns a list of strings that\
    \ satisfy the conditions of the function.", "    \n    strings = strings[:]\n\
    \    \n    i = 0\n    while i < length(strings)\n        if contains(strings[i],\
    \ substring)\n            i += 1\n        else\n            deleteat!(strings,\
    \ i)\n        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise: Write a function that filters an input list of strings only\
    \ for ones that do not contain given substring\nHint: Use filter_by_substring",
  "    strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], 2)\n\
    filter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"\
    2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\"\
    )\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\")\n\
    filter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3],\
    \ \"a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"\
    z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\"\
    )\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\")\n\
    filter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"\
    3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\"\
    )\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\")\n\
    filter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3],\
    \ \"2\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"\
    a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"z\"\
    )\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"3\")\n\
    filter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3],\
    \ \"z\")\nfilter_by_substring([1,2,3], \"2\")\nfilter_by_substring([1,2,3], \"\
    3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3], \"3\"\
    )\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_substring([1,2,3], \"2\")\n\
    filter_by_substring([1,2,3], \"3\")\nfilter_by_substring([1,2,3], \"a\")\nfilter_by_substring([1,2,3],\
    \ \"3\")\nfilter_by_substring([1,2,3], \"z\")\nfilter_by_", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of\
    \ strings and a substring and returns a vector of strings containing only the\
    \ strings that contain the substring.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[:]\n    \n    i = 0\n    while i < length(strings)\n\
    \        if contains(strings[i], substring)\n            delete!(strings, i)\n\
    \        else\n            i += 1\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters strings by a substring\
    \ that appears more than once in the string. For example, given the input ['abc',\
    \ 'bacd', 'cde', 'array', 'abc', 'bacd', 'cde', 'array'], the function should\
    \ return ['abc', 'bacd', 'array'].", "    \n    strings = strings[:]\n    \n \
    \   for string in strings\n        if contains(string, substring)\n          \
    \  delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for those that contain given substring\nThe function should\
    \ return a list of strings that only contain given substring", "    \n    substrings\
    \ = Vector{String}()\n    for string in strings\n        if contains(string, substring)\n\
    \            push!(substrings, string)\n        end\n    end\n    \n    return\
    \ substrings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector of strings\
    \ and returns a vector of strings where each string in the original vector has\
    \ been replaced by the string 'x'", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substring",
  "    strings = filter(x->contains(x,substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the substring.", "    strings = filter( x -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters a string list by whether it contains any of a list of\
    \ substrings.", "    \n    strings = strings[:]\n    \n    strings = filter( x\
    \ -> contains(x, substring), strings)\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of strings and a substring and returns a vector of strings that only contain\
    \ the substring.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the given substring. Test it on some example strings.",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    \n    strings = filter((x) -> contains(x, substring), strings)\n    \n    return\
    \ strings\nend", "    strings = [s for s in strings if substring in s]\n    return\
    \ strings\nend", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nExercise 3: Filter an input list of strings\
    \ only for ones that do not contain given substring\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    >>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'b')\n['abc', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'c')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'c", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc", "    \n    strings = strings[:]\n    \n    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    \n    return strings\n\
    end", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring)]\n \
    \   return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"c\")\n</cell>\n\
    <text>\nExercise: Write a function that filters an input list of strings only\
    \ for ones that end with a given substring\nHint: Use endswith()", "    \n   \
    \ substrings = Vector{String}()\n    \n    for s in strings\n        if contains(s,\
    \ substring)\n            push!(substrings, s)\n        end\n    end\n    \n \
    \   return substrings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"ab\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"e\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"h\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"k\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"n\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring(", "    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters input strings based on whether they contain given substrings",
  "    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x,substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<text>\nfilter_by_substring()",
  "    strings = filter( x -> contains(x,substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and returns the number of characters in the string. \nWrite a\
    \ function that takes a string and returns the number of words in the string.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are not letters. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are not letters.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not letters that do\
    \ not end with a period. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters that do not end with a period.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters that do not end with a period. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not letters that do not end with a period and that do not start with a period.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that are not letters that do not end with a period and that do not start\
    \ with a period. \nWrite a function that takes a string and returns the number\
    \ of sentences in the string that are not letters that do not end with a period\
    \ and that do not start with a period. \nWrite a function that takes a string\
    \ and returns the number of characters in the string that are not letters that\
    \ do not end with a period and that do not start with a period and that do not\
    \ contain an exclamation point. \nWrite a function that takes a string and returns\
    \ the number of words in the string that are not letters that do not end with\
    \ a period and that do not start with a period and that do not contain an exclamation\
    \ point. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not letters that do not end with a period and that do\
    \ not start with a period and that do not contain an exclamation point. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters that do not end with a period and that do not start with\
    \ a period and that do not contain an exclamation point and that do not contain\
    \ an exclamation point. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters that do not end with a period\
    \ and that do not start with a period and that do not contain an exclamation point\
    \ and that do not contain an exclamation point and that do not contain an exclamation\
    \ point. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string ", "    \n    strings = strings[findall(x -> substring in x, strings)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'bacd', 'cde']\n    \"\"\"", "  \
    \  \n    filtered_strings = Vector{String}()\n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters an input list of strings only for those\
    \ that contain given substrings\ne.g. filter_by_substrings(['abc', 'bacd', 'cde',\
    \ 'array'], 'a', 'b', 'c')\nshould return ['abc', 'bacd', 'cde']", "    strings\
    \ = filter((x) -> contains(x, substring), strings)\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of strings and a vector of substrings and returns a vector of\
    \ strings that only contain substrings.", "    \n    strings = strings[:]\n  \
    \  \n    for string in strings\n        if contains(string, substring)\n     \
    \       remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of strings and a substring and returns a vector of strings that\
    \ only contain the given substring. \nFor example, given [\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\", the function should return [\"abc\", \"bacd\", \"array\"\
    ].", "    \n    strings = strings[findall(x -> substring in x, strings)]\n   \
    \ return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ filters a list of strings based on whether they contain a given substring. \n\
    For example, given a list of strings \"abc\", \"bacd\", \"cde\", \"array\", and\
    \ a substring \"a\", your function should return [\"abc\", \"bacd\", \"array\"\
    ].", "    \n    strings = strings[findall(strings, substring)]\n    \n    return\
    \ strings\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of strings and returns a vector of strings containing only those strings that\
    \ start with a given prefix.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    return filtered_strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n<text>\nExercise: Write\
    \ a function that filters input strings based on whether they contain a given\
    \ substring.", "    \n    strings = strings[findall(strings,substring)]\n    return\
    \ strings\nend", "    \n    strings = filter( x -> contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.4>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings",
  "    \n    strings = strings[:]\n    \n    strings = filter( x -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    strings = [s for s in strings if substring\
    \ in s]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: filter_by_substring",
  "    strings = strings[findall(x -> contains(x, substring), strings)]\n    return\
    \ strings\nend", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring!\n\
    The filter_by_substring! function modifies the input list in-place. It filters\
    \ out the strings that do not contain the given substring.", "    \n    strings\
    \ = strings[findall(x -> contains(x, substring), strings)]\n    \n    return strings\n\
    end", "    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 7: Write a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'cde']\n    \"\"\"", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for those that contain\
    \ given substrings\ne.g. filter_by_substrings([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", \"b\", \"c\")\nshould return [\"abc\", \"bacd\", \"array\"]\n\
    Hint: use filter_by_substring", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend", "    strings = filter(x->contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter an input\
    \ list of strings only for ones that do not contain given substring\n    >>> filter_by_substring([],\
    \ 'a')\n    []\n    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n\
    \    ['abc', 'bacd', 'cde']\n    \"\"\"", "    \n    strings = strings[:]\n  \
    \  \n    for string in strings\n        if string.contains(substring)\n      \
    \      remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n['abc',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n\
    ['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde', '", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    \n    strings = strings[findall(strings, substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()\n\
    This function filters an input list of strings only for ones that contain given\
    \ substring", "    strings = filter(x->contains(x, substring), strings)\n    return\
    \ strings\nend", "    \n    strings = strings[findall(strings, substring)]\n \
    \   \n    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns a string with all the letters replaced by '_'. \n\
    For example 'hello' -> 'h__e__l__l__o'", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    \n \
    \   strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n    strings\
    \ = strings[findall(strings, substring)]\n    \n    return strings\nend", "  \
    \  \n    strings = filter(x->contains(x, substring), strings)\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that filters input strings based on whether they contain any of a list\
    \ of substrings", "    \n    strings = strings[:]\n    \n    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n    strings =\
    \ strings[findall(strings,substring)]\n    return strings\nend", "    \n    strings\
    \ = strings[findall(strings,substring)]\n    return strings\nend", "    \n   \
    \ strings = strings[findall(strings, substring .== true)]\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    \n\
    \    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'b')\n['abc',\
    \ 'cde']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'c')\n['abc',\
    \ 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'd')\n\
    ['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'e')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'f')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'g')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'r')\n['abc', 'bacd', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 's')\n['abc', 'bacd', 'array']\n", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    strings = filter( x -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that contain\
    \ a given substring anywhere in the string\ne.g. filter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"ab\")\nshould return [\"abc\", \"bacd\"]\n\
    Hint: use filter_by_substring", "    strings = strings[findall(x -> contains(x,\
    \ substring), strings)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of times the string occurs in the string. \nFor example, if the input string\
    \ is \"abcabc\" and the substring \"abc\" occurs 3 times, the function should\
    \ return 3.", "    \n    strings = filter(x->contains(x, substring), strings)\n\
    \    \n    return strings\nend", "    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring",
  "    \n    strings = strings[findall(strings, substring .== true)]\n    \n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"b\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"c\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"d\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"f\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"g\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"i\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"j\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"l\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"m\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"o\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"p\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"q\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"r\")\n</cell>\n<code language=julia-", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    \n    strings = strings[:]\n    \n    for\
    \ string in strings\n        if string.contains(substring)\n            strings.remove(string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a vector\
    \ of substrings and returns a vector of strings that only contain substrings.",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that takes a vector of strings and a vector of substrings\
    \ and returns a vector of strings containing only those strings that contain the\
    \ substrings.", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that filters input list of strings only for those that contain\
    \ given substring in any order.", "    \n    filtered_strings = Vector{String}()\n\
    \    for string in strings\n        if contains(string, substring)\n         \
    \   push!(filtered_strings, string)\n        end\n    end\n    \n    return filtered_strings\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input list\
    \ of strings only for ones that do not contain given substring\n>>> filter_by_substring([],\
    \ 'a')\n[]\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'a')\n[]\n\
    >>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ab')\n['abc', 'cde',\
    \ 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'ba')\n['bacd',\
    \ 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'], 'bc')\n\
    ['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde', 'array'],\
    \ 'd')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'e')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'f')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['bacd', 'cde', 'array']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['bacd', 'cde', 'array']\n>>> filter_by_", " \
    \   strings = [s for s in strings if substring in s]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring([1,2,3], \"a\"\
    )", "    strings = filter((x) -> contains(x, substring), strings)\n    return\
    \ strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\"\
    , \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()",
  "    strings = filter( x -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that filters an input list\
    \ of strings only for those that contain given substrings\n    >>> filter_by_substrings([],\
    \ 'a')\n    []\n    >>> filter_by_substrings(['abc', 'bacd', 'cde', 'array'],\
    \ 'a')\n    ['abc', 'bacd', 'array']\n    >>> filter_by_substrings(['abc', 'bacd',\
    \ 'cde', 'array'], 'ab')\n    ['abc', 'bacd']\n    >>> filter_by_substrings(['abc',\
    \ 'bacd', 'cde', 'array'], 'ba')\n    ['bacd', 'cde', 'array']\n    \"\"\"", " \
    \   \n    filtered_strings = Vector{String}()\n    for string in strings\n   \
    \     if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"\
    bacd\", \"cde\", \"array\"], \"ab\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"ba\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"bc\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"d\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"e\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"f\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"g\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"h\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"i\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"j\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"k\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"l\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"m\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"n\")\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"o\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"p\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring(", " \
    \   strings = filter((x) -> contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<text>\nfilter_by_substring()", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    filtered_strings = Vector{String}()\n  \
    \  \n    for string in strings\n        if contains(string, substring)\n     \
    \       push!(filtered_strings, string)\n        end\n    end\n    \n    return\
    \ filtered_strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filtering\
    \ by substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings based on a\
    \ list of substrings\nWrite a function that filters input strings based on a list\
    \ of substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings based on a list of substrings\nWrite a function that filters input\
    \ strings based on a list of substrings\nWrite a function that filters input strings\
    \ based on a list of substrings\nWrite a function that filters input strings based\
    \ on a list of substrings\nWrite a function that filters input strings based on\
    \ a list of substrings\nWrite a function that filters input strings based on a\
    \ list of substrings\nWrite a function that filters input strings based on a list\
    \ of substrings\nWrite a function that filters input strings based on a list of\
    \ substrings\nWrite a function that filters input strings based on a list of substrings\n\
    Write a function that filters input strings based on a list of substrings\nWrite\
    \ a function that filters input strings based on a list of substrings\nWrite a\
    \ function that filters input strings based on a list of substrings\nWrite a function\
    \ that filters input strings based on a list of substrings\nWrite a function that\
    \ filters input strings based on a list of substrings\nWrite a function that filters\
    \ input strings ", "    \n    strings = strings[:]\n    \n    for string in strings\n\
    \        if string.contains(substring)\n            delete!(strings, string)\n\
    \        end\n    end\n    \n    return strings\nend\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that filters an input list of strings only for those that\
    \ contain given substring\n    >>> filter_by_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a')\n    ['abc', 'bacd', 'array']\n    \"\"\"", "    \n    strings\
    \ = strings[findall(strings,substring)]\n    return strings\nend", "    \n   \
    \ strings = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n\
    <text>\nExercise 2: Filtering by substring\nWrite a function that filters an input\
    \ list of strings only for ones that contain given substring\nWrite a test that\
    \ checks that your function works as expected\nWrite a function that filters an\
    \ input list of strings only for ones that do not contain given substring\nWrite\
    \ a test that checks that your function works as expected", "    strings = filter((x)\
    \ -> contains(x, substring), strings)\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    \n    filtered_strings\
    \ = Vector{String}()\n    \n    for string in strings\n        if contains(string,\
    \ substring)\n            push!(filtered_strings, string)\n        end\n    end\n\
    \    \n    return filtered_strings\nend\n</cell>\n<text>\nExercise 2: filter_by_substring\n\
    Write a function that filters an input list of strings only for ones that contain\
    \ a given substring.", "    strings = filter((x) -> contains(x, substring), strings)\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_not_substring([], 'a')\n    []\n    >>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['cde', 'array']\n    \"\"\"", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    filter_by_substring(strings, substring, true)\n\
    end", "    \n    strings = strings[findall(strings, substring)]\n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a new\
    \ DataFrame with only the rows that contain the substring.", "    \n    strings\
    \ = strings[findall(strings, substring)]\n    return strings\nend", "    \n  \
    \  filtered_strings = Vector{String}()\n    \n    for string in strings\n    \
    \    if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of\
    \ strings and a substring and returns all strings that contain that substring.\
    \ \nFor example, given [\"abc\", \"bacd\", \"cde\", \"array\"] and \"a\", it should\
    \ return [\"abc\", \"bacd\", \"array\"].", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the substring.", "    \n \
    \   strings = strings[:]\n    \n    strings = filter((x) -> contains(x, substring),\
    \ strings)\n    \n    return strings\nend", "    \n    strings = strings[findall(strings,\
    \ substring)]\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of strings and a substring\
    \ and returns a vector of strings that only contain the given substring. Test\
    \ it on some test cases.", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that filters input strings based on whether they contain given substrings.",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    strings = filter(x->contains(x, substring), strings)\n    return strings\n\
    end\n</cell>\n<code language=julia-1.3>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2: Filter a DataFrame\
    \ for rows that contain a given substring\nWrite a function that filters a DataFrame\
    \ for rows that contain a given substring. \nThe function should return a DataFrame\
    \ with only those rows that contain the given substring.\nThe function should\
    \ accept two arguments: the DataFrame to be filtered and the substring to be filtered\
    \ for.", "    \n    filtered_strings = Vector{String}()\n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns a boolean indicating whether that string is a palindrome.", "    \n\
    \    strings = strings[findall(strings, substring)]\n    return strings\nend\n\
    </cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"\
    cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring", "    strings\
    \ = strings[findall(strings,substring)]\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.4>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nExercise 2\nWrite a function that filters an input\
    \ list of strings only for ones that do not contain given substring\ne.g. filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n>>> filter_by_not_substring(['abc', 'bacd', 'cde',\
    \ 'array'], 'a')\n['bacd', 'cde']\n>>> filter_by_not_substring(['abc', 'bacd',\
    \ 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde', 'array']\n>>> filter_by_not_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde', 'array']\n>>> ", "   \
    \ \n    substring = lowercase(substring)\n    \n    strings = filter(x->contains(lowercase(x),\
    \ substring), strings)\n    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nfilter_by_substring()", "    filter_by_substring(strings, substring, true)\n\
    end", "    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"a\", \"b\", \"c\", \"d\"], \"a\"\
    )\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"a\", \"b\", \"c\"\
    , \"d\"], \"z\")\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    a\", \"b\", \"c\", \"d\"], \"z\", true)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a vector of strings and a substring and returns a vector\
    \ of strings that only contain the substring.", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         delete!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    \n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nFilter a list for\
    \ strings that contain a given substring\nThe function filter_by_substring takes\
    \ in two arguments:", "    strings = strings[findall(x -> contains(x, substring),\
    \ strings)]\n    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a list of strings and a substring and returns a list of\
    \ strings that contain that substring. For example, given [\"abc\", \"bacd\",\
    \ \"cde\", \"array\"], \"a\", the function should return [\"abc\", \"bacd\", \"\
    array\"].", "    strings = filter( x -> contains(x, substring), strings)\n   \
    \ return strings\nend", "    \n    strings = strings[findall(strings,substring)]\n\
    \    return strings\nend\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"\
    abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that filters an input list of strings only for ones that do not contain\
    \ given substring\n>>> filter_by_substring([], 'a')\n[]\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'b')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'c')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'd')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'e')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'f')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'g')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'h')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'i')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'j')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'k')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'l')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'm')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'n')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'o')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'p')\n['abc', 'bacd', 'cde']\n>>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'q')\n['abc', 'ba", "    \n    strings = strings[:]\n\
    \    \n    for string in strings\n        if contains(string, substring)\n   \
    \         remove!(strings, string)\n        end\n    end\n    \n    return strings\n\
    end\n</cell>\n<code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\"\
    , \"cde\", \"array\"], \"a\")\n</cell>\n<text>\nfilter_by_substring!", "    \n\
    \    strings = strings[findall(strings,substring)]\n    \n    return strings\n\
    end", "    \n    strings = strings[findall(strings,substring)]\n    return strings\n\
    end", "    filter_by_substring(strings, substring, true)\nend", "    \n    strings\
    \ = strings[findall(strings,substring)]\n    \n    return strings\nend\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\")\n</cell>\n<text>\nFiltering by substrings\nWe can also filter\
    \ by substrings using the function filter_by_substrings.", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of strings and a vector\
    \ of strings as inputs and returns a vector of strings as output. \nThe function\
    \ should return all strings in the input vector that do not contain any of the\
    \ strings in the input vector.\nThe function should return an empty vector if\
    \ the input vectors are empty.\nThe function should return an empty vector if\
    \ the input vectors are of different lengths.", "    strings = strings[findall(x\
    \ -> contains(x, substring), strings)]\n    return strings\nend\n</cell>\n<code\
    \ language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"\
    ], \"a\")\n</cell>\n<text>\nfilter_by_substring()", "    filter_by_substring(strings,\
    \ substring, true)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that filters\
    \ an input list of strings only for ones that do not contain given substring\n\
    \    >>> filter_by_substring([], 'a')\n    []\n    >>> filter_by_substring(['abc',\
    \ 'bacd', 'cde', 'array'], 'a')\n    ['abc', 'cde']\n    \"\"\"", "    filter_by_substring(strings,\
    \ substring, true)\nend", "    strings = filter(x->contains(x,substring), strings)\n\
    \    return strings\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of strings and a substring and returns a vector of strings containing\
    \ only the strings that contain the substring. For example, given the following\
    \ input vector:", "    \n    filtered_strings = Vector{String}()\n    for string\
    \ in strings\n        if contains(string, substring)\n            push!(filtered_strings,\
    \ string)\n        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that filters input strings based on whether\
    \ they contain any of a list of substrings.", "    \n    strings = strings[:]\n\
    \    \n    substring = lowercase(substring)\n    \n    strings = filter((x) ->\
    \ contains(lowercase(x), substring), strings)\n    \n    return strings\nend",
  "    \n    strings = strings[findall(strings,substring)]\n    return strings\nend",
  "    \n    filtered_strings = Vector{String}()\n    \n    for string in strings\n\
    \        if contains(string, substring)\n            push!(filtered_strings, string)\n\
    \        end\n    end\n    \n    return filtered_strings\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that filters a list of strings based on whether they\
    \ contain a given substring. Test it on a list of strings that contains both substrings.",
  "    filter_by_substring(strings, substring, true)\nend\n</cell>\n<code language=julia-1.5>\n\
    filter_by_substring([\"abc\", \"bacd\", \"cde\", \"array\"], \"a\")\n</cell>\n\
    <code language=julia-1.5>\nfilter_by_substring([\"abc\", \"bacd\", \"cde\", \"\
    array\"], \"a\", true)\n</cell>\n<text>\nfilter_by_substring!\nSimilar to filter_by_substring,\
    \ but modifies the input list in-place.", "    strings = filter((x) -> contains(x,\
    \ substring), strings)\n    return strings\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
