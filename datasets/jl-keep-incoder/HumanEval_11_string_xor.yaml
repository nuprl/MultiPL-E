name: HumanEval_11_string_xor
language: julia
prompt: "\"\"\" Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
  \ binary XOR on these inputs and return result also as a string.\n    >>> string_xor('010',\
  \ '110')\n    '100'\n    \"\"\"\nfunction string_xor(a::String, b::String)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = string_xor;\n\t@test(candidate(\"\
  111000\", \"101010\") == \"010010\")\n\t@test(candidate(\"1\", \"1\") == \"0\")\n\
  \t@test(candidate(\"0101\", \"0000\") == \"0101\")\nend\n"
completions: ["    \n    if length(a) != length(b) \n        error(\"Strings must\
    \ have same length\")\n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    \n    if a==\"\" || b==\"\"\n        return\
    \ \"\"\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        return char(xor(ord(a[i]), ord(b[i])))\
    \ \nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that converts a binary string to a decimal\
    \ integer. \nFor example the string \"0101\" should return 3", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    elseif\
    \ length(a) == 0 \n        error(\"String is empty\")\n    elseif length(a) ==\
    \ 1 \n        return a\n    else\n        return a^b\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    string_xor(a::String, b::String)::String \n    Perform binary XOR\
    \ on two strings a and b and return result also as a string.\n    >>> string_xor('010',\
    \ '110')\n    '100'\n    \"\"\"", "    if length(a) != length(b) then return \"\
    \" \n    else \n        string_xor_recursive(a, b, \"\")\n    end\nend", "   \
    \ \n    if length(a) == length(b) \n        \n        \n        if length(a) ==\
    \ 1 \n            return a\n        \n        if length(b) == 1 \n           \
    \ return b\n        \n        \n        \n        \n        \n        \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n", "    if length(a) == length(b) \n        then\
    \ return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    else return \"\"\nend\n</cell>\n<code language=julia-1.0>", "    if length(a)\
    \ == length(b) \n        then return string_xor(string_xor(a,b),a)\n        else\
    \ return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(a) == length(b) \n        then return \"\
    \"\n        else return string_xor(string_xor(a, b), b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of 1s\
    \ in the string.\n>>> count_ones(\"010\")\n2\n>>> count_ones(\"1010\")\n3\n>>>\
    \ count_ones(\"10101010\")\n4\n>>> count_ones(\"101010101010\")\n5\n>>> count_ones(\"\

  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ length(b) \n        then return string_xor(string_xor(a, b), string_xor(b, a))\n\
    \        else return string_xor(a, string_xor(b, a))\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_xor('010', '110')\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that performs XOR on two strings a and b of equal length\
    \ and returns the result as a string.\nWrite a function that performs XOR on two\
    \ strings a and b of equal length and returns the result as a string.\nWrite a\
    \ function that performs XOR on two strings a and b of equal length and returns\
    \ the result as a string.\nWrite a function that performs XOR on two strings a\
    \ and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs XOR on two strings a and b of equal\
    \ length and returns the result as a string.\nWrite a function that performs XOR\
    \ on two strings a and b of equal length and returns the result as a string.\n\
    Write a function that performs XOR on two strings a and b of equal length and\
    \ returns the result as a string.\nWrite a function that performs XOR on two strings\
    \ a and b of equal length and returns the result as a string.\nWrite a function\
    \ that performs XOR on two strings a and b of equal length and returns the result\
    \ as a string.\nWrite a function that performs X", "    \n    if length(a) ==\
    \ length(b) \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) !=\
    \ length(b) \n        error(\"Strings must have same length\")\n    else \n  \
    \      string_xor = zeros(length(a))\n        for i in 1:length(a)\n         \
    \   string_xor[i] = (a[i] ^ b[i])\n        end\n        return string_xor\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), string_xor(b, a))\n        else return \"\"\n    end\n    ", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b)\
    \ then \n        string_xor_recursive(a, b, \"\")\n    else \n        string_xor_recursive(a,\
    \ b, \"\")\n    end\nend", "    if length(a) == length(b) \n        then return\
    \ \"\"\n        else return string_xor(string_xor(a, b), string_xor(b, a))\n \
    \   end\nend\n</cell>\n<code language=julia-1.3>", "    \n    if length(a) !=\
    \ length(b) \n        error(\"Length of strings do not match\")\n    else \n \
    \       \n        ans = \"\"\n        for i in each(a) \n            ans = ans\
    \ + char(i) ^ char(b[i])\n        return ans\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(a) == length(b) \n        then return \"\"\n        else return string_xor(string_xor(a,b),a)\n\
    \    end\n    ", "    if length(a) == length(b) then\n        local c = 0\n  \
    \      for i in a:gmatch(\"%d\") do c = c + i end\n        return string(c,2)\n\
    \    else\n        return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ performs bitwise AND on two strings a and b. Input are two strings a and b consisting\
    \ only of 1s and 0s.\n    Perform binary AND on these inputs and return result\
    \ also as a string.\n    >>> string_and('010', '110')\n    '111'\n    \"\"\"",
  "    return a ^ b\nend\n</cell>\n<code language=julia-1.0>", "    if length(a) !=\
    \ length(b) \n        error(\"Strings must have same length\")\n    else \n  \
    \      return chars(xor(a,b))\nend", "    if length(a) == length(b) \n       \
    \ then return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    else return \"\"\nend\n</cell>\n<code language=julia-1.3>\nstring_xor(\"\
    010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of times each character appears in the string.\
    \ \nFor example if the input string is \"abcabc\" the function should return {\"\
    a\" => 3, \"b\" => 2, \"c\" => 3}.\nThe function should work for strings of any\
    \ length.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b)\
    \ \n        then return a\n        else return b\n    end\n    if length(a) >\
    \ length(b) \n        then return b\n        else return a\n    end\n    \nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), b)\n    else if length(a) >\
    \ length(b) \n        then return string_xor(a, string_xor(b, a))\n        else\
    \ return string_xor(string_xor(a, b), a)\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(a) != length(b) \n        error(\"Strings must have same length\"\
    )\n    else \n        return chars(xor(ord(a), ord(b)))\nend", "    return bin(bin(a)\
    \ XOR bin(b))[2:]\nend", "    if length(a) == length(b) \n        then return\
    \ string_xor(string_xor(a, b), a)\n        else return string_xor(a, b)\n    else\
    \ return \"\"\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"\
    110\")\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal integer.\nThe function should take two arguments: a binary string\
    \ and a base (an integer between 2 and 36).\nThe function should return the decimal\
    \ integer represented by the binary string.\nThe function should raise an error\
    \ if the base is not between 2 and 36.\nThe function should raise an error if\
    \ the binary string contains more than 1 '1'.\nThe function should raise an error\
    \ if the binary string contains more than 1 '0'.\nThe function should raise an\
    \ error if the binary string contains more than 2 characters.\nThe function should\
    \ raise an error if the binary string contains more than 2 digits (i.e. if the\
    \ number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary string is not a multiple of 2).\nThe function\
    \ should raise an error if the binary string contains more than 2 digits (i.e.\
    \ if the number of digits in the binary ", "    if length(a) == length(b) \n \
    \       then return string_xor(string_xor(a, b), b)\n        else return string_xor(a,\
    \ string_xor(b, a))\n    else return \"\"\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of 1s in the string.\n>>> count_ones(\"\
    010\")\n2\n>>> count_ones(\"011\")\n1\n>>> count_ones(\"100\")\n1\n>>> count_ones(\"\
    101\")\n0\n>>> count_ones(\"110\")\n1\n>>> count_ones(\"111\")\n2\n>>> count_ones(\"\
    1010\")\n2\n>>> count_ones(\"1011\")\n1\n>>> count_ones(\"1110\")\n1\n>>> count_ones(\"\
    1111\")\n3\n>>> count_ones(\"11111\")\n4\n>>> count_ones(\"111111\")\n5\n>>> count_ones(\"\
    1111111\")\n6\n>>> count_ones(\"11111111\")\n7\n>>> count_ones(\"111111111\")\n\
    8\n>>> count_ones(\"1111111111\")\n9\n>>> count_ones(\"11111111111\")\n10\n>>>\
    \ count_ones(\"111111111111\")\n11\n>>> count_ones(\"1111111111111\")\n12\n>>>\
    \ count_ones(\"11111111111111\")\n13\n>>> count_ones(\"111111111111111\")\n14\n\
    >>> count_ones(\"111111111111111\")\n15\n>>> count_ones(\"111111111111111\")\n\
    16\n>>> count_ones(\"111111111111111\")\n17\n>>> count_ones(\"111111111111111\"\
    )\n18\n>>> count_ones(\"111111111111111\")\n19\n>>> count_ones(\"111111111111111\"\
    )\n20\n>>> count_ones(\"111111111111111\")\n21\n>>> count_ones(\"111111111111111\"\
    )\n22\n>>> count_ones(\"111111111111111\")\n23\n>>> count_ones(\"111111111111111\"\
    )\n24\n>>> count_ones(\"111111111111111\")\n25\n>>> count_ones(\"111111111111111\"\
    )\n26\n>>> count_ones(\"111111111111111\")\n27\n>>> count_ones(\"111111111111111\"\
    )\n28\n>>> count_ones(\"111111111111111\")\n29\n>>> count_ones(\"111111111111111\"\
    )\n30\n>>> count_ones(\"111111111111111\")\n31\n>>> count_ones(\"111111111111111\"\
    )\n32\n>>> count_ones(\"111111111111111\")\n33\n>>> count_ones(\"111111111111111\"\
    )\n34\n>>> count_ones(\"111111111111111\")\n35\n", "    if length(a) != length(b)\
    \ \n        error(\"Strings must have same length\")\n    elseif length(a) ==\
    \ 0 \n        error(\"Strings must have at least one character\")\n    elseif\
    \ length(a) == 1 \n        return b\n    elseif length(a) == 2 \n        return\
    \ a\n    elseif length(a) == 3 \n        return string_xor(a[1:2], b[1:2])\n \
    \   elseif length(a) == 4 \n        return string_xor(a[1:3], b[1:3])\n    elseif\
    \ length(a) == 5 \n        return string_xor(a[1:4], b[1:4])\n    elseif length(a)\
    \ == 6 \n        return string_xor(a[1:5], b[1:5])\n    elseif length(a) == 7\
    \ \n        return string_xor(a[1:6], b[1:6])\n    elseif length(a) == 8 \n  \
    \      return string_xor(a[1:7], b[1:7])\n    elseif length(a) == 9 \n       \
    \ return string_xor(a[1:8], b[1:8])\n    elseif length(a) == 10 \n        return\
    \ string_xor(a[1:9], b[1:9])\n    elseif length(a) == 11 \n        return string_xor(a[1:10],\
    \ b[1:10])\n    elseif length(a) == 12 \n        return string_xor(a[1:11], b[1:11])\n\
    \    elseif length(a) == 13 \n        return string_xor(a[1:12], b[1:12])\n  \
    \  elseif length(a) == 14 \n        return string_xor(a[1:13], b[1:13])\n    elseif\
    \ length(a) == 15 \n        return string_xor(a[1:14], b[1:14])\n    elseif length(a)\
    \ == 16 \n        return string_xor(a[1:15], b[1:15])\n    elseif length(a) ==\
    \ 17 \n        return string_xor(a[1:16], b[1:16])\n    elseif length(a) == 18\
    \ \n        return string_xor(a[1:17], b[1:17])\n    elseif length(a) == 19 \n\
    \        return string_xor(a[1:18], b[1:18])\n    elseif length(a) == 20 \n  \
    \      return string_xor(a[1:19], b[1:19])\n    elseif length(a) == 21 \n    \
    \    return string_xor(a[1:20], b[1:20])\n    elseif length(a) == 22 \n      \
    \  return string_xor(a[1:21], b[1:21])\n    elseif length(a) == 23 \n        return\
    \ string_xor(a[1:22], b[1:22])\n    elseif length(a) == 24 \n        return string_xor(a[1:23],\
    \ b[1:23])\n    elseif length(a) == 25 \n        return string_xor(a[1:24], b[1:24])\n\
    \    elseif length(a) == 26 \n        return string_xor(a[1:25], b[1:25])\n  \
    \  elseif length(a) == 27 \n        return string_xor(a[1:26], ", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) then\n\
    \        local c = 0\n        for i in a:gmatch(\"%d\") do c = c + i end\n   \
    \     return string(c == 0)\n    else\n        return \"\"\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    elseif length(a) == 0 \n        error(\"\
    Strings must have at least one character\")\n    elseif length(a) == 1 \n    \
    \    return b\n    elseif length(a) == 2 \n        return a xor b\n    elseif\
    \ length(a) == 3 \n        return a xor b xor c\n    elseif length(a) == 4 \n\
    \        return a xor b xor c xor d\n    elseif length(a) == 5 \n        return\
    \ a xor b xor c xor d xor e\n    elseif length(a) == 6 \n        return a xor\
    \ b xor c xor d xor e xor f\n    elseif length(a) == 7 \n        return a xor\
    \ b xor c xor d xor e xor f xor g\n    elseif length(a) == 8 \n        return\
    \ a xor b xor c xor d xor e xor f xor g xor h\n    elseif length(a) == 9 \n  \
    \      return a xor b xor c xor d xor e xor f xor g xor h xor i\n    elseif length(a)\
    \ == 10 \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor\
    \ j\n    elseif length(a) == 11 \n        return a xor b xor c xor d xor e xor\
    \ f xor g xor h xor i xor j xor k\n    elseif length(a) == 12 \n        return\
    \ a xor b xor c xor d xor e xor f xor g xor h xor i xor j xor k xor l\n    elseif\
    \ length(a) == 13 \n        return a xor b xor c xor d xor e xor f xor g xor h\
    \ xor i xor j xor k xor l xor m\n    elseif length(a) == 14 \n        return a\
    \ xor b xor c xor d xor e xor f xor g xor h xor i xor j xor k xor l xor m xor\
    \ n\n    elseif length(a) == 15 \n        return a xor b xor c xor d xor e xor\
    \ f xor g xor h xor i xor j xor k xor l xor m xor n xor o\n    elseif length(a)\
    \ == 16 \n        return a xor b xor ", "    if length(a) != length(b) \n    \
    \    error(\"Strings must have same length\")\n    elseif length(a) == 0 \n  \
    \      error(\"String is empty\")\n    elseif length(a) == 1 \n        return\
    \ b\n    else\n        return a^b\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(a) != length(b) then return \"Invalid input\"\n    else return string_xor(string_xor(a,b),string_xor(a,b))\
    \ end\nend\n</cell>\n<code language=julia-1.5>", "    if length(a) != length(b)\
    \ \n        error(\"Strings must have same length\")\n    elseif length(a) ==\
    \ 0 \n        error(\"String is empty\")\n    elseif length(a) == 1 \n       \
    \ return b\n    elseif length(a) == 2 \n        return a\n    elseif length(a)\
    \ == 3 \n        return a\n    elseif length(a) == 4 \n        return a\n    elseif\
    \ length(a) == 5 \n        return a\n    elseif length(a) == 6 \n        return\
    \ a\n    elseif length(a) == 7 \n        return a\n    elseif length(a) == 8 \n\
    \        return a\n    elseif length(a) == 9 \n        return a\n    elseif length(a)\
    \ == 10 \n        return a\n    elseif length(a) == 11 \n        return a\n  \
    \  elseif length(a) == 12 \n        return a\n    elseif length(a) == 13 \n  \
    \      return a\n    elseif length(a) == 14 \n        return a\n    elseif length(a)\
    \ == 15 \n        return a\n    elseif length(a) == 16 \n        return a\n  \
    \  elseif length(a) == 17 \n        return a\n    elseif length(a) == 18 \n  \
    \      return a\n    elseif length(a) == 19 \n        return a\n    elseif length(a)\
    \ == 20 \n        return a\n    elseif length(a) == 21 \n        return a\n  \
    \  elseif length(a) == 22 \n        return a\n    elseif length(a) == 23 \n  \
    \      return a\n    elseif length(a) == 24 \n        return a\n    elseif length(a)\
    \ == 25 \n        return a\n    elseif length(a) == 26 \n        return a\n  \
    \  elseif length(a) == 27 \n        return a\n    elseif length(a) == 28 \n  \
    \      return a\n    elseif length(a) == 29 \n        return a\n    elseif length(a)\
    \ == 30 \n        return a\n    elseif length(a) == 31 \n        return a\n  \
    \  elseif length(a) == 32 \n        return a\n    elseif length(a) == 33 \n  \
    \      return a\n    elseif length(a) == 34 \n        return a\n    elseif length(a)\
    \ == 35 \n        return a\n    elseif length(a) == 36 \n        return a\n  \
    \  elseif length(a) == 37 \n        return a\n    elseif length(a) == 38 \n  \
    \      return a\n    elseif length(a) == 39 \n        return a\n    elseif length(a)\
    \ == 40 \n        return a\n    elseif length(a) == 41 \n        return a\n  \
    \  elseif length(a) == 42 \n        return a\n    elseif length(a) == 43 \n  \
    \      return a\n    elseif length(a) == 44 \n        return a\n    elseif length(a)\
    \ == 45 \n        return a\n    elseif length(a) == 46 \n        return a\n  \
    \  elseif length(a) == 47 \n        return a\n    elseif length", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have the same length\")\n    else\
    \ \n        return a^b\nend\n</cell>\n<code language=julia-1.3>", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    elseif\
    \ length(a) == 0 \n        error(\"String is empty\")\n    elseif length(a) ==\
    \ 1 \n        return b\n    else\n        return (a^b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(a) == length(b) \n        then return \"\"\n        else return string_xor(string_xor(a,b),a)\n\
    \    else return string_xor(a,string_xor(b,a))\nend\n</cell>\n<code language=julia-1.4>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes two strings a and b as input and returns the number of times each character\
    \ appears in both strings.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    return a^b\nend", "    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    else \n        return bin(ord(a) ^ ord(b))\n\
    end\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that performs XOR on two strings and returns\
    \ the result as a string.\nThe function should take two strings as inputs and\
    \ return a single string as output.\nThe function should also handle errors by\
    \ printing a message and returning a default value.\nThe function should also\
    \ handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and returning a default value.\nThe function should\
    \ also handle invalid input by printing a message and returning a default value.\n\
    The function should also handle invalid input by printing a message and returning\
    \ a default value.\nThe function should also handle invalid input by printing\
    \ a message and returning a default value.\nThe function should also handle invalid\
    \ input by printing a message and return", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    elseif length(a) == 0 \n        error(\"\
    String is empty\")\n    elseif length(a) == 1 \n        return a\n    elseif length(a)\
    \ == 2 \n        return string_xor(a[1:], b[1:])\n    elseif length(a) == 3 \n\
    \        return string_xor(a[1:], b[1:2]) + a[1]\n    elseif length(a) == 4 \n\
    \        return string_xor(a[1:], b[1:3]) + a[1] + a[2]\n    elseif length(a)\
    \ == 5 \n        return string_xor(a[1:], b[1:4]) + a[1] + a[2] + a[3]\n    elseif\
    \ length(a) == 6 \n        return string_xor(a[1:], b[1:5]) + a[1] + a[2] + a[3]\
    \ + a[4]\n    elseif length(a) == 7 \n        return string_xor(a[1:], b[1:6])\
    \ + a[1] + a[2] + a[3] + a[4] + a[5]\n    elseif length(a) == 8 \n        return\
    \ string_xor(a[1:], b[1:7]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6]\n    elseif\
    \ length(a) == 9 \n        return string_xor(a[1:], b[1:8]) + a[1] + a[2] + a[3]\
    \ + a[4] + a[5] + a[6] + a[7]\n    elseif length(a) == 10 \n        return string_xor(a[1:],\
    \ b[1:9]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8]\n    elseif\
    \ length(a) == 11 \n        return string_xor(a[1:], b[1:10]) + a[1] + a[2] +\
    \ a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9]\n    elseif length(a) == 12 \n\
    \        return string_xor(a[1:], b[1:11]) + a[1] + a[2] + a[3] + a[4] + a[5]\
    \ + a[6] + a[7] + a[8] + a[9] + a[10]\n    elseif length(a) == 13 \n        return\
    \ string_xor(a[1:], b[1:12]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7]\
    \ + a[8] + a[9] + a[10] + a[11]\n    elseif length(a) == 14 \n        return string_xor(a[1:],\
    \ b[1:13]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6] + a[7] + a[8] + a[9] + a[10]\
    \ + a[11] + a[12]\n    elseif length(a) == 15 \n        return string_xor(a[1:],\
    \ b[1:14]) + a[1] + a[2] + a[3] + a[4] + a[5] + a[6", "    return a ^ b\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that performs bitwise AND on two strings a and b.\
    \ \n    Input are two strings a and b consisting only of 1s and 0s.\n    Perform\
    \ binary AND on these inputs and return result also as a string.\n    >>> string_and('010',\
    \ '110')\n    '10'\n    \"\"\"", "    \n    if length(a) == length(b) \n     \
    \   \n        \n        \n        \n        \n        \n        \n        \n \
    \       \n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) then\n\
    \        local result = \"\"\n        for i = 1, length(a) do\n            result\
    \ = (result + tostring(a[i]) ^ tostring(b[i]))\n        end\n        return result\n\
    \    else\n        return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of 1s in the string.\n>>> count_ones(\"\
    010\")\n3\n>>> count_ones(\"1010\")\n4\n>>> count_ones(\"01010\")\n5\n>>> count_ones(\"\
    010100\")\n6\n>>> count_ones(\"01010001\")\n7\n>>> count_ones(\"010100011010\"\
    )\n8\n>>> count_ones(\"0101000110100\")\n9\n>>> count_ones(\"010100011010001\"\
    )\n10\n>>> count_ones(\"0101000110100011010\")\n11\n>>> count_ones(\"01010001101000110100\"\
    )\n12\n>>> count_ones(\"0101000110100011010001\")\n13\n>>> count_ones(\"01010001101000110100011010\"\
    )\n14\n>>> count_ones(\"010100011010001101000110100\")\n15\n>>> count_ones(\"\
    01010001101000110100011010001\")\n16\n>>> count_ones(\"010100011010001101000110100011010\"\
    )\n17\n>>> count_ones(\"0101000110100011010001101000110100\")\n18\n>>> count_ones(\"\
    010100011010001101000110100011010001\")\n19\n>>> count_ones(\"0101000110100011010001101000110100011010\"\
    )\n20\n>>> count_ones(\"01010001101000110100011010001101000110100\")\n21\n>>>\
    \ count_ones(\"0101000110100011010001101000110100011010001\")\n22\n>>> count_ones(\"\
    01010001101000110100011010001101000110100011010\")\n23\n>>> count_ones(\"010100011010001101000110100011010001101000110100\"\
    )\n24\n>>> count_ones(\"0101000110", "    if length(a) != length(b) \n       \
    \ error(\"Strings must have the same length\")\n    else \n        return string(a)\
    \ ^ string(b)\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"\
    110\")\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal integer. \nThe input is a string consisting of 0s and 1s.\nThe\
    \ output is an integer that represents the binary string in decimal.\nThe function\
    \ should raise an error if the input string is not in binary form.\nThe function\
    \ should raise an error if the input string contains more than 1 '1'.\nThe function\
    \ should raise an error if the input string contains more than 1 '0'.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bits.\nThe function\
    \ should raise an error if the input string contains more than 8 bit", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n        then\
    \ return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that performs binary AND on two\
    \ strings a and b consisting only of 1s and 0s.\n    Perform binary AND on these\
    \ inputs and return result also as a string.\n    >>> string_and('010', '110')\n\
    \    '100'\n    \"\"\"", "    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    else \n        string_xor = zeros(length(a))\n\
    \        for i in 1:length(a)\n            string_xor[i] = (a[i] ^ b[i])\n   \
    \     end\n        return string_xor\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    string_xor(a::String, b::String)::String", "    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if a==\"\" || b==\"\"\n        return\
    \ \"\"\n    elseif a==b\n        return a\n    else\n        return (a^b)\n  \
    \  end\nend", "    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(a) != length(b) \n       \
    \ error(\"Input strings are not same length\")\n    elseif length(a) == 0 \n \
    \       error(\"Input string is empty\")\n    elseif length(a) == 1 \n       \
    \ return b\n    elseif length(a) == 2 \n        return a\n    elseif length(a)\
    \ == 3 \n        return string_xor(a[1:2], b[1:2])\n    elseif length(a) == 4\
    \ \n        return string_xor(a[1:3], b[1:3])\n    elseif length(a) == 5 \n  \
    \      return string_xor(a[1:4], b[1:4])\n    elseif length(a) == 6 \n       \
    \ return string_xor(a[1:5], b[1:5])\n    elseif length(a) == 7 \n        return\
    \ string_xor(a[1:6], b[1:6])\n    elseif length(a) == 8 \n        return string_xor(a[1:7],\
    \ b[1:7])\n    elseif length(a) == 9 \n        return string_xor(a[1:8], b[1:8])\n\
    \    elseif length(a) == 10 \n        return string_xor(a[1:9], b[1:9])\n    elseif\
    \ length(a) == 11 \n        return string_xor(a[1:10], b[1:10])\n    elseif length(a)\
    \ == 12 \n        return string_xor(a[1:11], b[1:11])\n    elseif length(a) ==\
    \ 13 \n        return string_xor(a[1:12], b[1:12])\n    elseif length(a) == 14\
    \ \n        return string_xor(a[1:13], b[1:13])\n    elseif length(a) == 15 \n\
    \        return string_xor(a[1:14], b[1:14])\n    elseif length(a) == 16 \n  \
    \      return string_xor(a[1:15], b[1:15])\n    elseif length(a) == 17 \n    \
    \    return string_xor(a[1:16], b[1:16])\n    elseif length(a) == 18 \n      \
    \  return string_xor(a[1:17], b[1:17])\n    elseif length(a) == 19 \n        return\
    \ string_xor(a[1:18], b[1:18])\n    elseif length(a) == 20 \n        return string_xor(a[1:19],\
    \ b[1:19])\n    elseif length(a) == 21 \n        return string_xor(a[1:20], b[1:20])\n\
    \    elseif length(a) == 22 \n        return string_xor(a[1:21], b[1:21])\n  \
    \  elseif length(a) == 23 \n        return string_xor(a[1:22], b[1:22])\n    elseif\
    \ length(a) == 24 \n        return string_xor(a[1:23], b[1:23])\n    elseif length(a)\
    \ == 25 \n        return string_xor(a[1:24], b[1:24])\n    elseif length(a) ==\
    \ 26 \n        return string_xor(a[1:25], b[1:25])\n    elseif length(a) == 27\
    \ \n        return string_xor(a[1:26], b[1:", "    return a xor b\nend", "   \
    \ \n    \n    if length(a) == length(b) \n        \n        if length(a) == 1\
    \ \n            \n            return b\n            \n        else \n        \
    \    \n            return a\n            \n    else \n        \n        return\
    \ a\n    \nend\n</cell>\n<code language=julia-1.5>\nstring_xor('010', '110')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the string with all characters that are not digits removed.", "    if\
    \ length(a) != length(b) \n        error(\"Input strings have different lengths\"\
    ) \n    else \n        return char(xor(ord(a), ord(b))) \nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    string_xor(a::String, b::String)::String",
  "    if length(a) != length(b) \n        error(\"Strings must have same length\"\
    )\n    elseif length(a) == 0 \n        error(\"Strings must have at least one\
    \ character\")\n    elseif length(a) == 1 \n        return b\n    else\n     \
    \   return a^b\nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if length(a) != length(b) \n\
    \        error(\"Strings must have same length\")\n    end\n    \n    ans = \"\
    \"\n    for (i in 1:length(a))\n        ans = ans + char(a[i]) ^ char(b[i])\n\
    \    end\n    return ans\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"\
    010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of times each character appears in the string.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) != length(b) then return\
    \ \"Invalid input\"\n    else return string_xor(string_xor(a,b),string_xor(b,a))\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(a) != length(b) \n  \
    \      error(\"Strings must have same length\")\n    elseif length(a) == 0 \n\
    \        error(\"Strings must have at least one character\")\n    elseif length(a)\
    \ == 1 \n        return b\n    else\n        return a^b\nend\n</cell>\n<code language=julia-1.3>",
  "    if length(a) == length(b) \n        then return \"\"\n        else return string_xor(string_xor(a,\
    \ b), a)\n    else return \"\"\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(a)\
    \ == length(b) \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n",
  "    if length(a) == length(b) then\n        local result = \"\"\n        for i\
    \ = 1, length(a) do\n            local c = a[i] xor b[i]\n            result =\
    \ (result + string(c))\n        end\n        return result\n    else\n       \
    \ return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if length(a) == length(b) \n        then return string_xor(string_xor(a, b),\
    \ b)\n        else return string_xor(a, string_xor(a, b))\n    else return \"\"\
    \nend\n</cell>\n<code language=julia-1.4>", "    if length(a) == length(b) then\n\
    \        return ''\n    elseif length(a) > length(b) then\n        return string_xor(b,\
    \ a)\n    else\n        return string_xor(a, b) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a, b), a)\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the number of 1s\
    \ in the string.\nFor example string_count(\"010\") should return 3.\nHint: Use\
    \ a for loop to iterate over the characters in the string.", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    elseif\
    \ length(a) == 0 \n        error(\"Strings must have length > 0\")\n    elseif\
    \ length(a) == 1 \n        return b\n    elseif length(a) == 2 \n        return\
    \ a xor b\n    elseif length(a) == 3 \n        return a xor b xor c\n    elseif\
    \ length(a) == 4 \n        return a xor b xor c xor d\n    elseif length(a) ==\
    \ 5 \n        return a xor b xor c xor d xor e\n    elseif length(a) == 6 \n \
    \       return a xor b xor c xor d xor e xor f\n    elseif length(a) == 7 \n \
    \       return a xor b xor c xor d xor e xor f xor g\n    elseif length(a) ==\
    \ 8 \n        return a xor b xor c xor d xor e xor f xor g xor h\n    elseif length(a)\
    \ == 9 \n        return a xor b xor c xor d xor e xor f xor g xor h xor i\n  \
    \  elseif length(a) == 10 \n        return a xor b xor c xor d xor e xor f xor\
    \ g xor h xor i xor j\n    elseif length(a) == 11 \n        return a xor b xor\
    \ c xor d xor e xor f xor g xor h xor i xor j xor k\n    elseif length(a) == 12\
    \ \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor j xor\
    \ k xor l\n    elseif length(a) == 13 \n        return a xor b xor c xor d xor\
    \ e xor f xor g xor h xor i xor j xor k xor l xor m\n    elseif length(a) == 14\
    \ \n        return a xor b xor c xor d xor e xor f xor g xor h xor i xor j xor\
    \ k xor l xor m xor n\n    elseif length(a) == 15 \n        return a xor b xor\
    \ c xor d xor e xor f xor g xor h xor i xor j xor k xor l xor m xor n xor o\n\
    \    elseif length(a) == 16 \n        return a xor b xor c ", "    if length(a)\
    \ == length(b) \n        then return string_xor(string_xor(a,b),a)\n        else\
    \ return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) ==\
    \ length(b) then \n        string_xor_res = ''\n        for i in a:\n        \
    \    string_xor_res = string_xor_res + string_reverse(i)\n        for i in b:\n\
    \            string_xor_res = string_xor_res + string_reverse(i)\n        return\
    \ string_xor_res \n    else \n        return '0'\nend\n</cell>\n<code language=julia-1.4>\n\
    string_xor('010', '110')\n</cell>\n<code language=julia-1.4>", "    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(a) != length(b) \n        error(\"\
    Strings must have same length\")\n    elseif length(a) == 0 \n        error(\"\
    Strings must have length > 0\")\n    elseif length(a) == 1 \n        return b\n\
    \    else\n        return a^b\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if length(a) != length(b) \n        error(\"Strings must have same length\"\
    )\n    else \n        string_xor = zeros(length(a))\n        for i in 1:length(a)\n\
    \            string_xor[i] = (a[i] != b[i]) ? 1 : 0\n        end\n        return\
    \ string_xor\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    string_xor(a::String,\
    \ b::String)::String\n    Perform binary XOR on two strings a and b and return\
    \ result as a string.\n    >>> string_xor('010', '110')\n    '100'\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    if length(a) == length(b) \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n", "    if length(a) == length(b) \n\
    \        then return string_xor(string_xor(a, b), a)\n        else return string_xor(a,\
    \ string_xor(b, a))\n    else return \"\"\nend\n</cell>\n<code language=julia-1.5>",
  "    return (a^b)\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\",\
    \ \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of 1s in the string.\n>>> count_ones(\"010\"\
    )\n2\n>>> count_ones(\"0101\")\n3\n>>> count_ones(\"1010\")\n1\n>>> count_ones(\"\
    1111\")\n0\n>>> count_ones(\"11111\")\n1\n>>> count_ones(\"111111\")\n2\n>>> count_ones(\"\
    1111111\")\n3\n>>> count_ones(\"11111111\")\n4\n>>> count_ones(\"111111111\")\n\
    5\n>>> count_ones(\"1111111111\")\n6\n>>> count_ones(\"11111111111\")\n7\n>>>\
    \ count_ones(\"111111111111\")\n8\n>>> count_ones(\"1111111111111\")\n9\n>>> count_ones(\"\
    11111111111111\")\n10\n>>> count_ones(\"111111111111111\")\n11\n>>> count_ones(\"\
    111111111111111\")\n12\n>>> count_ones(\"111111111111111\")\n13\n>>> count_ones(\"\
    111111111111111\")\n14\n>>> count_ones(\"111111111111111\")\n15\n>>> count_ones(\"\
    111111111111111\")\n16\n>>> count_ones(\"111111111111111\")\n17\n>>> count_ones(\"\
    111111111111111\")\n18\n>>> count_ones(\"111111111111111\")\n19\n>>> count_ones(\"\
    111111111111111\")\n20\n>>> count_ones(\"111111111111111\")\n21\n>>> count_ones(\"\
    111111111111111\")\n22\n>>> count_ones(\"111111111111111\")\n23\n>>> count_ones(\"\
    111111111111111\")\n24\n>>> count_ones(\"111111111111111\")\n25\n>>> count_ones(\"\
    111111111111111\")\n26\n>>> count_ones(\"111111111111111\")\n27\n>>> count_ones(\"\
    111111111111111\")\n28\n>>> count_ones(\"111111111111111\")\n29\n>>> count_ones(\"\
    111111111111111\")\n30\n>>> count_ones(\"111111111111111\")\n31\n>>> count_ones(\"\
    111111111111111\")\n32\n>>> count_ones(\"111111111111111\")\n33\n>>> count_ones(\"\
    111111111111111\")\n34\n>>> count_ones(\"111111111111111\")\n35\n>>> count_ones(\"\
    111111111111111\")\n36\n>>> count_ones(\"111111111111111\")\n37\n>>> count_ones(\"\
    111111111111111\")\n38\n>>> count_ones(\"111111111111111\")\n39\n>>> count_ones(\"\
    111111111111111\")", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) !=\
    \ length(b) \n        error(\"Strings must have same length\")\n    elseif length(a)\
    \ == 0 \n        error(\"Strings cannot be empty\")\n    elseif length(a) == 1\
    \ \n        return b\n    else\n        return a^b\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) != length(b) then return\
    \ \"Invalid input\"\n    else return (a .^ b)\nend\n</cell>\n<code language=julia-1.4>",
  "    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(a) == length(b) \n        then return \"\
    \"\n        else return string_xor(string_xor(a, b), a)\n    end\n    ", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    return a.chars.zip(b).map(|(a,\
    \ b)| a ^ b).collect::String\nend", "    if length(a) == length(b) \n        then\
    \ return a\n        else return b\n    else return b\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) != length(b) then return \"Invalid input\"\
    \n    else return (a .- b) .* a\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    if length(a) != length(b) \n        error(\"Input strings have different\
    \ lengths!\")\n    \n    ans = \"\"\n    for i in each(a) \n        ans = ans\
    \ + char2int(b[i])\n    end\n    return ans\nend\n</cell>\n<code language=julia-1.5>",
  "    if a==b\n        return a\n    else\n        return \"\"\n    end\nend\n</cell>\n\
    <code language=julia-1.4>", "    return bin(a) ^ bin(b)\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ converts a binary string to a decimal integer. \nThe function should accept\
    \ a binary string as an argument and return the decimal integer as a string.\n\
    The function should raise an error if the input string contains non-binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters.\nThe function should raise an error if the input string\
    \ contains less than 32 binary characters.\nThe function should raise an error\
    \ if the input string contains more than 32 binary characters.\nThe function should\
    \ raise an error if the input string contains less than 32 binary characters.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ less than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains more than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains less than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\n\
    The function should raise an error if the input string contains less than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ more than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains less than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains more than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains less than 32 binary characters.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ less than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains more than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains less than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\n\
    The function should raise an error if the input string contains less than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ more than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains less than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains more than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains less than 32 binary characters.\n\
    The function should raise an error if the input string contains more than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ less than 32 binary characters.\nThe function should raise an error if the input\
    \ string contains more than 32 binary characters.\nThe function should raise an\
    \ error if the input string contains less than 32 binary characters.\nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\n\
    The function should raise an error if the input string contains less than 32 binary\
    \ characters.\nThe function should raise an error if the input string contains\
    \ more than 32 ", "    if a==\"\" || b==\"\"\n        return \"\"\n    elseif\
    \ a==b\n        return a\n    else\n        return string_xor(a[1:], b) + a[0]\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(a) == length(b) \n  \
    \      then return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == length(b) then\n        local result = \"\"\n        for i\
    \ in a:gmatch(\"%d\") do \n            local c = tostring(i) ^ tostring(b[i])\n\
    \            result += tostring(c)\n        end\n        return result\n    else\n\
    \        return \"Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) !=\
    \ length(b) \n        error(\"Strings must have same length\")\n    else \n  \
    \      return a^b\nend\n</cell>\n<code language=julia-1.0>", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    elseif\
    \ length(a) == 0 \n        error(\"Strings must have at least one character\"\
    )\n    elseif length(a) == 1 \n        return b\n    else\n        return (a^b)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of times each character appears in the string.\nFor example,\
    \ if the input string is \"abcabc\", the function should return {\"a\" => 3, \"\
    b\" => 2, \"c\" => 3}.\nIf the input string is empty, return an empty dictionary.\n\
    If the input string has length other than 1, return an empty dictionary.", " \
    \   if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if length(a) == length(b) \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n", "    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), a)\n        else return string_xor(a, string_xor(b, a))\n    else return\
    \ \"\"\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the string with all characters that are not alphabetic removed. \nFor\
    \ example if the input is \"010110\" the output should be \"010\".", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if a==\"\" || b==\"\"\
    \n        return \"\"\n    elseif a==b\n        return a\n    else\n        return\
    \ (a^b)\n    end\nend\n</cell>\n<code language=julia-1.0>", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n    \
    \    then return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    else return \"\"\nend\n</cell>\n<code language=julia-1.5>", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    elseif\
    \ length(a) == 0 \n        error(\"String is empty\")\n    elseif length(a) ==\
    \ 1 \n        return b\n    elseif length(a) == 2 \n        return (a[1]) xor\
    \ (a[0])\n    elseif length(a) == 3 \n        return (a[2]) xor (a[1]) xor (a[0])\n\
    \    elseif length(a) == 4 \n        return (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n\
    \    elseif length(a) == 5 \n        return (a[4]) xor (a[3]) xor (a[2]) xor (a[1])\
    \ xor (a[0])\n    elseif length(a) == 6 \n        return (a[5]) xor (a[4]) xor\
    \ (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 7 \n      \
    \  return (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n\
    \    elseif length(a) == 8 \n        return (a[7]) xor (a[6]) xor (a[5]) xor (a[4])\
    \ xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 9 \n  \
    \      return (a[8]) xor (a[7]) xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor\
    \ (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 10 \n        return (a[9])\
    \ xor (a[8]) xor (a[7]) xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor (a[2])\
    \ xor (a[1]) xor (a[0])\n    elseif length(a) == 11 \n        return (a[10]) xor\
    \ (a[9]) xor (a[8]) xor (a[7]) xor (a[6]) xor (a[5]) xor (a[4]) xor (a[3]) xor\
    \ (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 12 \n        return (a[11])\
    \ xor (a[10]) xor (a[9]) xor (a[8]) xor (a[7]) xor (a[6]) xor (a[5]) xor (a[4])\
    \ xor (a[3]) xor (a[2]) xor (a[1]) xor (a[0])\n    elseif length(a) == 13 \n \
    \       return (a[12]) xor (a[11]) ", "    if length(a) == length(b) \n      \
    \  then return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    end\n    if length(a) == 0 \n        then return b\n    else if length(b)\
    \ == 0 \n        then return a\n    else if a[1] == '0' and b[1] == '0' \n   \
    \     then return string_xor(a[2:length(a)],b[2:length(b)])\n    else return a[1]\
    \ == '0' ? string_xor(a[2:length(a)],b) : string_xor(a[1:length(a)],b[1:length(b)])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of 1s in the string.", "    if length(a) == length(b)\
    \ \n        then return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    end\n    ", "    return string_to_bits(a) ^ string_to_bits(b)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    string_xor(a::String, b::String)::String\n\
    \    Perform binary XOR on two strings a and b and return result as a string.\n\
    \    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "    return a^b\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the number\
    \ of characters in the string.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse this function to find the number of characters\
    \ in the string \"Hello World!\".\nPrint the result of the function to the screen.\n\
    Use this function to find the number of characters in the string \"Hello World!\"\
    .\nPrint the result of the function to the screen.\nUse this function to find\
    \ the number of characters in the string \"Hello World!\".\nPrint the result of\
    \ the function to the screen.\nUse ", "    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) != length(b) \n        error(\"Strings\
    \ must have same length\")\n    elseif length(a) == 0 \n        error(\"String\
    \ a is empty\")\n    elseif length(b) == 0 \n        error(\"String b is empty\"\
    )\n    elseif length(a) == 1 \n        return b\n    elseif length(b) == 1 \n\
    \        return a\n    elseif a[0] != b[0] \n        error(\"Strings must have\
    \ same first character\")\n    elseif a[1] != b[1] \n        error(\"Strings must\
    \ have same second character\")\n    else\n        return a[1] ^ b[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.4>", "    if length(a) != length(b) \n  \
    \      error(\"Strings must have same length\")\n    else \n        return ''.join(map(str,\
    \ map(xor, a, b)))\nend\n</cell>\n<code language=julia-1.5>", "    if length(a)\
    \ != length(b) \n        error(\"Input strings have different lengths\") \n  \
    \  else \n        string_xor = zeros(length(a))\n        for i in 1:length(a)\n\
    \            string_xor[i] = (a[i] ^ b[i])\n        end\n        return string_xor\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == length(b) \n        then return \"\"\
    \n        else return string_xor(string_xor(a,b),string_xor(b,a))\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string as input and returns the number\
    \ of occurrences of \"0\" in that string.", "    if length(a) != length(b) then\
    \ return \"Error\" else return a^b end\nend\n</cell>\n<code language=julia-1.5>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two strings a and b as input and returns the number of characters that\
    \ are different between the two strings.", "    if length(a) != length(b) then\
    \ return \"Invalid input\" else return (a xor b) end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(a) != length(b) \n        error(\"Strings must have same length\"\
    )\n    elseif length(a) == 0 \n        error(\"Strings must have length > 0\"\
    )\n    elseif length(a) == 1 \n        return b\n    else\n        bits = zeros(length(a))\n\
    \        for i in 1:length(a)\n            bits[i] = (a[i] ^ b[i])\n        end\n\
    \        return string(bits)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    string_xor(a::String, b::String)::String", "    if length(a) == length(b)\
    \ \n        then return \"\"\n        else return string_xor(string_xor(a, b),\
    \ b)\n    end\n    \n\"\"\"\n    string_xor(a::String, b::String)::String\n  \
    \  Perform binary XOR on two strings a and b and return result as a string.\n\
    \    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n    \
    \    then return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    else return \"\"\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"\
    010\", \"110\")\n</cell>\n<text>\nExercise 3\nWrite a function that converts a\
    \ binary string to a decimal integer. \nThe function should accept a binary string\
    \ as input and return a decimal integer as output. \nThe decimal integer should\
    \ be represented as a string.\nThe function should raise an error if the input\
    \ string contains non-binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should raise an error if the input string contains more than\
    \ 32 binary characters. \nThe function should raise an error if the input string\
    \ contains more than 32 binary characters. \nThe function should raise an error\
    \ if the input string contains more than 32 binary characters. \nThe function\
    \ should raise an error if the input string contains more than 32 binary characters.\
    \ \nThe function should ", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\nstring_xor(\"010\", \"110\")\n</cell>\n<code language=julia-1.0>",
  "    return a^b\nend\n</cell>\n<code language=julia-1.0>\nstring_xor(\"010\", \"\
    110\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes two strings as\
    \ input and returns the number of characters that are different between the two\
    \ strings. \nThe function should ignore the case of the characters. \nThe function\
    \ should ignore spaces.\nThe function should ignore punctuation. \nThe function\
    \ should ignore empty strings.\nThe function should ignore all non-alphabetic\
    \ characters. \nThe function should ignore all non-alphanumeric characters. \n\
    The function should ignore all non-numeric characters.\nThe function should ignore\
    \ all non-alphabetic and non-alphanumeric characters.\nThe function should ignore\
    \ all non-numeric characters.\nThe function should ignore all non-alphabetic and\
    \ non-alphanumeric characters.\nThe function should ignore all non-numeric characters.\n\
    The function should ignore all non-alphabetic and non-alphanumeric characters.\n\
    The function should ignore all non-numeric characters.\nThe function should ignore\
    \ all non-alphabetic and non-alphanumeric characters.\nThe function should ignore\
    \ all non-numeric characters.\nThe function should ignore all non-alphabetic and\
    \ non-alphanumeric characters.\nThe function should ignore all non-numeric characters.\n\
    The function should ignore all non-alphabetic and non-alphanumeric characters.\n\
    The function should ignore all non-numeric characters.\nThe function should ignore\
    \ all non-alphabetic and non-alphanumeric characters.\nThe function should ignore\
    \ all non-numeric characters.\nThe function should ignore all non-alphabetic and\
    \ non-alphanumeric characters.\nThe function should ignore all non-numeric characters.\n\
    The function should ignore all non-alphabetic and non-alphanumeric characters.\n\
    The function should ignore all non-numeric characters.\nThe function should ignore\
    \ all non-alphabetic and non-alphanumeric characters.\nThe function should ignore\
    \ all non-numeric characters.\nThe function should ignore all non-alphabetic and\
    \ non-alphanumeric characters.\nThe function should ignore all non-numeric characters.\n\
    The function should ignore all non-alphabetic and non-alphanumeric characters.\n\
    The function should ignore all non-numeric characters.\nThe function should ignore\
    \ all non-alphabetic and non-alphanumeric characters.\nThe function should ignore\
    \ all non-numeric characters.\nThe function should ignore all non-alphabetic and\
    \ non-alphanumeric characters.\nThe function should ignore all non-numeric characters.\n\
    The function should ignore all non-alphabetic and non-alphanumeric characters.\n\
    The function should ignore all non-numeric characters.\nThe function should ignore\
    \ all non-alphabetic and non-alphanumeric characters.\nThe function ", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    if length(a) == length(b) \n        then\
    \ return string_xor(string_xor(a,b),a)\n        else return string_xor(a,string_xor(b,a))\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that converts a binary string\
    \ to a decimal integer. \nThe function should take one string as input and return\
    \ the decimal integer represented by the string.\nThe function should raise an\
    \ error if the string contains non-binary digits. \nThe function should raise\
    \ an error if the string contains more than 32 binary digits. \nThe function should\
    \ raise an error if the string contains leading zeroes. \nThe function should\
    \ raise an error if the string contains leading zeroes and more than 32 binary\
    \ digits. \nThe function should raise an error if the string contains leading\
    \ zeroes and more than 32 binary digits and a leading '1'. \nThe function should\
    \ raise an error if the string contains leading zeroes and more than 32 binary\
    \ digits and a leading '0'. \nThe function should raise an error if the string\
    \ contains leading zeroes and more than 32 binary digits and a leading '0' and\
    \ a leading '1'. \nThe function should raise an error if the string contains leading\
    \ zeroes and more than 32 binary digits and a leading '0' and a leading '0' and\
    \ a leading '1'. \nThe function should raise an error if the string contains leading\
    \ zeroes and more than 32 binary digits and a leading '0' and a leading '0' and\
    \ a leading '0' and a leading '1'. \nThe function should raise an error if the\
    \ string contains leading zeroes and more than 32 binary digits and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '1'.\
    \ \nThe function should raise an error if the string contains leading zeroes and\
    \ more than 32 binary digits and a leading '0' and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '1'.\
    \ \nThe function should raise an error if the string contains leading zeroes and\
    \ more than 32 binary digits and a leading '0' and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '0'\
    \ and a leading '0' and a leading '0' and a leading '0' and a leading '0' and\
    \ a leading '0' and a leading '0' and a leading '0' and a leading '0' and a leading\
    \ '0' and a leading '0' and a leading '0' and a leading '0' and a leading '0'\
    \ and a leading '0' and a leading '0' and a leading '0' and a leading '0' and\
    \ a leading '0' and a leading '0' and a leading '0' and a leading '0' and a leading\
    \ '0' and a leading '0' ", "    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if\
    \ length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    if length(a) == length(b) \n        \n    \
    \    \n        if length(a) == 0 \n            return b\n        \n        if\
    \ length(b) == 0 \n            return a\n        \n        \n        if a[0] ==\
    \ b[0] \n            return string_xor(a[1:], b[1:])\n        \n        if a[0]\
    \ == b[-1] \n            return string_xor(a[1:], b[:-1])\n        \n        if\
    \ a[-1] == b[0] \n            return string_xor(a[:-1], b[1:])\n        \n   \
    \     if a[-1] == b[-1] \n            return string_xor(a[:-1], b[:-1])\n    \
    \    \n        \n    else \n        \n        if length(a) > length(b) \n    \
    \        return string_xor(b, a)\n        \n        if length(a) < length(b) \n\
    \            return string_xor(a, b)\n        \n        if a[0] == b[0] \n   \
    \         return string_xor(a[1:], b[1:])\n        \n        if a[0] == b[-1]\
    \ \n            return string_xor(a[1:], b[:-1])\n        \n        if a[-1] ==\
    \ b[0] \n            return string_xor(a[:-1], b[1:])\n        \n        if a[-1]\
    \ == b[-1] \n            return string_xor(a[:-1], b[:-1])\n        \n       \
    \ \nend\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    return string_to_bits(a) ^ string_to_bits(b)\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(a) == length(b) then \n        string_xor_res\
    \ = \"\"\n        for i in eachindex(a) do \n            string_xor_res = string_xor_res\
    \ + char(a[i]) ^ char(b[i]) \n        return string_xor_res \n    else \n    \
    \    return \"Invalid input\" \nend\n</cell>\n<code language=julia-1.4>", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) !=\
    \ length(b) \n        error(\"Strings must have same length\")\n    elseif length(a)\
    \ == 0 \n        error(\"Strings must have length > 0\")\n    elseif length(a)\
    \ == 1 \n        return a\n    else\n        return a^b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    string_xor(a::String, b::String)::String\n\
    \    Perform binary XOR on two strings a and b and return result also as a string.\n\
    \    >>> string_xor('010', '110')\n    '100'\n    \"\"\"", "    if length(a) ==\
    \ length(b) \n        then return string_xor(string_xor(a,b),a)\n        else\
    \ return string_xor(a,string_xor(b,a))\n    else return \"\"\nend\n</cell>\n<code\
    \ language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string. \nFor example the string \"abcabc\" would\
    \ return {\"a\":3, \"b\":2, \"c\":3}.\nThe function should work for strings of\
    \ any length.\nThe function should work for strings of any character type.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    if length(a) != length(b) \n    \
    \    error(\"Strings must have same length\")\n    else \n        string_xor =\
    \ zeros(length(a))\n        for i in 1:length(a)\n            string_xor[i] =\
    \ (a[i] ^ b[i])\n        end\n        return string_xor\nend\n</cell>\n<code language=julia-1.3>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ converts a binary string to a decimal integer. \nThe function should take a\
    \ string as input and return the decimal integer as output.\nThe input string\
    \ may contain leading zeros, for example, \"010\" should return 10.\nThe function\
    \ should raise an error if the input string contains non-binary characters, for\
    \ example, \"abc\" should raise an error.\nThe function should raise an error\
    \ if the input string contains more than 32 characters, for example, \"123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789012345678901234567890123456789",
  "    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(a) == length(b) then \n        string_xor_res = \"\"\n        for\
    \ i in each(a) do \n            string_xor_res = string_xor_res + char2int(b)\
    \ \n        end\n        return string_xor_res \n    else \n        return \"\
    Invalid input\"\n    end\nend\n</cell>\n<code language=julia-1.4>", "    if length(a)\
    \ == length(b) \n        then return string_xor(string_xor(a,b),a)\n        else\
    \ return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    string_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns the number of times each character appears\
    \ in the string.", "    \n    if length(a) == length(b) \n        \n        if\
    \ length(a) == 0 \n            return b \n        \n        if length(b) == 0\
    \ \n            return a \n        \n        if a[0] == b[0] \n            return\
    \ string_xor(a[1:], b[1:]) \n        \n        if a[0] != b[0] \n            return\
    \ string_xor(a[1:], b) \n        \n    else \n        return \"\"\nend\n</cell>\n\
    <code language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string.\nThe function should ignore case when\
    \ counting characters.\nThe function should ignore non-alphabetic characters (punctuation,\
    \ spaces, etc).\nThe function should ignore empty strings.\nThe function should\
    \ ignore duplicate characters.\nThe function should ignore leading or trailing\
    \ spaces.\nThe function should ignore leading or trailing punctuation.\nThe function\
    \ should ignore leading or trailing digits.\nThe function should ignore leading\
    \ or trailing spaces and punctuation.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and punctuation and digits.\nThe function should ignore leading or trailing\
    \ spaces and ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if length(a) == length(b) then \n        string_xor_res = \"\"\n        for\
    \ i in a:\n            string_xor_res = string_xor_res + string_to_int(i) ^ string_to_int(b)\
    \ \n        return string_xor_res \n    else \n        return \"Invalid input\"\
    \nend\n</cell>\n<code language=julia-1.3>\nstring_xor(\"010\", \"110\")\n</cell>\n\
    <text>\nExercise 3\nWrite a Julia function which performs XOR on two strings a\
    \ and b and returns result as a string.\nThe function should return an error if\
    \ any of the inputs are of invalid lengths.\nThe function should return an error\
    \ if any of the inputs are of invalid characters.\nThe function should return\
    \ an error if any of the inputs are of invalid characters.\nThe function should\
    \ return an error if any of the inputs are of invalid characters.\nThe function\
    \ should return an error if any of the inputs are of invalid characters.\nThe\
    \ function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function should return an error if any of the inputs are of invalid characters.\n\
    The function ", "    if length(a) == length(b) \n        then return string_xor(string_xor(a,\
    \ b), a)\n        else return string_xor(b, a)\n    else return \"\"\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    string_xor(a::String, b::String)::String",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) !=\
    \ length(b) \n        error(\"Strings must have same length\")\n    elseif length(a)\
    \ == 0 \n        error(\"Strings must have length > 0\")\n    elseif length(a)\
    \ == 1 \n        return b\n    elseif length(a) == 2 \n        return a\n    elseif\
    \ length(a) == 3 \n        return a\n    elseif length(a) == 4 \n        return\
    \ a\n    elseif length(a) == 5 \n        return a\n    elseif length(a) == 6 \n\
    \        return a\n    elseif length(a) == 7 \n        return a\n    elseif length(a)\
    \ == 8 \n        return a\n    elseif length(a) == 9 \n        return a\n    elseif\
    \ length(a) == 10 \n        return a\n    elseif length(a) == 11 \n        return\
    \ a\n    elseif length(a) == 12 \n        return a\n    elseif length(a) == 13\
    \ \n        return a\n    elseif length(a) == 14 \n        return a\n    elseif\
    \ length(a) == 15 \n        return a\n    elseif length(a) == 16 \n        return\
    \ a\n    elseif length(a) == 17 \n        return a\n    elseif length(a) == 18\
    \ \n        return a\n    elseif length(a) == 19 \n        return a\n    elseif\
    \ length(a) == 20 \n        return a\n    elseif length(a) == 21 \n        return\
    \ a\n    elseif length(a) == 22 \n        return a\n    elseif length(a) == 23\
    \ \n        return a\n    elseif length(a) == 24 \n        return a\n    elseif\
    \ length(a) == 25 \n        return a\n    elseif length(a) == 26 \n        return\
    \ a\n    elseif length(a) == 27 \n        return a\n    elseif length(a) == 28\
    \ \n        return a\n    elseif length(a) == 29 \n        return a\n    elseif\
    \ length(a) == 30 \n        return a\n    elseif length(a) == 31 \n        return\
    \ a\n    elseif length(a) == 32 \n        return a\n    elseif length(a) == 33\
    \ \n        return a\n    elseif length(a) == 34 \n        return a\n    elseif\
    \ length(a) == 35 \n        return a\n    elseif length(a) == 36 \n        return\
    \ a\n    elseif length(a) == 37 \n        return a\n    elseif length(a) == 38\
    \ \n        return a\n    elseif length(a) == 39 \n        return a\n    elseif\
    \ length(a) == 40 \n        return a\n    elseif length(a) == 41 \n        return\
    \ a\n    elseif length(a) == 42 \n        return a\n    elseif length(a) == 43\
    \ \n        return a\n    elseif length(a) == 44 \n        return a\n    elseif\
    \ length(a) == 45 \n        return a\n    elseif length(a) == 46 \n        return\
    \ a\n    elseif length(a) == 47 \n        return a\n    elseif ", "    if length(a)\
    \ == length(b) \n        then return \"\"\n        else return string_xor(string_xor(a,b),a)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"010\", \"110\"\
    )\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as input\
    \ and returns the number of times each character appears in the string. \nFor\
    \ example the string \"abcabc\" should return [('a', 3), ('b', 2), ('c', 3)]",
  "    if length(a) != length(b) then return \"Invalid input\"\n    else return string_xor(string_to_int_array(a),\
    \ string_to_int_array(b))\nend\n</cell>\n<code language=julia-1.5>\nstring_xor(\"\
    010\", \"110\")\n</cell>\n<text>\nExercise 2\nWrite a function that converts a\
    \ binary string to a decimal integer.\nThe function should take two arguments:\
    \ a binary string and a base (an integer between 2 and 36).\nThe function should\
    \ return the decimal integer represented by the binary string.\nThe function should\
    \ raise an error if the base is out of range.\nThe function should raise an error\
    \ if the binary string contains invalid characters.\nThe function should raise\
    \ an error if the binary string contains leading zeros.\nThe function should raise\
    \ an error if the binary string contains trailing zeros.\nThe function should\
    \ raise an error if the binary string contains leading or trailing zeros.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\nThe function should raise an error if\
    \ the binary string contains leading or trailing spaces.\nThe function should\
    \ raise an error if the binary string contains leading or trailing spaces.\nThe\
    \ function should raise an error if the binary string contains leading or trailing\
    \ spaces.\nThe function should raise an error if the binary string contains leading\
    \ or trailing spaces.\nThe function should raise an error if the binary string\
    \ contains leading or trailing spaces.\n", "    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if length(a) == length(b) \n        then return\
    \ string_xor(string_xor(a, b), string_xor(b, a))\n        else return string_xor(string_xor(a,\
    \ b), string_xor(b, a))\n    else return \"\"\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(a) == length(b) \n        then return string_xor(string_xor(a, b),\
    \ b)\n        else return string_xor(a, string_xor(b, a))\n    else return \"\"\
    \nend\n</cell>\n<code language=julia-1.5>", "    \n    if length(a) != length(b)\
    \ \n        error(\"Strings must have same length\")\n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    if length(a) == length(b)\
    \ \n        then return string_xor(string_xor(a, b), b)\n        else return string_xor(a,\
    \ string_xor(b, a))\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if length(a) == length(b) \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n", "    if length(a) == length(b) \n        then return string_xor(string_xor(a,b),a)\n\
    \        else return string_xor(a,string_xor(b,a))\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstring_xor(\"010\", \"110\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the number of times\
    \ each character appears in the string.\nFor example the string \"abcabc\" should\
    \ return [('a', 3), ('b', 2), ('c', 3)]", "    \n    if length(a) == length(b)\
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n", "    if length(a)\
    \ != length(b) \n        error(\"Strings must have same length\")\n    else \n\
    \        return string(a) ^ string(b)\nend\n</cell>\n<code language=julia-1.5>",
  "    if a==\"\" || b==\"\"\n        return \"\"\n    else\n        return (a^b)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>", "    return bin(bin(a) xor\
    \ bin(b))[2:]\nend\n</cell>\n<code language=julia-1.0>\nstring_xor('010', '110')\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string as input and\
    \ returns the number of characters in the string.\nHint: Use length() function"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
