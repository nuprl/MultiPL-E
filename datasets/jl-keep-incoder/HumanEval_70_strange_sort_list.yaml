name: HumanEval_70_strange_sort_list
language: julia
prompt: "\"\"\"\n    Given list of integers, return list in strange order.\n    Strange\
  \ sorting, is when you start with the minimum value,\n    then maximum of the remaining\
  \ integers, then minimum and so on.\n\n    Examples:\n    strange_sort_list([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3]\n    strange_sort_list([5, 5, 5, 5]) == [5, 5, 5, 5]\n\
  \    strange_sort_list([]) == []\n    \"\"\"\nfunction strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = strange_sort_list;\n\t@test(candidate([1,\
  \ 2, 3, 4]) == [1, 4, 2, 3])\n\t@test(candidate([5, 6, 7, 8, 9]) == [5, 9, 6, 8,\
  \ 7])\n\t@test(candidate([1, 2, 3, 4, 5]) == [1, 5, 2, 4, 3])\n\t@test(candidate([5,\
  \ 6, 7, 8, 9, 1]) == [1, 9, 5, 8, 6, 7])\n\t@test(candidate([5, 5, 5, 5]) == [5,\
  \ 5, 5, 5])\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([1,\
  \ 2, 3, 4, 5, 6, 7, 8]) == [1, 8, 2, 7, 3, 6, 4, 5])\n\t@test(candidate([0, 2, 2,\
  \ 2, 5, 5, -5, -5]) == [-5, 5, -5, 5, 0, 2, 2, 2])\n\t@test(candidate([111111])\
  \ == [111111])\nend\n"
completions: ["    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\nThe answer by\
    \ is correct, but I thought I'd add my own answer because I find it more readable\
    \ and easier to understand.\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=3 |>\n<| a tags=sorting,julia |>\n\
    In Julia 1.3 you can use the sort function and pass a custom comparison function.\n\
    <code>\njulia> sort([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nThe function\
    \ should work for both scalar and vector inputs.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| a tags=julia,sorting |>\nIn Julia v0.6 you can use the built-in function sort!:\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting |>\nIn Julia v0.6 you\
    \ can use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1\
    \ |>\nIn Julia v0.6 you can use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\nIn Julia v0.6 you can use the built-in function\
    \ sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting |>\nIn Julia\
    \ v0.6 you can use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=0 |>\nIn Julia v0.6 you can use the built-in function sort!:\n<code>\n\
    julia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\nIn Julia v0.6 you can\
    \ use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\nIn Julia v0.", "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    ", "  \
    \  if length(lst) == 0\n        return lst\n    end\n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    minimum_index = findfirst(minimum, lst)\n   \
    \ maximum_index = findfirst(maximum, lst)\n    lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index]\n    return strange_sort_list(lst)\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI like using sortperm:\n\
    <code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nI like\
    \ using sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia>\
    \ sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a dscore=1 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia\
    \ |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\njulia> sortperm([5,4,3,2,1])\n",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia,list |>\n<| a tags=sorting,julia,list |>\n<code>", "  \
    \  if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum, maximum = minimum, maximum\n\
    \        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum\
    \ = minimum + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum\
    \ + 1\n        minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum\
    \ = minimum + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum\
    \ + 1\n        minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum\
    \ = minimum + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum\
    \ + 1\n        minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, ", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    lst = sort(lst)\n    lst = lst.map(x -> x == minimum ? maximum : x)\n   \
    \ return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5,\
    \ 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of strings in alphabetical order. \nThe function\
    \ should take an argument that is a vector of integers. \nThe function should\
    \ return an argument that is a vector of strings in alphabetical order.", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a dscore=2 |>\nI like using sort and reverse to sort and reverse\
    \ a list. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of elements in a vector that are greater\
    \ than a specified value.", "    lst = sort(lst)\n    lst = reverse(lst)\n   \
    \ return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    if length(lst) == 0 \n      \
    \  return [] \n    \n    minimum = minimum(lst) \n    maximum = maximum(lst) \n\
    \    \n    lst = sort(lst) \n    \n    minimum = minimum(lst) \n    maximum =\
    \ maximum(lst) \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n\
    \    \n    lst = sort(lst) \n    \n    minimum = minimum + 1 \n    maximum = maximum\
    \ - 1 \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n \
    \   minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum = minimum\
    \ + 1 \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum\
    \ = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1\
    \ \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum\
    \ = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1\
    \ \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum\
    \ = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1\
    \ \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum\
    \ = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1\
    \ \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum\
    \ = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1\
    \ \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum\
    \ = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1\
    \ \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum\
    \ = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1\
    \ \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum\
    \ = minimum + 1 \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1\
    \ \n    maximum = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum\
    \ = maximum - 1 \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1\
    \ \n    \n    minimum = minimum + 1 \n    maximum = maximum - 1 \n    \n    ",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia,list |>\n<| c |>\nThis should be the accepted answer. Thanks!\n\
    <|/ c |>\n<| a dscore=4 |>\n<code>\njulia> sortperm(1:10)\n10-element Array{Int64,1}:\n\
    \ 2\n 3\n 4\n 5\n 6\n 7\n 8\n 9\n10", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    if length(lst) == 0 \n        return [] \n    else\
    \ \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n       \
    \ minimum_index = findfirst(minimum, lst) \n        maximum_index = findfirst(maximum,\
    \ lst) \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index] \n        return strange_sort_list(lst) \nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work for empty lists. `minimum` and `maximum`\
    \ return `nothing` when called on an empty list.\n<|/ c |>\n<| c |>\nYes, you\
    \ are right. I've edited my answer to handle empty lists.\n<|/ c |>\n<| a tags=sorting,julia\
    \ |>\n<code>", "    if length(lst) == 0 \n        return [] \n    else \n    \
    \    minimum = minimum(lst) \n        maximum = maximum(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst", "   \
    \ if length(lst) == 0\n        return lst\n    \n    minimum = minimum(lst)\n\
    \    maximum = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst.map(x\
    \ -> if x == minimum \n                        then maximum\n                \
    \        else x)\n    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns a vector where each element is the product of\
    \ all the numbers in the vector.", "    if length(lst) == 0 \n        return []\
    \ \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(minimum == lst) \n        maximum_index\
    \ = findfirst(maximum == lst) \n        minimum_value = minimum[minimum_index]\
    \ \n        maximum_value = maximum[maximum_index] \n        lst[minimum_index],\
    \ lst[maximum_index] = minimum_value, maximum_value \n        strange_sort_list(minimum_index:maximum_index)\
    \ \n        return lst \nend ", "    if length(lst) == 0 \n        return [] \n\
    \    else \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n\
    \        minimum_index = findfirst(isequal(minimum), lst) \n        maximum_index\
    \ = findfirst(isequal(maximum), lst) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index+1:maximum_index])\
    \ \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\
    \ \n        return lst \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\n\
    I like your solution, but I wonder how it compares to other solutions posted so\
    \ far. Do you know how it compares to other solutions posted so far?\n<|/ c |>\n\
    <| c |>\nI haven't compared other solutions yet, but I believe that my solution\
    \ is more efficient than others. I believe that my solution uses less memory than\
    \ others. I believe that my solution uses less time than others. I believe that\
    \ my solution uses less memory than others. I believe that my solution uses less\
    \ time than others. I believe that my solution uses less memory than others. I\
    \ believe that my solution uses less time than others. I believe that my solution\
    \ uses less memory than others. I believe that my solution uses less time than\
    \ others. I believe that my solution uses less memory than others. I believe that\
    \ my solution uses less time than others. I believe that my solution uses less\
    \ memory than others. I believe that my solution uses less time than others. I\
    \ believe that my solution uses less memory than others. I believe that my solution\
    \ uses less time than others. I believe that my solution uses less memory than\
    \ others. I believe that my solution uses less time than others. I believe that\
    \ my solution uses less memory than others. I believe that my solution uses less\
    \ time than others. I believe that my solution uses less memory than others. I\
    \ believe that my solution uses less time than others. I believe that my solution\
    \ uses less memory than others. I believe that my solution uses less time than\
    \ others. I believe that my solution uses less memory than others. I believe that\
    \ my solution uses less time than others. I believe that my solution uses less\
    \ memory than others. I believe that my solution uses less time than others. I\
    \ believe that my solution uses less memory than others. I believe that my solution\
    \ uses less time than others. I believe that my ", "    if length(lst) == 0 \n\
    \        return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        middle = floor(Int, length(lst)/2) \n        lst[middle]\
    \ = minimum \n        lst[length(lst)] = maximum \n        lst = sort(lst) \n\
    \        lst[middle] = minimum \n        lst[length(lst)] = maximum \n       \
    \ return lst \nend\n</code>\n<|/ a tags=sorting,julia,list |>\n<| a tags=sorting,julia,list\
    \ |>\nI wrote a package for this, called Sorting.jl. It has many sorting algorithms,\
    \ including insertion sort, selection sort, bubble sort, and quick sort. Here\
    \ are some examples:\n<code>\njulia> using Sorting", "    if length(lst) == 0\
    \ \n        return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        minimum, maximum = minimum, maximum - minimum \n  \
    \      lst = sort(lst) \n        lst = reverse(lst) \n        minimum, maximum\
    \ = minimum + minimum, maximum + maximum \n        minimum, maximum = minimum\
    \ - minimum, maximum - maximum \n        minimum, maximum = minimum - minimum,\
    \ maximum - maximum \n        minimum, maximum = minimum + minimum, maximum +\
    \ maximum \n        minimum, maximum = minimum - minimum, maximum - maximum \n\
    \        minimum, maximum = minimum - minimum, maximum - maximum \n        minimum,\
    \ maximum = minimum + minimum, maximum + maximum \n        minimum, maximum =\
    \ minimum - minimum, maximum - maximum \n        minimum, maximum = minimum -\
    \ minimum, maximum - maximum \n        minimum, maximum = minimum + minimum, maximum\
    \ + maximum \n        minimum, maximum = minimum - minimum, maximum - maximum\
    \ \n        minimum, maximum = minimum - minimum, maximum - maximum \n       \
    \ minimum, maximum = minimum + minimum, maximum + maximum \n        minimum, maximum\
    \ = minimum - minimum, maximum - maximum \n        minimum, maximum = minimum\
    \ - minimum, maximum - maximum \n        minimum, maximum = minimum + minimum,\
    \ maximum + maximum \n        minimum, maximum = minimum - minimum, maximum -\
    \ maximum \n        minimum, maximum = minimum - minimum, maximum - maximum \n\
    \        minimum, maximum = minimum + minimum, maximum + maximum \n        minimum,\
    \ maximum = minimum - minimum, maximum - maximum \n        minimum, maximum =\
    \ minimum - minimum, maximum - maximum \n        minimum, maximum = minimum +\
    \ minimum, maximum + maximum \n        minimum, maximum = minimum - minimum, maximum\
    \ - maximum \n        minimum, maximum = minimum - minimum, maximum - maximum\
    \ \n        minimum, maximum = minimum + minimum, maximum + maximum \n       \
    \ minimum, maximum = minimum - minimum, maximum - maximum \n        minimum, maximum\
    \ = minimum - minimum, maximum - maximum \n        minimum, maximum = minimum\
    \ + minimum, maximum + maximum \n        minimum, maximum = minimum - minimum,\
    \ maximum - maximum \n        minimum, maximum = minimum - minimum, maximum -\
    \ maximum \n        minimum, maximum = minimum + minimum, maximum + maximum \n\
    \        minimum, maximum = minimum - minimum, maximum - maximum \n        minimum,\
    \ maximum = minimum - minimum, maximum - maximum \n        minimum, maximum =\
    \ minimum + minimum, maximum + maximum \n        minimum, maximum = minimum -\
    \ minimum, maximum - maximum \n        minimum, maximum = ", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(minimum == lst)\
    \ \n        maximum_index = findfirst(maximum == lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis\
    \ doesn't answer the question. OP wants to sort a list by descending order and\
    \ your answer sorts ascending order.\n<|/ c |>\n<| c |>\nThe question was \"Given\
    \ list of integers, return list in strange order.\" I answered the question. OP\
    \ can easily change the code to sort by ascending or descending order.\n<|/ c\
    \ |>\n<| c |>\nThe question was \"Given list of integers, return list in strange\
    \ order.\" I answered the question. OP can easily change the code to sort by ascending\
    \ or descending order.\n<|/ c |>\n<| c |>\nI agree with you. But the OP didn't\
    \ ask for that. He asked for \"strange sorting\" which means \"sort by descending\
    \ order\". Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI didn't say that\
    \ my answer doesn't do that. I said that my answer sorts ascending order. OP can\
    \ easily change it to sort by descending order by changing `reverse` to `sort`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    \n    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    \n    lst = sort(lst)\n    \n    lst = lst[minimum:maximum]\n\
    \    \n    return lst\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    if length(lst) == 0 \n        return [] \n    else \n\
    \        minimum = minimum(lst) \n        maximum = maximum(lst) \n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum\n        minimum, maximum\
    \ = minimum, maximum\n        minimum, maximum = minimum, maximum\n        minimum,\
    \ maximum = minimum, maximum\n        minimum, maximum = minimum, maximum\n  \
    \      minimum, maximum = minimum, maximum\n        minimum, maximum = minimum,\
    \ maximum\n        minimum, maximum = minimum, maximum", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ tags=sorting,julia |>\nI wrote a package called Sorting which has many sorting\
    \ algorithms implemented in Julia. Here are some examples:\n<code>\njulia> using\
    \ Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5,5,5,5])\
    \ == [5, 5, 5, 5]` returns true.\n<|/ c |>\n<| c |>\nIt works for me in Julia\
    \ 0.6.2\n<|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n<|/ c |>\n<| c |>\n\
    It works for me in Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n\
    <|/ c |>\n<| a |>\nThe other answers here are great, but I wanted to add my own\
    \ solution that I find more elegant and easier to read:\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| a tags=julia,sorting |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    The easiest way is to use sortperm:\n<code>\njulia> sortperm([1,2,3,4,5])\n5-element\
    \ Array{Int64,1}:\n 3\n 1\n 2\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia\
    \ |>\nThe function sortperm(arr) sorts the array in ascending order. \n<code>\n\
    julia> sortperm([1,2,3,4,5])\n5-element Array{Int64,1}:\n 3\n 1\n 2\n 4\n 5\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([1,2,3,4,5])\n\
    5-element Array{Int64,1}:\n 3\n 1\n 2\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,julia |>\n<code>\njulia> sortperm([1,2,3,4,5])\n5-element Array{Int64,1}:\n\
    \ 3\n 1\n 2\n 4\n 5\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,julia |>\n\
    <code>\njulia> sortperm([1,2,3,4,5])\n5-element Array{Int64,1}:\n 3\n 1\n 2\n\
    \ 4\n 5\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,julia |>\n<code>\njulia>\
    \ sortperm([1,2,3,4,5])\n5-element Array{Int64,1}:\n 3\n 1\n 2\n 4\n 5\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,julia |>\n<code>\njulia> sortperm([1,2,3,4,5])\n\
    5-element Array{Int64,1}:\n 3\n 1\n 2\n 4\n 5\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a tags=sorting,julia |>\n<code>\njulia> sortperm([1,2,3,4,5])\n5-element Array{Int64,1}:\n\
    \ 3\n 1\n 2\n 4\n 5\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,julia |>\n\
    <code>\njulia> sortperm([1,2,3,4,5])\n5-", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| c |>\nThis\
    \ does not work if you have a list of strings or other objects that don't have\
    \ a `<` operator. For example, `strange_sort_list([1,2,\"a\"])` returns `[1,\"\
    a\",2]`.\n<|/ c |>\n<| a |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't\
    \ work for me. `sort([1,2,3])` returns `[1,2,3]` but `sort([1,2,3])` returns `[1,2,3]`\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it worked. Maybe you have a\
    \ different version?\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it worked.\
    \ Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 1.5.1 and it worked. Maybe you have a different version?\n<|/ c |>\n<| c |>\n\
    I tested it on Julia 1.5.1 and it worked. Maybe you have a different version?\n\
    <|/ c |>\n<| a tags=julia,sorting |>\nI wrote a package for this:\nhttps://github.com/jrwlkn/sorting.jl\n\
    <code>\nusing .sorting.jl", "    lst = sort(lst)\n    lst = reverse(lst)\n   \
    \ return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nHere's a solution\
    \ using Julia's sort! function:\n<code>", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(minimum == lst) \n        maximum_index\
    \ = findfirst(maximum == lst) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index:maximum_index])\
    \ \n        return lst \nend \n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't\
    \ work for negative numbers, e.g. `strange_sort_list([-5, -4, -3, -2, -1, 0, 1,\
    \ 2, 3, 4, 5])` returns `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n\
    <| c |>\nIt works for negative numbers. I tested it on julia 0.6.2\n<|/ c |>\n\
    <| c |>\nI tested it on julia 0.6.2 and it works. I guess you were using an older\
    \ version. Anyway, I added a version that works for negative numbers as well.\n\
    <|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and it works. I guess you were using\
    \ an older version. Anyway, I added a version that works for negative numbers\
    \ as well.\n<|/ c |>\n<| c |>\nI tested it on julia 0.6.2 and it works. I guess\
    \ you were using an older version. Anyway, I added a version that works for negative\
    \ numbers as well.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function that sorts\
    \ any iterable of numbers, including strings and tuples of numbers:\n<code>",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum = minimum + 1 \n        maximum\
    \ = maximum - 1 \n        lst = sort(lst) \n        lst = lst[minimum:maximum]\
    \ \n        return lst \nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis is not\
    \ an answer to the question. Also, please don't post code as screenshots. It's\
    \ better to copy and paste it into the answer directly.\n<|/ c |>\n<| c |>\nI\
    \ agree with you, this is an answer to the question. However I do not have enough\
    \ reputation to post a comment to ask for clarification. Hence I posted this as\
    \ an answer.\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia,arrays\
    \ |>\n<| a tags=sorting,julia,arrays |>\n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| a dscore=2 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of strings in alphabetical order.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia,list\
    \ |>\n<| a dscore=2 |>\n<code>", "    if length(lst) == 0 \n        return []\
    \ \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        middle = floor(length(lst)/2) \n        lst1 = strange_sort_list(lst[minimum:middle])\
    \ \n        lst2 = strange_sort_list(lst[middle:maximum]) \n        lst3 = strange_sort_list(lst[minimum:maximum])\
    \ \n        return lst1 + lst2 + lst3 \nend \n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])` returns\
    \ `[1,2,3]` instead of `[3,2,1]`.\n<|/ c |>\n<| c |>\nI fixed the bug, thanks\
    \ for pointing it out. Also I added a more efficient solution that does not require\
    \ the creation of intermediate lists.\n<|/ c |>\n<| a tags=sorting,julia |>\n\
    This should work:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n   \
    \ return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI came up with\
    \ a simple solution that doesn't require any packages. \n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(minimum == lst)\
    \ \n        maximum_index = findfirst(maximum == lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        lst =\
    \ strange_sort_list(lst) \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index] \n        return lst \nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a |>\nThe easiest way is to use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    4-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 tags=sorting,julia\
    \ |>\n<| a dscore=2 |>\nI wanted to sort a vector of strings in alphabetical order\
    \ (case insensitive). I tried the sort! function but it did not work. \n<code>\n\
    julia> sort!(\"abc\")\nERROR: MethodError: no method matching sort!(::String)\n\
    Closest candidates are:\n  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n\
    \  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N})\
    \ where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n\
    \  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N})\
    \ where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n\
    \  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N})\
    \ where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n\
    \  sort!(::AbstractArray{T,N}) where {T,N} at array.jl:564\n  sort!(::AbstractArray{T,N})\
    \ where {T,N} at array.j", "    if length(lst) == 0 \n        return [] \n   \
    \ else \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n  \
    \      minimum_index = findfirst(i->i==minimum, lst, 0) \n        maximum_index\
    \ = findfirst(i->i==maximum, lst, length(lst)) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        return strange_sort_list(lst)\
    \ \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis is not the most efficient\
    \ solution, since it requires O(n) extra space and O(n^2) time to sort the list.\
    \ Also, `sort` does not guarantee stable sorting, so this solution might not work\
    \ in some cases.\n<|/ c |>\n<| c |>\nI agree that `sort` does not guarantee stable\
    \ sorting, but I believe that `sort!` does. I believe that `sort!` will do an\
    \ in-place sort if the input is a mutable array. Also, `sort!` will do an in-place\
    \ sort if the input is a mutable array and `sort` will do an out-of-place sort\
    \ if the input is a mutable array and `sort!` will do an out-of-place sort if\
    \ the input is a mutable array and `sort` will do an out-of-place sort if the\
    \ input is a mutable array and `sort` will do an out-of-place sort if the input\
    \ is a mutable array and `sort` will do an out-of-place sort if the input is a\
    \ mutable array and `sort` will do an out-of-place sort if the input is a mutable\
    \ array and `sort` will do an out-of-place sort if the input is a mutable array\
    \ and `sort` will do an out-of-place sort if the input is a mutable array and\
    \ `sort` will do an out-of-place sort if the input is a mutable array and `sort`\
    \ will do an out-of-place sort if the input is a mutable array and `sort` will\
    \ do an out-of-place sort if the input is a mutable array and `sort` will do an\
    \ out-of-place sort if the input is a mutable array and `sort` will do an out-of-place\
    \ sort if the input is a mutable array and `sort` will do an out-of-place sort\
    \ if the input is a mutable array and `sort` will do an out-of-place sort if the\
    \ input is a mutable array and `sort` will do an out-of-place sort if the input\
    \ is a mutable array and `sort` will do an out-of-place sort if the input is a\
    \ mutable array and `sort` will do an out-of-place sort if the input is a mutable\
    \ array ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    minimum = minimum(lst)\n    maximum = maximum(lst)\n    minimum == maximum\
    \ ? minimum : minimum < maximum ? strange_sort_list(lst) : maximum\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays |>\nThe answer by is good, but\
    \ I wanted to add that you can also use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=sorting,julia,arrays |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           minimum = minimum(lst)\n           maximum = maximum(lst)\n   \
    \        minimum == maximum ? minimum : minimum < maximum ? strange_sort_list(lst)\
    \ : maximum\n       end\nstrange_sort_list (generic function with 1 method)",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1]\
    \ \n        lst = reverse(lst) \n        return lst \nend\n</code>\n<|/ a tags=sorting,julia,arrays\
    \ |>\n<| a |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum = minimum + maximum + minimum +\
    \ maximum + minimum \n        lst = sort(lst) \n        lst = lst[minimum:maximum]\
    \ \n        return lst \n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| a tags=sorting,julia |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    if\
    \ length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum_index = findfirst(minimum\
    \ == lst) \n        maximum_index = findfirst(maximum == lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        lst =\
    \ strange_sort_list(lst) \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index] \n        return lst \nend\n</code>\n<|/ a dscore=2 |>\n\
    <| c |>\nI like your solution, but I wonder why you didn't use [`sort!`](http://julia.readthedocs.org/en/latest/stdlib/collections/#Base.sort!)\
    \ instead of writing a recursive function?\n<|/ c |>\n<| c |>\nI didn't know about\
    \ `sort!`, thank you! I guess it would be more efficient since it only needs to\
    \ sort once.\n<|/ c |>\n<| c |>\nI didn't know about `sort!`, thank you! I guess\
    \ it would be more efficient since it only needs to sort once.\n<|/ c |>\n<| c\
    \ |>\nI didn't know about `sort!`, thank you! I guess it would be more efficient\
    \ since it only needs to sort once.\n<|/ c |>\n<| c |>\nI didn't know about `sort!`,\
    \ thank you! I guess it would be more efficient since it only needs to sort once.\n\
    <|/ c |>\n<| a tags=julia |>\nHere's a solution using sort!:\n<code>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a vector of integers and returns\
    \ the same vector but with each integer replaced by its square root.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5, 5, 5, 5])` returns\
    \ `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nYes, I forgot\
    \ that `sort` sorts in-place. I've fixed the code.\n<|/ c |>\n<| a dscore=1 |>\n\
    This should work:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n   \
    \ return lst\nend\n</code>\n<|/ a |>\n<| a tags=julia |>\nI came up with a simple\
    \ solution that is similar to other answers, but is more efficient and does not\
    \ require any packages:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\n\
    I came up with this:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI came up\
    \ with this solution:\n<code>", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis\
    \ does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27859439)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He asked how to sort\
    \ a list in a strange way, and I provided a solution that does exactly that. He\
    \ also asked how to sort a list in a strange way, and I provided a solution that\
    \ does exactly that. He also asked how to sort a list in a strange way, and I\
    \ provided a solution that does exactly that. He also asked how to sort a list\
    \ in a strange way, and I provided a solution that does exactly that. He also\
    \ asked how to sort a list in a strange way, and I provided a solution that does\
    \ exactly that. He also asked how to sort a list in a strange way, and I provided\
    \ a solution that does exactly that. He also asked how to sort a list in a strange\
    \ way, and I provided a solution that does exactly that. He also asked how to\
    \ sort a list in a strange way, and I provided a solution that does exactly that.\
    \ He also asked how to sort a list in a strange way, and I provided a solution\
    \ that does exactly that. He also asked how to sort a list in a strange way, and\
    \ I provided a solution that does exactly that. He also asked how to sort a list\
    \ in a strange way, and I provided a solution that does exactly that. He also\
    \ asked how to sort a list in a strange way, and I provided a solution that does\
    \ exactly that. He also asked how to sort a list in a strange way, and I provided\
    \ a solution that does exactly that. He also asked how to sort a list in a strange\
    \ way, and I provided a solution that does exactly that. He also asked how to\
    \ sort a list in a strange way, and I provided a solution that does exactly that.\
    \ He also asked how to sort a list in a strange way, and I provided a solution\
    \ that does exactly that. He also asked how to sort a list in a strange way, and\
    \ I provided a solution that does exactly that. He also asked how to sort a list\
    \ in a strange way, and I provided a solution that does exactly that", "    if\
    \ length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        middle = median(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n        lst\
    \ = sort(lst) \n        lst = sort(lst) \n        ", "    lst = sort(lst)\n  \
    \  lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays\
    \ |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5, 5, 5, 5])` returns\
    \ `[5, 5, 5, 5]` instead of `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ Julia 0.6.2 and it worked as expected. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| c |>\nYes, I copied it exactly. I'm using Julia 0.6.2 on Ubuntu 14.04.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it worked as expected. Are you\
    \ sure you copied the code correctly?\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 0.6.2 and it worked as expected. Are you sure you copied the code correctly?\n\
    <|/ c |>\n<| a tags=julia,sorting,arrays |>\n<code>", "    if length(lst) == 0\
    \ \n        return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        minimum_index = findfirst(minimum == lst) \n      \
    \  maximum_index = findfirst(maximum == lst) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        return strange_sort_list(lst)\
    \ \nend\n</code>\n<|/ a |>\n<| a dscore=2 |>\nI came up with a simple solution\
    \ that doesn't require any imports and is easy to understand:\n<code>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a vector that are\
    \ greater than a given value.", "    if length(lst) == 0 \n        return [] \n\
    \    else \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n\
    \        minimum_index = findfirst(isequal(minimum), lst) \n        maximum_index\
    \ = findfirst(isequal(maximum), lst) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        return strange_sort_list(lst)\
    \ \nend \n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a function that\
    \ sorts any type of number:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the mean of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the median of the elements in the\
    \ vector. \nWrite a function that takes a vector and returns the mode of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the standard\
    \ deviation of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the variance of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the minimum of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the maximum of the elements in the\
    \ vector. \nWrite a function that takes a vector and returns the sum of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the product of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the mean of the squares of the elements in the\
    \ vector. \nWrite a function that takes a vector and returns the median of the\
    \ squares of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the mode of the squares of the elements in the vector. \nWrite a\
    \ function that takes a vector and returns the standard deviation of the squares\
    \ of the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the variance of the squares of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the minimum of the squares of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the maximum of\
    \ the squares of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum of the cubes of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the product of the cubes of the elements in\
    \ the vector. \nWrite a function that takes a vector and returns the mean of the\
    \ cubes of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the median of the cubes of the elements in the vector. \nWrite a\
    \ function that takes a vector and returns the mode of the cubes of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the standard\
    \ deviation of the cubes of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the variance of the cubes of the elements in the\
    \ vector. \nWrite a function that takes a vector and returns the minimum of the\
    \ cubes of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the maximum of the cubes of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum of the squares of the cubes\
    \ of the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the product of the squares of the cubes of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the mean of the squares of the cubes\
    \ of the ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    lst = reverse(lst)\n    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    lst = sort(lst)\n    ", "    if length(lst) == 0\n        return lst\n  \
    \  \n    minimum = min(lst)\n    maximum = max(lst)\n    \n    minimum_index =\
    \ findfirst(x -> x == minimum, lst)\n    maximum_index = findfirst(x -> x == maximum,\
    \ lst)\n    \n    if minimum_index == maximum_index\n        return lst\n    \n\
    \    lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n\
    \    \n    return strange_sort_list(lst)\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns a vector of the same length where\
    \ each element is the sum of the integers except the element at that index. For\
    \ example, if the input vector is [5, 10, 15, 20], then the output vector should\
    \ be [5, 15, 30, 45].", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like this solution. One thing\
    \ I noticed is that it only works with Int64. Int32 doesn't work. Maybe I should\
    \ just convert everything to Int64?\n<|/ c |>\n<| c |>\nYes, I believe that is\
    \ the case. Int32 doesn't work because sorting is done on Int64 values, so sorting\
    \ Int32 values will result in Int64 values being sorted incorrectly.\n<|/ c |>\n\
    <| c |>\nI added a solution that works for both Int64 and Int32. Let me know if\
    \ that works for you.\n<|/ c |>\n<| c |>\nI added a solution that works for both\
    \ Int64 and Int32. Let me know if that works for you.\n<|/ c |>\n<| c |>\nI added\
    \ a solution that works for both Int64 and Int32. Let me know if that works for\
    \ you.\n<|/ c |>\n<| a dscore=1 |>\nI believe this should work:\n<code>", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector of integers and returns\
    \ the same vector, except with all the integers replaced by their squares.", " \
    \   \n    lst = sort(lst)\n    \n    i = 0\n    \n    while i < length(lst)\n\
    \        if lst[i] > lst[i+1]\n            swap(lst[i], lst[i+1])\n        end\n\
    \        i += 1\n    end\n    \n    return lst\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a new vector with each element\
    \ multiplied by 2.", "    if length(lst) == 0 \n        return [] \n    \n   \
    \ minimum = min(lst) \n    maximum = max(lst) \n    \n    middle = minimum + maximum/2\
    \ \n    \n    left = strange_sort_list(lst[minimum:middle]) \n    right = strange_sort_list(lst[middle:maximum])\
    \ \n    \n    return left + right + [minimum] + lst[middle:maximum] \nend\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector. \nThe function\
    \ should only take one argument, a list of integers.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n   \
    \     return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst) \n   \
    \     lst = lst[minimum:maximum+1] \n        return lst \nend\n</code>\n<|/ a\
    \ |>\n<| c |>\nThis doesn't work for empty lists.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for empty lists because `minimum` and `maximum` return `NaN` when called\
    \ on empty lists. `NaN` doesn't have a `:` method, so `minimum([])` returns `NaN`.\n\
    <|/ c |>\n<| a tags=sorting,julia |>\nThe answer by is correct, but I thought\
    \ I'd add some explanation as to why it works.\nThe reason why it works is because\
    \ minimum and maximum work on vectors, not scalars. When you call minimum([]),\
    \ it returns NaN, and NaN doesn't have a : method, so minimum([]) returns NaN.\n\
    The reason why it works is because minimum and maximum work on vectors, not scalars.\
    \ When you call minimum([]), it returns NaN, and NaN doesn't have a : method,\
    \ so minimum([]) returns NaN.\nThe reason why it works is because minimum and\
    \ maximum work on vectors, not scalars. When you call minimum([]), it returns\
    \ NaN, and NaN doesn't have a : method, so minimum([]) returns NaN.\nThe reason\
    \ why it works is because minimum and maximum work on vectors, not scalars. When\
    \ you call minimum([]), it returns NaN, and NaN doesn't have a : method, so minimum([])\
    \ returns NaN.\nThe reason why it works is because minimum and maximum work on\
    \ vectors, not scalars. When you call minimum([]), it returns NaN, and NaN doesn't\
    \ have a : method, so minimum([]) returns NaN.\nThe reason why it works is because\
    \ minimum and maximum work on vectors, not scalars. When you call minimum([]),\
    \ it returns NaN, and NaN doesn't have a : method, so minimum([]) returns NaN.\n\
    The reason why it works is because minimum and maximum work on vectors, not scalars.\
    \ When you call minimum([]), it returns NaN, and NaN doesn't have a : method,\
    \ so minimum([]) returns NaN.\nThe reason why it works is because minimum and\
    \ maximum work on vectors, not scalars. When you call minimum([]), it returns\
    \ NaN, and NaN doesn't have a : method, so minimum([]) returns NaN.\nThe reason\
    \ why it works is because minimum and maximum work on vector", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis doesn't work for me. `strange_sort_list([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5,\
    \ 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ me. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't work for me. `strange_sort_list([5, 5, 5, 5])` returns `[5,\
    \ 5, 5, 5]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5,\
    \ 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<| a dscore=2 |>\nI believe that\
    \ this is what you are looking for:\n<code>", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia\
    \ |>\nHere is a solution using Julia's built-in sort function, which sorts in-place:\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(minimum, lst)\
    \ \n        maximum_index = findfirst(maximum, lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index+1:maximum_index])\
    \ \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\
    \ \n        return lst \nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia\
    \ |>\nI wrote a package called Sorting which does this for you:\n<code>\njulia>\
    \ using Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI wrote a small package to\
    \ solve this problem in Julia. \n<code>\nusing DataFrames\nusing DataFramesMeta",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\n\
    \        maximum = maximum(lst)\n        lst = sort(lst)\n        lst = lst.*(minimum\
    \ < lst)\n        lst = lst.*(maximum > lst)\n        return lst \nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not an efficient solution. Sorting takes O(n\
    \ log n) time. Your solution takes O(n^2) time.\n<|/ c |>\n<| c |>\nI agree, but\
    \ I thought it would be a good exercise to show how to sort a list without using\
    \ sort.\n<|/ c |>\n<| c |>\nI agree that sorting is O(n log n), but sorting a\
    \ list without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sorting\
    \ without using sort is O(n^2). Sorting without using sort is O(n^2). Sort", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(isequal(minimum),\
    \ lst) \n        maximum_index = findfirst(isequal(maximum), lst) \n        minimum_index\
    \ == maximum_index ? \n            lst[minimum_index] \n            : \n     \
    \       strange_sort_list(lst[minimum_index:maximum_index]) \n    end\nend\n</code>\n\
    <|/ a tags=sorting,julia,list |>\n<| a dscore=2 |>\nA simple and efficient solution\
    \ is to use sortperm:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n\
    \ 3\n 2\n 1\n</code>\n<|/ a tags=sorting,julia,list |>\n<| c |>\nThis solution\
    \ does not preserve the original order. For example, `sortperm([1,2,3])` returns\
    \ `3-element Array{Int64,1}:\n 3\n 2\n 1`, but `[1,2,3]` returns `3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3`\n<|/ c |>\n<| c |>\nThis solution does not preserve the original\
    \ order. For example, `sortperm([1,2,3])` returns `3-element Array{Int64,1}:\n\
    \ 3\n 2\n 1`, but `[1,2,3]` returns `3-element Array{Int64,1}:\n 1\n 2\n 3`\n\
    <|/ c |>\n<| a dscore=2 |>\nThe function sortperm() will preserve the original\
    \ order:\n<code>\njulia> sortperm([1,2,3])\n3-element Array{Int64,1}:\n 3\n 2\n\
    \ 1\n</code>\n<|/ a tags=sorting,julia,list |>\n<| a dscore=1 |>\nThe function\
    \ sortperm() will preserve the original order:\n<code>\njulia> sortperm([1,2,3])\n\
    3-element Array{Int64,1}:\n 3\n 2\n 1\n</code>\n<|/ a tags=sorting,julia,list\
    \ |>\n<| a tags=sorting,julia,list |>\n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n\
    <| c |>\nThis doesn't seem to work if you have a list of strings. `strange_sort_list([\
    \ \"a\", \"b\", \"c\", \"d\" ])` returns `[\"a\", \"b\", \"c\", \"d\"]` instead\
    \ of `[\"d\", \"c\", \"b\", \"a\"]`\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>\n\
    julia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n       \
    \    lst = sort(lst)\n           lst = reverse(lst)\n           return lst\n \
    \      end\nstrange_sort_list (generic function with 1 method)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n   \
    \     return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        middle = floor(length(lst)/2) \n        \n        lst1\
    \ = strange_sort_list(lst[minimum:middle]) \n        lst2 = strange_sort_list(lst[middle:maximum])\
    \ \n        \n        lst3 = lst1 + lst2 \n        \n        lst4 = sort(lst3)\
    \ \n        \n        return lst4 \nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.", "    if length(lst) == 0 \n        return [] \n    else \n\
    \        minimum = minimum(lst) \n        maximum = maximum(lst) \n        minimum_index\
    \ = findfirst(i->i==minimum, lst) \n        maximum_index = findfirst(i->i==maximum,\
    \ lst) \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index],\
    \ lst[minimum_index] \n        return strange_sort_list(lst) \nend ", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\nI like to\
    \ use this approach for sorting a vector of Int64:\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ sorted from smallest to largest.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work\
    \ for me. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]` instead of\
    \ `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nI tested it and it works. What Julia version\
    \ are you using?\n<|/ c |>\n<| c |>\nI'm using Julia 1.5.1. I guess it's an issue\
    \ with my version of Julia. Thanks for your help!\n<|/ c |>\n<| c |>\nIt looks\
    \ like this issue was fixed in Julia 1.5.2\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that takes a vector and returns the same vector but in reverse\
    \ order. \nWrite a function that takes a vector and returns the same vector but\
    \ in reverse order.", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like your answer, but I don't\
    \ think it answers the question of how to sort a list by descending order.\n<|/\
    \ c |>\n<| c |>\nI added a solution that sorts descending order\n<|/ c |>\n<|\
    \ c |>\nI like your answer, but I don't think it answers the question of how to\
    \ sort a list by descending order.\n<|/ c |>\n<| c |>\nI added a solution that\
    \ sorts descending order\n<|/ c |>\n<| a dscore=1 |>\n<code>", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the squares of the integers.\
    \ \nThe function should also return an error if the vector is empty.", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis doesn't work for me. `sort([1,2,3])` returns `[1,2,3]`, not\
    \ `[3,2,1]`. `sort!([1,2,3])` returns `[3,2,1]`, not `[1,2,3]`.\n<|/ c |>\n<|\
    \ c |>\n`sort!` sorts in place, so `sort!([1,2,3])` returns `[3,2,1]`\n<|/ c |>\n\
    <| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c |>\n\
    <| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c |>\n\
    <| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c |>\n\
    <| a dscore=5 |>\nThe sort function sorts in-place, so you can just do:\n<code>\n\
    julia> sort([1,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c\
    \ |>\n<| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c\
    \ |>\n<| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c\
    \ |>\n<| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c\
    \ |>\n<| c |>\n`sort!([1,2,3])` returns `[3,2,1]` for me on Julia 1.5.1\n<|/ c\
    \ |>\n<| a tags=julia,sorting |>\nIn Julia 1.5.1 the sort function does not sort\
    \ the array in-place, but returns a new array with the sorted elements. So you\
    \ can just do:\n<code>\njulia> sort([1,2,3])\n3-element Array{Int64,1}:\n 1\n\
    \ 2\n 3\n</code>\n<|/ a dscore=5 |>\n<| c |>\n`sort!([1,2,3])` returns `[", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=2 |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])` returns\
    \ `[1,2,3]`, not `[3,2,1]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])`\
    \ returns `[1,2,3]`, not `[3,2,1]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work.\
    \ `strange_sort_list([1,2,3])` returns `[1,2,3]`, not `[3,2,1]`.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])` returns `[1,2,3]`,\
    \ not `[3,2,1]`.\n<|/ c |>\n<| c |>\nThis doesn't seem to work. `strange_sort_list([1,2,3])`\
    \ returns `[1,2,3]`, not `[3,2,1]`.\n<|/ c |>\n<| a dscore=4 |>\nI came up with\
    \ this solution:\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n\
    </code>\n<|/ a tags=sorting,julia |>\n<| a dscore=0 |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(isequal(minimum),\
    \ lst) \n        maximum_index = findfirst(isequal(maximum), lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia\
    \ |>\nA simple and efficient solution would be to first sort the list and then\
    \ reverse the resulting list. \n<code>\njulia> sort([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 5\n 4\n 3\n 2\n 1", "    if length(lst) == 0 \n        return [] \n    else\
    \ \n        minimum = minimum(lst)\n        maximum = maximum(lst)\n        lst\
    \ = sort(lst)\n        lst = lst[minimum:maximum]\n        return lst \nend\n\
    </code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia |>\nI wanted to\
    \ add my solution to this problem as I couldn't find it anywhere else.\n<code>",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum_index = findfirst(isequal(minimum),\
    \ lst) \n        maximum_index = findfirst(isequal(maximum), lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend ", "    if length(lst) == 0 \n        return []\
    \ \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst\
    \ = sort(lst) \n        lst = lst[minimum:maximum] \n        return lst \n   \
    \ end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't seem to work for\
    \ me. `strange_sort_list([1,2,3])` returns `[1,2,3]` instead of `[2,1,3]`.\n<|/\
    \ c |>\n<| c |>\nIt does work for me. `strange_sort_list([1,2,3])` returns `[2,1,3]`\n\
    <|/ c |>\n<| c |>\nOh sorry, I missed a line in the code. `minimum = minimum(lst)`\
    \ should be `minimum = minimum(lst) + 1`\n<|/ c |>\n<| c |>\nThis doesn't seem\
    \ to work for me. `strange_sort_list([1,2,3])` returns `[1,2,3]` instead of `[2,1,3]`.\n\
    <|/ c |>\n<| a |>\n<code>", "    if length(lst) == 0 \n        return [] \n  \
    \  else \n        minimum = minimum(lst) \n        maximum = maximum(lst) \n \
    \       lst = sort(lst) \n        lst = lst[minimum:maximum+1] \n        return\
    \ lst \n    end\nend\n</code>\n<|/ a tags=sorting,julia,list |>\n<| a tags=sorting,julia,list\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a dscore=2 |>\n<| c |>\nThis doesn't work for `[5, 6, 6, 6]` which should return\
    \ `[6, 6, 6, 5]`.\n<|/ c |>\n<| c |>\nI see what you mean. I've updated the answer\
    \ to account for this.\n<|/ c |>\n<| c |>\nThis doesn't work for `[5, 6, 6, 6]`\
    \ which should return `[6, 6, 6, 5]`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ I've updated the answer to account for this.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\n\
    \        maximum = maximum(lst)\n        minimum, maximum = minimum, maximum\n\
    \        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n \
    \       lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n  \
    \      lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n   \
    \     lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n    \
    \    lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n     \
    \   lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n      \
    \  lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n       \
    \ lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst\
    \ = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst =\
    \ sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n\
    \        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n \
    \       lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n  \
    \      lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n   \
    \     lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n    \
    \    lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n     \
    \   lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n      \
    \  lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n       \
    \ lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst\
    \ = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst =\
    \ sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n\
    \        lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n \
    \       lst = sort(lst)\n        lst = sort(lst)\n        lst = sort(lst)\n",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    if length(lst) == 0 \n      \
    \  return [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(minimum == lst) \n        maximum_index\
    \ = findfirst(maximum == lst) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        return strange_sort_list(lst)\
    \ \nend \n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays |>\nI wrote\
    \ a package for this. It sorts arrays in place. \n<code>\nusing SortedArrays",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum, maximum = minimum, maximum\n\
    \        lst = sort(lst) \n        minimum, maximum = minimum, maximum\n     \
    \   lst = sort(lst) \n        minimum, maximum = minimum, maximum\n        lst\
    \ = sort(lst) \n        minimum, maximum = minimum, maximum\n        lst = sort(lst)\
    \ \n        minimum, maximum = minimum, maximum\n        lst = sort(lst) \n  \
    \      minimum, maximum = minimum, maximum\n        lst = sort(lst) \n       \
    \ minimum, maximum = minimum, maximum\n        lst = sort(lst) \n        minimum,\
    \ maximum = minimum, maximum\n        lst = sort(lst) \n        minimum, maximum\
    \ = minimum, maximum\n        lst = sort(lst) \n        minimum, maximum = minimum,\
    \ maximum\n        lst = sort(lst) \n        minimum, maximum = minimum, maximum\n\
    \        lst = sort(lst) \n        minimum, maximum = minimum, maximum\n     \
    \   lst = sort(lst) \n        minimum, maximum = minimum, maximum\n        lst\
    \ = sort(lst) \n        minimum, maximum = minimum, maximum\n        lst = sort(lst)\
    \ \n        minimum, maximum = minimum, maximum\n        lst = sort(lst) \n  \
    \      minimum, maximum = minimum, maximum\n        lst = sort(lst) \n       \
    \ minimum, maximum = minimum, maximum\n        lst = sort(lst) \n        minimum,\
    \ maximum = minimum, maximum\n        lst = sort(lst) \n        minimum, maximum\
    \ = minimum, maximum\n        lst = sort(lst) \n        minimum, maximum = minimum,\
    \ maximum\n        lst = sort(lst) \n        minimum, maximum = minimum, maximum\n\
    \        lst = sort(lst) \n        minimum, maximum = minimum, maximum\n     \
    \   lst = sort(lst) \n        minimum, maximum = minimum, maximum\n        lst\
    \ = sort(lst) \n        minimum, maximum = minimum, maximum\n        lst = sort(lst)\
    \ \n        minimum, maximum = minimum, maximum\n        lst = sort(lst) \n  \
    \      minimum, maximum = minimum, maximum\n        lst = sort(lst) \n       \
    \ minimum, maximum = minimum, maximum\n        lst = sort(lst) \n        minimum,\
    \ maximum = minimum, maximum\n        lst = sort(lst) \n        minimum, maximum\
    \ = minimum, maximum\n        lst = sort(lst) \n        minimum, maximum = minimum,\
    \ maximum\n        lst = sort(lst) \n        minimum, maximum = ", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,julia |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([1,2,3,4,5,6,7,8,9,10])`\
    \ returns `[1,2,3,4,5,6,7,8,9,10]`.\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1\
    \ and it works fine. Are you sure you used the function correctly? It should return\
    \ `[1,2,3,4,5,6,7,8,9,10]`\n<|/ c |>\n<| c |>\nYes, I used it exactly as you wrote\
    \ it. Maybe it's because I'm using Julia 1.5.1? I'll try it on another computer\
    \ with Julia 1.5.1.\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.1 and it works\
    \ fine. Are you sure you used the function correctly? It should return `[1,2,3,4,5,6,7,8,9,10]`\n\
    <|/ c |>\n<| c |>\nYes, I used it exactly as you wrote it. Maybe it's because\
    \ I'm using Julia 1.5.1? I'll try it on another computer with Julia 1.5.1.\n<|/\
    \ c |>\n<| a tags=sorting,julia |>\nThe answer by is correct, but I wanted to\
    \ add an explanation as to why it works.\nThe sort function sorts the array in\
    \ place, and returns the sorted array. Since Julia is pass-by-value, the original\
    \ array is unchanged. Therefore, if you were to write sort(lst) followed by lst,\
    \ you would get the sorted array. \nThe reverse function reverses the array in\
    \ place, and returns the reversed array. Since Julia is pass-by-value, the original\
    \ array is unchanged. Therefore, if you were to write reverse(lst) followed by\
    \ lst, you would get the reversed array. \nThe reason why this works is because\
    \ sort and reverse are both in-place functions. Therefore, if you were to write\
    \ sort(lst) followed by reverse(lst), you would get the sorted array.\n<|/ a dscore=4\
    \ |>\n<| c |>\nThanks for your explanation. Now I understand why it works.\n<|/\
    \ c |>\n<| a tags=sorting,julia |>\nThe other answers here are great, but I wanted\
    \ to add an explanation as to why it works.\nThe sort function sorts the array\
    \ in place, and returns the sorted array. Since Julia is pass-by-value, the original\
    \ array is unchanged. Therefore, if you were to write sort(lst) followed by ",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum_index = findfirst(minimum,\
    \ lst) \n        maximum_index = findfirst(maximum, lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    I wrote a function that sorts integers using the insertion sort algorithm:\n<code>",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum, maximum = minimum, maximum\n\
    \        minimum, maximum = minimum - maximum, maximum - minimum\n        minimum,\
    \ maximum = minimum + maximum, maximum + minimum\n        minimum, maximum = minimum\
    \ - maximum, maximum - minimum\n        minimum, maximum = minimum + maximum,\
    \ maximum + minimum\n        minimum, maximum = minimum - maximum, maximum - minimum\n\
    \        minimum, maximum = minimum + maximum, maximum + minimum\n        minimum,\
    \ maximum = minimum - maximum, maximum - minimum\n        minimum, maximum = minimum\
    \ + maximum, maximum + minimum\n        minimum, maximum = minimum - maximum,\
    \ maximum - minimum\n        minimum, maximum = minimum + maximum, maximum + minimum\n\
    \        minimum, maximum = minimum - maximum, maximum - minimum\n        minimum,\
    \ maximum = minimum + maximum, maximum + minimum\n        minimum, maximum = minimum\
    \ - maximum, maximum - minimum\n        minimum, maximum = minimum + maximum,\
    \ maximum + minimum\n        minimum, maximum = minimum - maximum, maximum - minimum\n\
    \        minimum, maximum = minimum + maximum, maximum + minimum\n        minimum,\
    \ maximum = minimum - maximum, maximum - minimum\n        minimum, maximum = minimum\
    \ + maximum, maximum + minimum\n        minimum, maximum = minimum - maximum,\
    \ maximum - minimum\n        minimum, maximum = minimum + maximum, maximum + minimum\n\
    \        minimum, maximum = minimum - maximum, maximum - minimum\n        minimum,\
    \ maximum = minimum + maximum, maximum + minimum\n        minimum, maximum = minimum\
    \ - maximum, maximum - minimum\n        minimum, maximum = minimum + maximum,\
    \ maximum + minimum\n        minimum, maximum = minimum - maximum, maximum - minimum\n\
    \        minimum, maximum = minimum + maximum, maximum + minimum\n        minimum,\
    \ maximum = minimum - maximum, maximum - minimum\n        minimum, maximum = minimum\
    \ + maximum, maximum + minimum\n        minimum, maximum = minimum - maximum,\
    \ maximum - minimum\n        minimum, maximum = minimum + maximum, maximum + minimum\n\
    \        minimum, maximum = minimum - maximum, maximum - minimum\n        minimum,\
    \ maximum = minimum + maximum, maximum + minimum\n        minimum, maximum = minimum\
    \ - maximum, maximum - minimum\n        minimum, maximum = minimum + maximum,\
    \ maximum + minimum\n        minimum, maximum = minimum - maximum, maximum - minimum\n\
    \        minimum, maximum = minimum + maximum, maximum + minimum\n        minimum,\
    \ maximum = minimum - maximum", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia,arrays |>\n<code>\n\
    julia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64} \n      \
    \     lst = sort(lst)\n           lst = reverse(lst)\n           return lst\n\
    \       end\nstrange_sort_list (generic function with 1 method)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=2 |>\nI like using sort! and reverse!:\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    minimum, maximum = minimum, maximum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum - minimum, minimum - minimum\n\
    \    minimum, maximum = minimum + maximum, minimum + maximum\n    minimum, maximum\
    \ = minimum - maximum, minimum - maximum\n    minimum, maximum = minimum - minimum,\
    \ minimum - minimum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum - minimum, minimum - minimum\n    minimum, maximum = minimum + maximum,\
    \ minimum + maximum\n    minimum, maximum = minimum - maximum, minimum - maximum\n\
    \    minimum, maximum = minimum - minimum, minimum - minimum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum - minimum, minimum - minimum\n\
    \    minimum, maximum = minimum + maximum, minimum + maximum\n    minimum, maximum\
    \ = minimum - maximum, minimum - maximum\n    minimum, maximum = minimum - minimum,\
    \ minimum - minimum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum - minimum, minimum - minimum\n    minimum, maximum = minimum + maximum,\
    \ minimum + maximum\n    minimum, maximum = minimum - maximum, minimum - maximum\n\
    \    minimum, maximum = minimum - minimum, minimum - minimum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - maximum,\
    \ minimum - maximum\n    minimum, maximum = minimum - minimum, minimum - minimum\n\
    \    minimum, maximum = minimum + maximum, minimum + maximum\n    minimum, maximum\
    \ = minimum - maximum, minimum - maximum\n    minimum, maximum = minimum - minimum,\
    \ minimum - minimum\n    minimum, maximum = minimum + maximum, minimum + maximum\n\
    \    minimum, maximum = minimum - maximum, minimum - maximum\n    minimum, maximum\
    \ = minimum - minimum, minimum - minimum\n    minimum, maximum = minimum + maximum,\
    \ minimum + maximum\n    minimum, maximum = minimum - maximum, minimum - maximum\n\
    \    minimum, maximum = minimum - minimum, minimum - minimum\n    minimum, maximum\
    \ = minimum + maximum, minimum + maximum\n    minimum, maximum = minimum - ",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a\
    \ dscore=1 |>\n<code>", "    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    minimum == maximum ? minimum : minimum < maximum ? strange_sort_list(lst[minimum:maximum])\
    \ : strange_sort_list(lst[minimum:maximum])\nend\n</code>\n<|/ a tags=sorting,julia,list\
    \ |>\n<| c |>\nThis is very clever! I like it.\n<|/ c |>\n<| c |>\nI like it too.\
    \ Thank you!\n<|/ c |>\n<| a tags=sorting,julia,list |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst = reverse(lst) \n        lst = sort(lst)\
    \ \n        lst = reverse(lst) \n        lst = sort(lst) \n        lst = reverse(lst)\
    \ \n        lst = sort(lst) \n        lst", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if\
    \ you have negative numbers in the list\n<|/ c |>\n<| c |>\nI added a version\
    \ that works for negative numbers too\n<|/ c |>\n<| c |>\nThis doesn't work for\
    \ negative numbers. Try `strange_sort_list([-5, -4, -3, -2, -1, 0, 1, 2, 3, 4,\
    \ 5])`\n<|/ c |>\n<| c |>\nI added a version that works for negative numbers too\n\
    <|/ c |>\n<| a dscore=2 |>\nA simple solution:\n<code>", "    if length(lst) ==\
    \ 0 \n        return [] \n    else \n        minimum = minimum(lst) \n       \
    \ maximum = maximum(lst) \n        minimum_index = findfirst(minimum, lst) \n\
    \        maximum_index = findfirst(maximum, lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index+1:maximum_index])\
    \ \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\
    \ \n        return lst \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a tags=sorting,julia\
    \ |>\nHere's a solution using sortperm:\n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    The answer by is good, but I thought I'd add my own solution, since I find it\
    \ more readable:\n<code>", "    if length(lst) == 0 \n        return [] \n   \
    \ \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n    minimum_idx\
    \ = findfirst(i->i==minimum, lst)\n    maximum_idx = findfirst(i->i==maximum,\
    \ lst)\n    \n    minimum_idx = minimum_idx ?: length(lst)\n    maximum_idx =\
    \ maximum_idx ?: length(lst)\n    \n    lst[minimum_idx], lst[maximum_idx] = lst[maximum_idx],\
    \ lst[minimum_idx]\n    \n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis doesn't work if there are duplicates in the list.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. I tested it before posting it\n<|/ c |>\n<| c |>\nI tested\
    \ it and it doesn't work. Try it on `[1,1,2,3]`.\n<|/ c |>\n<| c |>\nYes, it does.\
    \ I tested it before posting it\n<|/ c |>\n<| c |>\nI tested it and it doesn't\
    \ work. Try it on `[1,1,2,3]`.\n<|/ c |>\n<| a dscore=2 |>\nI wrote a function\
    \ that does this in Julia:\n<code>", "    if length(lst) == 0 \n        return\
    \ [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n    \n  \
    \  lst = sort(lst)\n    \n    lst = lst .- minimum\n    \n    lst = lst .+ maximum\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.",
  "    if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1]\
    \ \n        return lst \n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the vector in reverse order.", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| c\
    \ |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27839427)\n\
    <|/ c |>\n<| c |>\nThis does provide an answer to the question. He asked how to\
    \ sort a list in a strange way. He also provided a solution that he found useful.\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27839427)\n<|/ c |>\n<| c |>\nThis does\
    \ not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27839427)\n\
    <|/ c |>\n<| c |>\nThis does not provide an answer to the question. To critique\
    \ or request clarification from an author, leave a comment below their post. -\
    \ [From Review](/review/low-quality-posts/27839427)\n<|/ c |>\n<| a tags=sorting,julia,list\
    \ |>\n<code>", "    if length(lst) == 0 \n        return [] \n    else \n    \
    \    minimum = minimum(lst) \n        maximum = maximum(lst) \n        minimum_index\
    \ = findfirst(minimum == lst) \n        maximum_index = findfirst(maximum == lst)\
    \ \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\
    \ \n        return strange_sort_list(lst) \nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=sorting,julia |>\nI came up with a solution which doesn't require any\
    \ additional packages. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n<| a dscore=2\
    \ |>\nThe answer by is correct but can be simplified a bit:\n<code>\njulia> function\
    \ strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n           return sort(lst)\n\
    \       end\nstrange_sort_list (generic function with 1 method)", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns true if the given number is even, false otherwise.", "    lst =\
    \ sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting\
    \ |>\n<| c |>\nThis should be the accepted answer. `sort!` does exactly what it\
    \ says on the tin, which is to sort in-place. `sort` returns a new vector, which\
    \ you then have to assign to `lst`, which defeats the purpose of in-place sorting.\
    \ `sort!` modifies the original vector, which is exactly what we want.\n<|/ c\
    \ |>\n<| a dscore=3 |>\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis should\
    \ be the accepted answer. `sort!` does exactly what it says on the tin, which\
    \ is to sort in-place. `sort` returns a new vector, which you then have to assign\
    \ to `lst`, which defeats the purpose of in-place sorting. `sort!` modifies the\
    \ original vector, which is exactly what we want.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n\
    \ 4\n 5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,sorting |>\n<code>\njulia>\
    \ sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\njulia> sort!([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| a dscore=3 |>\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n<| a dscore=3 |>\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia,list |>\n<| a dscore=2 |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\
    \ \n           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nI wrote a package for sorting in Julia called\
    \ Sorting.jl which you can install with Pkg.add(\"Sorting\"). Sorting.jl is designed\
    \ to sort arrays of any type. Here is an example using your data:\n<code>\njulia>\
    \ using Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a |>\nA simple and efficient solution is\
    \ to use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 tags=julia |>\n<| a dscore=3 |>\n\
    The most efficient way is to use sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=2 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\n\
    julia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n\
    </code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=julia |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\njulia>\
    \ sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=2 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia |>\n\
    <| a dscore=2 |>\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a ", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(i->i==minimum, lst, 0) \n        maximum_index\
    \ = findfirst(i->i==maximum, lst, length(lst)) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index+1:maximum_index])\
    \ \n        lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\
    \ \n        return lst \nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia\
    \ |>\nI wrote a package called Sorting.jl that does this for you. \n<code>\njulia>\
    \ using Sorting", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,julia |>\n<code>", "    lst\
    \ = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <code language=julia-1.5>\nstrange_sort_", "    if length(lst) == 0 \n       \
    \ return [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1] \n        return\
    \ lst \nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\nI wrote a function\
    \ that does this in Julia. \n<code>", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum = minimum + 1 \n        maximum = maximum - 1 \n        lst\
    \ = sort(lst) \n        lst = lst[minimum:maximum] \n        return lst \nend\n\
    </cell>\n<code language=julia-1.5>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", " \
    \   if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum, maximum = minimum, maximum\n\
    \        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum\
    \ = minimum + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum\
    \ + 1\n        minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum\
    \ = minimum + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum\
    \ + 1\n        minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, maximum = minimum - 1, maximum + 1\n        minimum, maximum\
    \ = minimum + 1, maximum - 1\n        minimum, maximum = minimum + 1, maximum\
    \ + 1\n        minimum, maximum = minimum - 1, maximum - 1\n        minimum, maximum\
    \ = minimum - 1, maximum + 1\n        minimum, maximum = minimum + 1, maximum\
    \ - 1\n        minimum, maximum = minimum + 1, maximum + 1\n        minimum, maximum\
    \ = minimum - 1, maximum - 1\n        minimum, maximum = minimum - 1, maximum\
    \ + 1\n        minimum, maximum = minimum + 1, maximum - 1\n        minimum, maximum\
    \ = minimum + 1, maximum + 1\n        minimum, maximum = minimum - 1, maximum\
    \ - 1\n        minimum, ", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for\
    \ me. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 0.6.2 and it works. What version are you using?\n\
    <|/ c |>\n<| c |>\nI'm using 0.6.2. I also tried it on 0.6.1 and it also works.\
    \ Maybe it's because I'm on Windows?\n<|/ c |>\n<| c |>\nI tested it on Windows\
    \ and it also works. Maybe it's because I'm on Windows?\n<|/ c |>\n<| c |>\nI\
    \ tested it on Windows and it also works. Maybe it's because I'm on Windows?\n\
    <|/ c |>\n<| a tags=sorting,julia |>\nThe function below is based on a previous\
    \ answer by Robert. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the number of unique elements in the vector.", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum, maximum = minimum, maximum - minimum\
    \ \n        lst = sort(lst) \n        lst = lst .- minimum \n        lst = lst\
    \ .+ maximum \n        return lst \n    end\nend\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis code doesn't work if you have a list of negative numbers. For example,\
    \ `strange_sort_list([-4, -5, -6, -7, -8])` returns `[-8, -7, -6, -5, -4]`.\n\
    <|/ c |>\n<| c |>\nIt also doesn't work if you have a list of zeroes. For example,\
    \ `strange_sort_list([0, 0, 0, 0, 0])` returns `[0, 0, 0, 0, 0]`.\n<|/ c |>\n\
    <| c |>\nIt also doesn't work if you have a list of negative numbers. For example,\
    \ `strange_sort_list([-4, -5, -6, -7, -8])` returns `[-8, -7, -6, -5, -4]`.\n\
    <|/ c |>\n<| c |>\nIt also doesn't work if you have a list of negative numbers.\
    \ For example, `strange_sort_list([-4, -5, -6, -7, -8])` returns `[-8, -7, -6,\
    \ -5, -4]`.\n<|/ c |>\n<| c |>\nIt also doesn't work if you have a list of negative\
    \ numbers. For example, `strange_sort_list([-4, -5, -6, -7, -8])` returns `[-8,\
    \ -7, -6, -5, -4]`.\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum_index = findfirst(minimum, lst)\
    \ \n        maximum_index = findfirst(maximum, lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend \n</code>\n<|/ a dscore=1 |>\n<| c |>\nI like this\
    \ solution, but I wonder if it can be done without recursion.\n<|/ c |>\n<| c\
    \ |>\nI guess it can, but I haven't thought about it yet. I'll try it out and\
    \ let you know how it goes.\n<|/ c |>\n<| c |>\nI added a recursive version. Hope\
    \ it helps.\n<|/ c |>\n<| a tags=sorting,julia,arrays |>\nI came up with a solution\
    \ that doesn't use recursion:\n<code>", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1] \n        return\
    \ lst \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work\
    \ for me. `strange_sort_list([1,2,3])` returns `[1,2,3]` instead of `[1,2,3]`.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. What version are you\
    \ using?\n<|/ c |>\n<| c |>\nI'm using Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it on 0.6.2 and it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm\
    \ using 0.6.2\n<|/ c |>\n<| a tags=sorting,julia |>\n<code>", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        minimum = min(minimum, maximum) \n     \
    \   maximum = max(minimum, maximum) \n        lst = sort(lst) \n        lst =\
    \ lst[minimum:maximum] \n        return lst \nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a |>\n<| a tags=sorting,julia |>\nI wrote a package called \"sort\" that does\
    \ this sort of thing. \n<code>\njulia> using sort", "    lst = sort(lst)\n   \
    \ lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| a dscore=2\
    \ |>\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           lst = sort(lst)\n           lst = reverse(lst)\n           return\
    \ lst\n       end\nstrange_sort_list (generic function with 1 method)", "    if\
    \ length(lst) == 0 \n        return [] \n    \n    minimum = minimum(lst)\n  \
    \  maximum = maximum(lst)\n    \n    minimum_index = findfirst(minimum == lst)\n\
    \    maximum_index = findfirst(maximum == lst)\n    \n    lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n    \n    return\
    \ lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the vector in reverse order. \nThe function should work for both\
    \ vectors of integers and vectors of floating point numbers.", "    if length(lst)\
    \ == 0 \n        return [] \n    else \n        minimum = minimum(lst) \n    \
    \    maximum = maximum(lst) \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1]\
    \ \n        return lst \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=1\
    \ |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a tags=sorting,julia |>\n<| a |>\n<code>", "    if length(lst) == 0 \n   \
    \     return [] \n    \n    minimum = minimum(lst)\n    maximum = maximum(lst)\n\
    \    \n    lst = sort(lst)\n    \n    lst = lst .- minimum\n    lst = lst .+ maximum\n\
    \    \n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a vector where each element is the product of the corresponding elements in\
    \ the original vector. For example, if the input vector is [1,2,3], the output\
    \ vector should be [1,2,6].", "    if length(lst) == 0\n        return lst\n \
    \   \n    minimum = min(lst)\n    maximum = max(lst)\n    \n    lst = sort(lst)\n\
    \    \n    minimum = min(minimum, lst[1])\n    maximum = max(maximum, lst[end])\n\
    \    \n    minimum = min(minimum, lst[end-1])\n    maximum = max(maximum, lst[1])\n\
    \    \n    minimum = min(minimum, lst[end-2])\n    maximum = max(maximum, lst[end-1])\n\
    \    \n    minimum = min(minimum, lst[end-3])\n    maximum = max(maximum, lst[end-2])\n\
    \    \n    minimum = min(minimum, lst[end-4])\n    maximum = max(maximum, lst[end-3])\n\
    \    \n    minimum = min(minimum, lst[end-5])\n    maximum = max(maximum, lst[end-4])\n\
    \    \n    minimum = min(minimum, lst[end-6])\n    maximum = max(maximum, lst[end-5])\n\
    \    \n    minimum = min(minimum, lst[end-7])\n    maximum = max(maximum, lst[end-6])\n\
    \    \n    minimum = min(minimum, lst[end-8])\n    maximum = max(maximum, lst[end-7])\n\
    \    \n    minimum = min(minimum, lst[end-9])\n    maximum = max(maximum, lst[end-8])\n\
    \    \n    minimum = min(minimum, lst[end-10])\n    maximum = max(maximum, lst[end-9])\n\
    \    \n    minimum = min(minimum, lst[end-11])\n    maximum = max(maximum, lst[end-10])\n\
    \    \n    minimum = min(minimum, lst[end-12])\n    maximum = max(maximum, lst[end-11])\n\
    \    \n    minimum = min(minimum, lst[end-13])\n    maximum = max(maximum, lst[end-12])\n\
    \    \n    minimum = min(minimum, lst[end-14])\n    maximum = max(maximum, lst[end-13])\n\
    \    \n    minimum = min(minimum, lst[end-15])\n    maximum = max(maximum, lst[end-14])\n\
    \    \n    minimum = min(minimum, lst[end-16])\n    maximum = max(maximum, lst[end-15])\n\
    \    \n    minimum = min(minimum, lst[end-17])\n    maximum = max(maximum, lst[end-16])\n\
    \    \n    minimum = min(minimum, lst[end-18])\n    maximum = max(maximum, lst[end-17])\n\
    \    \n    minimum = min(minimum, lst[end-19])\n    maximum = max(maximum, lst[end-18])\n\
    \    \n    minimum = min(minimum, lst[end", "    minimum = minimum(lst)\n    maximum\
    \ = maximum(lst)\n    lst = sort(lst)\n    lst = lst[minimum:maximum]\n    return\
    \ lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does not seem to work\
    \ if you have a list with negative numbers. E.g. `strange_sort_list([-4, -5, -6,\
    \ -7, -8])` returns `[-4, -5, -6, -7, -8]`.\n<|/ c |>\n<| c |>\nYes, I agree with\
    \ you. My solution was for positive numbers. I edited my answer to include a solution\
    \ for negative numbers.\n<|/ c |>\n<| c |>\nI added a solution for negative numbers.\
    \ I hope it helps.\n<|/ c |>\n<| c |>\nI added a solution for negative numbers.\
    \ I hope it helps.\n<|/ c |>\n<| a |>\n<code>", "    if length(lst) == 0 \n  \
    \      return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        minimum_index = findfirst(minimum == lst) \n      \
    \  maximum_index = findfirst(maximum == lst) \n        minimum_value = minimum[minimum_index]\
    \ \n        maximum_value = maximum[maximum_index] \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        strange_sort_list(lst[minimum_index:maximum_index])\
    \ \n        lst[minimum_index], lst[maximum_index] = minimum_value, maximum_value\
    \ \n        return lst \nend\n</code>\n<|/ a |>\n<| c |>\nThis is an interesting\
    \ solution, but I wonder how it compares to other solutions.\n<|/ c |>\n<| c |>\n\
    It compares very well to other solutions because it is O(n), where n is the length\
    \ of the list. Other solutions would require O(n^2) or O(nlogn) algorithms. I\
    \ guess it depends on the size of the list. My solution has O(n) complexity and\
    \ O(1) space complexity.\n<|/ c |>\n<| c |>\nI guess it depends on the size of\
    \ the list. My solution has O(n) complexity and O(1) space complexity.\n<|/ c\
    \ |>\n<| c |>\nI guess it depends on the size of the list. My solution has O(n)\
    \ complexity and O(1) space complexity.\n<|/ c |>\n<| c |>\nI guess it depends\
    \ on the size of the list. My solution has O(n) complexity and O(1) space complexity.\n\
    <|/ c |>\n<| a tags=sorting,julia |>\n<code>", "    if length(lst) == 0 \n   \
    \     return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        middle = median(lst) \n        lst = sort(lst) \n \
    \       lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        lst = sort(lst) \n        lst = sort(lst) \n\
    \        lst = sort(lst) \n        ", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1,\
    \ 2, 3, 4])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n\
    </cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers sorted from smallest to largest.", "    if length(lst) == 0\n     \
    \   return lst\n    elseif length(lst) == 1\n        return lst\n    else\n  \
    \      minimum = minimum(lst)\n        maximum = maximum(lst)\n        minimum2\
    \ = minimum(lst)\n        maximum2 = maximum(lst)\n        minimum3 = minimum(lst)\n\
    \        maximum3 = maximum(lst)\n        minimum4 = minimum(lst)\n        maximum4\
    \ = maximum(lst)\n        minimum5 = minimum(lst)\n        maximum5 = maximum(lst)\n\
    \        minimum6 = minimum(lst)\n        maximum6 = maximum(lst)\n        minimum7\
    \ = minimum(lst)\n        maximum7 = maximum(lst)\n        minimum8 = minimum(lst)\n\
    \        maximum8 = maximum(lst)\n        minimum9 = minimum(lst)\n        maximum9\
    \ = maximum(lst)\n        minimum10 = minimum(lst)\n        maximum10 = maximum(lst)\n\
    \        minimum11 = minimum(lst)\n        maximum11 = maximum(lst)\n        minimum12\
    \ = minimum(lst)\n        maximum12 = maximum(lst)\n        minimum13 = minimum(lst)\n\
    \        maximum13 = maximum(lst)\n        minimum14 = minimum(lst)\n        maximum14\
    \ = maximum(lst)\n        minimum15 = minimum(lst)\n        maximum15 = maximum(lst)\n\
    \        minimum16 = minimum(lst)\n        maximum16 = maximum(lst)\n        minimum17\
    \ = minimum(lst)\n        maximum17 = maximum(lst)\n        minimum18 = minimum(lst)\n\
    \        maximum18 = maximum(lst)\n        minimum19 = minimum(lst)\n        maximum19\
    \ = maximum(lst)\n        minimum20 = minimum(lst)\n        maximum20 = maximum(lst)\n\
    \        minimum21 = minimum(lst)\n        maximum21 = maximum(lst)\n        minimum22\
    \ = minimum(lst)\n        maximum22 = maximum(lst)\n        minimum23 = minimum(lst)\n\
    \        maximum23 = maximum(lst)\n        minimum24 = minimum(lst)\n        maximum24\
    \ = maximum(lst)\n        minimum25 = minimum(lst)\n        maximum25 = maximum(lst)\n\
    \        minimum26 = minimum(lst)\n        maximum26 = maximum(lst)\n        minimum27\
    \ = minimum(lst)\n        maximum27 = maximum(lst)\n        minimum28 = minimum(lst)\n\
    \        maximum28 = maximum(lst)\n        minimum29 = minimum(lst)\n        maximum29\
    \ = maximum(lst)\n        minimum30 = minimum(lst)\n        maximum30 = maximum(lst)\n\
    \        minimum31 = minimum(lst", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote a Julia package\
    \ that does this for you:\nhttps://github.com/kamens/sort\n<code>\njulia> using\
    \ sort", "    if length(lst) == 0 \n        return [] \n    else \n        minimum\
    \ = minimum(lst) \n        maximum = maximum(lst) \n        lst = sort(lst) \n\
    \        lst = lst[minimum:maximum+1] \n        return lst \nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n</cell>\n<code language=julia-1.5>\n\
    strange_sort_list([5, 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a new vector with elements multiplied by 2.", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n\
    <| a tags=julia,sorting |>\nThe answer by is great, but I wanted to add that you\
    \ can also use sort! to sort the array in-place:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=3 |>\nIn Julia 1.2 you can use the sort! function which sorts the array\
    \ in place:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n\
    \ 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\nIn Julia 1.2, you can use the sort! function which sorts the array in place:\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,sorting |>\nIn Julia 1.2, you\
    \ can use the sort! function which sorts the array in place:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=3 |>\n<|\
    \ a dscore=2 |>\nIn Julia 1.2, you can use the sort! function which sorts the\
    \ array in place:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\nIn Julia 1.2, you can use the sort! function which sorts the array in place:\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting |>\nIn Julia 1.2, you\
    \ can use the sort! function which sorts the array in place:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a |>\n<| a tags=sorting,julia |>\n<code>",
  "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend", "    lst = sort(lst)\n\
    \    lst = reverse(lst)\n    return lst\nend", "    if length(lst) == 0 \n   \
    \     return [] \n    else \n        minimum = minimum(lst) \n        maximum\
    \ = maximum(lst) \n        minimum_index = findfirst(minimum == lst) \n      \
    \  maximum_index = findfirst(maximum == lst) \n        minimum_index == maximum_index\
    \ ? \n            lst[minimum_index] : \n            lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        return strange_sort_list(lst[minimum_index:maximum_index])\
    \ \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't work for\
    \ me. `strange_sort_list([5, 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<|\
    \ c |>\nI tested it on Julia 0.6.2 and it works. I guess you have a different\
    \ version?\n<|/ c |>\n<| c |>\nAh, I see what you're doing. You're sorting by\
    \ swapping two elements. That's not what I was trying to do. I'll edit my question\
    \ to reflect that.\n<|/ c |>\n<| c |>\nI edited my answer to reflect your edit.\
    \ Hope it helps.\n<|/ c |>\n<| c |>\nI edited my answer to reflect your edit.\
    \ Hope it helps.\n<|/ c |>\n<| a dscore=2 |>\nI believe that this is what you\
    \ are looking for:\n<code>\njulia> function strange_sort_list(lst::Vector{Int64})::Vector{Int64}\n\
    \           minimum = minimum(lst)\n           maximum = maximum(lst)\n      \
    \     minimum_index = findfirst(minimum == lst)\n           maximum_index = findfirst(maximum\
    \ == lst)\n           minimum_index == maximum_index ? lst[minimum_index] : lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n           return\
    \ strange_sort_list(lst[minimum_index:maximum_index])\n       end\nstrange_sort_list\
    \ (generic function with 1 method)", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, maximum) \n        maximum = max(minimum, maximum)\
    \ \n        minimum = min(minimum, ", "    if length(lst) == 0 \n        return\
    \ [] \n    else \n        minimum = minimum(lst) \n        maximum = maximum(lst)\
    \ \n        minimum_index = findfirst(minimum == lst) \n        maximum_index\
    \ = findfirst(maximum == lst) \n        lst[minimum_index], lst[maximum_index]\
    \ = lst[maximum_index], lst[minimum_index] \n        return strange_sort_list(lst)\
    \ \nend\n</code>\n<|/ a tags=sorting,julia |>\n<| a dscore=2 |>\nThe Julia standard\
    \ library has a function called sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a tags=sorting,julia |>\nThe Julia standard library has a function called\
    \ sortperm:\n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,julia |>\n\
    I came across this question while trying to solve a similar problem in Julia.\
    \ My solution was to create a custom sorting function and use that to sort a vector\
    \ of integers. \n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return\
    \ lst\nend\n</code>\n<|/ a tags=julia,sorting,arrays |>\n<| c |>\nThis does not\
    \ provide an answer to the question. To critique or request clarification from\
    \ an author, leave a comment below their post. - [From Review](/review/low-quality-posts/27829188)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He wants to sort an\
    \ array in Julia in a strange way. He has provided a solution that does exactly\
    \ that. He also provided a link to his solution. He also provided a link to his\
    \ solution. He also provided a link to his solution. He also provided a link to\
    \ his solution. He also provided a link to his solution. He also provided a link\
    \ to his solution. He also provided a link to his solution. He also provided a\
    \ link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided a link to his solution. He also provided\
    \ a link to his solution. He also provided ", "    lst = sort(lst)\n    lst =\
    \ reverse(lst)\n    return lst\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nI\
    \ believe this should be `sort(lst)` instead of `sort(lst)` since `sort` returns\
    \ a new array rather than mutating the original one.\n<|/ c |>\n<| c |>\nThanks\
    \ for pointing that out. I've updated the answer.\n<|/ c |>\n<| a dscore=4 |>\n\
    <code>\njulia> using Statistics", "    if length(lst) == 0 \n        return []\
    \ \n    else \n        minimum = minimum(lst)\n        maximum = maximum(lst)\n\
    \        minimum_index = findfirst(minimum, lst)\n        maximum_index = findfirst(maximum,\
    \ lst)\n        lst[minimum_index], lst[maximum_index] = lst[maximum_index], lst[minimum_index]\n\
    \        strange_sort_list(lst)\n        return lst \nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>", " \
    \   if length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        minimum_index = findfirst(minimum\
    \ == lst) \n        maximum_index = findfirst(maximum == lst) \n        lst[minimum_index],\
    \ lst[maximum_index] = lst[maximum_index], lst[minimum_index] \n        return\
    \ strange_sort_list(lst) \nend\n</code>\n<|/ a tags=sorting,julia,arrays |>\n\
    <| a tags=sorting,julia,arrays |>\nI believe that in Julia 1.x the sort function\
    \ was changed to use an external sort algorithm (mergesort in this case). \nThe\
    \ Julia 1.x documentation says:", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work for me. `strange_sort_list([5,\
    \ 5, 5, 5])` returns `[5, 5, 5, 5]`.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I guess you didn't copy the function correctly. Try copying the function exactly\
    \ as I wrote it.\n<|/ c |>\n<| c |>\nI copied it exactly as you wrote it, but\
    \ I still get `[5, 5, 5, 5]` as the output. I'm using Julia 1.5.1. Maybe it's\
    \ an issue with my version of Julia?\n<|/ c |>\n<| c |>\nI tested it on Julia\
    \ 1.5.1 and it works. I guess you didn't copy the function correctly. Try copying\
    \ the function exactly as I wrote it.\n<|/ c |>\n<| c |>\nI copied it exactly\
    \ as you wrote it, but I still get `[5, 5, 5, 5]` as the output. I'm using Julia\
    \ 1.5.1. Maybe it's an issue with my version of Julia?\n<|/ c |>\n<| a dscore=2\
    \ |>\nThe answer by is correct but is missing a key point. \nThe function strange_sort_list\
    \ returns a new vector and does not modify the original vector. \nThe function\
    \ strange_sort_list can be written as:\n<code>", "    lst = sort(lst)\n    lst\
    \ = reverse(lst)\n    return lst\nend\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5,\
    \ 5, 5, 5])\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.", "    if\
    \ length(lst) == 0 \n        return [] \n    else \n        minimum = minimum(lst)\
    \ \n        maximum = maximum(lst) \n        lst = sort(lst) \n        lst = lst[minimum:maximum+1]\
    \ \n        lst = sort(lst) \n        return lst \n    end\nend\n</code>\n<|/\
    \ a tags=sorting,julia,list |>\n<| a dscore=1 |>\nThe other answers here are great,\
    \ but I wanted to add my own solution that I find easier to read and understand:\n\
    <code>", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=sorting,julia |>\nI wrote a package for sorting in\
    \ Julia called Sorting.jl. \nIt has many sorting algorithms and is easy to use.\
    \ \n<code>\nusing Sorting ", "    lst = sort(lst)\n    lst = reverse(lst)\n  \
    \  lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</code>\n<|/\
    \ a tags=sorting,julia |>\n<| a dscore=2 |>\nI came up with this:\n<code>", " \
    \   lst = sort(lst)\n    lst = reverse(lst)\n    return lst\nend\n</cell>\n<code\
    \ language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\nIn Julia v0.6, you can use the built-in function sort!:\n<code>\njulia>\
    \ sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a dscore=3 |>\n<| a dscore=2 |>\nIn Julia v0.6 you can use the built-in function\
    \ sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n\
    \ 3\n 4\n 5\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\n\
    In Julia v0.6, you can use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=julia,sorting |>\nIn Julia v0.6, you can use the built-in function sort!:\n\
    <code>\njulia> sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n\
    \ 5\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,sorting |>\nIn Julia v0.6, you\
    \ can use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nIn Julia v0.6, you can use the built-in function sort!:\n<code>\njulia>\
    \ sort!([5,4,3,2,1])\n5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n\
    <|/ a tags=julia,sorting |>\n<| a tags=julia,sorting |>\nIn Julia v0.6, you can\
    \ use the built-in function sort!:\n<code>\njulia> sort!([5,4,3,2,1])\n5-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,sorting\
    \ |>\nIn Julia v", "    lst = sort(lst)\n    lst = reverse(lst)\n    return lst\n\
    end\n</cell>\n<code language=julia-1.5>\nstrange_sort_list([5, 5, 5, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of strings that represent each number in that vector. \nThe strings\
    \ should be in descending order.", "    lst = sort(lst)\n    lst = reverse(lst)\n\
    \    return lst\nend\n</code>\n<|/ a tags=julia,sorting |>\n<| c |>\nI like this\
    \ solution, but I wonder if there is a way to do it without having to reverse\
    \ the list. Maybe by using the `sort!` function instead?\n<|/ c |>\n<| c |>\n\
    Yes, you can do `sort!(lst)` instead of `sort(lst)`\n<|/ c |>\n<| c |>\n`sort!`\
    \ will reverse the list before sorting, which is not what OP wants.\n<|/ c |>\n\
    <| c |>\nI didn't know that `sort!` will reverse the list before sorting. Thanks\
    \ for pointing that out.\n<|/ c |>\n<| a tags=julia,sorting |>\n<code>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
