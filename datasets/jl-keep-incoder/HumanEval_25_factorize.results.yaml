name: HumanEval_25_factorize
language: julia
results:
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3l51sfa.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3l51sfa.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl0cqp98o.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpl0cqp98o.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at /tmp/tmpl0cqp98o.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at /tmp/tmpl0cqp98o.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at /tmp/tmpl0cqp98o.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at /tmp/tmpl0cqp98o.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpl0cqp98o.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at /tmp/tmpl0cqp98o.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpl0cqp98o.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl0cqp98o.jl:12\n   [2] top-level scope at /tmp/tmpl0cqp98o.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl0cqp98o.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl0cqp98o.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprraxtmuo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprraxtmuo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprraxtmuo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0bwiqoq1.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0bwiqoq1.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqo_h7y2c.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqo_h7y2c.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmps_f42da0.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmps_f42da0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == nil else factor_counts[factor]\n    end\n    factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv5vlohem.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpv5vlohem.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4w6dwkib.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4w6dwkib.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmic2xha2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmic2xha2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplu6bpzh9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplu6bpzh9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplu6bpzh9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvwt4px_o.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvwt4px_o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvwt4px_o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiyfkxpnm.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiyfkxpnm.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprwkcklg7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprwkcklg7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprwkcklg7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm_q_1ao6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm_q_1ao6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm_q_1ao6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoejf4xmb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoejf4xmb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoejf4xmb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqrwc6sea.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqrwc6sea.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3fow85n.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo3fow85n.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph45ajctc.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph45ajctc.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw5dpskkw.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw5dpskkw.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    factors = factorize(n/2)\n    factors = factors[2:end]\n\
    \    factors = [factors[i]*factors[i+1] for i in 1:length(factors)]\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw767zm6x.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw767zm6x.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,factor)\
    \ in enumerate(factors)\n        factors_count[i] = factors[factor]\n    end\n\
    \    factors_count = sort(factors_count)\n    factors_count = factors_count[end:-1:1]\n\
    \    return factors_count\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5rp077y.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd5rp077y.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = factor_count[i] + factors[i]\n    end\n    factor_count\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwue5mtu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvwue5mtu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n\
    \    factor_counts = reverse(factor_counts)\n    factor_counts = reverse(factor\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7px4h899.jl:69\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7px4h899.jl:69\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpom1ary7o.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpom1ary7o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpom1ary7o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n-1)\n    factorization = [n] + factorization\n    return factorization\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx35e5ycv.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx35e5ycv.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz7kdopyu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz7kdopyu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz7kdopyu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = sort(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfupjvjdn.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfupjvjdn.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9yhffmhw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9yhffmhw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9yhffmhw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqwlok21r.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwlok21r.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5wd59z1x.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5wd59z1x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5wd59z1x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9fb04c50.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9fb04c50.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprjzkpxyv.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprjzkpxyv.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_v_m0jo0.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_v_m0jo0.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxvrs6ci2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxvrs6ci2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxvrs6ci2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == nil else factor_counts[factor]\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn174cyzj.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn174cyzj.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp13hf45i_.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp13hf45i_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6shc3iwt.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6shc3iwt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors=[]\n    factor=factorize(n-1)\n    for f in factor\n\
    \        push!(factors,f)\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2vc264bq.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2vc264bq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqrg1f6rv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqrg1f6rv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqrg1f6rv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp3dub_114.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at\
    \ /tmp/tmp3dub_114.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at /tmp/tmp3dub_114.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at /tmp/tmp3dub_114.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at /tmp/tmp3dub_114.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at /tmp/tmp3dub_114.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at\
    \ /tmp/tmp3dub_114.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at /tmp/tmp3dub_114.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp3dub_114.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp3dub_114.jl:12\n   [2] top-level scope at /tmp/tmp3dub_114.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp3dub_114.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3dub_114.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpm0ov019l.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpm0ov019l.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at /tmp/tmpm0ov019l.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at /tmp/tmpm0ov019l.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at /tmp/tmpm0ov019l.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at /tmp/tmpm0ov019l.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpm0ov019l.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at /tmp/tmpm0ov019l.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpm0ov019l.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpm0ov019l.jl:12\n   [2] top-level scope at /tmp/tmpm0ov019l.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpm0ov019l.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm0ov019l.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors = factorize(n/2)\n    factors = [f*factors[n]\
    \ for f in factors]\n    factors = sort(factors)\n    factors = [f for f in factors\
    \ if f>1]\n    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqnz8yyyp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqnz8yyyp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqnz8yyyp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmporgz6s27.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmporgz6s27.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmporgz6s27.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factors_count[i] = count(factors)\n    end\n    factors_count = sort(factors_count)\n\
    \    factors_count = factors_count[end:-1:1]\n    return factors_count\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp01gspw2r.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp01gspw2r.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3xk9jp64.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3xk9jp64.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnfrbaloo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnfrbaloo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnfrbaloo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddzdcmzz.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpddzdcmzz.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factors = sort(factors)\n    factors = unique(factors)\n\
    \    factors = sort(factors)\n    factors = unique(factors)\n    factors = sort(factors)\n\
    \    factors = unique(factors)\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwios9kt7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwios9kt7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwios9kt7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpikeqqfx4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpikeqqfx4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8kut2c7h.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8kut2c7h.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplxvodotc.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplxvodotc.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdmna8gfh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdmna8gfh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdmna8gfh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk5hv6j6b.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk5hv6j6b.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmuu6xnra.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmuu6xnra.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmuu6xnra.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by = x ->\
    \ x[1])\n    factor_counts = reverse(factor_counts)\n    return factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdfrepdi.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmdfrepdi.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5cwuw4zs.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5cwuw4zs.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5cwuw4zs.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,f) in\
    \ enumerate(factors)\n        factors_count[i] = factor_count[f]\n    end\n  \
    \  factors_count = sort(factors_count)\n    factors = factors[2:end]\n    factors_count\
    \ = factors_count[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpymt8e6jn.jl:27\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpymt8e6jn.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:28\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at /tmp/tmpymt8e6jn.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:29\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at /tmp/tmpymt8e6jn.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:30\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at /tmp/tmpymt8e6jn.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:31\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at /tmp/tmpymt8e6jn.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:32\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpymt8e6jn.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:33\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at /tmp/tmpymt8e6jn.jl:33\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpymt8e6jn.jl:34\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpymt8e6jn.jl:12\n   [2] top-level scope at /tmp/tmpymt8e6jn.jl:34\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpymt8e6jn.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpymt8e6jn.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0el25a2_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0el25a2_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0el25a2_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpoazryc6h.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpoazryc6h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpoazryc6h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnghxm01_.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnghxm01_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdwghpax4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdwghpax4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdwghpax4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4er166z3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4er166z3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4er166z3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpql8_8zvr.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpql8_8zvr.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpi5n1880a.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpi5n1880a.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at /tmp/tmpi5n1880a.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at /tmp/tmpi5n1880a.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at /tmp/tmpi5n1880a.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at /tmp/tmpi5n1880a.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpi5n1880a.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at /tmp/tmpi5n1880a.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpi5n1880a.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpi5n1880a.jl:12\n   [2] top-level scope at /tmp/tmpi5n1880a.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpi5n1880a.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi5n1880a.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = []\n    for factor in factorization\n        push!(factors,\
    \ factor)\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpukwqwzlc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpukwqwzlc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpseishs1l.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpseishs1l.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:25\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at /tmp/tmpseishs1l.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:26\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at /tmp/tmpseishs1l.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:27\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at /tmp/tmpseishs1l.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:28\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at /tmp/tmpseishs1l.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:29\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpseishs1l.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:30\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at /tmp/tmpseishs1l.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpseishs1l.jl:31\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpseishs1l.jl:12\n   [2] top-level scope at /tmp/tmpseishs1l.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpseishs1l.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpseishs1l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    factors = factorize(n/2)\n    factors = factors[2:end]\n\
    \    factors = factors + [1]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgk3r96ne.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgk3r96ne.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = factor_count[i] + factors[i]\n    end\n    factor_count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprlub4mpx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprlub4mpx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplvotjf2_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplvotjf2_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = sort(factors)\n    factors = factors[2:end]\n    factors = sort(factors)\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factor\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu2vya4v2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu2vya4v2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu2vya4v2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk4yg4jnt.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpk4yg4jnt.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at /tmp/tmpk4yg4jnt.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at /tmp/tmpk4yg4jnt.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at /tmp/tmpk4yg4jnt.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at /tmp/tmpk4yg4jnt.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpk4yg4jnt.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at /tmp/tmpk4yg4jnt.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpk4yg4jnt.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpk4yg4jnt.jl:12\n   [2] top-level scope at /tmp/tmpk4yg4jnt.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpk4yg4jnt.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk4yg4jnt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojul5wrr.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpojul5wrr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factor\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5hmyo6n6.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5hmyo6n6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5hmyo6n6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts)\n    return\
    \ factor_counts\nend\n</cell>\n<code language=julia-1.5>\nfactorize(8)\n</cell>\n\
    <code language=julia-1.5>\nfactorize(25)\n</cell>\n<code language=julia-1.5>\n\
    factorize(70)\n</cell>\n<text>\nProblem 3\nWrite a function that returns all prime\
    \ factors of a given integer in the order from smallest to largest.\n    Input\
    \ number should be equal to the product of all factors\n    >>> prime_factors(8)\n\
    \    [2, 2, 2]\n    >>> prime_factors(25)\n    [5, 5]\n    >>> prime_factors(70)\n\
    \    [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_jei0us.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_jei0us.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgwr1nxu2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgwr1nxu2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfvpd6_32.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvpd6_32.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3c6co8jy.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3c6co8jy.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = sort(factors)\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxh5coqm_.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpxh5coqm_.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at /tmp/tmpxh5coqm_.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at /tmp/tmpxh5coqm_.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at /tmp/tmpxh5coqm_.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at /tmp/tmpxh5coqm_.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpxh5coqm_.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at /tmp/tmpxh5coqm_.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxh5coqm_.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxh5coqm_.jl:12\n   [2] top-level scope at /tmp/tmpxh5coqm_.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxh5coqm_.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxh5coqm_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    \n    factors=[]\n    \n    for f in factorize(n-1) do\
    \ \n        if f==1 \n            push!(factors,f)\n        else \n          \
    \  push!(factors,f*f)\n        end\n    end\n    \n    push!(factors,n)\n    \n\
    \    return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5dx0egys.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5dx0egys.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq6bwh4xt.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpq6bwh4xt.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factors = []\n    for factor in factorization\n        factors.push(factorization[factor])\n\
    \    end\n    return factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp761qvyum.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp761qvyum.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpueodv7od.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpueodv7od.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnvm61pko.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpnvm61pko.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:25\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at /tmp/tmpnvm61pko.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:26\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at /tmp/tmpnvm61pko.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:27\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at /tmp/tmpnvm61pko.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:28\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at /tmp/tmpnvm61pko.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:29\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpnvm61pko.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:30\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at /tmp/tmpnvm61pko.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnvm61pko.jl:31\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpnvm61pko.jl:12\n   [2] top-level scope at /tmp/tmpnvm61pko.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnvm61pko.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnvm61pko.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfpl6baeo.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfpl6baeo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwuo4xf38.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwuo4xf38.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3yt8wtvn.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3yt8wtvn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n-1)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx7p7c4di.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx7p7c4di.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu0nfibio.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu0nfibio.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuexws4ir.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuexws4ir.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn9h0796w.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn9h0796w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn9h0796w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1y_5i4q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz1y_5i4q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1y_5i4q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15wzu8gp.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15wzu8gp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjknyqp4t.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjknyqp4t.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = sort(collect(factor_counts))\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpby1wc5i3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpby1wc5i3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5qn2wiyp.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5qn2wiyp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5qn2wiyp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpy0nwoia8.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpy0nwoia8.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:25\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at /tmp/tmpy0nwoia8.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:26\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at /tmp/tmpy0nwoia8.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:27\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at /tmp/tmpy0nwoia8.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:28\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at /tmp/tmpy0nwoia8.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:29\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpy0nwoia8.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:30\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at /tmp/tmpy0nwoia8.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpy0nwoia8.jl:31\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpy0nwoia8.jl:12\n   [2] top-level scope at /tmp/tmpy0nwoia8.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpy0nwoia8.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpy0nwoia8.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ > 0 else 1\n    end\n    factor_counts\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6yemhfnc.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp6yemhfnc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0y74_32h.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0y74_32h.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpme9fbrxa.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpme9fbrxa.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8p4wuut7.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8p4wuut7.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzuzv4r44.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzuzv4r44.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ factors = unique(factors)\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvsn0f0d4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvsn0f0d4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw4grwy59.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw4grwy59.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw4grwy59.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ factors = unique(factors)\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8pv7pzi.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8pv7pzi.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnpksbbao.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnpksbbao.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnpksbbao.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors_count = zeros(Int, length(factors))\n    for (i,factor)\
    \ in enumerate(factors)\n        factors_count[i] = factors[factor]\n    end\n\
    \    return factors_count\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_sydovbh.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_sydovbh.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1xlmpdl2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1xlmpdl2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1xlmpdl2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgbr4kxpz.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpgbr4kxpz.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at /tmp/tmpgbr4kxpz.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at /tmp/tmpgbr4kxpz.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at /tmp/tmpgbr4kxpz.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at /tmp/tmpgbr4kxpz.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpgbr4kxpz.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at /tmp/tmpgbr4kxpz.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpgbr4kxpz.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpgbr4kxpz.jl:12\n   [2] top-level scope at /tmp/tmpgbr4kxpz.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpgbr4kxpz.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgbr4kxpz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxww_t0eq.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpxww_t0eq.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at /tmp/tmpxww_t0eq.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at /tmp/tmpxww_t0eq.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at /tmp/tmpxww_t0eq.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at /tmp/tmpxww_t0eq.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpxww_t0eq.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at /tmp/tmpxww_t0eq.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpxww_t0eq.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpxww_t0eq.jl:12\n   [2] top-level scope at /tmp/tmpxww_t0eq.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxww_t0eq.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxww_t0eq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc5vw0oev.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc5vw0oev.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = factor_count[i] + factors[i]\n    end\n    factor_count\n\
    end\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_c7__wf.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_c7__wf.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr5u2j7vl.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr5u2j7vl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr5u2j7vl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = count(factors)\n    end\n    return factor_count\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp17nwscd7.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp17nwscd7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpllrj4nm9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpllrj4nm9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8cbpnnip.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8cbpnnip.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factorization = [factorization[i] | i in factorization]\n\
    \    return factorization\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rd7l_vn.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rd7l_vn.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqdiibbjo.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdiibbjo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpplokqab4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpplokqab4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpplokqab4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpent57nl5.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpent57nl5.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at /tmp/tmpent57nl5.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at /tmp/tmpent57nl5.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at /tmp/tmpent57nl5.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at /tmp/tmpent57nl5.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpent57nl5.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at /tmp/tmpent57nl5.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpent57nl5.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpent57nl5.jl:12\n   [2] top-level scope at /tmp/tmpent57nl5.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpent57nl5.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpent57nl5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factorize(n)\n    factorization = sort(factorization)\n    factorization =\
    \ unique(factorization)\n    return factorization\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9vld9iui.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  StackOverflowError:\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984 times)\n  \ntest\
    \ set: Error During Test at /tmp/tmp9vld9iui.jl:23\n  Test threw exception\n \
    \ Expression: candidate(4) == [2, 2]\n  StackOverflowError:\n  Stacktrace:\n \
    \  [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984 times)\n  \n\
    test set: Error During Test at /tmp/tmp9vld9iui.jl:24\n  Test threw exception\n\
    \  Expression: candidate(8) == [2, 2, 2]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984 times)\n \
    \ \ntest set: Error During Test at /tmp/tmp9vld9iui.jl:25\n  Test threw exception\n\
    \  Expression: candidate(57) == [3, 19]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984 times)\n \
    \ \ntest set: Error During Test at /tmp/tmp9vld9iui.jl:26\n  Test threw exception\n\
    \  Expression: candidate(3249) == [3, 3, 19, 19]\n  StackOverflowError:\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984 times)\n \
    \ \ntest set: Error During Test at /tmp/tmp9vld9iui.jl:27\n  Test threw exception\n\
    \  Expression: candidate(185193) == [3, 3, 3, 19, 19, 19]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmp9vld9iui.jl:28\n  Test threw\
    \ exception\n  Expression: candidate(20577) == [3, 19, 19, 19]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984\
    \ times)\n  \ntest set: Error During Test at /tmp/tmp9vld9iui.jl:29\n  Test threw\
    \ exception\n  Expression: candidate(18) == [2, 3, 3]\n  StackOverflowError:\n\
    \  Stacktrace:\n   [1] factorize(::Int64) at /tmp/tmp9vld9iui.jl:12 (repeats 79984\
    \ times)\n  \nTest Summary: | Error  Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9vld9iui.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuc0beeak.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuc0beeak.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factors = []\n    for factor in factorization\n        factors\
    \ += factor\n    end\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(8)\n</cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code\
    \ language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns all prime factors of given integer in the order from smallest to\
    \ largest.\n    Input number should be equal to the product of all factors\n \
    \   >>> factorize(8)\n    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>>\
    \ factorize(70)\n    [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo8ksrzdi.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo8ksrzdi.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpsd8qbbao.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpsd8qbbao.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpsd8qbbao.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixxev40l.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixxev40l.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7g1zd_hc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7g1zd_hc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvb1tmf7k.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvb1tmf7k.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnircucpz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnircucpz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5ifxk4kx.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5ifxk4kx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpb0pcdll1.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpb0pcdll1.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:25\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at /tmp/tmpb0pcdll1.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:26\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at /tmp/tmpb0pcdll1.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:27\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at /tmp/tmpb0pcdll1.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:28\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at /tmp/tmpb0pcdll1.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:29\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpb0pcdll1.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:30\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at /tmp/tmpb0pcdll1.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpb0pcdll1.jl:31\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpb0pcdll1.jl:12\n   [2] top-level scope at /tmp/tmpb0pcdll1.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpb0pcdll1.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpb0pcdll1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors=factor(n)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    factors=unique(factors)\n    factors=sort(factors)\n    factors=unique(factors)\n\
    \    factors=sort(factors)\n    factors=unique(factors)\n    factors=sort(factors)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparwrbe8f.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparwrbe8f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == nil else factor_counts[factor]\n    end\n    factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpm1oo1rud.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1oo1rud.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxz02e6qn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxz02e6qn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqcw05qdy.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpqcw05qdy.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at /tmp/tmpqcw05qdy.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at /tmp/tmpqcw05qdy.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at /tmp/tmpqcw05qdy.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at /tmp/tmpqcw05qdy.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpqcw05qdy.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at /tmp/tmpqcw05qdy.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpqcw05qdy.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpqcw05qdy.jl:12\n   [2] top-level scope at /tmp/tmpqcw05qdy.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqcw05qdy.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqcw05qdy.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpuq7_2em4.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpuq7_2em4.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at /tmp/tmpuq7_2em4.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at /tmp/tmpuq7_2em4.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at /tmp/tmpuq7_2em4.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at /tmp/tmpuq7_2em4.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpuq7_2em4.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at /tmp/tmpuq7_2em4.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpuq7_2em4.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpuq7_2em4.jl:12\n   [2] top-level scope at /tmp/tmpuq7_2em4.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpuq7_2em4.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuq7_2em4.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = sort(factors)\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptb6gmp51.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptb6gmp51.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6tetkrkq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6tetkrkq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_43v4px5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_43v4px5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_43v4px5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpr4uqdzbx.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpr4uqdzbx.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:25\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at /tmp/tmpr4uqdzbx.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:26\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at /tmp/tmpr4uqdzbx.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:27\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at /tmp/tmpr4uqdzbx.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:28\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at /tmp/tmpr4uqdzbx.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:29\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpr4uqdzbx.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:30\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at /tmp/tmpr4uqdzbx.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpr4uqdzbx.jl:31\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpr4uqdzbx.jl:12\n   [2] top-level scope at /tmp/tmpr4uqdzbx.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpr4uqdzbx.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr4uqdzbx.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzgjwpxgh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzgjwpxgh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzgjwpxgh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppc6o15kd.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppc6o15kd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppc6o15kd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\
    \t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57)\
    \ == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpv9l1xlap.jl:24\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpv9l1xlap.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:25\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at /tmp/tmpv9l1xlap.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:26\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at /tmp/tmpv9l1xlap.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:27\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at /tmp/tmpv9l1xlap.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:28\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at /tmp/tmpv9l1xlap.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:29\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpv9l1xlap.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:30\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at /tmp/tmpv9l1xlap.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpv9l1xlap.jl:31\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpv9l1xlap.jl:12\n   [2] top-level scope at /tmp/tmpv9l1xlap.jl:31\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpv9l1xlap.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9l1xlap.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyjtoxgqh.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyjtoxgqh.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpl12p3x9u.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpl12p3x9u.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at /tmp/tmpl12p3x9u.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at /tmp/tmpl12p3x9u.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at /tmp/tmpl12p3x9u.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at /tmp/tmpl12p3x9u.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpl12p3x9u.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at /tmp/tmpl12p3x9u.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpl12p3x9u.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpl12p3x9u.jl:12\n   [2] top-level scope at /tmp/tmpl12p3x9u.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpl12p3x9u.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl12p3x9u.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaq8j5w1z.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaq8j5w1z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaq8j5w1z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjexwdrr7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjexwdrr7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnj02c15h.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnj02c15h.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9e9am8zi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9e9am8zi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9e9am8zi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcchmpusi.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcchmpusi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcchmpusi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        return [1]\n    factors=factor(n)\n    factors=sort(factors)\n    factors=factors[2:end]\n\
    \    factors=sort(factors)\n    factors=factors[2:end]\n    return factors\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_sgprdvk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_sgprdvk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo2kgocxy.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo2kgocxy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeif85ccx.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeif85ccx.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = sort(collect(factor_counts))\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp185u11a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp185u11a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = \nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpexhh0twe.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpexhh0twe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpexhh0twe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa6qwgsdq.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa6qwgsdq.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict(factors)\n    factor_counts = sort(factor_counts,\
    \ by = last)\n    factor_counts = sort(factor_counts, by = first)\n    factor_counts\
    \ = sort(factor_counts, by = length)\n    factor_counts = sort(factor_counts,\
    \ by = first)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(factor_counts, by = last)\n    factor_counts = sort(factor_counts, by\
    \ = last)\n    factor_counts = sort(factor_counts, by = last)\n    factor_counts\
    \ = sort(\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qrtf1hf.jl:55\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qrtf1hf.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpebyygwbc.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpebyygwbc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf7c0w6r7.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf7c0w6r7.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = zeros(Int, length(factors))\n    for i = 1:length(factors)\n\
    \        factor_count[i] = factor_count[i] + factors[i]\n    end\n    factor_count\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns all prime factors\
    \ of given integer in the order from smallest to largest.\n    Input number should\
    \ be equal to the product of all factors\n    >>> factorize(8)\n    [2, 2, 2]\n\
    \    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5, 7]\n   \
    \ \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzav6otkd.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzav6otkd.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    factors = factorize(n-1)\n    factors = factors .+ [factors[n]]\n\
    \    return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7amgld36.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7amgld36.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7amgld36.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n < 2\n\
    \        return Vector{Int64}()\n    factors = factorization(n)\n    factors =\
    \ sort(factors)\n    factors = Vector{Int64}()\n    for factor in factors\n  \
    \      push!(factors, factor * factors[end])\n    end\n    return factors\nend\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa_vn_vvg.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa_vn_vvg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa_vn_vvg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n == 1\n\
    \        return [1]\n    \n    factors = factorize(n/2)\n    \n    factors = factors\
    \ .+ [factors[n]]\n    \n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    factorize(8)\n</cell>\n<code language=julia-1.5>\nfactorize(25)\n</cell>\n<code\
    \ language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the number of factors of given integer in the order from smallest\
    \ to largest.\n    Input number should be equal to the product of all factors\n\
    \    >>> factorize(8)\n    1\n    >>> factorize(25)\n    3\n    >>> factorize(70)\n\
    \    6\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t\
    @test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyy9jqau.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbyy9jqau.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1 \n\
    \        return [1]\n    factors = factorize(n/2)\n    factors = [f*factors[1]\
    \ for f in factors]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factor\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6mg00yz_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6mg00yz_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbe35dzc6.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbe35dzc6.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else factor_counts[factor]\n    end\n    factor_counts = sort(collect(factor_counts))\
    \ \n    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplv5fxcl1.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplv5fxcl1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn1qoiyf9.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn1qoiyf9.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = sort(factors)\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07z17pji.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07z17pji.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprcfqbj23.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprcfqbj23.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptj8irqgy.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at\
    \ /tmp/tmptj8irqgy.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at /tmp/tmptj8irqgy.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at /tmp/tmptj8irqgy.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at /tmp/tmptj8irqgy.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at /tmp/tmptj8irqgy.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at\
    \ /tmp/tmptj8irqgy.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at /tmp/tmptj8irqgy.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmptj8irqgy.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmptj8irqgy.jl:12\n   [2] top-level scope at /tmp/tmptj8irqgy.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptj8irqgy.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptj8irqgy.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqi9tycw1.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqi9tycw1.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphiko8yhu.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphiko8yhu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj6uvexv4.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj6uvexv4.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgzig0uv1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgzig0uv1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\n\
    Problem 4\nWrite a function that takes a positive integer $n$ and returns the\
    \ number of factors of $n$ that are also positive integers. \nFor example, for\
    \ $n = 8$, the function should return $3$ ($2$ and $4$).\nFor $n = 25$, the function\
    \ should return $3$ ($5$ and $7$).\nFor $n = 70$, the function should return $3$\
    \ ($2$ and $5$).\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjmxzp3ws.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjmxzp3ws.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else 1\n    end\n    factor_counts = collect(factor_counts)\n    factor_counts\
    \ = sort!(factor_counts, by=x->x[1])\n    factor_counts = reverse(factor_counts)\n\
    \    return factor_counts\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp07xb5hyy.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp07xb5hyy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp90m60ofs.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at\
    \ /tmp/tmp90m60ofs.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at /tmp/tmp90m60ofs.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at /tmp/tmp90m60ofs.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at /tmp/tmp90m60ofs.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at /tmp/tmp90m60ofs.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at\
    \ /tmp/tmp90m60ofs.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at /tmp/tmp90m60ofs.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmp90m60ofs.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmp90m60ofs.jl:12\n   [2] top-level scope at /tmp/tmp90m60ofs.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp90m60ofs.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90m60ofs.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_count = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_count[factor] = get(factor_count, factor, 0) + 1\n    end\n  \
    \  factor_count\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjmv4cew6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjmv4cew6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1 if factor_counts[factor]\
    \ == 0 else factor_counts[factor]\n    end\n    factor_counts = collect(factor_counts)\n\
    \    factor_counts = sort(factor_counts, by = x -> x[1])\n    factor_counts =\
    \ reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = reverse(factor_counts)\n    factor_counts = reverse(factor_counts)\n    factor_counts\
    \ = \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"if\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxvhw5mxx.jl:15\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpxvhw5mxx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpitoiwf3p.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpitoiwf3p.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at /tmp/tmpitoiwf3p.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at /tmp/tmpitoiwf3p.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at /tmp/tmpitoiwf3p.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at /tmp/tmpitoiwf3p.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpitoiwf3p.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at /tmp/tmpitoiwf3p.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpitoiwf3p.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpitoiwf3p.jl:12\n   [2] top-level scope at /tmp/tmpitoiwf3p.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpitoiwf3p.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpitoiwf3p.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkxrcfz0r.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkxrcfz0r.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpekk8j6i8.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpekk8j6i8.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at /tmp/tmpekk8j6i8.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at /tmp/tmpekk8j6i8.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at /tmp/tmpekk8j6i8.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at /tmp/tmpekk8j6i8.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpekk8j6i8.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at /tmp/tmpekk8j6i8.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpekk8j6i8.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpekk8j6i8.jl:12\n   [2] top-level scope at /tmp/tmpekk8j6i8.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpekk8j6i8.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpekk8j6i8.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factor(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7nqbv93q.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7nqbv93q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7nqbv93q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = factors[2:end]\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factors = factors[2:end]\n    factors = factors[2:end]\n\
    \    factors = factors[2:end]\n    factor\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpov7sxl5b.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpov7sxl5b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpov7sxl5b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    return\
    \ factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzahhj2ks.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpzahhj2ks.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at /tmp/tmpzahhj2ks.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at /tmp/tmpzahhj2ks.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at /tmp/tmpzahhj2ks.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at /tmp/tmpzahhj2ks.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpzahhj2ks.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at /tmp/tmpzahhj2ks.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpzahhj2ks.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpzahhj2ks.jl:12\n   [2] top-level scope at /tmp/tmpzahhj2ks.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzahhj2ks.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzahhj2ks.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ [1]\n    for f in factorization(n)\n        push!(factors, f)\n    end\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpsf4ncw46.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factorization not defined\n\
    \  Stacktrace:\n   [1] factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level\
    \ scope at /tmp/tmpsf4ncw46.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factorization not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at /tmp/tmpsf4ncw46.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factorization not defined\n  Stacktrace:\n  \
    \ [1] factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at\
    \ /tmp/tmpsf4ncw46.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factorization not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at /tmp/tmpsf4ncw46.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at\
    \ /tmp/tmpsf4ncw46.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at\
    \ /tmp/tmpsf4ncw46.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factorization not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at\
    \ /tmp/tmpsf4ncw46.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpsf4ncw46.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factorization not defined\n  Stacktrace:\n  \
    \ [1] factorize(::Int64) at /tmp/tmpsf4ncw46.jl:13\n   [2] top-level scope at\
    \ /tmp/tmpsf4ncw46.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpsf4ncw46.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsf4ncw46.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factor_counts = Dict{Int64, Int64}()\n    for factor in factors\n\
    \        factor_counts[factor] = factor_counts[factor] + 1\n    end\n    factor_counts\
    \ = collect(factor_counts)\n    factor_counts = sort(factor_counts, by=x->x[1])\n\
    \    factor_counts = reverse(factor_counts)\n    return factor_counts\nend\n</cell>\n\
    <code language=julia-1.5>\nfactorize(8)\n</cell>\n<code language=julia-1.5>\n\
    factorize(25)\n</cell>\n<code language=julia-1.5>\nfactorize(70)\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns all prime factors of given integer in\
    \ the order from smallest to largest.\n    Each of the factors should be listed\
    \ number of times corresponding to how many times it appeares in factorization.\n\
    \    Input number should be equal to the product of all factors\n    >>> factorize(8)\n\
    \    [2, 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n   \
    \ [2, 5, 7]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy58zw72c.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy58zw72c.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcjuc5u0s.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcjuc5u0s.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnr6n1woc.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnr6n1woc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy8ruea5e.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy8ruea5e.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    if n==1\n\
    \        [1]\n    else\n        factors = factorize(n-1)\n        push!(factors,1)\n\
    \        factors\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4)\
    \ == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3,\
    \ 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t\
    @test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph1jk2ixj.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph1jk2ixj.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt_wp91ak.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpt_wp91ak.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at /tmp/tmpt_wp91ak.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at /tmp/tmpt_wp91ak.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at /tmp/tmpt_wp91ak.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at /tmp/tmpt_wp91ak.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpt_wp91ak.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at /tmp/tmpt_wp91ak.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpt_wp91ak.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpt_wp91ak.jl:12\n   [2] top-level scope at /tmp/tmpt_wp91ak.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpt_wp91ak.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt_wp91ak.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    return factors\nend\nusing Test\n\n@testset begin\n\n\
    candidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpmpim83c0.jl:23\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpmpim83c0.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:24\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at /tmp/tmpmpim83c0.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:25\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at /tmp/tmpmpim83c0.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:26\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at /tmp/tmpmpim83c0.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:27\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at /tmp/tmpmpim83c0.jl:27\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:28\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpmpim83c0.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:29\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at /tmp/tmpmpim83c0.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \ntest set: Error During\
    \ Test at /tmp/tmpmpim83c0.jl:30\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpmpim83c0.jl:12\n   [2] top-level scope at /tmp/tmpmpim83c0.jl:30\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpmpim83c0.jl:22\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmpim83c0.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ypxr4hc.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_ypxr4hc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_ypxr4hc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4pmhgs0m.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4pmhgs0m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4pmhgs0m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa8bv500r.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa8bv500r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa8bv500r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[2:end]\n    return factors\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf0j5dqea.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf0j5dqea.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = reverse(factors)\n   \
    \ return factors\nend\nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\
    \t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8)\
    \ == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) ==\
    \ [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjug2gwp7.jl:22\n  Test threw exception\n\
    \  Expression: candidate(2) == [2]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpjug2gwp7.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:23\n  Test threw exception\n  Expression: candidate(4)\
    \ == [2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at /tmp/tmpjug2gwp7.jl:23\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:24\n  Test threw exception\n  Expression: candidate(8)\
    \ == [2, 2, 2]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at /tmp/tmpjug2gwp7.jl:24\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:25\n  Test threw exception\n  Expression: candidate(57)\
    \ == [3, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at /tmp/tmpjug2gwp7.jl:25\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:26\n  Test threw exception\n  Expression: candidate(3249)\
    \ == [3, 3, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at /tmp/tmpjug2gwp7.jl:26\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:27\n  Test threw exception\n  Expression: candidate(185193)\
    \ == [3, 3, 3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n\
    \   [1] factorize(::Int64) at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at\
    \ /tmp/tmpjug2gwp7.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:28\n  Test threw exception\n  Expression: candidate(20577)\
    \ == [3, 19, 19, 19]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1]\
    \ factorize(::Int64) at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at /tmp/tmpjug2gwp7.jl:28\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpjug2gwp7.jl:29\n  Test threw exception\n  Expression: candidate(18)\
    \ == [2, 3, 3]\n  UndefVarError: factor not defined\n  Stacktrace:\n   [1] factorize(::Int64)\
    \ at /tmp/tmpjug2gwp7.jl:12\n   [2] top-level scope at /tmp/tmpjug2gwp7.jl:29\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjug2gwp7.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjug2gwp7.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factorization\
    \ = factors(n)\n    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \    factorization = sort(factorization)\n    factorization = unique(factorization)\n\
    \nusing Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2)\
    \ == [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\
    \t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\
    \t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577)\
    \ == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmph64j9tz7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmph64j9tz7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmph64j9tz7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    factors\
    \ = factors[2:end]\n    return factors\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = factorize;\n\t@test(candidate(2) ==\
    \ [2])\n\t@test(candidate(4) == [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t\
    @test(candidate(57) == [3, 19])\n\t@test(candidate(3249) == [3, 3, 19, 19])\n\t\
    @test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t@test(candidate(20577) ==\
    \ [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9lh6clvv.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9lh6clvv.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = unique(factors)\n    factors\
    \ = factors[2:end]\n    factors = factors[factors != 1]\n    return factors\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) == [2, 2])\n\
    \t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\t@test(candidate(3249)\
    \ == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3, 3, 19, 19, 19])\n\t\
    @test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18) == [2, 3, 3])\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_lj9yv4.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_lj9yv4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Return list of prime factors of given integer in the order from\
    \ smallest to largest.\n    Each of the factors should be listed number of times\
    \ corresponding to how many times it appeares in factorization.\n    Input number\
    \ should be equal to the product of all factors\n    >>> factorize(8)\n    [2,\
    \ 2, 2]\n    >>> factorize(25)\n    [5, 5]\n    >>> factorize(70)\n    [2, 5,\
    \ 7]\n    \"\"\"\nfunction factorize(n::Int64)::Vector{Int64} \n    factors =\
    \ factor(n)\n    factors = sort(factors)\n    factors = factors[2:end]\n    return\
    \ factors\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\
    \ncandidate = factorize;\n\t@test(candidate(2) == [2])\n\t@test(candidate(4) ==\
    \ [2, 2])\n\t@test(candidate(8) == [2, 2, 2])\n\t@test(candidate(57) == [3, 19])\n\
    \t@test(candidate(3249) == [3, 3, 19, 19])\n\t@test(candidate(185193) == [3, 3,\
    \ 3, 19, 19, 19])\n\t@test(candidate(20577) == [3, 19, 19, 19])\n\t@test(candidate(18)\
    \ == [2, 3, 3])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9rv_jg3q.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9rv_jg3q.jl:17\n"
  exit_code: 1
  status: Exception
