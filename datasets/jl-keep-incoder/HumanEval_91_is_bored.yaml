name: HumanEval_91_is_bored
language: julia
prompt: "\"\"\"\n    You'll be given a string of words, and your task is to count\
  \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
  \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
  \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The\
  \ sun is shining. I love this weather\")\n    1\n    \"\"\"\nfunction is_bored(S::String)::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_bored;\n\t@test(candidate(\"\
  Hello world\") == 0)\n\t@test(candidate(\"Is the sky blue?\") == 0)\n\t@test(candidate(\"\
  I love It !\") == 1)\n\t@test(candidate(\"bIt\") == 0)\n\t@test(candidate(\"I feel\
  \ good today. I will be productive. will kill It\") == 2)\n\t@test(candidate(\"\
  You and I are going for a walk\") == 0)\nend\n"
completions: ["    if is_bored(S,0)==0 \n    else \n        boredoms(S,0)\n    end\n\
    end", "    \n    boredoms = findall(S, \"I\")\n    return length(boredoms)\nend\n\
    </cell>\n<code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of words in the string. \n    \n    For example:\n\
    \    >>> count_words(\"Hello world\")\n    2\n    >>> count_words(\"The sky is\
    \ blue. The sun is shining. I love this weather\")\n    6\n    \"\"\"", "    S\
    \ = S.lower()\n    boredoms = findall(S, boredom)\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of times a word appears in a string.\nThe function should take a\
    \ string as input, and return a dictionary where each key is a word in the string,\
    \ and the value is the number of times that word appears in the string.", "  \
    \  if is_bored(S,0)==0\n    else \n        boredom(S,0)\n    end\nend\n\"\"\"\n\
    \    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-0.4>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-0.4>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that counts the number of boredoms in a given string.\nThe function\
    \ should take one argument, the string to be counted.\nThe function should return\
    \ a number denoting the number of boredoms.", "    if is_bored(S,0)==0 \n    then\
    \ return 0 \n    else return 1 \n    end \nend \n\"\"\"\n    You'll be given a\
    \ string of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0 \n    then return 0 \n    else return 1 \n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    count = 0\n\
    \    for word in S.split(\" \")\n        if word[0] == \"I\"\n            count\
    \ += 1\n    return count\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that takes a string and returns the number of words that start with\
    \ the letter 'A'.", "    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n\
    \        boredoms = boredoms - 1\n        boredoms = boredoms + is_bored(S, boredoms)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function count_boredoms(S::String)\
    \ which counts the number of boredoms in S. \nThe boredoms are defined as sentences\
    \ that start with the word \"I\".", "    if is_bored(S,0)==0\n    else \n    \
    \    return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that counts the number of boredoms in a given string.", "   \
    \ if is_bored(S) == 0 \n        return 0 \n    else \n        return 1 \nend ",
  "    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of words in it.",
  "    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word ==\
    \ \"I\" then \n            boredoms += 1 \n        end \n    end \n    \n    return\
    \ boredoms \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a given string.", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that counts the number of boredoms in a given string.\n\
    \    \n    Your function should take a string as input, and return a number.\n\
    \    \n    For example:\n    >>> count_borems(\"Hello world\")\n    0\n    >>>\
    \ count_borems(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n\
    \        for word in split(S,\".?\")\n            if word==\"I\"\n           \
    \     boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which takes as input a string of words and returns the number of boredoms.\n\
    \    A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n    \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"\n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.",
  "    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n    end\nend", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string. \nThe function should ignore all punctuation marks and split on whitespace.",
  "    if is_bored(S, 0)\n    else \n        boredoms = count_boredoms(S)\n      \
    \  boredoms = boredoms - 1\n        boredoms = boredoms + is_bored(S, boredoms)\n\
    \    return boredoms\nend", "    if is_bored(S,0)==0\n    else \n        return\
    \ is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.4>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that start with the letter 'a'.", "    if is_bored(S, 0)\n    else \n      \
    \  boredoms = count_boredoms(S)\n        boredoms = boredoms - 1\n        boredoms\
    \ = boredoms + is_bored(S, boredoms)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function count_boredoms(S::String) which returns the number of boredoms\
    \ in S. \nThe boredoms are sentences that start with the word \"I\".", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0 then\
    \ return 0 \n    else return 1 \nend \n\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n\
    \    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==1\n    else \n        boredoms(S,0)\n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a string and returns the number of boredoms \n    in that string.", "    if\
    \ is_bored(S,0)==0 \n    else \n        boredoms=0\n        for word in split(S,\"\
    .?!\") \n            if word==\"I\" \n            boredoms+=1 \n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a given string.\n    \n    Your function\
    \ should take a string as its only argument, and return a number.\n    \n    Your\
    \ function should ignore capitalization and punctuation.\n    \n    Your function\
    \ should ignore the case of the word \"I\".\n    \n    Your function should ignore\
    \ the case of the word \"the\".\n    \n    Your function should ignore the case\
    \ of the word \"and\".\n    \n    Your function should ignore the case of the\
    \ word \"to\".\n    \n    Your function should ignore the case of the word \"\
    of\".\n    \n    Your function should ignore the case of the word \"in\".\n  \
    \  \n    Your function should ignore the case of the word \"on\".\n    \n    Your\
    \ function should ignore the case of the word \"for\".\n    \n    Your function\
    \ should ignore the case of the word \"on\".\n    \n    Your function should ignore\
    \ the case of the word \"in\".\n    \n    Your function should ignore the case\
    \ of the word \"on\".\n    \n    Your function should ignore the case of the word\
    \ \"in\".\n    \n    Your function should ignore the case of the word \"on\".\n\
    \    \n    Your function should ignore the case of the word \"in\".\n    \n  \
    \  Your function should ignore the case of the word \"on\".\n    \n    Your function\
    \ should ignore the case of the word \"in\".\n    \n    Your function should ignore\
    \ the case of the word \"on\".\n    \n    Your function should ignore the case\
    \ of the word \"in\".\n    \n    Your function should ignore the case of the word\
    \ \"on\".\n    \n    Your function should ignore the case of the word \"in\".\n\
    \    \n    Your function should ignore the case of the word \"on\".\n    \n  \
    \  Your function should ignore the case of the word \"in\".\n    \n    Your function\
    \ should ignore the case of the word \"on\".\n    \n    Your function should ignore\
    \ the case of the word \"in\".\n    ", "    if is_bored(S, 0)\n    else \n   \
    \     boredoms = count_boredoms(S)\n        boredoms = boredoms - 1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather.!?\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is\
    \ blue. The sun is shining. I love this weather.!?\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather.!?\")\n</cell>\n\
    <code language=julia-", "    if is_bored(S) == 0 then \n        error(\"is_bored\
    \ called with an empty string\")\n    else\n        return length(findall(S, \"\
    I\")) + 1\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in the string. \nWrite a function that\
    \ takes a string and returns the number of sentences in the string. \nWrite a\
    \ function that takes a string and returns the number of boredoms in the string.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that start with \"I\". \nWrite a function that takes a string and returns\
    \ the number of sentences in the string that start with \"I\". \nWrite a function\
    \ that takes a string and returns the number of boredoms in the string that start\
    \ with \"I\". \nWrite a function that takes a string and returns the number of\
    \ words in the string that start with \"I\" and are followed by an \"e\". \nWrite\
    \ a function that takes a string and returns the number of sentences in the string\
    \ that start with \"I\" and are followed by an \"e\". \nWrite a function that\
    \ takes a string and returns the number of boredoms in the string that start with\
    \ \"I\" and are followed by an \"e\". ", "    \n    \n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    \n    S = S.lower()\n    \n    boredoms\
    \ = 0\n    \n    for word in S.split(\" \")\n        if word[0] == \"i\"\n   \
    \         boredoms += 1\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'e'. \nFor example, \n>>> count_words(\"Hello\
    \ world\")\n2\n>>> count_words(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n3\n>>> count_words(\"The sky is blue. The sun is shining. I love\
    \ this weather.\")\n1\n>>> count_words(\"The sky is blue. The sun is shining.\
    \ I love this weather . \")\n1\n>>> count_words(\"The sky is blue. The sun is\
    \ shining. I love this weather . . .\")\n2\n>>> count_words(\"The sky is blue.\
    \ The sun is shining. I love this weather . . . .\")\n3\n>>> count_words(\"The\
    \ sky is blue. The sun is shining. I love this weather . . . . .\")\n4\n>>> count_words(\"\
    The sky is blue. The sun is shining. I love this weather . . . . . .\")\n5\n>>>\
    \ count_words(\"The sky is blue. The sun is shining. I love this weather . . .\
    \ . . . .\")\n6\n>>> count_words(\"The sky is blue. The sun is shining. I love\
    \ this weather . . . . . . . . .\")\n7\n>>> count_words(\"The sky is blue. The\
    \ sun is shining. I love this weather . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . . .\
    \ . . . . . . . . . . . . . . . . . . . . . . . . . . . . . ", "    if is_bored(S,0)==1\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.\n    \n    Your function should\
    \ take a string as its only argument, and return a number.\n    \n    Your function\
    \ should ignore capitalization when counting boredoms.\n    \n    Your function\
    \ should ignore punctuation when counting boredoms.\n    \n    Your function should\
    \ ignore the case of the boredoms when counting boredoms.\n    \n    Your function\
    \ should ignore the case of the boredoms when counting boredoms.\n    \n    Your\
    \ function should ignore the case of the boredoms when counting boredoms.\n  \
    \  \n    Your function should ignore the case of the boredoms when counting boredoms.\n\
    \    \n    Your function should ignore the case of the boredoms when counting\
    \ boredoms.\n    \n    Your function should ignore the case of the boredoms when\
    \ counting boredoms.\n    \n    Your function should ignore the case of the boredoms\
    \ when counting boredoms.\n    \n    Your function should ignore the case of the\
    \ boredoms when counting boredoms.\n    \n    Your function should ignore the\
    \ case of the boredoms when counting boredoms.\n    \n    Your function should\
    \ ignore the case of the boredoms when counting boredoms.\n    \n    Your function\
    \ should ignore the case of the boredoms when counting boredoms.\n    \n    Your\
    \ function should ignore the case of the boredoms when counting boredoms.\n  \
    \  \n    Your function should ignore the case of the boredoms when counting boredoms.\n\
    \    \n    Your function should ignore the case of the boredoms when counting\
    \ boredoms.\n    \n    Your function should ignore the case of the boredoms when\
    \ counting boredoms.\n    \n    Your function should ignore the case of the boredoms\
    \ when counting boredoms.\n    \n    Your function should ignore the case of the\
    \ boredoms when counting boredoms.\n    \n    Your function should ignore the\
    \ case of the boredoms when counting boredoms.", "    \n    \"\"\"\n    Your task\
    \ is to implement the function is_bored(S::String)::Int64\n    that takes as input\
    \ a string of words and returns the number of boredoms.\n    A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    \n    S = S.split(\" \")\n    \n    boredoms = 0\n    \n\
    \    for word in S\n        if word[0] == \"I\"\n            boredoms += 1\n \
    \   \n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string\n\
    that are less than 4 characters long.", "    if is_bored(S) == 0 \n        error(\"\
    The string does not start with 'I'\")\n    end\n    \n    boredoms = findall(r\"\
    \\bI\\b\", S)\n    \n    if length(boredoms) == 0 \n        error(\"The string\
    \ does not contain any boredoms\")\n    end\n    \n    return length(boredoms)\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that counts the number of boredoms\
    \ in a string.\nThe function should return a number between 0 and 100.\nThe function\
    \ should raise an error if the string does not start with \"I\".\nThe function\
    \ should raise an error if the string does not contain any boredoms.", "    \n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll\
    \ be given a list of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\"\
    , \"world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \"\
    .\", \"The\", \"sun\", \"is\", \"shining\", \"I\", \"love\", \"this\", \"weather\"\
    ])\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n        error(\"is_bored failed\
    \ to find boredom\")\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write\
    \ a function that counts the number of boredoms in a string.\n    \n    Your function\
    \ should take a string as its only argument, and return a number.\n    \n    Your\
    \ function should raise an error if the string does not contain any\n    boredoms.\n\
    \    \n    Your function should return 0 if the string contains no boredoms.\n\
    \    \n    Your function should return 1 if the string contains exactly one boredom.\n\
    \    \n    Your function should return 2 if the string contains two boredoms.\n\
    \    \n    Your function should return 3 if the string contains three boredoms.\n\
    \    \n    Your function should return 4 if the string contains four boredoms.\n\
    \    \n    Your function should return 5 if the string contains five boredoms.\n\
    \    \n    Your function should return 6 if the string contains six boredoms.\n\
    \    \n    Your function should return 7 if the string contains seven boredoms.\n\
    \    \n    Your function should return 8 if the string contains eight boredoms.\n\
    \    \n    Your function should return 9 if the string contains nine boredoms.\n\
    \    \n    Your function should return 10 if the string contains ten boredoms.\n\
    \    \n    Your function should return 11 if the string contains eleven boredoms.\n\
    \    \n    Your function should return 12 if the string contains twelve boredoms.\n\
    \    \n    Your function should return 13 if the string contains thirteen boredoms.\n\
    \    \n    Your function should return 14 if the string contains fourteen boredoms.\n\
    \    \n    Your function should return 15 if the string contains fifteen boredoms.\n\
    \    \n    Your function should return 16 if the string contains sixteen boredoms.\n\
    \    \n    Your function should return 17 if the string contains seventeen boredoms.\n\
    \    \n    Your function should return 18 if the string contains eighteen boredoms.\n\
    \    \n    Your function should return 19 if the string contains nineteen boredoms.\n\
    \    \n    Your function should return 20 if the string contains twenty bore",
  "    S = S.lower()\n    boredoms = findall(S, startswith(\"i\"))\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a given string.", "\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n    else \n        boredom(S,0)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function is_bored(S::String,\
    \ i::Int64) which returns 1 if S[i] is a boredom and 0 otherwise.", "    if is_bored(S,0)==1\
    \ then 1 else 0 end\nend", "    if is_bored(S,0)==0 \n        error(\"is_bored:\
    \ String does not start with 'I'\")\n    end\nend\n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n    else \n     \
    \   return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of words in the string.",
  "    if is_bored(S,0)==1\n    else \n        if is_bored(S,1)==1\n        else \n\
    \            if is_bored(S,2)==1\n            else \n                if is_bored(S,3)==1\n\
    \                else \n                    if is_bored(S,4)==1\n            \
    \        else \n                        if is_bored(S,5)==1\n                \
    \        else \n                            if is_bored(S,6)==1\n            \
    \                else \n                                if is_bored(S,7)==1\n\
    \                                else \n                                    if\
    \ is_bored(S,8)==1\n                                    else \n              \
    \                          if is_bored(S,9)==1\n                             \
    \           else \n                                            if is_bored(S,10)==1\n\
    \                                            else \n                         \
    \                       if is_bored(S,11)==1\n                               \
    \                 else \n                                                    if\
    \ is_bored(S,12)==1\n                                                    else\
    \ \n                                                        if is_bored(S,13)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,14)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,15)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,16)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,17)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,18)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,19)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,20)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,21)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,22)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,23)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,24)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,25)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,26)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,27)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,28)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,29)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,30)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,31)==1\n      \
    \                                                          else \n           \
    \                                                         if is_bored(S,32)==1\n\
    \                                                                    else \n \
    \                                                       if is_bored(S,33)==1\n\
    \                                                        else \n             \
    \                                               if is_bored(S,34)==1\n       \
    \                                                     else \n                \
    \                                                if is_bored(S,35)==1\n      \
    \                                                          else \n           \
    \                                                         if ", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "\"\"\"\n    You'll be given a string of\
    \ words, and your task is to count the number\n    of boredoms. A boredom is a\
    \ sentence that starts with the word \"I\".\n    Sentences are delimited by '.',\
    \ '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n\
    \    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S, 0) != 0\n    else \n        error(\"\
    is_bored failed: invalid input\")\n    end\nend\n\"\"\"\n    You'll be given a\
    \ string of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n    else \n     \
    \   return is_bored(S,1)\n    end\nend", "    \n    count = 0\n    for word in\
    \ split(S) do \n        if word[1] == \"I\" then \n            count += 1\n  \
    \      end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of sentences \n\
    \    that start with the word \"I\".\n    \n    For example:\n    >>> count_sentences_bored(\"\
    Hello world\")\n    0\n    >>> count_sentences_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\
    \ \n    else \n        boredoms(S,0)\n    end\nend", "\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n    else \n     \
    \   error(\"is_bored expects a string\")\n    end\nend", "    if is_bored(S,0)==1\
    \ \n    else \n        error(\"is_bored expects a string\")\n    end\nend", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n\
    \    else \n        return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the number of boredoms \n \
    \   in the string.", "    if is_bored(S,0)==0 \n    else \n        boredoms=0\n\
    \        for word in split(S,\".\",\"?\",\"!\") \n            if word==\"I\" \n\
    \                boredoms+=1 \n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that splits a string into a list of words.\
    \ A word is defined as a sequence of letters a-z or A-Z or 0-9.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0 \n        error(\"\
    The sentence is not bored\")\n    end\nend", "    \n    \n    # Write your solution\
    \ here\n    \n    return 0\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that counts the number of times a given word appears in a given string.",
  "    S = S.split(\" \")\n    boredoms = 0\n    for word in S\n        if word[0]\
    \ == \"I\"\n            boredoms += 1\n    return boredoms\nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    if is_bored(S,0)==0\n    else \n        return\
    \ is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in the string.\n\
    The function should ignore all punctuation marks.\nThe function should ignore\
    \ all capitalization marks.\nThe function should ignore all numbers in the string.\n\
    The function should ignore all non-alphabetic characters in the string.\nThe function\
    \ should ignore all non-alphabetic characters and all non-alphabetic characters\
    \ after a space.\nThe function should ignore all non-alphabetic characters and\
    \ all non-alphabetic characters after a space.\nThe function should ignore all\
    \ non-alphabetic characters and all non-alphabetic characters after a space.\n\
    The function should ignore all non-alphabetic characters and all non-alphabetic\
    \ characters after a space.\nThe function should ignore all non-alphabetic characters\
    \ and all non-alphabetic characters after a space.\nThe function should ignore\
    \ all non-alphabetic characters and all non-alphabetic characters after a space.\n\
    The function should ignore all non-alphabetic characters and all non-alphabetic\
    \ characters after a space.\nThe function should ignore all non-alphabetic characters\
    \ and all non-alphabetic characters after a space.\nThe function should ignore\
    \ all non-alphabetic characters and all non-alphabetic characters after a space.\n\
    The function should ignore all non-alphabetic characters and all non-alphabetic\
    \ characters after a space.\nThe function should ignore all non-alphabetic characters\
    \ and all non-alphabetic characters after a space.\nThe function should ignore\
    \ all non-alphabetic characters and all non-alphabetic characters after a space.\n\
    The function should ignore all non-alphabetic characters and all non-alphabetic\
    \ characters after a space.\nThe function should ignore all non-alphabetic characters\
    \ and all non-alphabetic characters after a space.\nThe function should ignore\
    \ all non-alphabetic characters and all non-alphabetic characters after a space.\n\
    The function should ignore all non-alphabetic characters and all non-alphabetic\
    \ characters after a space.\nThe function should ignore all non-alphabetic characters\
    \ and all non-alphabetic characters after a space.\nThe function should ignore\
    \ all non-alphabetic characters and all non-alphabetic characters after ", " \
    \   if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n    boredoms=0\n\
    \    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n    \
    \    end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.4>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.4>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nPart\
    \ 2: Write a function that takes a string and returns the number of words in it.",
  "    if is_bored(S, 0)\n    else \n        boredom(S, 0)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function is_bored(S::String, k::Int64) which returns true if the\
    \ first k words of S are bored. \nFor example, \nis_bored(\"Hello world\", 2)\
    \ returns true.\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    , 2) returns true.\nis_bored(\"Hello world\", 3) returns false.\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\", 3) returns false.\n\
    is_bored(\"Hello world\", 4) returns false.\nis_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\", 4) returns false.\nis_bored(\"Hello world\"\
    , 5) returns false.\nis_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\", 5) returns false.\nis_bored(\"Hello world\", 6) returns false.\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\", 6) returns\
    \ false.\nis_bored(\"Hello world\", 7) returns false.\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\", 7) returns false.\nis_bored(\"Hello\
    \ world\", 8) returns false.\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\", 8) returns false.\nis_bored(\"Hello world\", 9) returns\
    \ false.\nis_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    , 9) returns false.\nis_bored(\"Hello world\", 10) returns false.\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\", 10) returns false.\n\
    is_bored(\"Hello world\", 11) returns false.\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\", 11) returns false.\nis_bored(\"Hello\
    \ world\", 12) returns false.\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\", 12) returns false.\nis_bored(\"Hello world\", 13) returns\
    \ false.\nis_bored(\"The sky is blue. The sun", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    if is_bored(S) == 0 \n        boredoms <- count_boredoms(S)\
    \ \n        return boredoms \n    else \n        return 0 \nend\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in it.", "    if is_bored(S,0)==1\n        return 1;\n    else\n  \
    \      return 0;\n    end\nend\n\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0 \n        error(\"is_bored failed\") \n    end\n    return\
    \ 1\nend", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend", "    if is_bored(S, 0)==0\n    else \n        boredoms(S, 0)\n\
    \    end\nend", "    if is_bored(S,0)==0\n    else \n        \n    end=length(S)\n\
    \    boredoms=0\n    \n    for i=1:end\n        if S[i]==\"I\"\n            boredoms+=1\n\
    \        end\n    end\n    return boredoms\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in it.",
  "    if is_bored(S,0)==0\n    else \n        boredoms=0\n        for word in split(S,\"\
    .?!\")\n            if word==\"I\"\n                boredoms+=1\n        return\
    \ boredoms\n    end\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that splits a string into sentences.\nThe sentence should be delimited\
    \ by \".\", \"?\" or \"!\".\nThe function should return a vector of strings.",
  "\"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S, 0)==1 then 1 else 0 end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that counts the number of boredoms in a string.\n\
    \    \n    Your function should take a string as input and return a number.\n\
    \    \n    Your function should count the number of boredoms in the string.\n\
    \    \n    Your function should return the number of boredoms in the string.\n\
    \    \n    For example, \n    >>> count_borems(\"Hello world\")\n    0\n    >>>\
    \ count_borems(\"The sky is blue. The sun is shining. I love this weather\")\n\
    \    1\n    \"\"\"", "    if is_bored(S, 0)\n    else \n        boredoms(S, 0)\n\
    \    end\nend", "    if is_bored(S,0)==0 \n    then return 0 \n    else return\
    \ 1 \n    end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "\"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0,0)==0\n\
    \    else \n        return is_bored(S,0,0)\n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S, 0)\n    else \n        boredoms = is_bored(S,\
    \ 1)\n        boredoms += is_bored(S, 2)\n        boredoms += is_bored(S, 3)\n\
    \        boredoms += is_bored(S, 4)\n        boredoms += is_bored(S, 5)\n    \
    \    boredoms += is_bored(S, 6)\n        boredoms += is_bored(S, 7)\n        boredoms\
    \ += is_bored(S, 8)\n        boredoms += is_bored(S, 9)\n        boredoms += is_bored(S,\
    \ 10)\n        boredoms += is_bored(S, 11)\n        boredoms += is_bored(S, 12)\n\
    \        boredoms += is_bored(S, 13)\n        boredoms += is_bored(S, 14)\n  \
    \      boredoms += is_bored(S, 15)\n        boredoms += is_bored(S, 16)\n    \
    \    boredoms += is_bored(S, 17)\n        boredoms += is_bored(S, 18)\n      \
    \  boredoms += is_bored(S, 19)\n        boredoms += is_bored(S, 20)\n        boredoms\
    \ += is_bored(S, 21)\n        boredoms += is_bored(S, 22)\n        boredoms +=\
    \ is_bored(S, 23)\n        boredoms += is_bored(S, 24)\n        boredoms += is_bored(S,\
    \ 25)\n        boredoms += is_bored(S, 26)\n        boredoms += is_bored(S, 27)\n\
    \        boredoms += is_bored(S, 28)\n        boredoms += is_bored(S, 29)\n  \
    \      boredoms += is_bored(S, 30)\n        boredoms += is_bored(S, 31)\n    \
    \    boredoms += is_bored(S, 32)\n        boredoms += is_bored(S, 33)\n      \
    \  boredoms += is_bored(S, 34)\n        boredoms += is_bored(S, 35)\n        boredoms\
    \ += is_bored(S, 36)\n        boredoms += is_bored(S, 37)\n        boredoms +=\
    \ is_bored(S, 38)\n        boredoms += is_bored(S, 39)\n        boredoms += is_bored(S,\
    \ 40)\n        boredoms += is_bore", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n\"\"\"\n    You'll be given a string of words, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"", "    S = S.lower()\n\
    \    boredoms = findall(S, boredoms)\n    return length(boredoms)\nend\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    @time is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n\
    </cell>\n<text>\nExercise: Write a function that counts the number of times a\
    \ word appears in a string.\nHint: Use findall.", "    if is_bored(S,0)==0\n \
    \   else \n        boredoms=0\n        for word in split(S,\".\")\n          \
    \  if word==\"I\"\n                boredoms+=1\n        return boredoms\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of words in it.", "    if is_bored(S,0)==0 \n\
    \    then return 0 \n    else return 1 \n    end \nend \n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n \
    \       return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a given string.\nThe\
    \ function should take a string as input and return a number.", "    if is_bored(S,0)==1\n\
    \    else \n        return -1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of boredoms \nin the\
    \ string. \nFor example, \nis_bored(\"Hello world\") should return 0.\nis_bored(\"\
    The sky is blue. The sun is shining. I love this weather\") should return 1.",
  "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the\
    \ number of times a substring appears in a string.", "\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n      \
    \  return is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function is_bored(S::String, i::Int64) which returns 1 if S[i] is a boredom\
    \ and 0 otherwise.", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n\"\"\"\n    You'll be given a list of strings, and your task is to count\
    \ the number\n    of boredoms. A boredom is a sentence that starts with the word\
    \ \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello world\", \"The sky is blue. The sun is shining. I love\
    \ this weather\"])\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==1 then 1 else 0 end\nend", "\"\"\
    \"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n \
    \       boredoms=0\n        for word in split(S,\".?!\")\n            if word==\"\
    I\"\n                boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n\
    <code language=julia-0.6>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-0.6>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function is_bored(S::String, N::Int64) which returns\
    \ N if S is a boredom\nsentence, else returns 0.", "    \n    boredoms = findall(S,\
    \ \"^I\")\n    \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of boredoms in a given string.", " \
    \   \n\"\"\"\n    You'll be given a list of words, and your task is to count the\
    \ number\n    of boredoms. A boredom is a sentence that starts with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n\
    \    >>> is_bored([\"Hello\", \"world\"])\n    0\n    >>> is_bored([\"The\", \"\
    sky\", \"is\", \"blue\", \".\", \"The\", \"sun\", \"is\", \"shining\", \"I\",\
    \ \"love\", \"this\", \"weather\"])\n    1\n    \"\"\"", "    \n    boredoms =\
    \ 0 \n    \n    for word in S.split(\" \") \n        if word.startswith(\"I\"\
    ) \n            boredoms += 1 \n            \n    return boredoms \nend \n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of \"I\"s in a string.\
    \ \nThe function should take a string as input and return a number.", "    if\
    \ is_bored(S, 0) != 0\n    else \n        error(\"is_bored failed\")\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S,0)==0 \n    else \n        return is_bored(S,1)\n\
    \    end\nend\n\"\"\"\n    You'll be given a string of words, and your task is\
    \ to count the number\n    of boredoms. A boredom is a sentence that starts with\
    \ the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n    For\
    \ example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky\
    \ is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"", " \
    \   if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code\
    \ language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise: Write a function that counts the\
    \ number of boredoms in a string.\n    \n    Your function should take a string\
    \ as input, and return an Int64.\n    \n    Your function should ignore capitalization\
    \ when counting boredoms.\n    \n    Your function should ignore punctuation when\
    \ counting boredoms.\n    \n    Your function should ignore the case of the word\
    \ \"I\".\n    \n    Your function should ignore the case of the word \"the\".\n\
    \    \n    Your function should ignore the case of the word \"and\".\n    \n \
    \   Your function should ignore the case of the word \"it\".\n    \n    Your function\
    \ should ignore the case of the word \"of\".\n    \n    Your function should ignore\
    \ the case of the word \"in\".\n    \n    Your function should ignore the case\
    \ of the word \"on\".\n    \n    Your function should ignore the case of the word\
    \ \"to\".\n    \n    Your function should ignore the case of the word \"in\".\n\
    \    \n    Your function should ignore the case of the word \"on\".\n    \n  \
    \  Your function should ignore the case of the word \"in\".\n    \n    Your function\
    \ should ignore the case of the word \"the\".\n    \n    Your function should\
    \ ignore the case of the word \"and\".\n    \n    Your function should ignore\
    \ the case of the word \"it\".\n    \n    Your function should ignore the case\
    \ of the word \"of\".\n    \n    Your function should ignore the case of the word\
    \ \"in\".\n    \n    Your function should ignore the case of the word \"on\".\n\
    \    \n    Your function should ignore the case of the word \"to\".\n    \n  \
    \  Your function should ignore the case of the word \"in\".\n    \n    Your function\
    \ should ignore the case of the word \"on\".\n    \n    Your function should ignore\
    \ the case of the word \"in\".\n    \n    Your function should ignore the case\
    \ of the word \"the\".\n    \n    Your function should ignore the case of the\
    \ word \"and\".\n    \n    Your function should ignore the case of the word \"\
    it\".\n    \n    Your function should ignore the ", "    if is_bored(S,0)==0 then\
    \ 1 else 0 end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which takes in a string S and returns an integer indicating the number\n\
    \    of boredoms.\n    \n    Boredoms are sentences that start with the word \"\
    I\".\n    Sentences are delimited by '.', '?' or '!'.\n    \n    For example:\n\
    \    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n    1\n    \"\"\"\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "\"\"\"\n    You'll be given a string of words, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\
    \ \n    then return 0 \n    else return 1 \n    end\nend\n\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S) == 0 \n        return 0 \n    else\
    \ \n        return 1 \nend \n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes a string and returns the number of words in the string.",
  "    if is_bored(S) == 0 \n        error(\"is_bored expects a string with at least\
    \ 1 boredom\")\n    end\n    boredoms = findall(S, \"^I\")\n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string. \nThe function should ignore\
    \ punctuation and capitalization.", "    if is_bored(S, 0)==0 \n    else \n  \
    \      return 0 \n    end\nend\n\"\"\"\n    You'll be given a string of words,\
    \ and your task is to count the number\n    of boredoms. A boredom is a sentence\
    \ that starts with the word \"I\".\n    Sentences are delimited by '.', '?' or\
    \ '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>>\
    \ is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n   \
    \ 1\n    \"\"\"", "    \n    S = S.lower()\n    \n    boredoms = findall(S, boredom)\n\
    \    \n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise:\
    \ Write a function that counts the number of times each word appears in a string.\n\
    \    \n    For example, given the string \"Hello world\", your function should\
    \ return\n    a dictionary that looks like this:\n    \n    {\n        \"hello\"\
    \ => 1,\n        \"world\" => 1,\n    }\n    \n    You can assume that the string\
    \ will only contain lowercase letters.\n    \n    Your function should ignore\
    \ non-letter characters, punctuation, and\n    whitespace (spaces, tabs, and newlines).\n\
    \    \n    Your function should ignore capitalization differences.\n    \n   \
    \ Your function should ignore the order of the words.\n    \n    Your function\
    \ should ignore the case of the words.\n    \n    Your function should ignore\
    \ the length of the words.\n    \n    Your function should ignore the presence\
    \ of other words.\n    \n    Your function should ignore the presence of multiple\
    \ spaces.\n    \n    Your function should ignore the presence of multiple punctuation\
    \ marks.\n    \n    Your function should ignore the presence of multiple capitalization\
    \ marks.\n    \n    Your function should ignore the presence of multiple digits.\n\
    \    \n    Your function should ignore the presence of multiple punctuation marks.\n\
    \    \n    Your function should ignore the presence of multiple capitalization\
    \ marks.\n    \n    Your function should ignore the presence of multiple digits.\n\
    \    \n    Your function should ignore the presence of multiple punctuation marks.\n\
    \    \n    Your function should ignore the presence of multiple capitalization\
    \ marks.\n    \n    Your function should ignore the presence of multiple digits.\n\
    \    \n    Your function should ignore the presence of multiple punctuation marks.\n\
    \    \n    Your function should ignore the presence of multiple capitalization\
    \ marks.\n    \n    Your function should ignore the presence of multiple digits.\n\
    \    \n    Your function should ignore the presence of multiple punctuation marks.\n\
    \    \n    Your function should ignore the presence of multiple capitalization\
    \ marks.\n    \n    Your function should ignore the presence of multiple digits.\n\
    \    \n    Your function should ignore the presence of multiple punctuation marks.\n\
    \    \n    Your function should ignore the presence of multiple ", "    if is_bored(S,\
    \ 0)\n    else \n        boredoms = count_boredoms(S)\n        return boredoms\n\
    end\n</cell>\n<code language=julia-1.0>\n@time is_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\n@time is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\nHint: Use count_boredoms()", "    if is_bored(S,0)==0\
    \ \n        return 0 \n    else \n        return 1 \n    end\nend\n\"\"\"\n  \
    \  You'll be given a string of words, and your task is to count the number\n \
    \   of boredoms. A boredom is a sentence that starts with the word \"I\".\n  \
    \  Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    \n    boredoms\
    \ = findall(S, \"^I\")\n    \n    return length(boredoms)\nend", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".,?!\")\n      \
    \      if word==\"I\"\n                boredoms+=1\n        return boredoms\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise: Write a function that counts\
    \ the number of boredoms in a string.\n    \n    Your function should take a string\
    \ as its only argument, and return a number.\n    \n    Your function should count\
    \ the number of boredoms in the string. \n    \n    Your function should ignore\
    \ capitalization and punctuation.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    Your function should ignore the 'I'\
    \ at the beginning of the string.\n    \n    ", "    \n\"\"\"\n    You'll be given\
    \ a list of words, and your task is to count the number\n    of boredoms. A boredom\
    \ is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored([\"Hello\", \"\
    world\"])\n    0\n    >>> is_bored([\"The\", \"sky\", \"is\", \"blue\", \".\"\
    , \"The\", \"sun\", \"is\", \"shining\", \".\",\n    ...            \"I\", \"\
    love\", \"this\", \"weather\"])\n    1\n    \"\"\"", "    if is_bored(S, 0)==0\n\
    \    else \n        boredoms(S, 0)\n    end\nend\n\"\"\"\n    You'll be given\
    \ a string of words, and your task is to count the number\n    of boredoms. A\
    \ boredom is a sentence that starts with the word \"I\".\n    Sentences are delimited\
    \ by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\"\
    )\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this\
    \ weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if is_bored(S,0)==0\n    else \n        boredoms(S,0)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise: Write a function that takes a string and returns the number\
    \ of boredoms \n    in the string. \n    \n    For example, \n    >>> is_bored(\"\
    Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,0)==1 then 1\
    \ else 0 end\nend\n\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S, 0)==0 \n        error(\"is_bored failed\") \n\
    \    end\nend\n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of words in the string.", "    if is_bored(S,\
    \ 0)\n    else \n        boredoms(S, 0)\nend", "    if is_bored(S) == 0 \n   \
    \ then \n        return 0 \n    else \n        return 1 \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    if is_bored(S,0)==0 \n    else \n        boredoms=0\n        for\
    \ word in split(S,\".?!\") \n            if word==\"I\" \n            boredoms+=1\
    \ \n        return boredoms\n    end\nend\n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if is_bored(S,0)==0 \n    else \n        boredom(S,0)\n    end\nend", "   \
    \ if is_bored(S,0)==0 \n        error(\"is_bored failed\") \n    end\n    return\
    \ 1\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and returns the number of words in it.", "    if is_bored(S) == 0 \n\
    \        return 0 \n    else \n        return 1 \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that counts the number of times a substring\
    \ appears in a string.\nFor example, in the string \"The sky is blue. The sun\
    \ is shining. I love this weather\", the substring \"is\" appears 3 times.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S)\
    \ == 0 then \n        return 0 \n    else \n        return 1 \nend \n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "    \n    S = S.split(\" \")\n    \n    count = 0\n\
    \    for word in S\n        if word[0] == \"I\"\n            count += 1\n    return\
    \ count\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a string and returns the number of words in the string that start with the letter\
    \ 'a'.", "    \n    \"\"\"\n    Your task is to implement the function is_bored(S::String)::Int64\n\
    \    which returns 1 if S is a bored sentence and 0 otherwise.\n    \"\"\"", " \
    \   if is_bored(S,0)==0 \n        error(\"is_bored failed\") \n    end\n    return\
    \ 1\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string. \nIt should ignore punctuation\
    \ and only count the words. \nIt should ignore capitalization and only count the\
    \ words. \nIt should ignore the case of the words and only count the words. \n\
    It should ignore the case of the words and only count the words. \nIt should ignore\
    \ the case of the words and only count the words. \nIt should ignore the case\
    \ of the words and only count the words.", "    \n    boredoms = findall(S, startswith(\"\
    I\"))\n    return length(boredoms)\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of words in the string\
    \ that start with the letter 'a'.", "    \n    \"\"\"\n    Your code here!\n \
    \   \"\"\"\n    \n    return 0\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    if\
    \ is_bored(S,0)==1 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.3>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.3>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that counts the number of boredoms in a given string.\n\
    The function should take a string as input and return a number.", "    if is_bored(S,\
    \ 0)==0 \n    else \n        return 0 \n    end\n    ", "    if is_bored(S, 0)==0\
    \ then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello\
    \ world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The\
    \ sun is shining. I love this weather\")\n</cell>\n<text>\nExercise: Write a function\
    \ that counts the number of boredoms in a string.\n    \n    Your function should\
    \ take a string as its only argument.\n    \n    Your function should return an\
    \ integer that represents the number of boredoms in the string.\n    \n    For\
    \ example:\n    >>> count_borems(\"Hello world\")\n    0\n    >>> count_borems(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S,0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S, 0) \n    else \n        error(\"boredom detection\
    \ failed\")\nend", "\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S, 0) \n    else \n        error(\"is_bored expects a string\"\
    ) \n    end\nend", "\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    if is_bored(S, 0) < 0\n    else \n        true\n    end\nend\n\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n\
    </cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining.\
    \ I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.", "\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n\"\"\"\n    You'll be given a string\
    \ of words, and your task is to count the number\n    of boredoms. A boredom is\
    \ a sentence that starts with the word \"I\".\n    Sentences are delimited by\
    \ '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello world\")\n\
    \    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love this weather\"\
    )\n    1\n    \"\"\"", "    if is_bored(S,0)==0\n    else \n        boredom(S,0)\n\
    \    end\nend", "\"\"\"\n    You'll be given a string of words, and your task\
    \ is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    if is_bored(S,0)==0\n\
    \    else \n        boredoms=0\n        for word in split(S,\".\")\n         \
    \   if is_bored(word,boredoms)==1\n            boredoms+=1\n        end\n    end\n\
    end\n</cell>\n<code language=julia-1.1>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.1>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function that counts the\
    \ number of boredoms in a string.\nThe function should take a string as input\
    \ and return a number.", "    if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n\
    \    end\nend", "    \n\"\"\"\n    You'll be given a list of strings, and your\
    \ task is to count the number\n    of boredoms. A boredom is a sentence that starts\
    \ with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n   \n\
    \    For example:\n    >>> is_bored([\"Hello world\", \"The sky is blue. The sun\
    \ is shining\", \"I love this weather\"])\n    1\n    \"\"\"", "    \n    boredoms\
    \ = 0 \n    \n    for word in split(S) do \n        if word == \"I\" then \n \
    \           boredoms += 1 \n        end \n    end \n    \n    return boredoms\
    \ \nend \n</cell>\n<code language=julia-1.3>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.3>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a\
    \ string and returns the number of words in the string.", "    S = S.trim()\n\
    \    boredoms = findall(S, \"^I.*\")\n    return length(boredoms)\nend\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string and returns the number\
    \ of words in it.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    boredoms = 0 \n    \n    for word in split(S) do \n        if word ==\
    \ \"I\" then \n            boredoms += 1 \n        end\n    end\n    \n    return\
    \ boredoms\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in that string\nthat start\
    \ with the letter 'e'.", "    if is_bored(S) == 0 \n    then return 0 \n    else\
    \ \n        boredoms = count_boredoms(S) \n        if boredoms == 0 \n       \
    \ then return 0 \n        else return 1 \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    count_boredoms(S::String)::Int64", "    if is_bored(S,0)==0\n    else\
    \ \n        return 1\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nPart 3: Finding\
    \ boredom in a string\nNow that we have defined a function that counts boredoms,\
    \ let's use it to find boredoms in a string.", "    \n    count = 0\n    for word\
    \ in S.split(\" \")\n        if word[0] == \"I\"\n            count += 1\n   \
    \ return count\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\"\
    )\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is\
    \ shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ is_bored_2(S::String)::Int64 which counts the number of boredoms in S using\
    \ only a single for loop.", "    \n    boredoms = sum(map(is_bored_word, S.split(\"\
    .\")))\n    return boredoms\nend\n</cell>\n<code language=julia-1.5>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\nWrite\
    \ a function that counts the number of boredoms in a string.", "    if is_bored(S,\
    \ 0)\n    else \n        boredom(S, 0)\n    end\nend", "\"\"\"\n    You'll be\
    \ given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if is_bored(S,0)==0\n    else \n        boredoms=0\n\
    \        for word in split(S,\".?!\")\n            if word==\"I\"\n          \
    \      boredoms+=1\n        return boredoms\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string that start with the letter 'a'.", "    \n    boredoms = Dict{String,Int64}()\n\
    \    \n    for word in split(S,\".\")\n        if word == \"I\"\n            boredoms[word]\
    \ = boredoms[word] + 1\n        end\n    end\n    \n    return length(boredoms)\n\
    end\n</cell>\n<code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of words in the string that start with the letter 'a'.",
  "    if is_bored(S,0)==0 \n        error(\"is_bored failed\") \n    end\nend", " \
    \   if is_bored(S,0)==0\n    else \n        return is_bored(S,1)\n    end\nend\n\
    \"\"\"\n    You'll be given a string of words, and your task is to count the number\n\
    \    of boredoms. A boredom is a sentence that starts with the word \"I\".\n \
    \   Sentences are delimited by '.', '?' or '!'.\n   \n    For example:\n    >>>\
    \ is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun\
    \ is shining. I love this weather\")\n    1\n    \"\"\"", "    if is_bored(S,\
    \ 0)\n    else \n        boredoms(S, 0)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that counts the number of boredoms in a string.\nThe function\
    \ should take a string as its only argument.\nThe function should return the number\
    \ of boredoms in the string.", "    if is_bored(S,0)==0\n    else \n        return\
    \ is_bored(S,1)\n    end\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"\
    Hello world\")\n</cell>\n<code language=julia-1.0>\nis_bored(\"The sky is blue.\
    \ The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of words in it.", "  \
    \  if is_bored(S, 0)==0 then 1 else 0 end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\nis_bored(\"The\
    \ sky is blue. The sun is shining. I love this weather\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.", "    if is_bored(S, 0)\n    else \n        boredom(S, 0)\n    end\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "\"\"\"\n    You'll\
    \ be given a string of words, and your task is to count the number\n    of boredoms.\
    \ A boredom is a sentence that starts with the word \"I\".\n    Sentences are\
    \ delimited by '.', '?' or '!'.\n   \n    For example:\n    >>> is_bored(\"Hello\
    \ world\")\n    0\n    >>> is_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n    1\n    \"\"\"", "    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    boredoms = findall(S, \"I\")\n    return length(boredoms)\nend\n</cell>\n\
    <code language=julia-1.5>\nis_bored(\"Hello world\")\n</cell>\n<code language=julia-1.5>\n\
    is_bored(\"The sky is blue. The sun is shining. I love this weather\")\n</cell>\n\
    <text>\nExercise\nWrite a function is_bored_2(S::String)::Int64 which counts the\
    \ number of boredoms in S.", "    if is_bored(S, 0)\n    else \n        boredom(S,\
    \ 0)\nend\n</cell>\n<code language=julia-1.0>\nis_bored(\"Hello world\")\n</cell>\n\
    <code language=julia-1.0>\nis_bored(\"The sky is blue. The sun is shining. I love\
    \ this weather\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string\
    \ and returns the number of boredoms \nin the string.", "    if is_bored(S,0)==0\
    \ \n        error(\"The sentence is not bored\")\n    end\nend", "    if is_bored(S,0)==0\
    \ \n        error(\"is_bored failed. String is empty.\")\n    end\nend", "   \
    \ if is_bored(S, 0)\n    else \n        boredom(S, 0)\nend", "    if is_bored(S)\
    \ == 0 then \n        error(\"is_bored expects a string\")\n    end\n    \n  \
    \  boredoms = findall(S, \"^I.*\")\n    \n    return length(boredoms)\nend\n</cell>\n\
    <text>\nExercise\nWrite a function that takes a string and returns the number\
    \ of words in the string.", "\"\"\"\n    You'll be given a string of words, and\
    \ your task is to count the number\n    of boredoms. A boredom is a sentence that\
    \ starts with the word \"I\".\n    Sentences are delimited by '.', '?' or '!'.\n\
    \   \n    For example:\n    >>> is_bored(\"Hello world\")\n    0\n    >>> is_bored(\"\
    The sky is blue. The sun is shining. I love this weather\")\n    1\n    \"\"\"",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
