name: HumanEval_97_multiply
language: julia
prompt: "\"\"\"Complete the function that takes two integers and returns \n    the\
  \ product of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
  \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n\
  \    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return 20.\n\
  \    \"\"\"\nfunction multiply(a::Int64, b::Int64)::Int64 \n"
tests: "using Test\n\n@testset begin\n\ncandidate = multiply;\n\t@test(candidate(148,\
  \ 412) == 16)\n\t@test(candidate(19, 28) == 72)\n\t@test(candidate(2020, 1851) ==\
  \ 0)\n\t@test(candidate(14, -15) == 20)\n\t@test(candidate(76, 67) == 42)\n\t@test(candidate(17,\
  \ 27) == 49)\n\t@test(candidate(0, 1) == 0)\n\t@test(candidate(0, 0) == 0)\nend\n"
completions: ["    if b == 0 \n        0\n    else\n        (a * b).digits(2)\n  \
    \  end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nHere's a solution\
    \ that uses only base 10 arithmetic:\n<code>", "    if a < 0 || b < 0 \n     \
    \   error(\"Invalid input\")\n    elseif b == 0 \n        return a\n    elseif\
    \ b == 1 \n        return a * b\n    else\n        mult_result = multiply(a /\
    \ 10, b / 10)\n        return mult_result * 10 + a % 10 * b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in it.\n\
    Examples:\n    length(\"hello\") should return 5.\n    length(\"hello \") should\
    \ return 6.\n    length(\"hello  \") should return 5.\n    length(\"hello  world\"\
    ) should return 10.\n    length(\"hello  world  \") should return 10.\n    length(\"\
    hello  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  ", "    if b == 0\n        return 0\n    \n    digits = floor(log10(abs(b)))\n\
    \    \n    if digits == 0\n        return a * b\n    \n    digits = digits - 1\n\
    \    \n    product = a * b\n    \n    digits = digits - 1\n    \n    while digits\
    \ > 0\n        digits = digits - 1\n        product = product / 10\n    end\n\
    \    \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise: Write a function that takes two integers and returns the sum\
    \ of the unit digits of their product.\nExamples:\n    sum(148, 412) should return\
    \ 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n\
    \    sum(14,-15) should return 20.\n    \"\"\"", "    if b == 0\n        return\
    \ a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a*b\n    end\n\
    end", "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b\
    \ == 0 \n        return a\n    elseif b == 1 \n        return a * b\n    else\n\
    \        return a * b * 10 + digits(a) * digits(b)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (modulo 10^9 + 7).\nExamples:\n    sumUnitDigits(148, 412) should\
    \ return 16.\n    sumUnitDigits(19, 28) should return 72.\n    sumUnitDigits(2020,\
    \ 1851) should return 0.\n    sumUnitDigits(14,-15) should return 20.\n    \"\"\
    \"", "    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e., if the product is 148, it should return 16).\n  \
    \  Use this function to find the sum of unit digits of any two integers whose\
    \ product is less than 1000.\n    For example, multiply(148, 412) should return\
    \ 16.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(19, 28) should return\
    \ 72.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(2020, 1851) should\
    \ return 0.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this function to find the sum of unit digits of any two integers\
    \ whose product is less than 1000.\n    For example, multiply(14,-15) should return\
    \ 20.\n    Use this ", "    if b == 0 \n        0\n    else\n        (a * b) %\
    \ 10\n    end\nend\n</code>\n<|/ a tags=julia,function |>\n<| a tags=julia,function\
    \ |>\n<code>", "    if b == 0\n        return 0\n    \n    digits = zeros(Int64,\
    \ 10)\n    \n    digits[1] = a%10\n    digits[2] = (a/10)%10\n    digits[3] =\
    \ (a/100)%10\n    digits[4] = (a/1000)%10\n    digits[5] = (a/10000)%10\n    digits[6]\
    \ = (a/100000)%10\n    digits[7] = (a/1000000)%10\n    digits[8] = (a/10000000)%10\n\
    \    digits[9] = (a/100000000)%10\n    \n    product = digits[1]*digits[2]*digits[3]*digits[4]*digits[5]*digits[6]*digits[7]*digits[8]*digits[9]\n\
    \    \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits. \nAssume the input is always valid.\nExamples:\nsum(148,\
    \ 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should\
    \ return 0.\nsum(14,-15) should return 20.\nHint: You can use the function sum.",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\n# Test the function \nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\n# Test the function \nmultiply(14,-15)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (14 and 412 should return 16).\n    Use a\
    \ while loop to keep looping until the product is 0.\n    Use a for loop to loop\
    \ over the product until it is 0.\n    Use a while loop to keep looping until\
    \ the product is 0.\n    Use a for loop to loop over the product until it is 0.\n\
    \    Use a while loop to keep looping until the product is 0.\n    Use a for loop\
    \ to loop over the product until it is 0.\n    Use a while loop to keep looping\
    \ until the product is 0.\n    Use a for loop to loop over the product until it\
    \ is 0.\n    Use a while loop to keep looping until the product is 0.\n    Use\
    \ a for loop to loop over the product until it is 0.\n    Use a while loop to\
    \ keep looping until the product is 0.\n    Use a for loop to loop over the product\
    \ until it is 0.\n    Use a while loop to keep looping until the product is 0.\n\
    \    Use a for loop to loop over the product until it is 0.\n    Use a while loop\
    \ to keep looping until the product is 0.\n    Use a for loop to loop over the\
    \ product until it is 0.\n    Use a while loop to keep looping until the product\
    \ is 0.\n    Use a for loop to loop over the product until it is 0.\n    Use a\
    \ while loop to keep looping until the product is 0.\n    Use a for loop to loop\
    \ over the product until it is 0.\n    Use a while loop to keep looping until\
    \ the product is 0.\n    Use a for loop to loop over the product until it is 0.\n\
    \    Use a while loop to keep looping until the product is 0.\n    Use a for loop\
    \ to loop over the product until it is 0.\n    Use a while loop to keep looping\
    \ until the product is 0.\n    Use a for loop to loop over the product until it\
    \ is 0.\n    Use a while loop to keep looping until the product is 0.\n    Use\
    \ a for loop", "    if b == 0 \n        return 0 \n    else \n        return (a\
    \ * 10 * b) \nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the sum of the squares of the unit digits.", "    if a < 0 || b < 0 \n     \
    \   error(\"Invalid input\") \n    else if a == 0 || b == 0 \n        return 0\
    \ \n    else \n        return (a * b) % 10 \nend\n</cell>\n<code language=julia-1.0>\n\
    # Test the function \nmultiply(148, 412)\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (without using multiplication).\n    Examples:\n    sum(148,\
    \ 412) should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851)\
    \ should return 0.\n    sum(14,-15) should return 20.\n    \"\"\"", "    if b\
    \ == 0 \n        return 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e. the sum of the digits of their product of their unit\
    \ digits).\n    For example, multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    )\n    elseif b == 0 \n        return a\n    elseif b == 1 \n        return a\n\
    \    elseif b > a \n        return multiply(b, a - b) \n    else\n        return\
    \ multiply(b, a - b) * 10 + a \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a *\
    \ b % 10) * 10\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise: Write\
    \ a function that takes in two integers and returns the sum of the unit digits\
    \ of their product (modulo 10). For example, multiply(148, 412) should return\
    \ 16.", "    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n\
    \    elseif b > 0 \n        multiply(a, b)\n    elseif b == 0 \n        a\n  \
    \  elseif b == 1 \n        a\n    elseif b == 2 \n        a * 2\n    elseif b\
    \ == 3 \n        a * 3\n    elseif b == 4 \n        a * 4\n    elseif b == 5 \n\
    \        a * 5\n    elseif b == 6 \n        a * 6\n    elseif b == 7 \n      \
    \  a * 7\n    elseif b == 8 \n        a * 8\n    elseif b == 9 \n        a * 9\n\
    \    elseif b == 10 \n        a * 10\n    elseif b == 11 \n        a * 11\n  \
    \  elseif b == 12 \n        a * 12\n    elseif b == 13 \n        a * 13\n    elseif\
    \ b == 14 \n        a * 14\n    elseif b == 15 \n        a * 15\n    elseif b\
    \ == 16 \n        a * 16\n    elseif b == 17 \n        a * 17\n    elseif b ==\
    \ 18 \n        a * 18\n    elseif b == 19 \n        a * 19\n    elseif b == 20\
    \ \n        a * 20\n    elseif b == 21 \n        a * 21\n    elseif b == 22 \n\
    \        a * 22\n    elseif b == 23 \n        a * 23\n    elseif b == 24 \n  \
    \      a * 24\n    elseif b == 25 \n        a * 25\n    elseif b == 26 \n    \
    \    a * 26\n    elseif b == 27 \n        a * 27\n    elseif b == 28 \n      \
    \  a * 28\n    elseif b == 29 \n        a * 29\n    elseif b == 30 \n        a\
    \ * 30\n    elseif b == 31 \n        a * 31\n    elseif b == 32 \n        a *\
    \ 32\n    elseif b == 33 \n        a * 33\n    elseif b == 34 \n        a * 34\n\
    \    elseif b == 35 \n        a * 35\n    elseif b == 36 \n        a * 36\n  \
    \  elseif b == 37 \n        a * 37\n    elseif b == 38 \n        a * 38\n    elseif\
    \ b == 39 \n        a * 39\n    elseif b == 40 \n        a * 40\n    elseif b\
    \ == 41 \n        a * 41\n    elseif b == 42 \n        a * 42\n    elseif b ==\
    \ 43 \n        a * 43\n    elseif b == 44 \n        a * 44\n    elseif b == 45\
    \ \n        a * 45\n    elseif b == 46 \n        a * 46\n    elseif b == 47 \n\
    \        a * 47\n    elseif b == 48 \n        a * 48\n", "    if b == 0 \n   \
    \     0\n    elseif b < 0 \n        multiply(-a, -b)\n    elseif b > 0 \n    \
    \    multiply(a, b - digits(a))\n    elseif b == 0 \n        a\n    elseif b ==\
    \ 1 \n        digits(a) * digits(a)\n    elseif b == 2 \n        digits(a) * digits(b)\
    \ + digits(a) * digits(b - 1)\n    elseif b == 3 \n        digits(a) * digits(b)\
    \ + digits(a) * digits(b - 1) + digits(a) * digits(b - 2)\n    elseif b == 4 \n\
    \        digits(a) * digits(b) + digits(a) * digits(b - 1) + digits(a) * digits(b\
    \ - 2) + digits(a) * digits(b - 3)\n    elseif b == 5 \n        digits(a) * digits(b)\
    \ + digits(a) * digits(b - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b\
    \ - 3) + digits(a) * digits(b - 4)\n    elseif b == 6 \n        digits(a) * digits(b)\
    \ + digits(a) * digits(b - 1) + digits(a) * digits(b - 2) + digits(a) * digits(b\
    \ - 3) + digits(a) * digits(b - 4) + digits(a) * digits(b - 5)\n    elseif b ==\
    \ 7 \n        digits(a) * digits(b) + digits(a) * digits(b - 1) + digits(a) *\
    \ digits(b - 2) + digits(a) * digits(b - 3) + digits(a) * digits(b - 4) + digits(a)\
    \ * digits(b - 5) + digits(a) * digits(b - 6)\n    elseif b == 8 \n        digits(a)\
    \ * digits(b) + digits(a) * digits(b - 1) + digits(a) * digits(b - 2) + digits(a)\
    \ * digits(b - 3) + digits(a) * digits(b - 4) + digits(a) * digits(b - 5) + digits(a)\
    \ * digits(b - 6) + digits(a) * digits(b - 7)\n    elseif b == 9\n        digits(a)\
    \ * digits(b) + digits(a) * digits(b - 1) + digits(a) * digits(b - 2) + digits(a)\
    \ * digits(b - 3) + digits(a) * digits(b - 4) + digits(a) * digits(b - 5) + digits(a)\
    \ * digits(b - 6) + digits(a) * digits(b - 7) + digits(a) * digits(b - 8)\n  \
    \  else", "    if b == 0 \n        return 0 \n    else \n        return (a * b)\
    \ mod 10\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a positive integer $n$ and returns the number of digits in $n$. \n\
    Examples:\n    digits(148) should return 3.\n    digits(19) should return 2.\n\
    \    digits(2020) should return 4.\n    digits(-14) should return 0.\n    digits(0)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10)\
    \ should return 0.\n    digits(-10) should return 0.\n    digits(-10) should return\
    \ 0.\n    digits(-10) should return 0.\n    digits(-10) should return 0.\n   \
    \ digits(-10) should return 0.\n    digits(-10) should return 0.\n    digits(-10",
  "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the digits of its input. \nExamples:\nsum(12345)\
    \ should return 10.\nsum(12) should return 3.\nsum(0) should return 0.\nsum(-1)\
    \ should return -1.\nsum(987) should return 9.\nsum(9) should return 0.\nsum(1000)\
    \ should return 10.\nsum(100) should return 0.\nsum(999) should return 9.\nsum(999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return 9.\nsum(9999) should return 9.\nsum(9999) should return 9.\nsum(9999)\
    \ should return ", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n\
    \    elseif b == 0\n        return a\n    else\n        return a*b\n    end\n\
    end\n\"\"\"\n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n", "    if b == 0 \n        return 0 \n    else \n        return (a * b)\
    \ % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the sum of the digits of its input. \nExamples:\nsum(1234) should\
    \ return 12.\nsum(12) should return 3.\nsum(0) should return 0.\nsum(9) should\
    \ return 1.\nsum(100) should return 10.\nsum(987) should return 91.\nsum(9876)\
    \ should return 92.\nsum(987654321) should return 9876.\nsum(9876543210) should\
    \ return 9876.\nsum(98765432100) should return 9876.\nsum(987654321098) should\
    \ return 9876.\nsum(9876543210981) should return 9876.\nsum(98765432109812) should\
    \ return 9876.\nsum(987654321098123) should return 9876.\nsum(9876543210981234)\
    \ should return 9876.\nsum(98765432109812345) should return 9876.\nsum(987654321098123456)\
    \ should return 9876.\nsum(9876543210981234567) should return 9876.\nsum(98765432109812345678)\
    \ should return 9876.\nsum(987654321098123456789) should return 9876.\nsum(9876543210981234567890)\
    \ should return 9876.\nsum(98765432109812345678901) should return 9876.\nsum(987654321098123456789012)\
    \ should return 9876.\nsum(9876543210981234567890123) should return 9876.\nsum(98765432109812345678901234)\
    \ should return 9876.\nsum(987654321098123456789012345) should return 9876.\n\
    sum(9876543210981234567890123456) should return 9876.\nsum(98765432109812345678901234567)\
    \ should return 9876.\nsum(987654321098123456789012345678) should return 9876.\n\
    sum(9876543210981234567890123456789) should return 9876.\nsum(98765432109812345678901234567890)\
    \ should return 9876.\nsum(987654321098123456789012345678901) should return 9876.\n",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) mod 10\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if b ==\
    \ 0\n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes an integer and returns the sum of the unit digits of that\
    \ integer.\nExamples:\nsum(148) should return 8.\nsum(19) should return 9.\nsum(2020)\
    \ should return 0.\nsum(14) should return 14.\nsum(0) should return 0.\nsum(-1)\
    \ should return -1.\nsum(123456789) should return 123456789.\nsum(1234567890)\
    \ should return 1234567890.\nsum(12345678901) should return 12345678901.\nsum(123456789012)\
    \ should return 123456789012.\nsum(1234567890123) should return 1234567890123.\n\
    sum(12345678901234) should return 12345678901234.\nsum(123456789012345) should\
    \ return 123456789012345.\nsum(1234567890123456) should return 1234567890123456.\n\
    sum(12345678901234567) should return 12345678901234567.\nsum(123456789012345678)\
    \ should return 123456789012345678.\nsum(1234567890123456789) should return 1234567890123456789.\n\
    sum(12345678901234567890) should return 12345678901234567890.\nsum(123456789012345678901)\
    \ should return 123456789012345678901.\nsum(1234567890123456789012) should return\
    \ 1234567890123456789012.\nsum(12345678901234567890123) should return 12345678901234567890123.\n\
    sum(123456789012345678901234) should return 123456789012345678901234.\nsum(1234567890123456789012345)\
    \ should return 1234567890123456789012345.\nsum(12345678901234567890123456) should\
    \ return 12345678901234567890123456.\nsum(123456789012345678901234567) should\
    \ return 123456789012345678901234567.\nsum(1234567890123456789012345678) should\
    \ return 1234567890123456789012345678.\nsum(12345678901234567890123456789) should\
    \ return 12345678901234567890123456789.\nsum(123456789012345678901234567890) should\
    \ return 123456789012345678901234567890.\nsum(1234567890123456789012345678901)\
    \ should return 1234567890123456789012345678901.\nsum(12345678901234567890123456789012)\
    \ should return 12345678901234567890123456789012.\nsum(123456789012345678901234567890123)\
    \ should return 123456789012345678901234567890123.\nsum(1234567890123456789012345678901234)\
    \ should return 1234567890123456789012345678901234.\nsum(12345678901234567890123456789012345)\
    \ should return 12345678901234567890123456789012345.\nsum(123456789012345678901234567890123456)\
    \ should return 123456789012345678901234567890123456.\n", "    if b == 0\n   \
    \     return a\n    else\n        return multiply(a % 10, (b / 10) * 10) + a /\
    \ 10\n    end\nend\n</cell>\n<code language=julia-1.3>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.3>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.3>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.3>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of two integers. Assume\
    \ that the input is an integer and that both numbers are positive.", "    if b\
    \ == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if b == 0\n        0\n    else\n        (a*b).digits(2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\"\"\
    \"\n    \n    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n", "    if a < 0 || b < 0\n        return -1\n    \n \
    \   if a == 0 || b == 0\n        return 0\n    \n    if a > b\n        a, b =\
    \ b, a\n    \n    mul = 1\n    \n    while a != 0\n        mul *= 10\n       \
    \ a -= 1\n    \n    while b != 0\n        mul *= 10\n        b -= 1\n    \n  \
    \  return mul\nend", "    if b == 0 \n        0\n    else\n        (a * 10 + b)\
    \ mod 10\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work\
    \ if `a` is negative and `b` is positive.\n<|/ c |>\n<| c |>\nI fixed the issue.\
    \ Thanks for pointing it out.\n<|/ c |>\n<| a tags=julia |>\nHere's a solution\
    \ that doesn't use any loops:\n<code>", "    if b == 0 \n        0\n    else\n\
    \        (a*b).digits(2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\
    \"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n   \
    \     return (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (without using multiplication).\n    Examples:\n    productSum(148,\
    \ 412) should return 16.\n    productSum(19, 28) should return 72.\n    productSum(2020,\
    \ 1851) should return 0.\n    productSum(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of their unit digits.\nAssume the input is always valid.\nExamples:\nsum(148,\
    \ 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should\
    \ return 0.\nsum(14,-15) should return 20.\nHint: You can use the function sum.",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n@assert multiply(148,\
    \ 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) ==\
    \ 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nUsing your multiply\
    \ function, complete the function called digit_product, which should take two\
    \ integers and return their sum of the product of their unit digits. For example,\
    \ digit_product(19,28) should return 32, as digit_product(19,28) is the product\
    \ of 19 and 28 (both with unit digits).", "    if b == 0 \n        return 0 \n\
    \    else \n        return (a * b % 10) * (10 * b / 10)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nUsing your multiply function,\
    \ write a function called count_digits(n) that takes in a\npositive integer and\
    \ returns how many digits in that number.", "    if b == 0 \n        return 0\
    \ \n    else \n        return (a * b) / b\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e. the sum of the digits of their product times the unit\
    \ digits).\n    For example, multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0\
    \ \n        multiply(-a, -b)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b == -2 \n        multiply(a, 10)\n    elseif b == -3 \n        multiply(a,\
    \ 100)\n    elseif b == -4 \n        multiply(a, 1000)\n    elseif b == -5 \n\
    \        multiply(a, 10000)\n    elseif b == -6 \n        multiply(a, 100000)\n\
    \    elseif b == -7 \n        multiply(a, 1000000)\n    elseif b == -8 \n    \
    \    multiply(a, 10000000)\n    elseif b == -9 \n        multiply(a, 100000000)\n\
    \    elseif b == -10 \n        multiply(a, 1000000000)\n    elseif b == -11 \n\
    \        multiply(a, 10000000000)\n    elseif b == -12 \n        multiply(a, 100000000000)\n\
    \    elseif b == -13 \n        multiply(a, 1000000000000)\n    elseif b == -14\
    \ \n        multiply(a, 10000000000000)\n    elseif b == -15 \n        multiply(a,\
    \ 100000000000000)\n    elseif b == -16 \n        multiply(a, 1000000000000000)\n\
    \    elseif b == -17 \n        multiply(a, 10000000000000000)\n    elseif b ==\
    \ -18 \n        multiply(a, 100000000000000000)\n    elseif b == -19 \n      \
    \  multiply(a, 1000000000000000000)\n    elseif b == -20 \n        multiply(a,\
    \ 10000000000000000000)\n    elseif b == -21 \n        multiply(a, 1000000000000000000)\n\
    \    elseif b == -22 \n        multiply(a, 10000000000000000000)\n    elseif b\
    \ == -23 \n        multiply(a, 100000000000000000000)\n    elseif b == -24 \n\
    \        multiply(a, 1000000000000000000000)\n    elseif b == -25 \n        multiply(a,\
    \ 10000000000000000000000)\n    elseif b == -26 \n        multiply(a, 100000000000000000000000)\n\
    \    elseif b == -27 \n        multiply(a, 1000000000000000000000000)\n    elseif\
    \ b == -28 \n        multiply(a, 10000000000000000000000000)\n    elseif b ==\
    \ -29 \n        multiply(a, 100000000000000000000000000)\n    elseif b == -30\
    \ \n        multiply(a, 1000000000000000000000000000)\n    elseif b == -31 \n\
    \        multiply(a, 10000000000000000000000000000)\n    elseif b == -32 \n  \
    \      multiply(a, 100000000000000000000000000000)\n    elseif b == -33 \n   \
    \     multiply(a, 1000000000000000000000000000000)\n    elseif b == -34 \n   \
    \     multiply(a, 10000000000000000000000000000000)\n    elseif b == -35 \n",
  "    if b == 0\n        return a\n    else\n        return multiply(a % 10, (b /\
    \ 10) * 10) + a / 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of its unit digits.\n\
    Examples:\nsum(148, 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020,\
    \ 1851) should return 0.\nsum(14,-15) should return 20.", "    if a < 0 || b <\
    \ 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0 \n      \
    \  0\n    else \n        digits(a) * digits(b) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of the\
    \ unit digits of their product (e.g., multiply(148, 412) should return 16).",
  "    if b == 0\n        return a\n    \n    if a < 0\n        return multiply(-a,\
    \ b)\n    \n    if b < 0\n        return multiply(a, -b)\n    \n    if a < b\n\
    \        return multiply(a, b)\n    \n    return multiply(a, b) % 10\nend\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples:\n    count(\"hello\") should return 5.\n    count(\"a\") should return\
    \ 1.\n    count(\"ab\") should return 2.\n    count(\"abc\") should return 3.\n\
    \    count(\"abcde\") should return 5.\n    count(\"abcdef\") should return 6.\n\
    \    count(\"abcdefg\") should return 7.\n    count(\"abcdefgh\") should return\
    \ 8.\n    count(\"abcdefghi\") should return 9.\n    count(\"abcdefghij\") should\
    \ return 10.\n    count(\"abcdefghijk\") should return 11.\n    count(\"abcdefghijkl\"\
    ) should return 12.\n    count(\"abcdefghijklm\") should return 13.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\"\
    ) should return 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\"\
    ) should return 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\"\
    ) should return 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"\
    abcdefghijklmn\") should return 14.\n    count(\"abcdefghijklmn\") should return\
    \ 14.\n    count(\"abcdefghijklmn\") should return 14.\n    count(\"abcdef", " \
    \   if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n \
    \       return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0\n        return 0\n    \n    digits\
    \ = zeros(Int64, 10)\n    \n    digits[1] = a%10\n    digits[2] = (a/10)%10\n\
    \    digits[3] = (a/100)%10\n    digits[4] = (a/1000)%10\n    digits[5] = (a/10000)%10\n\
    \    digits[6] = (a/100000)%10\n    digits[7] = (a/1000000)%10\n    digits[8]\
    \ = (a/10000000)%10\n    digits[9] = (a/100000000)%10\n    \n    product = digits[1]*digits[2]*digits[3]*digits[4]*digits[5]*digits[6]*digits[7]*digits[8]*digits[9]\n\
    \    \n    return product\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<code language=julia-1.5>",
  "    if b == 0\n        0\n    elseif b < 0\n        multiply(-a, -b)\n    else\n\
    \        (a * b) mod 10\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThank\
    \ you for your answer! I understand that my code is not the most efficient but\
    \ I'm just trying to understand how it works. I understand that my code is not\
    \ the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient but I'm just trying to understand how it works. I understand\
    \ that my code is not the most efficient but I'm just trying to understand how\
    \ it works. I understand that my code is not the most efficient but I'm just trying\
    \ to understand how it works. I understand that my code is not the most efficient\
    \ but I'm just trying to understand how it works. I understand that my code is\
    \ not the most efficient ", "    if b == 0 \n        0\n    else\n        (a *\
    \ 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of its\
    \ input. \nAssume that the input is always valid.\nExamples:\nsum(148) should\
    \ return 8.\nsum(19) should return 9.\nsum(2020) should return 0.\nsum(14) should\
    \ return 14.\nsum(15) should return 15.\nsum(0) should return 0.\nsum(-1) should\
    \ return 0.\nsum(123456789) should return 9876.\nsum(1234567890) should return\
    \ 9876.\nsum(12345678901) should return 9876.\nsum(123456789012) should return\
    \ 9876.\nsum(1234567890123) should return 9876.\nsum(12345678901234) should return\
    \ 9876.\nsum(123456789012345) should return 9876.\nsum(1234567890123456) should\
    \ return 9876.\nsum(12345678901234567) should return 9876.\nsum(123456789012345678)\
    \ should return 9876.\nsum(1234567890123456790) should return 9876.\nsum(1234567890123456791)\
    \ should return 9876.\nsum(1234567890123456792) should return 9876.\nsum(1234567890123456793)\
    \ should return 9876.\nsum(1234567890123456794) should return 9876.\nsum(1234567890123456795)\
    \ should return 9876.\nsum(1234567890123456796) should return 9876.\nsum(1234567890123456797)\
    \ should return 9876.\nsum(1234567890123456798) should return 9876.\nsum(1234567890123456799)\
    \ should return 9876.\nsum(1234567890123456000) should return 9876.\nsum(1234567890123456001)\
    \ should return 9876.\nsum(1234567890123456002) should return 9876.\nsum(1234567890123456003)\
    \ should return 9876.\nsum(1234567890123456004) should return 9876.\nsum(1234567890123456005)\
    \ should return 9876.\nsum(1234567890123456006) should return 9876.\nsum(1234567890123456007)\
    \ should return 9876.\nsum(1234567890123456008) should return 9876.\nsum(1234567890123456009) ",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b % 10) * 10\
    \ + a % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\
    \ with some examples:\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\nProblem 3\nUsing your multiply function, write a function called\
    \ digit_product that computes the product of its \ndigit products.", "    if b\
    \ == 0\n        return a\n    else\n        return a*b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n# Test the function\nmultiply(148, 412)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of an\
    \ integer.\nExamples:\nsum(148) should return 8.\nsum(19) should return 9.\nsum(2020)\
    \ should return 20.\nsum(0) should return 0.\nsum(-1) should return -1.\nsum(123456789)\
    \ should return 9876.\nsum(987654321) should return 9876.\nsum(98765432100) should\
    \ return 9876.\nsum(987654321000) should return 9876.\nsum(98765432100000000)\
    \ should return 9876.\nsum(987654321000000000000) should return 9876.\nsum(98765432100000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000) should return 9876.\n\
    sum(9876543210000000000000000000000) should return 9876.\nsum(987654321000000000000000000000000)\
    \ should return 9876.\nsum(98765432100000000000000000000000000) should return\
    \ 9876.\nsum(987654321000000000000000000000000000000) should return 9876.\nsum(98765432100000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000) should\
    \ return 9876.\nsum(9876543210000000000000000000000000000000000) should return\
    \ 9876.\nsum(98765432100000000000000000000000000000000000000) should return 9876.\n\
    sum(9876543210000000000000000000000000000000000000000) should return 9876.\nsum(98765432100000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(9876543210000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(9876543210000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(98765432100000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(98765432100000000000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000000000000000000000000000000000000000000)\
    \ should return 9876.\nsum(987654321000000000000000000", "    if a < 0 || b <\
    \ 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n        error(\"Invalid\
    \ input\")\n    elseif b == 1 \n        return a\n    else\n        return a*b\n\
    \    end\nend\n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n", "    if b == 0\n        0\n    else\n        (a * b).digits\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return (a * b) /\
    \ digit_sum(a)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n   \
    \ digit_sum(a::Int64)::Int64\n    Sum the unit digits of a number.\n    Assumes\
    \ input is valid.\n    Examples:\n    digit_sum(148) should return 4.\n    digit_sum(19)\
    \ should return 7.\n    digit_sum(2020) should return 0.\n    digit_sum(14) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n   \
    \     return (a*b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0\n        return a\n    else\n      \
    \  return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return a * b\n \
    \   end\nend\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n   \
    \ \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n \
    \   \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\
    \    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n",
  "    if b == 0 \n        return 0 \n    else \n        return a * b \nend\n</cell>\n\
    <code language=julia-1.0>\n# Test your function here\n@assert multiply(148, 412)\
    \ == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0 \n\
    @assert multiply(14,-15) == 20\n</cell>\n<text>\n4.5 Write a Julia function named\
    \ is_palindrome that returns true if the given number is a palindrome, false otherwise.\
    \ For example, 5321 is a palindrome. Assume that the given number is a valid integer.",
  "    if b == 0 \n        return 0 \n    else \n        return (a*b)/b \nend\n</cell>\n\
    <code language=julia-1.5>\n# Test your function\n@assert multiply(148, 412) ==\
    \ 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0.0\n@assert\
    \ multiply(14,-15) == 20\n</cell>\n<text>\n4.3 Unit Tests\nWe have written a lot\
    \ of code with unit tests. Unit tests help you find and fix bugs in your code.\
    \ Let's review some of them:", "    if a < 0 || b < 0 \n        error(\"Invalid\
    \ input\")\n    elseif b == 0 \n        return 0 \n    elseif b == 1 \n      \
    \  return a \n    elseif b > a \n        error(\"Invalid input\")\n    elseif\
    \ b == a \n        return a \n    else\n        return a * b\n    end\nend\n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"", "    if b == 0 \n        0\n    else\n    \
    \    (a * b) % 10\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work. `multiply(148, 412)` returns `16`, but `multiply(19, 28)` returns `72`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I fixed the code. Now it works.\n\
    <|/ c |>\n<| a |>\n<code>", "    if b == 0 \n        0\n    else\n        (a *\
    \ 10 + b) mod 10\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of two integers. \n\
    Assume that the input is always valid.\nExamples:\nsum(148, 412) should return\
    \ 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15)\
    \ should return 20.\nHint: You can use the + operator to sum the two integers.\
    \ \nYou can use the mod operator to return the remainder after division.", " \
    \   if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return a * b\nend\n\
    </cell>\n<code language=julia-1.4>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if a <\
    \ 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b == 0\n\
    \        error(\"Invalid input\")\n    else\n        return a*b\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if b ==\
    \ 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a tags=julia,function\
    \ |>\n<| c |>\nThank you for your answer! I appreciate it!\n<|/ c |>\n<| a dscore=0\
    \ |>\n<code>", "    if b == 0\n        0\n    elseif b < 0\n        multiply(-a,\
    \ -b)\n    else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't work. Try multiplying `19` and `28` for example. `multiply(19,\
    \ 28)` returns `72` but `multiply(19, 28)` should return `0`.\n<|/ c |>\n<| c\
    \ |>\nI see what you mean. I've updated my answer to reflect that.\n<|/ c |>\n\
    <| a |>\nThe simplest way is to use divmod and then multiply by 10:\n<code>",
  "    if b == 0 \n        0\n    else\n        (a * 10 * b + digits(a) * digits(b))\
    \ % 10\n    end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (modulo 10).\nExamples:\n    sum(148, 412)\
    \ should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should\
    \ return 0.\n    sum(14,-15) should return 20.\n    \"\"\"", "    if b == 0\n\
    \        return 0\n    \n    digits = zeros(Int64, 10)\n    digits[1] = a\n  \
    \  digits[2] = b\n    \n    product = 1\n    for i in 1..9\n        product =\
    \ product * digits[i]\n    end\n    return product\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nExamples:\n    count(\"\
    hello\") should return 5.\n    count(\"hello!\") should return 4.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello!\") should return 0.\n    count(\"\
    hello\") should return 0.\n    count(\"hello", "    if b == 0\n        0\n   \
    \ else\n        (a * b).digits(2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    )\n    else if a == 0 || b == 0 \n        return 0 \n    else \n        return\
    \ (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete\
    \ the function that takes two integers and returns \n    the product of their\
    \ unit digits.\n    Assume the input is always valid.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an array of integers and returns\
    \ the sum of the squares of the unit digits.\nExamples:\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([2020, 1851, 14,-15]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.\n    sum_squares([148, 412, 19, 28]) should\
    \ return 52.\n    sum_squares([148, 412, 19, 28]) should return 52.\n    sum_squares([148,\
    \ 412, 19, 28]) should return 52.", "    if b == 0 \n        0\n    elseif b <\
    \ 0 \n        multiply(a, -b)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    else\n        multiply(a, b / 10)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise: Write a function that takes a single\
    \ string and returns the number of characters in the string.\n    Use this function\
    \ to solve the problem below.", "    if b == 0 \n        return 0 \n    else \n\
    \        return (a * b) % 10\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nExamples:\n    length(\"hello\") should return\
    \ 5.\n    length(\"helloworld\") should return 10.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\"\
    ) should return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"\
    helloworld!\") should return 17.\n    length(\"helloworld!\") should return 17.\n\
    \    length(\"helloworld!\") should return 17.\n    length(\"helloworld!\") should\
    \ return 17.\n    length(\"helloworld!\") should return 17.\n    length(\"", " \
    \   if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else \n       \
    \ return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Complete the function that takes two integers and returns \n    the product of\
    \ their unit digits.\n    Assume the input is always valid.\n    Examples:\n \
    \   multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n\
    \    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return\
    \ 20.\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n\
    \    else\n        return (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    ) \n    else if a == 0 || b == 0\n        error(\"Invalid input\") \n    else\
    \ \n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a*b\n    end\n\
    end\n\"\"\"\n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\
    \"\"\n", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif\
    \ b == 0\n        return a\n    elseif b == 1\n        return a * b\n    else\n\
    \        return a * b / 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes an array of integers and returns the sum of the \n    unit\
    \ digits of all the numbers in the array.\n    For example, if the input array\
    \ is [148, 412, 19, 28, 2020, 1851] then \n    the output should be 16.\n    \n\
    \    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the reduce function.\n    \n    Do not use the sum function.\n\
    \    \n    Do not use the map function.\n    \n    Do not use the sum function.",
  "    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n</cell>\n\
    <code language=julia-1.4>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes two integers and returns\
    \ the sum of their unit digits.\nAssume the input is always valid.\nExamples:\n\
    sum(148, 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851)\
    \ should return 0.\nsum(14,-15) should return 20.\nsum(1,0) should return 0.\n\
    sum(0,1) should return 1.\nsum(1,-1) should return -1.\nsum(1,-2) should return\
    \ -2.\nsum(1,-25) should return -25.\nsum(1,-250) should return -250.\nsum(1,-2501)\
    \ should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should\
    \ return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return\
    \ -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\n\
    sum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501)\
    \ should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should\
    \ return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return\
    \ -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\n\
    sum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501)\
    \ should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should\
    \ return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return\
    \ -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\n\
    sum(1,-2501) should return -2501.\nsum(1,-2501) should return -2501.\nsum(1,-2501)\
    \ should return -250", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        return a\n    else\n        return a*b\n    end\n\
    end\n\"\"\"\n    \n\"\"\"\n    \n    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\
    \"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\
    \n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\
    \"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\
    \"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n\"\"\"\n", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the sum of the digits of its input. \n    For example,\
    \ sum(\"1234\") should return 6. \n    Use a while loop to solve this problem.\n\
    \    \n    Examples:\n    sum(\"1234\") should return 6.\n    sum(\"123\") should\
    \ return 3.\n    sum(\"1\") should return 1.\n    sum(\"0\") should return 0.\n\
    \    sum(\"-1\") should return -1.\n    sum(\"-10\") should return -10.\n    sum(\"\
    100\") should return 10.\n    sum(\"101\") should return 11.\n    sum(\"1001\"\
    ) should return 21.\n    sum(\"10001\") should return 42.\n    sum(\"1001001\"\
    ) should return 420.\n    sum(\"100100101\") should return 4200.\n    sum(\"1001001001\"\
    ) should return 42000.\n    sum(\"100100100101\") should return 42000.\n    sum(\"\
    1001001001001\") should return 42000.\n    sum(\"100100100100101\") should return\
    \ 42000.\n    sum(\"1001001001001001\") should return 42000.\n    sum(\"100100100100100101\"\
    ) should return 42000.\n    sum(\"1001001001001001001\") should return 42000.\n\
    \    sum(\"100100100100100100101\") should return 42000.\n    sum(\"1001001001001001001001\"\
    ) should return 42000.\n    sum(\"100100100100100100100101\") should return 42000.\n\
    \    sum(\"1001001001001001001001001\") should return 42000.\n    sum(\"100100100100100100100100101\"\
    ) should return 42000.\n    sum(\"1001001001001001001001001001\") should return\
    \ 42000.\n    sum(\"100100100100100100100100100101\") should return 42000.\n \
    \   sum(\"1001001001001001001001001001001\") should return 42000.\n    sum(\"\
    100100100100100100100100100100101\") should return 42000.", "    if a < 0 || b\
    \ < 0 \n        error(\"Invalid input\") \n    else if a == 0 || b == 0 \n   \
    \     0 \n    else \n        digits(a) * digits(b) \nend\n</cell>\n<code language=julia-1.5>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * 10 + b) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.0>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.0>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (that is, the product of their unit\
    \ \n    digits).\n    For example: multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    multiply(-14, -15) should return -20.\n    \"\"\"", " \
    \   if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n \
    \       return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\
    \"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n   \
    \ \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n", "    if b == 0\n        0\n \
    \   else\n        (a * 10 + b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (that is, the product of their unit \n    digits).\n    For\
    \ example, multiply(148, 412) should return 16.\n    For example, multiply(19,\
    \ 28) should return 72.\n    For example, multiply(2020, 1851) should return 0.\n\
    \    For example, multiply(14,-15) should return 20.\n    For example, multiply(-14,\
    \ -15) should return -20.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.\n    For example, multiply(-14, -40) should return -40.\n\
    \    For example, multiply(-14, -40) should return -40.\n    For example, multiply(-14,\
    \ -40) should return -40.", "    if b == 0 \n        return 0 \n    else \n  \
    \      return (a * b) % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the unit digits. \nFor example,\
    \ \n    sum([1, 2, 3, 4]) should return 25.\n    sum([1, 2, -3, 4]) should return\
    \ 4.\n    sum([1, 2, -3, 4], 2) should return -15.\n    sum([1, 2, -3, 4], 3)\
    \ should return -14.\n    sum([1, 2, -3, 4], 4) should return 0.\n    sum([1,\
    \ 2, -3, 4], 5) should return 0.\n    sum([1, 2, -3, 4], 6) should return 0.\n\
    \    sum([1, 2, -3, 4], 7) should return 0.\n    sum([1, 2, -3, 4], 8) should\
    \ return 0.\n    sum([1, 2, -3, 4], 9) should return 0.\n    sum([1, 2, -3, 4],\
    \ 10) should return 0.\n    sum([1, 2, -3, 4], 11) should return 0.\n    sum([1,\
    \ 2, -3, 4], 12) should return 0.\n    sum([1, 2, -3, 4], 13) should return 0.\n\
    \    sum([1, 2, -3, 4], 14) should return 0.\n    sum([1, 2, -3, 4], 15) should\
    \ return 0.\n    sum([1, 2, -3, 4], 16) should return 0.\n    sum([1, 2, -3, 4],\
    \ 17) should return 0.\n    sum([1, 2, -3, 4], 18) should return 0.\n    sum([1,\
    \ 2, -3, 4], 19) should return 0.\n    sum([1, 2, -3, 4], 20) should return 0.\n\
    \    sum([1, 2, -3, 4], 21) should return 0.\n    sum([1, 2, -3, 4], 22) should\
    \ return 0.\n    sum([1, 2, -3, 4], 23) should return 0.\n    sum([1, 2, -3, 4],\
    \ 24) should return 0.\n    sum([1, 2, -3, 4], 25) should return 0.\n    sum([1,\
    \ 2, -3, 4], 26) should return 0.\n    sum([1, 2, -3, 4], 27) should return 0.\n\
    \    sum([1, 2, -3, 4], 28) should return 0.\n    sum([1, 2, -3, 4], 29) should\
    \ return 0.\n    sum([1, 2, -3, 4], 30) should return 0.\n    sum([1, 2, -3, 4],\
    \ 31) should return 0.\n    sum([1, 2, -3, 4], 32) should return 0.\n    sum([1,\
    \ 2, -3, 4], 33) should return 0.\n    sum([", "    if b == 0\n        0\n   \
    \ else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function\n@assert multiply(148, 412) == 16\n@assert multiply(19, 28)\
    \ == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n\
    </cell>\n<text>\nProblem 3\nUsing your multiply function, write a function called\
    \ digits that takes in an \n    integer and returns the number of digits in that\
    \ integer.\n    Examples:\n    digits(12) should return 2.\n    digits(14) should\
    \ return 3.\n    digits(99) should return 4.\n    digits(10101) should return\
    \ 5.\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a*b).digits\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0\n        0\n    else\n        (a * b) mod 10\n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  0\n    else\n        (a * b) mod 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes an\
    \ integer and returns the sum of the digits of that integer.\nExamples:\nsum(12)\
    \ should return 3.\nsum(123) should return 6.\nsum(1234) should return 10.\nsum(12345)\
    \ should return 15.\nsum(123456) should return 20.\nsum(1234567) should return\
    \ 30.\nsum(12345678) should return 40.\nsum(123456789) should return 50.\nsum(1234567890)\
    \ should return 60.\nsum(12345678901) should return 70.\nsum(123456789012) should\
    \ return 80.\nsum(1234567890123) should return 90.\nsum(12345678901234) should\
    \ return 100.\nsum(123456789012345) should return 110.\nsum(1234567890123456)\
    \ should return 120.\nsum(12345678901234567) should return 130.\nsum(123456789012345678)\
    \ should return 140.\nsum(1234567890123456789) should return 150.\nsum(12345678901234567890)\
    \ should return 160.\nsum(123456789012345678901) should return 170.\nsum(1234567890123456789012)\
    \ should return 180.\nsum(12345678901234567890123) should return 190.\nsum(123456789012345678901234)\
    \ should return 200.\nsum(1234567890123456789012345) should return 210.\nsum(12345678901234567890123456)\
    \ should return 220.\nsum(123456789012345678901234567) should return 230.\nsum(1234567890123456789012345678)\
    \ should return 240.\nsum(12345678901234567890123456789) should return 250.\n\
    sum(123456789012345678901234567890) should return 260.\nsum(1234567890123456789012345678901)\
    \ should return 270.\nsum(12345678901234567890123456789012) should return 280.\n\
    sum(123456789012345678901234567890123) should return 290.\nsum(1234567890123456789012345678901234)\
    \ should return 300.\nsum(12345678901234567890123456789012345) should return 310.\n\
    sum(123456789012345678901234567890123456) should return 320.\nsum(1234567890123456789012345678901234567)\
    \ should return 330.\nsum(12345678901234567890123456789012345678) should return\
    \ 340.\nsum(123456789012345678901234567890123456789) should return 350.\nsum(1234567890123456789012345678901234567890)\
    \ should return 360.\nsum(12345678901234567890123456789012345678901) should return\
    \ 37", "    if b == 0 \n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if b == 0\n      \
    \  0\n    elseif b < 0\n        multiply(-a, -b)\n    else\n        (a * b).digits\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    )\n    elseif b == 0 \n        return a\n    elseif b == 1 \n        return a\
    \ * b\n    elseif b > a \n        return multiply(b, a % b)\n    else\n      \
    \  return multiply(a % b, b)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clarification\
    \ from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26899439)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to implement\
    \ the function `multiply` which returns the product of their unit digits. He also\
    \ asked how to implement the function `isUnitDigit` which checks if a number is\
    \ a unit digit. He also asked how to implement the function `isUnitDigit` which\
    \ checks if a number is a unit digit. He also asked how to implement the function\
    \ `isUnitDigit` which checks if a number is a unit digit. He also asked how to\
    \ implement the function `isUnitDigit` which checks if a number is a unit digit.\
    \ He also asked how to implement the function `isUnitDigit` which checks if a\
    \ number is a unit digit. He also asked how to implement the function `isUnitDigit`\
    \ which checks if a number is a unit digit. He also asked how to implement the\
    \ function `isUnitDigit` which checks if a number is a unit digit.\n<|/ c |>\n\
    <| c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/26899439)\n\
    <|/ c |>\n<| c |>\nI believe it does answer the question. He asked how to implement\
    \ the function `multiply` which returns the product of their unit digits. He also\
    \ asked how to implement the function `isUnitDigit` which checks if a number is\
    \ a unit digit. He also asked how to implement the function `isUnitDigit` which\
    \ checks if a number is a unit digit. He also asked how to implement the function\
    \ `isUnitDigit` which checks if a number is a unit digit. He also asked how to\
    \ implement the function `isUnitDigit` which checks if a number is a unit digit.\
    \ He also as", "    if b == 0\n        0\n    else\n        (a*b).digits(2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return a * b / b \nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    For example: multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(",
  "    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a, -b)\n    elseif\
    \ b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n\
    \        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n\
    \    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n\
    \        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n\
    \    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n\
    \        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a, -b / 10)\n\
    \    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n        multiply(a,\
    \ -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n    elseif b < 0 \n\
    \        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a, b / 10)\n\
    \    elseif b < 0 \n        multiply(a, -b / 10)\n    elseif b > 0 \n        multiply(a,\
    \ b / 10)\n    elseif b < 0 \n        multiply(a, -b / ", "    if b == 0 \n  \
    \      0\n    elseif b < 0 \n        multiply(a, -b)\n    elseif b > 0 \n    \
    \    multiply(a, b / 10)\n    else\n        multiply(a, b / 10)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product \n    (i.e. the sum of the digits of their product times 10).\
    \ \n    For example, multiply(148, 412) should return 16.\n    Use a while loop\
    \ to keep adding digits of their product until their product is greater than \n\
    \    or equal to 10.\n    Use a while loop to keep adding digits of their product\
    \ until their product is less than \n    or equal to 0.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0 \n        0\n    else\n        (a*b).digits[1]\n    end\nend", " \
    \   if a < 0 || b < 0\n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        return 0\n    else\n        return (a * b) mod 10\n    end\n\
    end\n\"\"\"\n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n\
    \    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n \
    \   \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\
    \"\"\n    \n\"\"\"\n    \n\"\"\"\n    \n\"\"\"", "    if b == 0 \n        0\n\
    \    else\n        (a * b) / b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the digits of its input. \nExamples:\nsum(\"\
    123\") should return 6.\nsum(\"12\") should return 3.\nsum(\"1\") should return\
    \ 1.\nsum(\"0\") should return 0.\nsum(\"\") should return 0.\nsum(\" \") should\
    \ return 0.\nsum(\" 1\") should return 1.\nsum(\" 1 \") should return 2.\nsum(\"\
    \ 1 2\") should return 3.\nsum(\" 1 2 \") should return 4.\nsum(\" 1 2 3\") should\
    \ return 5.\nsum(\" 1 2 3 4\") should return 6.\nsum(\" 1 2 3 4 5\") should return\
    \ 7.\nsum(\" 1 2 3 4 5 6\") should return 8.\nsum(\" 1 2 3 4 5 6 7\") should return\
    \ 9.\nsum(\" 1 2 3 4 5 6 7 8\") should return 10.\nsum(\" 1 2 3 4 5 6 7 8 9\"\
    ) should return 11.\nsum(\" 1 2 3 4 5 6 7 8 9 0\") should return 12.\nsum(\" 1\
    \ 2 3 4 5 6 7 8 9 0 1\") should return 13.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2\")\
    \ should return 14.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3\") should return 15.\nsum(\"\
    \ 1 2 3 4 5 6 7 8 9 0 1 2 3 4\") should return 16.\nsum(\" 1 2 3 4 5 6 7 8 9 0\
    \ 1 2 3 4 5\") should return 17.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6\") should\
    \ return 18.\nsum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7\") should return 19.\n\
    sum(\" 1 2 3 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8\") should return 20.\nsum(\" 1 2 3\
    \ 4 5 6 7 8 9 0 1 2 3 4 5 6 7 8 9\") should return 21.\nsum(\" 1 2 3 4 5 6 7 8\
    \ 9 0 1 2 3 4 5 6 7 8 9 0\") should return 22.\nsum(\" 1 2 3 4 5 6 7 8 9 ", " \
    \   if b == 0\n        return a\n    \n    digits = divrem(a, b) \n    \n    if\
    \ digits[1] == 0\n        return digits[2]\n    \n    digits[1] = digits[1] -\
    \ 1\n    \n    return multiply(digits[1], digits[2]) * digits[1] + digits[2]\n\
    end\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two integers and returns the sum of the \nunit digits\
    \ of their product (without using any built-in functions).\nExamples:\n    productSum(148,\
    \ 412) should return 16.\n    productSum(19, 28) should return 72.\n    productSum(2020,\
    \ 1851) should return 0.\n    productSum(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        0\n    else\n        digits(a) * digits(b)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  0\n    else\n        (a*b)/10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a *\
    \ 10 + b) mod 10\n    end\nend\n</code>\n<|/ a tags=julia,integer-division |>\n\
    <| c |>\nThis doesn't work if `b` is negative.\n<|/ c |>\n<| c |>\nI believe it\
    \ does. `b` is an `Int64`, so `b * 10` will always be positive.\n<|/ c |>\n<|\
    \ c |>\nNo, `b` is an `Int64`, so `b * 10` will always be positive.\n<|/ c |>\n\
    <| c |>\nAh, I see. Thanks for pointing that out. I've edited my answer to fix\
    \ it.\n<|/ c |>\n<| a dscore=3 |>\nThe simplest solution is to use divrem, which\
    \ does exactly what you want:\n<code>\njulia> divrem(148, 412)\n16", "    if a\
    \ < 0 || b < 0 \n        error(\"The inputs must be positive\")\n    else if a\
    \ == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n    else if\
    \ a == 0 || b == 0\n        error(\"The inputs must be positive\")\n", "    if\
    \ b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 + 7)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product \n    (i.e., if the\
    \ product is $10^9 + 7$, then the sum is $10^9 + 7$).\n    For example, multiply(148,\
    \ 412) should return 16.\n    For example, multiply(19, 28) should return 72.\n\
    \    For example, multiply(2020, 1851) should return 0.\n    For example, multiply(14,-15)\
    \ should return 20.\n    For example, multiply(-14, -15) should return -20.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n\
    \    For example, multiply(-14, -85) should return -85.\n    For example, multiply(-14,\
    \ -85) should return -85.\n    For example, multiply(-14, -85) should return -85.\n",
  "    if b == 0\n        0\n    else\n        (a*b).digits(2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (without using multiplication).\n    For example:\n    sum(148,\
    \ 412) should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851)\
    \ should return 0.\n    sum(14,-15) should return 20.\n    \"\"\"", "    if a\
    \ < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return\
    \ a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n   \
    \     multiply(a, -b)\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  0\n    elseif b < 0 \n        multiply(a, -b)\n    elseif b > 0 \n        multiply(a,\
    \ b)\n    elseif b == 0 \n        a\n    else\n        multiply(a, b / 10)\n \
    \   end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", "    if\
    \ a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 || b ==\
    \ 0\n        0\n    else\n        (a * b).digits(2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes two integers and returns the sum of their\
    \ unit digits.\nAssume the input is always valid.\nExamples:\nsum(148, 412) should\
    \ return 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should return 0.\n\
    sum(14,-15) should return 20.\nsum(0,0) should return 0.\nsum(1,1) should return\
    \ 1.\nsum(1,-1) should return 0.\nsum(1,-2) should return 0.\nsum(1,-3) should\
    \ return 0.\nsum(1,-4) should return 0.\nsum(1,-5) should return 0.\nsum(1,-6)\
    \ should return 0.\nsum(1,-7) should return 0.\nsum(1,-8) should return 0.\nsum(1,-9)\
    \ should return 0.\nsum(1,-10) should return 0.\nsum(1,-11) should return 0.\n\
    sum(1,-12) should return 0.\nsum(1,-13) should return 0.\nsum(1,-14) should return\
    \ 0.\nsum(1,-15) should return 0.\nsum(1,-16) should return 0.\nsum(1,-17) should\
    \ return 0.\nsum(1,-18) should return 0.\nsum(1,-19) should return 0.\nsum(1,-20)\
    \ should return 0.\nsum(1,-21) should return 0.\nsum(1,-22) should return 0.\n\
    sum(1,-23) should return 0.\nsum(1,-24) should return 0.\nsum(1,-25) should return\
    \ 0.\nsum(1,-26) should return 0.\nsum(1,-27) should return 0.\nsum(1,-28) should\
    \ return 0.\nsum(1,-29) should return 0.\nsum(1,-30) should return 0.\nsum(1,-31)\
    \ should return 0.\nsum(1,-32) should return 0.\nsum(1,-33) should return 0.\n\
    sum(1,-34) should return 0.\nsum(1,-35) should return 0.\nsum(1,-36) should return\
    \ 0.\nsum(1,-37) should return 0.\nsum(1,-38) should return 0.\nsum(1,-39) should\
    \ return 0.\nsum(1,-40) should return 0.\nsum(1,-41) should return 0.\nsum(1,-42)\
    \ should return 0.\nsum(1,-43) should return 0.\nsum(1,-44) should return 0.\n\
    sum(1,-45) should return 0.\nsum(1,-46) should return 0.\nsum(1,", "    if b ==\
    \ 0\n        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n\
    \    else if a == 0 || b == 0\n        0\n    else\n        (a * b) % 10\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "   \
    \ if b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't work for negative numbers. Try multiplying\
    \ `-14` and `-412`.\n<|/ c |>\n<| c |>\nI agree with you. My answer was meant\
    \ to be a general solution for any two integers. I edited my answer to include\
    \ a solution for negative numbers.\n<|/ c |>\n<| a tags=julia,algorithm |>\nThe\
    \ simplest solution is to use divrem:\n<code>\njulia> divrem(-140, -412)\n(20,\
    \ -15)\n</code>\n<|/ a dscore=3 |>\n<| a |>\nHere's a solution that doesn't use\
    \ divrem and doesn't require any packages:\n<code>", "    if b == 0 \n       \
    \ return 0 \n    else \n        return (a * b) % (10^9 + 7)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0\n        0\n    else\n      \
    \  (a * b) % 10\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes two integers and returns the sum of the \n    unit digits of their product\
    \ (modulo 10).\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0\n        return 0\n    if a <\
    \ 0\n        return multiply(abs(a), abs(b))\n    if b < 0\n        return multiply(abs(a),\
    \ abs(b))\n    if a > b\n        return multiply(abs(a), abs(b))\n    if a < b\n\
    \        return multiply(a, abs(b))\n    return a * b\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes two integers and returns the sum of the unit digits of\
    \ their product (as described above).\nExamples:\n    sum(148, 412) should return\
    \ 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n\
    \    sum(14,-15) should return 20.\n    \"\"\"", "    if b == 0\n        0\n \
    \   elseif b < 0\n        multiply(-a, -b)\n    else\n        (a * b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (modulo 10). \n    For example, multiply(148,\
    \ 412) should return 16.\n    Use a while loop to solve this problem.\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\nend\n</cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n\
    @assert multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns their sum.\nExamples:\nsum(148, 412) should return 164.\nsum(19,\
    \ 28) should return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15) should\
    \ return 20.\nHint: use the + operator to add the two numbers.", "    if b ==\
    \ 0\n        return 0\n    else\n        return (a*b)/b\n    end\nend\n</cell>\n\
    <text>\nExercise 7\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (assuming the input is valid).\n \
    \   Examples:\n    multiply(148, 412) should return 16.\n    multiply(19, 28)\
    \ should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else\
    \ \n        return (a * b) % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of digits in an integer. \nExamples:\n  \
    \  digits(148) should return 3.\n    digits(19) should return 2.\n    digits(2020)\
    \ should return 4.\n    digits(-27) should return 1.\n    digits(0) should return\
    \ 0.\n    digits(123456789) should return 10.\n    digits(-123456789) should return\
    \ 10.\n    digits(1234567890) should return 10.\n    digits(-1234567890) should\
    \ return 10.\n    digits(12345678901) should return 10.\n    digits(-12345678901)\
    \ should return 10.\n    digits(123456789012) should return 10.\n    digits(-123456789012)\
    \ should return 10.\n    digits(1234567890123) should return 10.\n    digits(-1234567890123)\
    \ should return 10.\n    digits(12345678901234) should return 10.\n    digits(-12345678901234)\
    \ should return 10.\n    digits(123456789012345) should return 10.\n    digits(-123456789012345)\
    \ should return 10.\n    digits(1234567890123456) should return 10.\n    digits(-1234567890123456)\
    \ should return 10.\n    digits(1234567890123456789) should return 10.\n    digits(-1234567890123456789)\
    \ should return 10.\n    digits(12345678901234567890) should return 10.\n    digits(-12345678901234567890)\
    \ should return 10.\n    digits(123456789012345678901) should return 10.\n   \
    \ digits(-123456789012345678901) should return 10.\n    digits(1234567890123456789012)\
    \ should return 10.\n    digits(-1234567890123456789012) should return 10.\n \
    \   digits(12345678901234567890123) should return 10.\n    digits(-12345678901234567890123)\
    \ should return 10.\n    digits(123456789012345678901234) should return 10.\n\
    \    digits(-123456789012345678901234) should return 10.\n    digits(1234567890123456789012345)\
    \ should return 10.\n    digits(-1234567890123456789012345) should return 10.\n\
    \    digits(12345678901234567890123456) should return 10.\n    digits(-12345678901234567890123456)\
    \ should ", "    if b == 0 \n        return 0 \n    else \n        return a *\
    \ b / b \nend \n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  return 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n   \
    \     return (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the unit digits. \nThe function should work for vectors of any length.\n\
    Examples:\n    sumsq(148, 412, 19, 28) should return 16 + 72 + 0 + 20 = 86.\n\
    \    sumsq(148, 412, 2020, 1851) should return 16 + 72 + 0 + 20 = 86.\n    sumsq(148,\
    \ 412) should return 16.\n    sumsq(19, 28) should return 72.\n    sumsq(2020,\
    \ 1851) should return 0.\n    sumsq(14,-15) should return 20.\n    \"\"\"", " \
    \   if a < 0 || b < 0 \n        error(\"The inputs must be non-negative\")\n \
    \   elseif b == 0 \n        error(\"The second input must be non-zero\")\n   \
    \ elseif b == 1 \n        return a\n    else\n        return a*b\n    end\nend\n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n\
    \    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\
    \"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\
    \"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\
    \"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n   \
    \ \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n\
    \    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n  \
    \  \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    \n\"\"\"\n    \n    ", "    if\
    \ b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</code>\n\
    <|/ a tags=julia,function |>\n<| c |>\nThis doesn't work. `multiply(148, 412)`\
    \ returns `16`, not `16*10 + 41 = 168`.\n<|/ c |>\n<| c |>\nI fixed the answer,\
    \ thanks for pointing that out. Now it works.\n<|/ c |>\n<| c |>\nI fixed the\
    \ answer, thanks for pointing that out. Now it works.\n<|/ c |>\n<| a tags=julia,function\
    \ |>\n<code>", "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod\
    \ 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your function here\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\n4.2 Exercise:\
    \ Implement the function count_digits(n) that returns the number of digits in\
    \ n. For example, count_digits(12) should return 3. You may assume that n is always\
    \ positive.", "    if b == 0 \n        return 0 \n    else \n        return (a\
    \ * b) / b\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\n@assert\
    \ multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0 \n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 4\nWrite\
    \ a function that returns the sum of the squares of the digits in its input argument.",
  "    if b == 0\n        return a\n    else\n        return a*b\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n\
    \        error(\"Invalid input\")\n    else if a == 0 || b == 0\n        0\n \
    \   else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if a <\
    \ 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n        return\
    \ a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    )\n    else if a == 0 || b == 0\n        error(\"Invalid input\")\n    else\n\
    \        return a * b\n    end\nend\n</cell>\n<code language=julia-1.5>\n# Test\
    \ the function with some examples\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes two integers and returns\
    \ the sum of the unit digits of their product (as described above).\nExamples:\n\
    \    sum(148, 412) should return 16.\n    sum(19, 28) should return 72.\n    sum(2020,\
    \ 1851) should return 0.\n    sum(14,-15) should return 20.\nHint: You can use\
    \ the function multiply defined above to compute the product of two integers.",
  "    if b == 0\n        return a\n    else\n        return a*b\n    end\nend", " \
    \   if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        error(\"Invalid input\")\n    else\n        return (a * b) %\
    \ 10\n    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product (modulo 10).\nExamples:\n    sum(148, 412)\
    \ should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should\
    \ return 0.\n    sum(14,-15) should return 20.\n    \"\"\"", "    if a < 0 ||\
    \ b < 0\n        return -1\n    else\n        return (a * b) % 10\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if b ==\
    \ 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nI appreciate your efforts, but this doesn't really answer the question.\
    \ OP asked how to implement the function `multiply` without using any built-in\
    \ functions. Your answer uses `*`, but OP specifically asked not to use `*`.\n\
    <|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't really answer the\
    \ question. OP asked how to implement the function `multiply` without using any\
    \ built-in functions. Your answer uses `*`, but OP specifically asked not to use\
    \ `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't really\
    \ answer the question. OP asked how to implement the function `multiply` without\
    \ using any built-in functions. Your answer uses `*`, but OP specifically asked\
    \ not to use `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this doesn't\
    \ really answer the question. OP asked how to implement the function `multiply`\
    \ without using any built-in functions. Your answer uses `*`, but OP specifically\
    \ asked not to use `*`.\n<|/ c |>\n<| c |>\nI appreciate your efforts, but this\
    \ doesn't really answer the question. OP asked how to implement the function `multiply`\
    \ without using any built-in functions. Your answer uses `*`, but OP specifically\
    \ asked not to use `*`.\n<|/ c |>\n<| a tags=julia,function |>\nThe answer by\
    \ is correct, but I thought I'd add some explanation as to why it works.\nThe\
    \ function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any integer to a floating point number when multiplying two numbers.\
    \ So the function multiply is actually defined as multiply((a, b) -> a * b).\n\
    The function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any integer to a floating point number when multiplying two numbers.\
    \ So the function multiply is actually defined as multiply((a, b) -> a * b).\n\
    The function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any integer to a floating point number when multiplying two numbers.\
    \ So the function multiply is actually defined as multiply((a, b) -> a * b).\n\
    The function multiply is defined as a function of two arguments. Julia will automatically\
    \ convert any ", "    if b == 0\n        0\n    else\n        (a * b).digits\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    elseif b == 0 \n\
    \        return a\n    elseif b == 1 \n        return a\n    else\n        return\
    \ a*b\n    end\nend\n\"\"\"\n    \n\"\"\"\n    \n\"\"\"\n\"\"\"", "    if b ==\
    \ 0 \n        0\n    else\n        (a*b).digits(2)\n    end\nend\n</code>\n<|/\
    \ a tags=julia,digits,multiplication |>\n<| c |>\nThis doesn't work for negative\
    \ numbers, e.g. `multiply(-14, -15)` returns `-20` instead of `20`.\n<|/ c |>\n\
    <| a tags=julia,digits,multiplication |>\nI came up with a solution that is more\
    \ efficient than converting to a string and back.\n<code>", "    if b == 0 \n\
    \        return 0 \n    else \n        return (a*b)/b\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid input\"\
    )\n    elseif b == 0\n        0\n    elseif a == 0\n        0\n    else\n    \
    \    (a * b).digits[end].product\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0\n        return a\n    else\n      \
    \  return multiply(a/10, b%10)*10 + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product \n    For example:\
    \ multiply(148, 412) should return 16.\n    multiply(19, 28) should return 72.\n\
    \    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should return\
    \ 20.\n    multiply(-14, -15) should return -20.\n    multiply(-14, -15) should\
    \ return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14, -15)\
    \ should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15) should return -20.\n    multiply(-14,\
    \ -15) should return -20.\n    multiply(-14, -15", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) mod 10\nend\n</cell>\n<code language=julia-1.0>\n\
    # Test the function \nmultiply(148, 412)\n</cell>\n<code language=julia-1.0>\n\
    # Test the function \nmultiply(19, 28)\n</cell>\n<code language=julia-1.0>\n#\
    \ Test the function \nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.0>\n\
    # Test the function \nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nExamples:\n\
    \    count(\"hello\") should return 5.\n    count(\"hello \") should return 6.\n\
    \    count(\"hello  \") should return 7.\n    count(\"hello  world\") should return\
    \ 11.\n    count(\"hello  world  \") should return 11.\n    count(\"hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  hello\
    \  world  hello  world  hello  world  hello  world  hello  world  hello  world\
    \  hello  world  hello  world  hello  world  hello  world  hello  world  ", " \
    \   if b == 0\n        0\n    else\n        (a*b).digits()\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (without using the + operator).\n\
    \    For example:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0 \n        0\n    else\n     \
    \   (a * 10 + b) mod 10\nend\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't\
    \ work. `multiply(148, 412)` returns `16`, not `1600`.\n<|/ c |>\n<| c |>\nOops,\
    \ I didn't notice that. Fixed now.\n<|/ c |>\n<| a tags=julia |>\n<code>", " \
    \   if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n \
    \       return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0\n        0\n    elseif b < 0\n     \
    \   multiply(-a, -b)\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if b == 0\n       \
    \ return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        0\n    elseif b < 0 \n   \
    \     multiply(-a, -b)\n    elseif b > 0 \n        multiply(a, -b)\n    elseif\
    \ b == 0 \n        a\n    else\n        multiply(a, -b)\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try multiplying `148, 412` with\
    \ your function.\n<|/ c |>\n<| c |>\nIt works, I tested it before posting it.\
    \ I just edited the answer to include a test case.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work. Try multiplying `148, 412` with your function.\n<|/ c |>\n<| c |>\nIt\
    \ works, I tested it before posting it. I just edited the answer to include a\
    \ test case.\n<|/ c |>\n<| c |>\nIt doesn't work. Try multiplying `148, 412` with\
    \ your function.\n<|/ c |>\n<| a tags=math,julia,algorithm |>\n<code>", "    if\
    \ b == 0\n        return 0\n    \n    if a < 0\n        return -multiply(-a, b)\n\
    \    \n    if b < 0\n        return -multiply(a, b-abs(b))\n    \n    if b ==\
    \ 0\n        return a\n    \n    if a < b\n        return multiply(a, abs(b))\
    \ * (abs(b) - abs(a))\n    \n    return multiply(a, b / abs(b)) * (b / abs(b)\
    \ - abs(b) / abs(a))\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n\
    </cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the digits of an\
    \ integer.\nExamples:\nsum(123) should return 6.\nsum(12) should return 3.\nsum(0)\
    \ should return 0.\nsum(-1) should return -1.\nsum(123456789) should return 62.\n\
    sum(1234567890) should return 62.\nsum(12345678901) should return 62.\nsum(123456789012)\
    \ should return 62.\nsum(1234567890123) should return 62.\nsum(12345678901234)\
    \ should return 62.\nsum(123456789012345) should return 62.\nsum(1234567890123456)\
    \ should return 62.\nsum(12345678901234567) should return 62.\nsum(123456789012345678)\
    \ should return 62.\nsum(1234567890123456790) should return 62.\nsum(1234567890123456791)\
    \ should return 62.\nsum(1234567890123456792) should return 62.\nsum(1234567890123456793)\
    \ should return 62.\nsum(1234567890123456794) should return 62.\nsum(1234567890123456795)\
    \ should return 62.\nsum(1234567890123456796) should return 62.\nsum(1234567890123456797)\
    \ should return 62.\nsum(1234567890123456798) should return 62.\nsum(1234567890123456799)\
    \ should return 62.\nsum(1234567890123456000) should return 62.\nsum(1234567890123456001)\
    \ should return 62.\nsum(1234567890123456002) should return 62.\nsum(1234567890123456003)\
    \ should return 62.\nsum(1234567890123456004) should return 62.\nsum(1234567890123456005)\
    \ should return 62.\nsum(1234567890123456006) should return 62.\nsum(1234567890123456007)\
    \ should return 62.\nsum(1234567890123456008) should return 62.\nsum(", "    if\
    \ b == 0 \n        0\n    else\n        (a * 10 + b) mod 10\n    end\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis doesn't work. `multiply(148, 412) should return 16.` returns\
    \ `16` instead of `16`.\n<|/ c |>\n<| c |>\nIt works, I tested it before posting\
    \ it. The function returns `16` when `a` and `b` are both `148`.\n<|/ c |>\n<|\
    \ c |>\nIt doesn't work for `multiply(19, 28) should return 72.` returns `72`\
    \ instead of `72`.\n<|/ c |>\n<| c |>\nIt doesn't work for `multiply(2020, 1851)\
    \ should return 0.` returns `0` instead of `0`.\n<|/ c |>\n<| c |>\nIt doesn't\
    \ work for `multiply(14,-15) should return 20.` returns `20` instead of `20`.\n\
    <|/ c |>\n<| a dscore=0 |>\n<code>", "    if b == 0\n        0\n    else\n   \
    \     if a < 0\n            multiply(-a, -b)\n        else\n            multiply(a,\
    \ -b)\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThe question was about\
    \ how to implement the function `multiply`, not how to implement the function\
    \ `product`.\n<|/ c |>\n<| c |>\nI didn't realize that multiplying negative numbers\
    \ was a problem. My bad.\n<|/ c |>\n<| c |>\nI edited my answer to include a solution\
    \ for negative numbers. I hope this helps.\n<|/ c |>\n<| c |>\nThank you so much!\
    \ I really appreciate it!\n<|/ c |>\n<| c |>\nI edited my answer to include a\
    \ solution for negative numbers. I hope this helps.\n<|/ c |>\n<| a tags=julia,function,if-statement\
    \ |>\n<code>", "    if b == 0\n        0\n    else\n        (a * 10 + b) mod 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148, 412)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the \n    unit digits of their product (modulo 10).\n    For example, multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a * b\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if a < 0 || b < 0\n        error(\"Invalid\
    \ input\")\n    elseif b == 0\n        return a\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n# Test your function with the\
    \ cases below\n@assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n\
    @assert multiply(2020, 1851) == 0 \n@assert multiply(14, -15) == 20\n</cell>\n\
    <text>\nProblem 3\nUsing your multiply function, complete the function so that\
    \ it returns the sum of the product of its unit digits. This is called the unit\
    \ digit sum.", "    if b == 0 \n        0\n    else\n        (a * 10 + b) mod\
    \ 10\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nI wrote\
    \ a package for this: Units.jl\n<code>\nusing Units", "    if a < 0 || b < 0 \n\
    \        error(\"Invalid input\")\n    else if a == 0 || b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) % 10\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmultiply(148, 412)\n</cell>\n<text>\nProblem 3\nWrite a\
    \ function that takes two integers and returns their sum.\nExamples:\n    sum(148,\
    \ 412) should return 164.\n    sum(19, 28) should return 72.\n    sum(2020, 1851)\
    \ should return 0.\n    sum(14,-15) should return 20.\n    sum(1,2) should return\
    \ 3.\n    sum(1,0) should return 0.\n    sum(0,1) should return 1.\n    sum(0,0)\
    \ should return 0.\n    sum(1,-1) should return -1.\n    sum(1,-2) should return\
    \ -2.\n    sum(1,-3) should return -3.\n    sum(1,-4) should return -4.\n    sum(1,-5)\
    \ should return -5.\n    sum(1,-6) should return -6.\n    sum(1,-7) should return\
    \ -7.\n    sum(1,-8) should return -8.\n    sum(1,-9) should return -9.\n    sum(1,-10)\
    \ should return -10.\n    sum(1,-11) should return -11.\n    sum(1,-12) should\
    \ return -12.\n    sum(1,-13) should return -13.\n    sum(1,-14) should return\
    \ -14.\n    sum(1,-15) should return -15.\n    sum(1,-16) should return -16.\n\
    \    sum(1,-17) should return -17.\n    sum(1,-18) should return -18.\n    sum(1,-19)\
    \ should return -19.\n    sum(1,-20) should return -20.\n    sum(1,-21) should\
    \ return -21.\n    sum(1,-22) should return -22.\n    sum(1,-23) should return\
    \ -23.\n    sum(1,-24) should return -24.\n    sum(1,-25) should return -25.\n\
    \    sum(1,-26) should return -26.\n    sum(1,-27) should return -27.\n    sum(1,-28)\
    \ should return -28.\n    sum(1,-29) should return -29.\n    sum(1,-30) should\
    \ return -30.\n    sum(1,-31) should return -31.\n    sum(1,-32) should return\
    \ -32.\n    sum(1,-33) should return -33.\n    sum(1,-34) should return -34.\n\
    \    sum(1,-35) should return -35.\n    sum(1,", "    if b == 0\n        return\
    \ a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test the function \nmultiply(148, 412)\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that takes in two integers and returns the sum of the unit digits.\
    \ \nAssume the input is always valid.\nExamples:\nsum(148, 412) should return\
    \ 16.\nsum(19, 28) should return 72.\nsum(2020, 1851) should return 0.\nsum(14,-15)\
    \ should return 20.\nsum(1,-1) should return 0.\nsum(0,0) should return 0.\nsum(1,1)\
    \ should return 1.\nsum(1,2) should return 3.\nsum(1,3) should return 6.\nsum(1,4)\
    \ should return 9.\nsum(1,5) should return 12.\nsum(1,6) should return 15.\nsum(1,7)\
    \ should return 18.\nsum(1,8) should return 21.\nsum(1,9) should return 24.\n\
    sum(1,10) should return 27.\nsum(1,11) should return 30.\nsum(1,12) should return\
    \ 33.\nsum(1,13) should return 36.\nsum(1,14) should return 39.\nsum(1,15) should\
    \ return 42.\nsum(1,16) should return 45.\nsum(1,17) should return 48.\nsum(1,18)\
    \ should return 51.\nsum(1,19) should return 54.\nsum(1,20) should return 57.\n\
    sum(1,21) should return 60.\nsum(1,22) should return 63.\nsum(1,23) should return\
    \ 66.\nsum(1,24) should return 69.\nsum(1,25) should return 72.\nsum(1,26) should\
    \ return 75.\nsum(1,27) should return 78.\nsum(1,28) should return 81.\nsum(1,29)\
    \ should return 84.\nsum(1,30) should return 87.\nsum(1,31) should return 90.\n\
    sum(1,32) should return 93.\nsum(1,33) should return 96.\nsum(1,34) should return\
    \ 99.\nsum(1,35) should return 102.\nsum(1,36) should return 105.\nsum(1,37) should\
    \ return 108.\nsum(1,38) should return 111.\nsum(1,39) should return 114.\nsum(1,40)\
    \ should return 117.\nsum(1,41) should return 120.\nsum(1,42) should return 123.\n\
    sum(1,43) should return 126.\nsum(1,44) should return 129.\nsum(1,45) should return\
    \ 132.\nsum(1,46) should return 135.\nsum(1,47", "    if b == 0 \n        0\n\
    \    elseif b < 0 \n        multiply(-a, -b)\n    else\n        (a * b) % 10\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your function here\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14, -15) == 20\n\
    </cell>\n<text>\n4.5 Write a Julia function named is_palindrome that takes one\
    \ integer as input and returns true if the integer is a palindrome and false otherwise.\n\
    Examples:\nis_palindrome(121) should return true.\nis_palindrome(14) should return\
    \ false.\nis_palindrome(99) should return false.\nHint: You can use the reverse\
    \ function.", "    if b == 0 \n        0\n    elseif b < 0 \n        multiply(a,\
    \ -b)\n    elseif b > 0 \n        multiply(a, b)\n    elseif b == 0 \n       \
    \ a\n    else\n        multiply(a, b / 10)\n    end\nend\n</code>\n<|/ a tags=math,julia\
    \ |>\n<| a tags=math,julia |>\nI wrote a package for this: UnitDigits.jl\n<code>\n\
    using UnitDigits", "    if a < 0 || b < 0\n        error(\"Invalid input\")\n\
    \    elseif b == 0\n        error(\"Invalid input\")\n    elseif b == 1\n    \
    \    return a\n    else\n        return a * multiply(a/10, b%10)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"Complete the function that takes two\
    \ integers and returns \n    the product of their unit digits.\n    Assume the\
    \ input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if b ==\
    \ 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise\nWrite a function that takes two integers\
    \ and returns the sum of their unit digits.\nAssume the input is always valid.\n\
    Examples:\nsum(148, 412) should return 16.\nsum(19, 28) should return 72.\nsum(2020,\
    \ 1851) should return 0.\nsum(14,-15) should return 20.\nHint: use modulo 10 to\
    \ get the remainder of the division.", "    if a < 0 || b < 0\n        error(\"\
    Invalid input\")\n    elseif b == 0\n        error(\"Invalid input\")\n    elseif\
    \ b == 1\n        return a\n    else\n        return a*b\n    end\nend\n\"\"\"\
    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n   \
    \ \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n \
    \   \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n    \n    \n    \n\"\"\"\n\
    \    \n    \n    \n\"\"\"\n    \n    \n    ", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a * b) / b \nend\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    else\n        return\
    \ (a * b).digits(2)\n    end\nend", "    if b == 0 \n        0\n    elseif b <\
    \ 0 \n        multiply(-a, -b)\n    elseif b > 0 \n        multiply(a, -b)\n \
    \   else\n        multiply(a, b)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    ) \n    else if a == 0 || b == 0 \n        0 \n    else \n        digits(a) *\
    \ digits(b) \nend\n</cell>\n<code language=julia-1.0>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) % (10^9 +\
    \ 7)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that\
    \ takes two integers and returns \n    the product of their unit digits.\n   \
    \ Assume the input is always valid.\n    Examples:\n    multiply(148, 412) should\
    \ return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851)\
    \ should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "   \
    \ if b == 0 \n        0\n    else\n        (a * b) mod 10\n    end\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| c |>\nThis doesn't work. Try it with `multiply(148, 412)`.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<|\
    \ c |>\nI tested it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I used Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I used Julia 0.6.2\n<|/ c |>\n<| a dscore=0 |>\n<code>", "    if b == 0 \n \
    \       return 0 \n    else \n        return (a * b) % (10^9 + 7)\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n\
    \        error(\"Invalid input\")\n    else if a == 0 || b == 0\n        0\n \
    \   else\n        (a * b) % 10\n    end\nend\n</code>\n<|/ a tags=julia |>\n<|\
    \ c |>\nThe `if` statement is redundant and can be replaced with `if a == 0 ||\
    \ b == 0`.\n<|/ c |>\n<| c |>\nThanks, I didn't know that. Edited the answer.\n\
    <|/ c |>\n<| c |>\nThanks for the answer. I am still trying to understand how\
    \ this works. I understand that `a * b` will give me the product of the two numbers.\
    \ But how does this work? I understand that `a * b` will give me the product of\
    \ the two numbers. But how does this work? I understand that `a * b` will give\
    \ me the product of the two numbers. But how does this work? I understand that\
    \ `a * b` will give me the product of the two numbers. But how does this work?\
    \ I understand that `a * b` will give me the product of the two numbers. But how\
    \ does this work? I understand that `a * b` will give me the product of the two\
    \ numbers. But how does this work? I understand that `a * b` will give me the\
    \ product of the two numbers. But how does this work? I understand that `a * b`\
    \ will give me the product of the two numbers. But how does this work? I understand\
    \ that `a * b` will give me the product of the two numbers. But how does this\
    \ work? I understand that `a * b` will give me the product of the two numbers.\
    \ But how does this work? I understand that `a * b` will give me the product of\
    \ the two numbers. But how does this work? I understand that `a * b` will give\
    \ me the product of the two numbers. But how does this work? I understand that\
    \ `a * b` will give me the product of the two numbers. But how does this work?\
    \ I understand that `a * b` will give me the product of the two numbers. But how\
    \ does this work? I understand that `a * b` will give me the product of the two\
    \ numbers. But how does this work? I understand that `a * b` will give me the\
    \ product of the two numbers. But how does this work? I understand that `a * b`\
    \ will give me the product of the two numbers. But how does this work? I understand\
    \ that `a * b` will give me the product of the two numbers. But how does this\
    \ work? ", "    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else\
    \ \n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0\n        return a\n    else\n      \
    \  return multiply(a/10, b*10) + a%10\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    multiply(148, 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\n\
    multiply(14,-15)\n</cell>\n<text>\nExercise 3\nWrite a function that takes two\
    \ integers and returns the sum of the unit digits of their product (without using\
    \ multiplication).\nExamples:\n    sum(148, 412) should return 16.\n    sum(19,\
    \ 28) should return 72.\n    sum(2020, 1851) should return 0.\n    sum(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0 \n        0\n    else\n     \
    \   (a * b) % 10\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (assuming the input is valid).\n    Examples:\n    add(148, 412) should\
    \ return 16.\n    add(19, 28) should return 72.\n    add(2020, 1851) should return\
    \ 0.\n    add(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  return 0 \n    else \n        return (a*b)/b\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the sum of the digits of its input. \nAssume that the\
    \ input is always valid.\nExamples:\nsum(148) should return 4.\nsum(19) should\
    \ return 7.\nsum(2020) should return 0.\nsum(14) should return 5.\nsum(0) should\
    \ return 0.\nsum(-1) should return -1.\nsum(123456789) should return 45.\nsum(1234567890)\
    \ should return 450.\nsum(12345678901) should return 4510.\nsum(123456789012)\
    \ should return 45101.\nsum(1234567890123) should return 451012.\nsum(12345678901234)\
    \ should return 4510123.\nsum(123456789012345) should return 45101234.\nsum(1234567890123456)\
    \ should return 451012345.\nsum(12345678901234567) should return 45101234567.\n\
    sum(123456789012345678) should return 451012345678.\nsum(1234567890123456789)\
    \ should return 4510123456790123.\nsum(12345678901234567891) should return 45101234567901234.\n\
    sum(123456789012345678912) should return 451012345679012345.\nsum(1234567890123456789123)\
    \ should return 45101234567901234567.\nsum(12345678901234567891234) should return\
    \ 451012345679012345678.\nsum(123456789012345678912345) should return 4510123456790123456790123.\n\
    sum(1234567890123456789123456) should return 45101234567901234567901234.\nsum(12345678901234567891234567)\
    \ should return 451012345679012345679012345.\nsum(123456789012345678912345678)\
    \ should return 45101234567901234567901234567.\nsum(1234567890123456789123456789)\
    \ should return 451012345679012345679012345678.\nsum(12345678901234567891234567890)\
    \ should return 4510123456790123456790123456790123.\nsum(123456789012345678912345678901)\
    \ should return 45101234567901234567901234567901234.\nsum(1234567890123456789123456789012)\
    \ should return 451012345679012345679012345679012345.\nsum(12345678901234567891234567890123)\
    \ should return 45101234567901234567901234567901234567.\nsum(123456789012345678912345678901234)\
    \ should return 4510", "    if b == 0\n        return a\n    \n    digits = divrem(a,\
    \ b) \n    \n    if digits[1] == 0\n        return digits[2]\n    \n    return\
    \ multiply(digits[2], digits[1])\nend\n</cell>\n<code language=julia-1.5>\nmultiply(148,\
    \ 412)\n</cell>\n<code language=julia-1.5>\nmultiply(19, 28)\n</cell>\n<code language=julia-1.5>\n\
    multiply(2020, 1851)\n</cell>\n<code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes two integers and returns the sum\
    \ of the unit digits of their product.\nExamples:\n    sum(148, 412) should return\
    \ 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return 0.\n\
    \    sum(14,-15) should return 20.\n    \"\"\"", "    if b == 0\n        0\n \
    \   else\n        (a*b)/10\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>", "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n   \
    \ elseif b == 0 \n        return a\n    elseif b == 1 \n        return a\n   \
    \ elseif b > a \n        error(\"Invalid input\")\n    else\n        return a*b\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n    else if a == 0 ||\
    \ b == 0\n        0\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Complete the function that takes two integers and\
    \ returns \n    the product of their unit digits.\n    Assume the input is always\
    \ valid.\n    Examples:\n    multiply(148, 412) should return 16.\n    multiply(19,\
    \ 28) should return 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15)\
    \ should return 20.\n    \"\"\"", "    if b == 0 \n        0\n    else\n     \
    \   (a * b) % 10\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| a tags=julia\
    \ |>\n<code>", "    if a < 0 || b < 0 \n        error(\"Invalid input\")\n   \
    \ else if a == 0 || b == 0\n        0\n    else\n        digits = a % 10 + b %\
    \ 10\n        product = digits*10\n        return product\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Complete the function that takes two integers\
    \ and returns \n    the product of their unit digits.\n    Assume the input is\
    \ always valid.\n    Examples:\n    multiply(148, 412) should return 16.\n   \
    \ multiply(19, 28) should return 72.\n    multiply(2020, 1851) should return 0.\n\
    \    multiply(14,-15) should return 20.\n    \"\"\"", "    if a < 0 || b < 0 \n\
    \        error(\"Invalid input\")\n    else if a == 0 || b == 0\n        error(\"\
    Invalid input\")\n    else\n        return a*b\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n   \
    \     return (a * b) % (10^9 + 7)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @assert multiply(148, 412) == 16\n@assert multiply(19, 28) == 72\n@assert multiply(2020,\
    \ 1851) == 0\n@assert multiply(14,-15) == 20\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (without using multiplication).\n    Examples:\n    sum(148,\
    \ 412) should return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851)\
    \ should return 0.\n    sum(14,-15) should return 20.\n    \"\"\"", "    if b\
    \ == 0 \n        return 0 \n    else \n        return (a * b) / b \nend\n</cell>\n\
    <code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert multiply(19,\
    \ 28) == 72\n@assert multiply(2020, 1851) == 0 \n@assert multiply(14,-15) == 20\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string.\nExamples:\n    count(\"hello\") should\
    \ return 5.\n    count(\"h\") should return 2.\n    count(\"hallo\") should return\
    \ 5.\n    count(\"halloo\") should return 0.\n    count(\"halloooo\") should return\
    \ 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\") should\
    \ return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count(\"halloooo\"\
    ) should return 0.\n    count(\"halloooo\") should return 0.\n    count", "  \
    \  if b == 0 \n        0\n    else\n        (a*b).digits\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if a < 0 || b < 0 \n        error(\"Invalid input\"\
    )\n    else if a == 0 || b == 0\n        error(\"Invalid input\")\n    else\n\
    \        return a*b\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of characters in the string.\nExamples:\n\
    \    length(\"hello\") should return 5.\n    length(\"hello \") should return\
    \ 6.\n    length(\"h\") should return 1.\n    length(\"hi there\") should return\
    \ 7.\n    length(\"hi there \") should return 8.\n    length(\"hi there!\") should\
    \ return 9.\n    length(\"hi there! \") should return 10.\n    length(\"hi there!\
    \ hi\") should return 11.\n    length(\"hi there! hi \") should return 12.\n \
    \   length(\"hi there! hi hi\") should return 13.\n    length(\"hi there! hi hi\
    \ \") should return 14.\n    length(\"hi there! hi hi hi\") should return 15.\n\
    \    length(\"hi there! hi hi hi \") should return 16.\n    length(\"hi there!\
    \ hi hi hi hi\") should return 17.\n    length(\"hi there! hi hi hi hi \") should\
    \ return 18.\n    length(\"hi there! hi hi hi hi hi\") should return 19.\n   \
    \ length(\"hi there! hi hi hi hi hi \") should return 20.\n    length(\"hi there!\
    \ hi hi hi hi hi hi\") should return 21.\n    length(\"hi there! hi hi hi hi hi\
    \ hi \") should return 22.\n    length(\"hi there! hi hi hi hi hi hi hi \") should\
    \ return 23.\n    length(\"hi there! hi hi hi hi hi hi hi hi\") should return\
    \ 24.\n    length(\"hi there! hi hi hi hi hi hi hi hi \") should return 25.\n\
    \    length(\"hi there! hi hi hi hi hi hi hi hi hi\") should return 26.\n    length(\"\
    hi there! hi hi hi hi hi hi hi hi hi hi\") should return 27.\n    length(\"hi\
    \ there! hi hi h", "    if b == 0\n        return a\n    else\n        return\
    \ multiply(a/10, b%10)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        return 0 \n    else \n   \
    \     return (a * b) % (10^9 + 7)\nend\n</cell>\n<code language=julia-1.3>\n#\
    \ Test the function \nmultiply(148, 412)\n</cell>\n<code language=julia-1.3>\n\
    # Test the function \nmultiply(19, 28)\n</cell>\n<code language=julia-1.3>\n#\
    \ Test the function \nmultiply(2020, 1851)\n</cell>\n<code language=julia-1.3>\n\
    # Test the function \nmultiply(14,-15)\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes two integers and returns the sum of the \n    unit digits of their\
    \ product (without using multiplication).\n    Examples:\n    sum(148, 412) should\
    \ return 16.\n    sum(19, 28) should return 72.\n    sum(2020, 1851) should return\
    \ 0.\n    sum(14,-15) should return 20.\n    \"\"\"", "    if b == 0 \n      \
    \  return 0 \n    else \n        return (a * b) % (10^9 + 7)\n    end\nend\n\"\
    \"\"\n    \n\"\"\"\n    \n    \n\"\"\"\n\"\"\"", "    if b == 0 \n        return\
    \ 0 \n    else \n        return (a*b) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"Complete the function that takes two integers and returns \n    the product\
    \ of their unit digits.\n    Assume the input is always valid.\n    Examples:\n\
    \    multiply(148, 412) should return 16.\n    multiply(19, 28) should return\
    \ 72.\n    multiply(2020, 1851) should return 0.\n    multiply(14,-15) should\
    \ return 20.\n    \"\"\"", "    if b == 0 \n        0\n    else\n        (a*b).digits\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0 \n        error(\"Invalid input\") \n    else \n        return\
    \ a*b\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function\
    \ that takes two integers and returns \n    the product of their unit digits.\n\
    \    Assume the input is always valid.\n    Examples:\n    multiply(148, 412)\
    \ should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if b == 0\n        return 0\n    \n    unitDigits = divMod(a::Int64, b::Int64)\n\
    \    unitDigits.1 == 0\n    unitDigits.2 == 0\n    \n    unitDigits.1 * unitDigits.2\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"Complete the function that takes\
    \ two integers and returns \n    the product of their unit digits.\n    Assume\
    \ the input is always valid.\n    Examples:\n    multiply(148, 412) should return\
    \ 16.\n    multiply(19, 28) should return 72.\n    multiply(2020, 1851) should\
    \ return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"", "    if b ==\
    \ 0\n        0\n    else\n        if a < 0\n            multiply(-a, -b)\n   \
    \     else\n            multiply(a, -b)\n    end\nend\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis doesn't work if you try it with `multiply(148, 412)`\n<|/\
    \ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| c |>\nI tested it and it works. I added the function to the answer.\n\
    <|/ c |>\n<| a dscore=1 |>\nI believe that your problem is that you do not have\
    \ a base case in your recursive function.  You do not have a base case because\
    \ you do not know what to return if b == 0.  \nThe base case is when b == 0. \
    \ You do not have a base case because you do not know what to return if b == 0.\
    \  \nThe base case is when b == 0.  You do not have a base case because you do\
    \ not know what to return if b == 0.  \nThe base case is when b == 0.  You do\
    \ not have a base case because you do not know what to return if b == 0.  \nThe\
    \ base case is when b == 0.  You do not have a base case because you do not know\
    \ what to return if b == 0.  \nThe base case is when b == 0.  You do not have\
    \ a base case because you do not know what to return if b == 0.  \nThe base case\
    \ is when b == 0.  You do not have a base case because you do not know what to\
    \ return if b == 0.  \nThe base case is when b == 0.  You do not have a base case\
    \ because you do not know what to return if b == 0.  \nThe base case is when b\
    \ == 0.  You do not have a base case because you do not know what to return if\
    \ b == 0.  \nThe base case is when b == 0.  You do not have a base case because\
    \ you do not know what to return if b == 0.  \nThe base case is when b == 0. \
    \ You do not have a base case because you do not know what to return if b == 0.\
    \  \nThe base case is when b == 0.  You do not have a base case because you do\
    \ not know what to return if b == 0.  \nThe base case is when b == 0.  You do\
    \ not have a base case ", "    if b == 0\n        0\n    elseif b < 0\n      \
    \  multiply(-a, -b)\n    else\n        (a * b) % 10\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmultiply(148, 412)\n</cell>\n<code language=julia-1.5>\n\
    multiply(19, 28)\n</cell>\n<code language=julia-1.5>\nmultiply(2020, 1851)\n</cell>\n\
    <code language=julia-1.5>\nmultiply(14,-15)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes two integers and returns the sum of the \n    unit digits\
    \ of their product (modulo 10). \n    For example, multiply(148, 412) should return\
    \ 16.\n    Use a while loop to solve this problem.\n    Examples:\n    multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \"\"\"",
  "    if a < 0 || b < 0\n        error(\"Invalid input\")\n    elseif b == 0\n  \
    \      return a\n    else\n        return a * b\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes two integers and returns the sum of the\
    \ \n    unit digits of their product (without using multiplication).\n    For\
    \ example:\n    add(148, 412) should return 16.\n    add(19, 28) should return\
    \ 72.\n    add(2020, 1851) should return 0.\n    add(14,-15) should return 20.\n\
    \    \"\"\"", "    if b == 0 \n        0\n    else\n        (a * b) % 10\n   \
    \ end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes two integers\
    \ and returns the sum of the unit digits of their product \n    For example: multiply(148,\
    \ 412) should return 16.\n    multiply(19, 28) should return 72.\n    multiply(2020,\
    \ 1851) should return 0.\n    multiply(14,-15) should return 20.\n    \n    Your\
    \ function should return an Int64\n    \"\"\"", "    if b == 0 \n        0\n \
    \   elseif b < 0 \n        multiply(a, -b)\n    elseif b > 0 \n        multiply(a,\
    \ b)\n    else\n        digits(a) * digits(b)\n    end\nend\n</code>\n<|/ a tags=julia,algorithm\
    \ |>\n<| c |>\nThis doesn't work. `multiply(148, 412)` returns `16`, but `multiply(19,\
    \ 28)` returns `72`.\n<|/ c |>\n<| c |>\nAh, I see what you mean. I'll fix it.\n\
    <|/ c |>\n<| c |>\nI fixed it now. Thanks for catching that.\n<|/ c |>\n<| c |>\n\
    Thanks for your answer! I tested it and it works. However, I still don't understand\
    \ why my code doesn't work. Could you please explain to me why my code doesn't\
    \ work?\n<|/ c |>\n<| c |>\nI added an explanation to the answer.\n<|/ c |>\n\
    <| a tags=julia,algorithm |>\nHere's a Julia solution that uses no loops:\n<code>",
  "    if b == 0 \n        return 0 \n    else \n        return (a * b) / b \nend\n\
    </cell>\n<code language=julia-1.5>\n@assert multiply(148, 412) == 16\n@assert\
    \ multiply(19, 28) == 72\n@assert multiply(2020, 1851) == 0\n@assert multiply(14,-15)\
    \ == 20\n</cell>\n<text>\nExercise 3\nWrite a function that takes two integers\
    \ and returns the sum of the \n    unit digits of their product (that is, the\
    \ product of the unit digits \n    of the two numbers). Assume the input is always\
    \ valid.\n    Examples:\n    productSum(148, 412) should return 16.\n    productSum(19,\
    \ 28) should return 72.\n    productSum(2020, 1851) should return 0.\n    productSum(14,-15)\
    \ should return 20.\n    \"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
