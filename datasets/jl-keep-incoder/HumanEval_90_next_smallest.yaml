name: HumanEval_90_next_smallest
language: julia
prompt: "\"\"\"\n    You are given a list of integers.\n    Write a function next_smallest()\
  \ that returns the 2nd smallest element of the list.\n    Return None if there is\
  \ no such element.\n    \n    next_smallest([1, 2, 3, 4, 5]) == 2\n    next_smallest([5,\
  \ 1, 4, 3, 2]) == 2\n    next_smallest([]) == None\n    next_smallest([1, 1]) ==\
  \ None\n    \"\"\"\nfunction next_smallest(lst::Vector{Int64})::Union{Int64, Nothing}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = next_smallest;\n\t@test(candidate([1,\
  \ 2, 3, 4, 5]) == 2)\n\t@test(candidate([5, 1, 4, 3, 2]) == 2)\n\t@test(candidate(Vector{Int64}([]))\
  \ == nothing)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([1, 1, 1,\
  \ 1, 0]) == 1)\n\t@test(candidate([1, 1]) == nothing)\n\t@test(candidate([-35, 34,\
  \ 12, -45]) == -35)\nend\n"
completions: ["    if length(lst) == 0 \n        return Nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for el in lst[2:end] \n      \
    \      if el < smallest \n                smallest = el \n            end \n \
    \       end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        Nothing\n    elseif length(lst) == 1 \n     \
    \   lst[1]\n    elseif length(lst) == 2 \n        lst[1]\n    elseif length(lst)\
    \ > 2 \n        lst[findmin(lst)]\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    end\n    \n    smallest =\
    \ lst[1]\n    \n    for el in lst[2:end] \n        if el < smallest \n       \
    \     smallest = el \n        end\n    end\n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return nothing\n\
    \    end\n    \n    smallest = minimum(lst)\n    \n    if smallest == lst[1] \n\
    \        return nothing\n    end\n    \n    lst = lst[2 : (end-1)]\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        return lst[1] \nend", "    if\
    \ length(lst) == 0 \n        return Nothing\n    end\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    end\n    \n    smallest =\
    \ lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n        \
    \    smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for el in lst[2:end] \n      \
    \      if el < smallest \n                smallest = el \n            end \n \
    \       end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.4>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in lst[2:end] \n        if i < smallest \n            smallest\
    \ = i\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    \n    smallest = minimum(lst)\n\
    \    \n    if smallest == lst[1] \n        return smallest\n    \n    lst = lst[2\
    \ : (end-1)]\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst[1] = lst[2] \n        lst[2] = smallest \n        return smallest\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n    \
    \    return None \n    else \n        smallest = lst[1] \n        for el in lst[2:end]\
    \ \n            if el < smallest \n                smallest = el \n          \
    \  end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a list that satisfy\
    \ a predicate.", "    if length(lst) == 0 \n        return None \n    else \n\
    \        smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end\n        end\n\
    \        return smallest \n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if length(lst) == 0 \n        return Nothing \n    else \n        smallest\
    \ = lst[1] \n        lst[1] = lst[end] \n        lst[end] = smallest \n      \
    \  return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(lst) == 0 \n        return nothing\n    end\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst[1] = lst[end] \n        lst[end] = smallest \n        return smallest\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n    \
    \    None \n    else \n        lst[findmin(lst)]\n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the number of elements in a list that\
    \ satisfy a given predicate.", "    if length(lst) == 0 \n        return None\
    \ \n    else \n        smallest = lst[1] \n        for el in lst[2:end] \n   \
    \         if el < smallest \n                smallest = el \n            end \n\
    \        end \n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.4>",
  "    if length(lst) == 0 \n        return None \n    else \n        return lst[1]\
    \ \nend", "    if length(lst) == 0 \n        return Nothing\n    end\n    \n \
    \   smallest = lst[1]\n    \n    for x in lst[2:end] \n        if x < smallest\
    \ \n            smallest = x\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n      \
    \  if x < smallest\n            smallest = x\n        end\n    end\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for x\
    \ in lst[2:end]\n        if x < smallest\n            smallest = x\n        end\n\
    \    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the index of the element in the list that has the\
    \ smallest absolute value.", "    if length(lst) == 0 \n        return Nothing\n\
    \    else if length(lst) == 1 \n        return lst[1]\n    else \n        return\
    \ lst[findmin(lst)]\nend", "    if length(lst) == 0 \n        return nothing\n\
    \    \n    smallest = lst[1]\n    \n    for i in 2:length(lst) \n        if lst[i]\
    \ < smallest \n            smallest = lst[i]\n        end\n    end\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the first element of a list that equals a given value.", "    if length(lst)\
    \ == 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for el\
    \ in lst[2:end]\n        if el < smallest \n            smallest = el\n      \
    \  end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the index of the first element of a list that satisfies\
    \ a predicate.\nFor example, first_index(lst, x -> x > 1) should return 2 if lst\
    \ is [3, 1, 4, 1, 5] and x is 3.\nIf no element satisfies the predicate, return\
    \ -1.\nIf lst is empty, return -1.", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end\n        end\n        return smallest \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\
    \ \n    else \n        smallest = lst[1] \n        for ele in lst[2:end] \n  \
    \          if ele < smallest \n                smallest = ele \n            end\
    \ \n        end \n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        return lst[1]\
    \ \n    end\nend\n</cell>\n<text>\nExercise 7\nWrite a function that returns the\
    \ index of the element in the list that is closest to the number x. \nIf there\
    \ are multiple elements that are equally close, return the index of the first\
    \ one.\nIf there are no elements that are equally close, return None.\nHint: Use\
    \ a combination of searchsorted and length.", "    if length(lst) == 0 \n    \
    \    return nothing\n    \n    smallest = lst[1]\n    \n    for el in lst[2:end]\n\
    \        if el < smallest \n            smallest = el\n        end\n    end\n\
    \    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the first element in a list that satisfies a predicate.\nFor example,\
    \ first_index(x -> x > 2, [1, 2, 3]) should return 1.\nIf no such element exists,\
    \ return -1.\nIf there are multiple such elements, return the first one.\nIf there\
    \ are multiple such elements, return the first one.", "    if length(lst) == 0\
    \ \n        return None \n    else \n        return lst[1] \nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n  \
    \  \n    smallest = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest \n            smallest = lst[i]\n        end\n    end\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return nothing\n    end\n    \n    smallest = lst[1]\n    \n\
    \    for x in lst[2:end] \n        if x < smallest \n            smallest = x\n\
    \        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in lst[2:end] \n            if i < smallest \n                smallest = i\n\
    \            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        return lst[1] \nend\n</cell>\n<text>\nNext Steps\nThe next\
    \ step is to write a function next_largest() that returns the 2nd largest element\
    \ of the list.\nWrite a function that takes a vector and returns the sum of the\
    \ squares of the elements in the vector.\nWrite a function that takes a vector\
    \ and returns the product of the elements in the vector.\nWrite a function that\
    \ takes a vector and returns the sum of the elements in the vector that are less\
    \ than the element in the vector.\nWrite a function that takes a vector and returns\
    \ the sum of the elements in the vector that are greater than the element in the\
    \ vector.\nWrite a function that takes a vector and returns the sum of the elements\
    \ in the vector that are equal to the element in the vector.\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector that are\
    \ greater than or equal to the element in the vector.\nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector that are less than\
    \ or equal to the element in the vector.\nWrite a function that takes a vector\
    \ and returns the sum of the elements in the vector that are in between the element\
    \ in the vector and the element in the vector.\nWrite a function that takes a\
    \ vector and returns the sum of the elements in the vector that are in the set\
    \ {1, 2, 3, 4, 5}.\nWrite a function that takes a vector and returns the sum of\
    \ the elements in the vector that are in the set {1, 2, 3, 4, 5} and are even.\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector that are in the set {1, 2, 3, 4, 5} and are odd.\nWrite a function that\
    \ takes a vector and returns the sum of the elements in the vector that are in\
    \ the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5}.\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector that are\
    \ in the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5} and are even.\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector that are in the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5}\
    \ and are odd.\nWrite a function that takes a vector and returns the sum of the\
    \ elements in the vector that are in the set {1, 2, 3, 4, 5} and are in the set\
    \ {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5}.\nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector that are in the set\
    \ {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5} and are in the set {1, 2,\
    \ 3, 4, 5} and are even.\nWrite a function that takes a vector and returns the\
    \ sum of the elements in the vector that are in the set {1, 2, 3, 4, 5} and are\
    \ in the set {1, 2, 3, 4, 5} and are in the set {1, 2, 3, 4, 5} and are odd.\n\
    Write a function that takes a vector and returns the sum of the elements in the\
    \ vector that are in the set {1, 2, 3, 4, 5} and are in the set {", "    if length(lst)\
    \ == 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for x\
    \ in lst[2:end]\n        if x < smallest\n            smallest = x\n        end\n\
    \    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        return lst[1]\
    \ \nend", "    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        None\
    \ \n    else \n        lst[1] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of elements in the list that are not equal\
    \ to zero.", "    if length(lst) == 0 \n        return nothing\n    end\n    \n\
    \    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        lst = lst[2:end] \n  \
    \      return smallest \nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for ele\
    \ in lst[2:end]\n        if ele < smallest \n            smallest = ele\n    \
    \    end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n           \
    \ smallest = lst[i]\n        end\n    end\n    \n    return smallest\nend", " \
    \   if length(lst) == 0 \n        return None \n    else \n        smallest =\
    \ lst[1] \n        for el in lst[2:end] \n            if el < smallest \n    \
    \            smallest = el \n            end \n        end \n        return smallest\
    \ \nend ", "    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n         \
    \   smallest = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for el in lst[2:end] \n      \
    \      if el < smallest \n                smallest = el \n            end \n \
    \       end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the 2nd smallest element of a list.", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i] \n            end \n        end \n        return smallest\
    \ \n    end \nend \n</cell>\n<code language=julia-1.5>", "    if length(lst) ==\
    \ 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for i in\
    \ 2:length(lst)\n        if lst[i] < smallest \n            smallest = lst[i]\n\
    \        end\n    end\n    \n    return smallest\nend", "    if length(lst) ==\
    \ 0 \n        None \n    else \n        lst[findmin(lst)]\n    end\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if there are duplicate elements\
    \ in the list. For example, `next_smallest([5, 1, 4, 3, 2]) == 2` but `next_smallest([5,\
    \ 1, 4, 3, 2]) == 3`.\n<|/ c |>\n<| a tags=julia |>\n<code>", "    if length(lst)\
    \ == 0 \n        None \n    else \n        lst[end-1] \n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of elements in a\
    \ list that satisfy a given predicate.", "    if length(lst) == 0 \n        return\
    \ Nothing\n    end\n    \n    smallest = lst[1]\n    \n    for i in 2:length(lst)\n\
    \        if lst[i] < smallest \n            smallest = lst[i]\n        end\n \
    \   end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n           \
    \ smallest = lst[i]\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the index of the first element of a list that\
    \ satisfies a predicate.", "    if length(lst) == 0 \n        return None \n \
    \   else \n        smallest = lst[1] \n        for i in 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end \n        end \n        return smallest \n    end \nend ", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        return lst[1] \nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the index of the first element\
    \ of a list that satisfies a given predicate.", "    if length(lst) == 0 \n  \
    \      return None \n    else \n        smallest = lst[1] \n        for element\
    \ in lst[2:end] \n            if element < smallest \n                smallest\
    \ = element \n            end \n        end \n        return smallest \n    end\
    \ \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that satisfy a predicate.", "    if length(lst)\
    \ == 0 \n        return nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for i in lst[2:end] \n\
    \            if i < smallest \n                smallest = i\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in lst[2:end] \n            if i < smallest \n             \
    \   smallest = i \n            end \n        end \n        return smallest \n\
    \    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 5\n    next_largest([5,\
    \ 1, 4, 3, 2]) == 5\n    next_largest([]) == None\n    next_largest([1, 1]) ==\
    \ None\n    \"\"\"", "    if length(lst) == 0 \n        return nothing\n    end\n\
    \    \n    smallest = minimum(lst)\n    \n    if smallest == lst[1] \n       \
    \ return nothing\n    end\n    \n    lst = lst[2 : (end)]\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        lst = lst[2:end] \n  \
    \      return smallest \nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the index of the smallest element in a given list.\nIf there is no such element,\
    \ return -1.\nIf there are multiple such elements, return the first one.\nThe\
    \ function should work for any type of list.\nThe function should work for empty\
    \ lists.\nThe function should work for lists with any type of elements.\nThe function\
    \ should work for lists with any number of elements.", "    if length(lst) ==\
    \ 0 \n        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        \n        for ele in lst[2:end]\n\
    \            if ele < smallest \n                smallest = ele\n            end\n\
    \        end\n        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend ", "    if length(lst) == 0 \n        return nothing\n\
    \    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n      \
    \  if x < smallest \n            smallest = x\n        end\n    end\n    \n  \
    \  return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i] \n            end \n        end \n        return smallest\
    \ \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4,\
    \ 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell",
  "    if length(lst) == 0 \n        None \n    else \n        lst[end-1] \n    end\n\
    end\n</cell>\n<text>\nExercise 9\nWrite a function that returns the number of\
    \ elements in a list that satisfy a given predicate.", "    if length(lst) ==\
    \ 0 \n        return None \n    else \n        return lst[findfirst(x -> x < lst[end],\
    \ lst[end+1:end-1])]\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the index of the first element of a list that satisfies a given\
    \ predicate.", "    if length(lst) == 0 \n        return nothing\n    \n    smallest\
    \ = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n\
    \            smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the number of elements in the\
    \ list that satisfy a given predicate.", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.3>", "    if length(lst) == 0 \n        None \n    else\
    \ \n        lst[1] \n    end\nend", "    if length(lst) == 0 \n        return\
    \ nothing\n    \n    smallest = lst[1]\n    \n    for el in lst[2:end]\n     \
    \   if el < smallest \n            smallest = el\n        end\n    end\n    \n\
    \    return smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the index of the element in the list that is closest to the number x. Return\
    \ nothing if there is no such element.", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for i = 2:length(lst) \n     \
    \       if lst[i] < smallest \n                smallest = lst[i] \n          \
    \  end\n        end\n        return smallest \n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of elements in a list that\
    \ satisfy a given predicate.", "    if length(lst) == 0 \n        return nothing\n\
    \    \n    smallest = lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i]\
    \ < smallest \n            smallest = lst[i]\n        end\n    end\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i]\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function next_largest() that returns the 2nd largest element\
    \ of the list.\nReturn None if there is no such element.\n    \n    next_largest([1,\
    \ 2, 3, 4, 5]) == 5\n    next_largest([5, 1, 4, 3, 2]) == 5\n    next_largest([])\
    \ == None\n    next_largest([1, 1]) == None\n    \n</text>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst[1] = lst[length(lst)] \n        lst[length(lst)] = smallest \n\
    \        return smallest \nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if there are duplicates in the list. For example, `next_smallest([1,2,2,3,4,5])`\
    \ returns `2` instead of `3`.\n<|/ c |>\n<| c |>\nYes, it does. I tested it before\
    \ posting it. The OP didn't specify that there could be duplicates in the list.\
    \ He said \"Return the 2nd smallest element of the list\"\n<|/ c |>\n<| c |>\n\
    Yes, I missed that part. Sorry. Your answer works perfectly though.\n<|/ c |>\n\
    <| c |>\nI tested it again and it works. I edited my answer to include a test\
    \ case where it fails.\n<|/ c |>\n<| c |>\nI tested it again and it works. I edited\
    \ my answer to include a test case where it fails.\n<|/ c |>\n<| a tags=julia,sorting\
    \ |>\nThe answer by is correct, but I thought I'd add some explanation as to why\
    \ it works.\nThe reason why this works is because Julia's sort function uses QuickSort,\
    \ which is a stable sort, meaning that the order of equal elements is preserved.\
    \ In other words, if two elements are equal, they will remain in the same relative\
    \ order in the sorted array.\nThe reason why this works is because Julia's sort\
    \ function uses QuickSort, which is a stable sort, meaning that the order of equal\
    \ elements is preserved. In other words, if two elements are equal, they will\
    \ remain in the same relative order in the sorted array.\nThe reason why this\
    \ works is because Julia's sort function uses QuickSort, which is a stable sort,\
    \ meaning that the order of equal elements is preserved. In other words, if two\
    \ elements are equal, they will remain in the same relative order in the sorted\
    \ array.\nThe reason why this works is because Julia's sort function uses QuickSort,\
    \ which is a stable sort, meaning that the order of equal elements is preserved.\
    \ In other words, if two elements are equal, they will remain in the same relative\
    \ order in the sorted array.\nThe reason why this works is because Julia's sort\
    \ function uses QuickSort, which is a stable sort, meaning that the order of equal\
    \ elements is preserved. In other words, if two elements are equal, they will\
    \ remain in the same relative order in the sorted array.\nThe reason why this\
    \ works is because Julia's sort function ", "    if length(lst) == 0 \n      \
    \  None \n    elseif length(lst) == 1 \n        lst[1] \n    elseif lst[1] < lst[2]\
    \ \n        lst[1] \n    elseif lst[1] > lst[2] \n        lst[2] \n    elseif\
    \ lst[1] == lst[2] \n        lst[1] \n    elseif lst[1] < lst[2] \n        lst[2]\
    \ \n    elseif lst[1] > lst[2] \n        lst[1] \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return nothing\n  \
    \  end\n    \n    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if\
    \ el < smallest \n            smallest = el\n        end\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 5\n    next_largest([5,\
    \ 1, 4, 3, 2]) == 5\n    next_largest([]) == None\n    next_largest([1, 1]) ==\
    \ None\n    \"\"\"", "    if length(lst) == 0 \n        return Nothing\n    \n\
    \    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return Nothing \n    \n    smallest = lst[1] \n    \n    for\
    \ x in lst[2:end] \n        if x < smallest \n            smallest = x \n    \
    \    end \n    end \n    \n    return smallest \nend ", "    if length(lst) ==\
    \ 0 \n        return None \n    else \n        smallest = lst[1] \n        for\
    \ el in lst[2:end] \n            if el < smallest \n                smallest =\
    \ el \n            end \n        end \n        return smallest \n    end \nend\
    \ \n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    \n    smallest = lst[1]\n    \n    for i in lst[2:end]\n      \
    \  if i < smallest\n            smallest = i\n        end\n    end\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ for i in 2:length(lst) \n            if lst[i] < smallest \n               \
    \ smallest = lst[i] \n            end \n        end \n        return smallest\
    \ \n    end \nend \n</cell>\n<code language=julia-1.5>", "    if length(lst) ==\
    \ 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for x in\
    \ lst[2:end]\n        if x < smallest\n            smallest = x\n        end\n\
    \    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the 2nd smallest element of a given list.", "    if\
    \ length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end\n        end\n        return smallest\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) ==\
    \ 0 \n        return nothing\n    \n    smallest = lst[1]\n    \n    for x in\
    \ lst[2:end]\n        if x < smallest \n            smallest = x\n        end\n\
    \    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        Nothing\n    elseif length(lst) == 1 \n     \
    \   lst[1]\n    else\n        smallest_idx = findmin(lst)[2]\n        lst[smallest_idx]\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ index of the element in the list that has the smallest absolute value.", " \
    \   if length(lst) == 0 \n        return nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n           \
    \ smallest = lst[i]\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n\
    \    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for element in lst[2:end]\
    \ \n            if element < smallest \n                smallest = element \n\
    \            end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n\
    \    end\n    \n    smallest = lst[1]\n    \n    for el in lst[2:end]\n      \
    \  if el < smallest \n            smallest = el\n        end\n    end\n    \n\
    \    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ lst = lst[2:end] \n        for elt in lst \n            if elt < smallest \n\
    \                smallest = elt \n            end \n        end \n        return\
    \ smallest \nend \n</cell>\n<code language=julia-1.5>", "    if length(lst) ==\
    \ 0 \n        return None \n    else \n        return lst[1] \nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the index of the first element\
    \ of a list that satisfies a predicate.", "    if length(lst) == 0 \n        return\
    \ Nothing\n    else \n        smallest = minimum(lst)\n        lst = filter(x\
    \ -> x != smallest, lst)\n        if length(lst) == 0 \n            return Nothing\n\
    \        else \n            return smallest\n    end\nend", "    if length(lst)\
    \ == 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for ele\
    \ in lst[2:end]\n        if ele < smallest \n            smallest = ele\n    \
    \    end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst = lst[2:end] \n        return smallest \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end\n        end\n        return smallest\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) ==\
    \ 0 \n        return Nothing\n    else if length(lst) == 1 \n        return lst[1]\n\
    \    else \n        smallest = lst[1]\n        lst = lst[2:end]\n        for elt\
    \ in lst\n            if elt < smallest \n                smallest = elt\n   \
    \         end\n        end\n        return smallest\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n  \
    \  \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    \n    smallest = lst[1]\n    \n    for elt in lst[2:end]\n    \
    \    if elt < smallest \n            smallest = elt\n        end\n    end\n  \
    \  \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the list that is closest to zero.\nReturn 0 if there\
    \ is no such element.\nIf there are multiple elements that are equally close,\
    \ return the first one.\nIf there are multiple elements that are equally close,\
    \ return the first one that appears earlier in the list.\nIf there are multiple\
    \ elements that are equally close, return the first one that appears earlier in\
    \ the list.\nIf there are multiple elements that are equally close, return the\
    \ first one that appears earlier in the list.\nIf there are multiple elements\
    \ that are equally close, return the first one that appears earlier in the list.\n\
    If there are multiple elements that are equally close, return the first one that\
    \ appears earlier in the list.\nIf there are multiple elements that are equally\
    \ close, return the first one that appears earlier in the list.\nIf there are\
    \ multiple elements that are equally close, return the first one that appears\
    \ earlier in the list.\nIf there are multiple elements that are equally close,\
    \ return the first one that appears earlier in the list.\nIf there are multiple\
    \ elements that are equally close, return the first one that appears earlier in\
    \ the list.\nIf there are multiple elements that are equally close, return the\
    \ first one that appears earlier in the list.\nIf there are multiple elements\
    \ that are equally close, return the first one that appears earlier in the list.\n\
    If there are multiple elements that are equally close, return the first one that\
    \ appears earlier in the list.\nIf there are multiple elements that are equally\
    \ close, return the first one that appears earlier in the list.\nIf there are\
    \ multiple elements that are equally close, return the first one that appears\
    \ earlier in the list.\nIf there are multiple elements that are equally close,\
    \ return the first one that appears earlier in the list.\nIf there are multiple\
    \ elements that are equally close, return the first one that appears earlier in\
    \ the list.\nIf there are multiple elements that are equally close, return the\
    \ first one that appears earlier in the list.\nIf there are multiple elements\
    \ that are equally close, return the first one ", "    if length(lst) == 0 \n\
    \        return None \n    else \n        return lst[1] \nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the 2nd smallest element of a list.\n\
    If there are multiple 2nd smallest elements, return the first one.\nIf there are\
    \ no 2nd smallest elements, return None.\nIf there are multiple 2nd smallest elements,\
    \ return the first one.\nIf there are no 2nd smallest elements, return None.",
  "    if length(lst) == 0 \n        None \n    else \n        lst[end-1] \n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the number of\
    \ elements in the list that are less than the given value.", "    if length(lst)\
    \ == 0 \n        return Nothing\n    end\n    \n    smallest = lst[1]\n    \n\
    \    for el in lst[2:end]\n        if el < smallest \n            smallest = el\n\
    \        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end\n        end\n        return smallest\
    \ \n    end\nend\n</cell>\n<code language=julia-1.3>", "    if length(lst) ==\
    \ 0 \n        return None \n    else \n        smallest = lst[1] \n        lst\
    \ = lst[2:end] \n        return smallest \nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of elements in a list that satisfy a\
    \ predicate.", "    if length(lst) == 0 \n        return nothing\n    end\n  \
    \  \n    smallest = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest\
    \ \n            smallest = el\n        end\n    end\n    \n    return smallest\n\
    end", "    if length(lst) == 0 \n        return Nothing\n    \n    smallest =\
    \ lst[1]\n    \n    for ele in lst[2:end]\n        if ele < smallest \n      \
    \      smallest = ele\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ Nothing\n    \n    smallest = lst[1]\n    \n    for i in 2:length(lst)\n   \
    \     if lst[i] < smallest \n            smallest = lst[i]\n        end\n    end\n\
    \    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(lst) == 0 \n        return nothing\n    \n    smallest = lst[1]\n   \
    \ \n    for i in 2:length(lst)\n        if lst[i] < smallest \n            smallest\
    \ = lst[i]\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return None \n    else\
    \ \n        return lst[1] \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst = lst[2:end] \n        return smallest \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n           \
    \ smallest = lst[i]\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for el in lst[2:end] \n      \
    \      if el < smallest \n                smallest = el \n            end \n \
    \       end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<code language=julia-1.3>", "    if length(lst) == 0 \n        None \n\
    \    else \n        lst[end-1] \n    end\nend", "    if length(lst) == 0 \n  \
    \      return None \n    else \n        smallest = lst[1] \n        for el in\
    \ lst[2:end] \n            if el < smallest \n                smallest = el \n\
    \            end \n        end \n        return smallest \n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if length(lst) == 0 \n        return Nothing\n\
    \    \n    smallest = lst[1]\n    \n    for el in lst[2:end] \n        if el <\
    \ smallest \n            smallest = el \n        end\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.", "    if length(lst) == 0 \n        return nothing\n    end\n\
    \    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n      \
    \  if x < smallest\n            smallest = x\n        end\n    end\n    \n   \
    \ return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ for el in lst[2:end] \n            if el < smallest \n                smallest\
    \ = el \n            end \n        end \n        return smallest \n    end \n\
    end ", "    if length(lst) == 0 \n        return nothing\n    end\n    \n    smallest\
    \ = lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n      \
    \      smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for i in lst[2:end] \n       \
    \     if i < smallest \n                smallest = i \n            end \n    \
    \    end \n        return smallest \nend \n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i = 2:length(lst) \n            if lst[i] < smallest \n      \
    \          smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<text>\nExercise 2\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.\n    \n    next_largest([1, 2, 3, 4, 5]) == 5\n    next_largest([5,\
    \ 1, 4, 3, 2]) == 5\n    next_largest([]) == None\n    next_largest([1, 1]) ==\
    \ None\n    \n</text>\n<cell>", "    if length(lst) == 0 \n        error(\"The\
    \ list cannot be empty\")\n    end\n    smallest = lst[1]\n    for el in lst[2:end]\n\
    \        if el < smallest \n            smallest = el\n        end\n    end\n\
    \    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        return lst[1] \nend", "    if\
    \ length(lst) == 0 \n        return Nothing \n    \n    smallest = lst[1] \n \
    \   \n    for x in lst[2:end] \n        if x < smallest \n            smallest\
    \ = x \n        end \n    end \n    \n    return smallest \nend ", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        return lst[1] \nend\n</cell>\n\
    <text>\nExercise 10\nWrite a function that returns the index of the element in\
    \ the list that has the smallest value.", "    if length(lst) == 0 \n        return\
    \ nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end] \n     \
    \   if x < smallest \n            smallest = x\n        end\n    end\n    \n \
    \   return smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a list that satisfy a given condition.", "    if length(lst)\
    \ == 0 \n        return nothing\n    end\n    \n    smallest = lst[1]\n    \n\
    \    for i in 2:length(lst)\n        if lst[i] < smallest \n            smallest\
    \ = lst[i]\n        end\n    end\n    \n    return smallest\nend", "    if length(lst)\
    \ == 0 \n        None \n    else \n        lst[findmin(lst)[2]]\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert next_smallest([1, 2, 3, 4, 5]) ==\
    \ 2\n@assert next_smallest([5, 1, 4, 3, 2]) == 2\n@assert next_smallest([]) ==\
    \ None\n@assert next_smallest([1, 1]) == None\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the index of the element in the list that is closest\
    \ to zero.\nIf there are multiple elements that are equally close, return the\
    \ index of the smallest one.\nIf there are no elements that are equally close,\
    \ return None.", "    if length(lst) == 0 \n        return None \n    else \n\
    \        smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst[1] = lst[end] \n        lst[end] = smallest \n        return smallest\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n    \
    \    return None \n    else \n        smallest = lst[1] \n        lst[1] = lst[end]\
    \ \n        lst[end] = smallest \n        return smallest \nend\n</cell>\n<code\
    \ language=julia-1.3>", "    if length(lst) == 0 \n        return nothing\n  \
    \  end\n    \n    smallest = lst[1]\n    \n    for ele in lst[2:end] \n      \
    \  if ele < smallest \n            smallest = ele\n        end\n    end\n    \n\
    \    return smallest\nend", "    if length(lst) == 0 \n        error(\"List is\
    \ empty\") \n    else \n        lst[1] = lst[1] < lst[2] ? lst[1] : lst[2] \n\
    \        lst[2] = lst[1] < lst[2] ? lst[2] : lst[1] \n        return lst[1] \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return None \n    else \n        smallest = lst[1] \n        for e in\
    \ lst[2:end] \n            if e < smallest \n                smallest = e \n \
    \           end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for i in 2:length(lst) \n    \
    \        if lst[i] < smallest \n                smallest = lst[i] \n         \
    \   end \n        end \n        return smallest \n    end \nend \n</cell>\n<code\
    \ language=julia-1.5>", "    if length(lst) == 0 \n        return None \n    else\
    \ \n        return lst[1] \nend\n</cell>\n<text>\nExercise 7\nWrite a function\
    \ next_largest() that returns the 2nd largest element of the list.\nReturn None\
    \ if there is no such element.\nTest your function with these inputs:", "    if\
    \ length(lst) == 0 \n        return nothing\n    else if length(lst) == 1 \n \
    \       return lst[1]\n    else \n        smallest = lst[1]\n        for i in\
    \ 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the index of the first\
    \ element of a list that satisfies a predicate.", "    if length(lst) == 0 \n\
    \        None \n    else \n        lst[findmin(lst)]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\n\
    \    \n    smallest = lst[1]\n    \n    for el in lst[2:end] \n        if el <\
    \ smallest \n            smallest = el\n        end\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0\
    \ \n        return nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n\
    \        if x < smallest\n            smallest = x\n        end\n    end\n   \
    \ \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the index of the element in the list that is closest to zero.\nReturn 0 if there\
    \ is no such element.\nIf there are multiple elements that are equally close,\
    \ return the first one.\nIf there are multiple elements that are equally close,\
    \ return the last one.\nIf there are multiple elements that are equally close,\
    \ return the middle one.\nIf there are multiple elements that are equally close,\
    \ return the middle two.\nIf there are multiple elements that are equally close,\
    \ return the middle three.\nIf there are multiple elements that are equally close,\
    \ return the middle four.\nIf there are multiple elements that are equally close,\
    \ return the middle five.\nIf there are multiple elements that are equally close,\
    \ return the middle six.\nIf there are multiple elements that are equally close,\
    \ return the middle seven.\nIf there are multiple elements that are equally close,\
    \ return the middle eight.\nIf there are multiple elements that are equally close,\
    \ return the middle nine.\nIf there are multiple elements that are equally close,\
    \ return the middle ten.\nIf there are multiple elements that are equally close,\
    \ return the middle eleven.\nIf there are multiple elements that are equally close,\
    \ return the middle twelve.\nIf there are multiple elements that are equally close,\
    \ return the middle thirteen.\nIf there are multiple elements that are equally\
    \ close, return the middle fourteen.\nIf there are multiple elements that are\
    \ equally close, return the middle fifteen.\nIf there are multiple elements that\
    \ are equally close, return the middle sixteen.\nIf there are multiple elements\
    \ that are equally close, return the middle seventeen.\nIf there are multiple\
    \ elements that are equally close, return the middle eighteen.\nIf there are multiple\
    \ elements that are equally close, return the middle nineteen.\nIf there are multiple\
    \ elements that are equally close, return the middle twenty.\nIf there are multiple\
    \ elements that are equally close, return the middle twenty-one.\nIf there are\
    \ multiple elements that are equally close, return the middle twenty-two.\nIf\
    \ there are multiple elements that are equally close, return the middle twent",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in lst[2:end]\n        if i < smallest\n            smallest\
    \ = i\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    end\n    \n    smallest =\
    \ lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n  \
    \          smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end", "    if length(lst) == 0 \n        return Nothing\n    \n    smallest =\
    \ lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n        \
    \    smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        smallest = lst[1] \n        for elt in lst[2:end] \n     \
    \       if elt < smallest \n                smallest = elt \n            end \n\
    \        end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.3>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for el in lst[2:end] \n            if el < smallest \n           \
    \     smallest = el \n            end \n        end \n        return smallest\
    \ \nend ", "    if length(lst) == 0 \n        return None \n    else \n      \
    \  smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            end \n        end\
    \ \n        return smallest \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest \n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        None \n    else \n        lst[findmin(lst)+1]\
    \ \nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n    \
    \    return Nothing \n    \n    smallest = lst[1] \n    \n    for i in lst[2:end]\
    \ \n        if i < smallest \n            smallest = i \n        end \n    end\
    \ \n    \n    return smallest \nend ", "    if length(lst) == 0 \n        None\
    \ \n    elseif length(lst) == 1 \n        lst[1] \n    elseif length(lst) == 2\
    \ \n        lst[1] \n    elseif length(lst) > 2 \n        lst[findmin(lst)[2]]\
    \ \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) ==\
    \ 0 \n        return Nothing \n    else \n        smallest = lst[1] \n       \
    \ lst = lst[2:end] \n        return smallest \nend\n</cell>\n<text>\nExercise\
    \ 10\nWrite a function that returns the index of the element in the list that\
    \ has the smallest value.", "    if length(lst) == 0 \n        return None \n\
    \    else \n        return lst[1] \nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the number of elements in the list that are less than\
    \ a given value.", "    if length(lst) == 0 \n        return Nothing\n    \n \
    \   smallest = lst[1]\n    \n    for x in lst[2:end]\n        if x < smallest\n\
    \            smallest = x\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for element in lst[2:end]\
    \ \n            if element < smallest \n                smallest = element \n\
    \            end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return None \n\
    \    else \n        return lst[findmin(lst)]\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for e in lst[2:end] \n            if e < smallest \n             \
    \   smallest = e \n            end\n        end\n        return smallest \n  \
    \  end\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns the number\
    \ of elements in a list that satisfy a given condition. For example, count_if(lst,\
    \ x->x>2) should return 2 if lst contains elements with values greater than 2,\
    \ and 0 if lst contains no elements with values greater than 2.", "    if length(lst)\
    \ == 0 \n        None \n    else \n        lst[1] \n    end\nend\n</cell>\n<text>\n\
    Exercise 4\nWrite a function that returns the index of the first element of a\
    \ list that satisfies a predicate.", "    if length(lst) == 0 \n        error(\"\
    List is empty\") \n    else \n        lst[1] = lst[1] - 1\n        if lst[1] ==\
    \ 0 \n            return lst[2] \n        else \n            return lst[1] \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n\
    \        return None \n    else \n        smallest = lst[1] \n        for element\
    \ in lst[2:end] \n            if element < smallest \n                smallest\
    \ = element \n            end \n        end \n        return smallest \n    end\
    \ \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 2\nWrite a function next_largest()\
    \ that returns the 2nd largest element of the list.\nReturn None if there is no\
    \ such element.", "    if length(lst) == 0 \n        return None \n    else \n\
    \        smallest = lst[1] \n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i] \n            else \n       \
    \         break \n        end \n        return smallest \nend ", "    if length(lst)\
    \ == 0 \n        None \n    else \n        lst[findmin(lst)]\n    end\nend", " \
    \   if length(lst) == 0 \n        return None \n    else \n        smallest =\
    \ lst[1] \n        lst = lst[2:end] \n        return smallest \nend\n</cell>\n\
    <code language=julia-1.3>\nnext_smallest([1, 2, 3, 4, 5]) == 2 \nnext_smallest([5,\
    \ 1, 4, 3, 2]) == 2 \nnext_smallest([]) == None \nnext_smallest([1, 1]) == None\
    \ \n</cell>\n<text>\nExercise 3\nWrite a function that returns the index of the\
    \ first element of a list that satisfies a predicate.", "    if length(lst) ==\
    \ 0 \n        return None \n    else \n        smallest = lst[1] \n        for\
    \ i in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i] \n            end \n        end \n        return smallest \n    end\
    \ \nend \n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n   \
    \     None \n    else \n        lst[end-1] \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the index of the first element of the list\
    \ that satisfies a given condition. \nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return -1.\nIf no such element is found, return -1.\n\
    If no such element is found, return ", "    if length(lst) == 0 \n        None\
    \ \n    else \n        lst[findmin(lst)[2]]\n    end\nend", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ for ele in lst[2:end] \n            if ele < smallest \n                smallest\
    \ = ele \n            end \n        end \n        return smallest \n    end \n\
    end \n</cell>\n<code language=julia-1.3>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.3>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.3>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.3>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a list that satisfy a predicate.", "    if length(lst) == 0 \n        return\
    \ nothing\n    else if length(lst) == 1 \n        return lst[1]\n    else \n \
    \       smallest = lst[1]\n        for i in 2:length(lst) \n            if lst[i]\
    \ < smallest \n                smallest = lst[i]\n            end\n        end\n\
    \        return smallest\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if length(lst) == 0 \n        return Nothing\n    else if length(lst) == 1\
    \ \n        return lst[1]\n    else \n        smallest = lst[1]\n        for i\
    \ in 2:length(lst) \n            if lst[i] < smallest \n                smallest\
    \ = lst[i]\n            end\n        end\n        return smallest\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the index of the first\
    \ element of a list that satisfies a predicate.\nFor example, suppose that you\
    \ are given the list [5, 3, 7, 4, 2, 6] and you want to find the first element\
    \ in the list that satisfies $x \\in {1, 2, 3}$. Your function should return 4.",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n           \
    \ smallest = lst[i]\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the number of elements in a list that satisfy\
    \ a predicate.", "    if length(lst) == 0 \n        return Nothing\n    end\n\
    \    \n    smallest = minimum(lst)\n    \n    if smallest == lst[1] \n       \
    \ return smallest\n    end\n    \n    i = 2\n    while i < length(lst) \n    \
    \    if lst[i] < smallest \n            smallest = lst[i]\n        elseif lst[i]\
    \ > smallest \n            break\n        end\n        i = i + 1\n    end\n  \
    \  \n    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ for elt in lst[2:end] \n            if elt < smallest \n                smallest\
    \ = elt \n            end \n        end \n        return smallest \n    end \n\
    end \n</cell>\n<code language=julia-1.4>", "    if length(lst) == 0 \n       \
    \ return Nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n\
    \        if x < smallest\n            smallest = x\n        end\n    end\n   \
    \ \n    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        smallest = lst[1] \n       \
    \ lst[1] = lst[end] \n        lst[end] = smallest \n        return smallest \n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        Nothing\n\
    \    elseif length(lst) == 1 \n        lst[1]\n    else\n        smallest = lst[1]\n\
    \        for i in 2:length(lst)\n            if lst[i] < smallest \n         \
    \       smallest = lst[i]\n            end\n        end\n        smallest\n  \
    \  end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that returns the index\
    \ of the first element of a list that satisfies a given condition. \nFor example,\
    \ \nindex([1,3,5,7,9], x->x>5) == 4\nindex([1,3,5,7,9], x->x==5) == None\nindex([1,3,5,7,9],\
    \ x->x<5) == None\nindex([1,3,5,7,9], x->x>5 and x<10) == None\nindex([1,3,5,7,9],\
    \ x->x>10 and x<15) == None\nindex([1,3,5,7,9], x->x>15 and x<20) == None\nindex([1,3,5,7,9],\
    \ x->x>20 and x<25) == None\nindex([1,3,5,7,9], x->x>25 and x<30) == None\nindex([1,3,5,7,9],\
    \ x->x>30 and x<35) == None\nindex([1,3,5,7,9], x->x>35 and x<40) == None\nindex([1,3,5,7,9],\
    \ x->x>40 and x<45) == None\nindex([1,3,5,7,9], x->x>45 and x<50) == None\nindex([1,3,5,7,9],\
    \ x->x>50 and x<55) == None\nindex([1,3,5,7,9], x->x>55 and x<60) == None\nindex([1,3,5,7,9],\
    \ x->x>60 and x<65) == None\nindex([1,3,5,7,9], x->x>65 and x<70) == None\nindex([1,3,5,7,9],\
    \ x->x>70 and x<75) == None\nindex([1,3,5,7,9], x->x>75 and x<80) == None\nindex([1,3,5,7,9],\
    \ x->x>80 and x<85) == None\nindex([1,3,5,7,9], x->x>85 and x<90) == None\nindex([1,3,5,7,9],\
    \ x->x>90 and x<95) == None\nindex([1,3,5,7,9], x->x>95 and x", "    if length(lst)\
    \ == 0 \n        return None \n    else \n        return lst[1] \nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        None \n    else\
    \ \n        lst[1] \n    end\nend", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for e in lst[2:end] \n\
    \            if e < smallest \n                smallest = e \n            end\
    \ \n        end \n        return smallest \n    end \nend ", "    if length(lst)\
    \ == 0 \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for i\
    \ in 2:length(lst)\n        if lst[i] < smallest \n            smallest = lst[i]\n\
    \        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of elements in the list that are less\
    \ than the given value.", "    if length(lst) == 0 \n        None \n    else \n\
    \        lst[findmin(lst)[2]] \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    end\n    \n    smallest =\
    \ lst[1]\n    \n    for i in 2:length(lst)\n        if lst[i] < smallest \n  \
    \          smallest = lst[i]\n        end\n    end\n    \n    return smallest\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0 \n        return\
    \ None \n    else \n        smallest = lst[1] \n        for i in 2:length(lst)\
    \ \n            if lst[i] < smallest \n                smallest = lst[i] \n  \
    \          end \n        end \n        return smallest \n    end \nend \n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return nothing\n\
    \    \n    smallest = lst[1]\n    \n    for i in lst[2:end]\n        if i < smallest\n\
    \            smallest = i\n        end\n    end\n    \n    return smallest\nend\n\
    </cell>\n<code language=julia-1.5>\nnext_smallest([1, 2, 3, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([])\n</cell>\n<code language=julia-1.5>\nnext_smallest([1, 1])\n\
    </cell>\n<text>\nExercise 2\nWrite a function next_largest() that returns the\
    \ 2nd largest element of the list.\nReturn None if there is no such element.",
  "    if length(lst) == 0 \n        return nothing\n    end\n    \n    smallest =\
    \ lst[1]\n    \n    for el in lst[2:end]\n        if el < smallest \n        \
    \    smallest = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([5, 1, 4, 3, 2])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the 3rd smallest element of the list.\nReturn\
    \ None if there is no such element.\nThe function should work for lists of any\
    \ length.\nThe function should work for empty lists.\nThe function should work\
    \ for lists of length 1.", "    if length(lst) == 0 \n        return Nothing\n\
    \    \n    smallest = lst[1]\n    \n    for ele in lst[2:end]\n        if ele\
    \ < smallest \n            smallest = ele\n        end\n    end\n    \n    return\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst) == 0\
    \ \n        return Nothing\n    \n    smallest = lst[1]\n    \n    for x in lst[2:end]\n\
    \        if x < smallest\n            smallest = x\n        end\n    end\n   \
    \ \n    return smallest\nend\n</cell>\n<code language=julia-1.5>", "    if length(lst)\
    \ == 0 \n        return nothing\n    else if length(lst) == 1 \n        return\
    \ lst[1]\n    else \n        smallest = lst[1]\n        lst = lst[2:end]\n   \
    \     for i in lst\n            if i < smallest\n                smallest = i\n\
    \            end\n        end\n        return smallest\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(lst) == 0 \n        return Nothing\
    \ \n    else \n        smallest = lst[1] \n        for e in lst[2:end] \n    \
    \        if e < smallest \n                smallest = e \n            end \n \
    \       end \n        return smallest \n    end \nend \n</cell>\n<code language=julia-1.3>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5,\
    \ 1, 4, 3, 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n\
    <code language=julia-1.5>\nnext_smallest([1, 1])\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        error(\"The list is empty\") \n    else \n  \
    \      lst[1] \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the 3rd smallest element of a list.\nReturn None if the list is empty.",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        lst = lst[2:end] \n        return smallest \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return Nothing\n    \n    smallest = lst[1]\n\
    \    \n    for x in lst[2:end]\n        if x < smallest\n            smallest\
    \ = x\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return nothing\n    \n    smallest = lst[1]\n\
    \    \n    for el in lst[2:end]\n        if el < smallest \n            smallest\
    \ = el\n        end\n    end\n    \n    return smallest\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(lst) == 0 \n        return None \n    else \n        smallest = lst[1]\
    \ \n        for i in 2:length(lst) \n            if lst[i] < smallest \n     \
    \           smallest = lst[i] \n            end \n        end \n        return\
    \ smallest \n    end \nend \n</cell>\n<code language=julia-1.5>\nnext_smallest([1,\
    \ 2, 3, 4, 5])\n</cell>\n<code language=julia-1.5>\nnext_smallest([5, 1, 4, 3,\
    \ 2])\n</cell>\n<code language=julia-1.5>\nnext_smallest([])\n</cell>\n<code language=julia-1.5>\n\
    next_smallest([1, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the index of the element in the list that is closest to zero."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
