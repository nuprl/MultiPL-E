name: HumanEval_88_sort_array
language: julia
prompt: "\"\"\"\n    Given an array of non-negative integers, return a copy of the\
  \ given array after sorting,\n    you will sort the given array in ascending order\
  \ if the sum( first index value, last index value) is odd,\n    or sort it in descending\
  \ order if the sum( first index value, last index value) is even.\n\n    Note:\n\
  \    * don't change the given array.\n\n    Examples:\n    * sort_array([]) => []\n\
  \    * sort_array([5]) => [5]\n    * sort_array([2, 4, 3, 0, 1, 5]) => [0, 1, 2,\
  \ 3, 4, 5]\n    * sort_array([2, 4, 3, 0, 1, 5, 6]) => [6, 5, 4, 3, 2, 1, 0]\n \
  \   \"\"\"\nfunction sort_array(array::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sort_array;\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([5]) == [5])\n\t@test(candidate([2, 4,\
  \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5])\n\t@test(candidate([2, 4, 3, 0, 1, 5, 6])\
  \ == [6, 5, 4, 3, 2, 1, 0])\n\t@test(candidate([2, 1]) == [1, 2])\n\t@test(candidate([15,\
  \ 42, 87, 32, 11, 0]) == [0, 11, 15, 32, 42, 87])\n\t@test(candidate([21, 14, 23,\
  \ 11]) == [23, 21, 14, 11])\nend\n"
completions: ["    array = copy(array)\n    sum = 0\n    for i in array\n        sum\
    \ += i\n    end\n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(reverse,\
    \ array)\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if length(array) == 0 \n        return array\n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n\
    \        sort_array = reverse(array)\n    end\n    \n    sort_array = sort_array[1:end-1]\n\
    \    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the first n positive integers, where n is given as an input argument.",
  "    \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array\
    \ = reverse(array)\n    end", "    if length(array) == 0 \n        return array\
    \ \n    end\n    \n    sum = 0\n    for i in 1:length(array) \n        sum +=\
    \ array[i]\n    end\n    \n    if sum % 2 != 0 \n        sorted = reverse(array)\
    \ \n    else\n        sorted = array \n    end\n    \n    return sorted \nend\n\
    </cell>\n<code language=julia-1.5>", "    if length(array) == 0 \n        return\
    \ array\n    end\n    \n    sum = 0\n    for x in array\n        sum += x\n  \
    \  end\n    \n    if sum % 2 != 0\n        sorted = sort_array(array[1:end-1])\
    \ \n        push!(sorted, array[1])\n        push!(sorted, array[end])\n     \
    \   return sorted\n    else\n        sorted = sort_array(array[2:end]) \n    \
    \    push!(sorted, array[1])\n        push!(sorted, array[end])\n        return\
    \ sorted\n    end\nend", "    array = sort(array)\n    if sum(array) % 2 != 0\n\
    \        array = reverse(array)\n    end\n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if sum(array) % 2 == 0 \n        array = sort_array(reverse(array))\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.0>\nsort_array([])\n\
    </cell>\n<code language=julia-1.0>\nsort_array([5])\n</cell>\n<code language=julia-1.0>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.0>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of non-negative integers and returns the sum of the first and last\
    \ elements.", "    if length(array) == 0 \n        return array \n    end\n  \
    \  \n    sum = 0\n    for i in 1:length(array) \n        sum += array[i]\n   \
    \ end\n    \n    if sum % 2 == 1 \n        array = reverse(array) \n    end\n\
    \    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n# test your\
    \ code\n@assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.5 Find Median\
    \ in Array\nGiven an array of non-negative integers, find the median of the array.",
  "    if length(array) == 0 \n        return array \n    end\n    \n    sum = 0\n\
    \    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n    if\
    \ sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    array = copy(array)\n   \
    \ \n    if sum(array) % 2 != 0\n        array = sort_array_desc(array)\n    else\n\
    \        array = sort_array_asc(array)\n    end\n    \n    return array\nend",
  "    if length(array) == 0 \n        return array \n    \n    sum = 0\n    for i\
    \ in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n        array\
    \ = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>",
  "    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend", "    if length(array) == 0 \n        return\
    \ array \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n \
    \   \n    if sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n \
    \   array = sort(array) \n    \n    return array\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if length(array) == 0 \n        return array\n    end\n    \n    sum\
    \ = 0\n    for element in array\n        sum += element\n    end\n    \n    if\
    \ sum % 2 == 1 \n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(array) == 0 \n      \
    \  return array \n    end\n    \n    sum = 0\n    for i in 1:length(array) \n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 != 0 \n        array =\
    \ reverse(array)\n    end\n    \n    return array\nend", "    if length(array)\
    \ == 0 \n        return array \n    else \n        sum1 = sum(array) \n      \
    \  sum2 = sum( array[end-1:end] ) \n        if sum1 % 2 == 0 \n            return\
    \ array\n        else \n            return array.reverse() \n    end\nend", " \
    \   array = copy(array)\n    sort_array(array)\n    return array\nend", "    \n\
    \    if length(array) == 0 \n        return array\n    end", "    if length(array)\
    \ == 0 \n        return array\n    end\n    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    \n    if sum % 2 == 1\n        sorted = sort_array(array[1:end-1])\
    \ \n        return vcat(array, sorted)\n    else\n        sorted = sort_array(array[1:end-1])\
    \ \n        return vcat(sorted, array)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of times a given value appears in the given array.", "  \
    \  if length(array) == 0 \n        return array \n    \n    sum = 0\n    for i\
    \ in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n        array\
    \ = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first element of an array", "    array = sort(array)\n    if\
    \ sum(array) % 2 != 0\n        array = reverse(array)\n    end\n    return array\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    if length(array)\
    \ == 0 \n        return array \n    \n    sum = 0\n    for i in array\n      \
    \  sum += i\n    end\n    \n    if sum % 2 == 1 \n        push!(array,0)\n   \
    \     push!(array,0)\n    end\n    \n    push!(array,0)\n    push!(array,0)\n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n    end\n   \
    \ \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    \n    if sum % 2 == 1 \n        push!(array,0)\n\
    \        push!(array,0)\n    end\n    \n    push!(array,0)\n    push!(array,0)\n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n    end\n   \
    \ \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    \n    if sum % 2 == 1 \n        push!(array,0)\n\
    \        push!(array,0)\n    end\n    \n    push!(array,0)\n    push!(array,0)\n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n    end\n   \
    \ \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    \n    if sum % 2 == 1 \n        push!(array,0)\n\
    \        push!(array,0)\n    end\n    \n    push!(array,0)\n    push!(array,0)\n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 0 \n        push!(array,0)\n        push!(array,0)\n    end\n   \
    \ \n    push!(array,0)\n    push!(array,0)\n    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    \n    if sum % 2 == 1 \n        push!(array,0)\n\
    \        push!(array,0)\n    end\n    \n    push!(array,0)\n    push!(array,0)\n\
    \    \n    sum = 0\n    for i in array", "    array = copy(array)\n    sort(array)\n\
    \    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| c |>\n\
    This does not answer the question. OP asked for descending order, but your solution\
    \ sorts in ascending order.\n<|/ c |>\n<| c |>\nThe question was \"how to sort\
    \ an array in descending order\", not \"how to sort an array in ascending order\"\
    . Your solution sorts in ascending order. Your code does not sort in descending\
    \ order.\n<|/ c |>\n<| c |>\nThe question was \"how to sort an array in descending\
    \ order\", not \"how to sort an array in ascending order\". Your solution sorts\
    \ in ascending order. Your code does not sort in descending order.\n<|/ c |>\n\
    <| a dscore=3 |>\n<code>", "    if length(array) == 0 \n        return array \n\
    \    \n    sum_array = sum(array) \n    \n    if sum_array % 2 == 1 \n       \
    \ array = reverse(array) \n    \n    sum_array = sum(array) \n    \n    if sum_array\
    \ % 2 == 0 \n        array = reverse(array) \n    \n    return array \nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(array) == 0 \n        return array\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 == 0 \n        sorted = sort_array(array[2:end-1]) \n        sorted[end]\
    \ = array[1]\n        return sorted \n    else \n        sorted = sort_array(array[1:end-1])\
    \ \n        sorted[1] = array[end]\n        return sorted \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5])\
    \ == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times the given element\
    \ appears in the given array.", "    if length(array) == 0 \n        return array\
    \ \n    \n    sum = 0\n    for x in array \n        sum += x \n    end\n    \n\
    \    if sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([]) == []\n\
    @test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of elements\
    \ in a given array that satisfy a given condition.", "    if sum(array) == 0 \n\
    \        return array \n    else \n        odd = false\n        even = false\n\
    \        sum = 0\n        for i in array\n            sum += i\n            if\
    \ sum % 2 == 0\n                even = true\n            else\n              \
    \  odd = true\n            end\n        end\n        if odd\n            array\
    \ = sort_odd_array(array)\n        elseif even\n            array = sort_even_array(array)\n\
    \        else\n            array = sort_odd_array(array)\n            array =\
    \ sort_even_array(array)\n        end\n        return array\n    end\nend", " \
    \   array = copy(array)\n    sum = 0\n    for i in array\n        sum += i\n \
    \   end\n    if sum % 2 == 1\n        sort_array_desc(array)\n    else\n     \
    \   sort_array_asc(array)\n    end\n    return array\nend", "    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, reverse=true)\n    end\n    return array\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,arrays,julia |>\n<code>", "    sum\
    \ = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 != 0\n  \
    \      array = reverse(array)\n    end\n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(array) == 0 \n        return array \n \
    \   else \n        odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end])\
    \ \n        if odd_sum % 2 == 1 \n            return array\n        else \n  \
    \          return array.reverse\n    end\nend\n</cell>\n<text>\nQ: Given an array\
    \ of non-negative integers, return a copy of the given array after sorting,\n\
    \    you will sort the given array in ascending order if the sum( first index\
    \ value, last index value) is odd,\n    or sort it in descending order if the\
    \ sum( first index value, last index value) is even.", "    if length(array) ==\
    \ 0 \n        return array \n    end\n    \n    sum = 0\n    for i in 1:length(array)\
    \ \n        sum += array[i]\n    end\n    \n    if sum % 2 == 1 \n        array\
    \ = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(array) == 0 \n        return array \n    else \n        sum1 = sum(array[1:end-1])\
    \ \n        sum2 = sum(array[2:end]) \n        if sum1 % 2 == 1 \n           \
    \ return array\n        else \n            return array.reverse\n    end\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    sum_array = sum(array)\n    if\
    \ sum_array % 2 == 1\n        array = sort_array(array[2:end])\n        array[1]\
    \ = array[end] - array[1]\n    end\n    return array\nend", "    if length(array)\
    \ == 0 \n        return array \n    else \n        sum1 = sum(array[1:end-1])\
    \ \n        sum2 = sum(array[end:]) \n        if sum1 % 2 == 0 \n            return\
    \ array[end-1:end] \n        else \n            return array[end-1:end-1] \n \
    \   end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>", "    if length(array) == 0 \n        return array \n    else \n\
    \        odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end])\
    \ \n        if odd_sum % 2 == 1 \n            return array\n        else \n  \
    \          return array.reverse\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n3.4 Sort an array in descending\
    \ order", "    if length(array) == 0 \n        return array \n    else \n    \
    \    odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n \
    \       if odd_sum % 2 == 1 \n            return array\n        else \n      \
    \      return array.reverse\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\nI came up with a solution using Julia's sort! and its optional argument\
    \ to specify whether it should sort ascending or descending (see the docs). \n\
    <code>", "    \n    if length(array) == 0 \n        return array\n    end\n  \
    \  \n    sum = 0\n    for i in 1:length(array) \n        sum += array[i]\n   \
    \ end\n    \n    if sum % 2 != 0 \n        array = reverse(array)\n    end\n \
    \   \n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times a value appears in an array.", "    \n    array = copy(array)\n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum += array[i]\n  \
    \  end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array,\
    \ by=(x->-abs(x)))\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the number of unique elements in the vector.", " \
    \   if length(array) == 0 \n        return array \n    else \n        odd_sum\
    \ = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            return array\n        else \n            return array.reverse\n\
    \    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if length(array)\
    \ == 0 \n        return array \n    end\n    \n    sum_array = sum(array)\n  \
    \  if sum_array % 2 == 0 \n        sort_array = array\n    else\n        sort_array\
    \ = reverse(array)\n    end\n    \n    sort_array = sort_array[sort_array .!=\
    \ 0]\n    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>", " \
    \   array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of an array that satisfies a given condition. For example,\
    \ given an array [5, 7, 9, 10, 4, 3, 6], return 7 if the first element of the\
    \ array is greater than 5, and -1 otherwise.", "    if length(array) == 0 \n \
    \       return array\n    end\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 != 0\n        sorted =\
    \ sort_array(reverse(array))\n        return sorted + [sum]\n    else\n      \
    \  sorted = sort_array(reverse(array))\n        return sorted + [sum]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) == []\n@assert\
    \ sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\
    </cell>\n<text>\n4.3 Sort an array in descending order", "    if length(array)\
    \ == 0 \n        return array \n    \n    sum = 0\n    for i in array\n      \
    \  sum += i\n    end\n    \n    if sum % 2 != 0\n        array = reverse( array\
    \ )\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(array) == 0 \n        return array \n    \n    sum = 0\n    for i\
    \ in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n        push!(array,\
    \ sum)\n        push!(array, 0)\n    end\n    \n    push!(array, 0)\n    \n  \
    \  push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n   \
    \ \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    \n    push!(array, 0)\n    \n    push!(array,\
    \ 0)\n", "    \n    array = copy(array)\n    \n    if length(array) == 0 \n  \
    \      return array\n    end\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 != 0\n        sort_array(reverse(array))\n\
    \    else\n        sort_array(array)\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\nPart III: Binary Search", "    if length(array) == 0 \n     \
    \   return array \n    \n    sum = 0\n    for i in array\n        sum += i\n \
    \   end\n    \n    if sum % 2 != 0 \n        array = reverse(array)\n    end\n\
    \    \n    return array\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 == 1\n\
    \        array.sort!\n    else\n        array.reverse!\n    end\n    \n    return\
    \ array\nend", "    if length(array) == 0 \n        return array \n    else \n\
    \        odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end])\
    \ \n        if odd_sum % 2 == 1 \n            return array\n        else \n  \
    \          return array.reverse\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ a dscore=0 |>\n<code>", "    if length(array) == 0 \n        return array \n\
    \    \n    sum_array = sum(array)\n    if sum_array % 2 == 1 \n        array =\
    \ reverse(array) \n    end", "    if length(array) == 0 \n        return array\
    \ \n    else \n        odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end])\
    \ \n        if odd_sum % 2 == 0 \n            return array \n        else \n \
    \           return reverse(array) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,arrays,julia |>\n<code>", "    if length(array) == 0 \n    \
    \    return array \n    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    \n    if sum % 2 != 0\n        push!(array, sum)\n        push!(array,\
    \ -sum)\n    end\n    \n    array = sort(array)\n    \n    return array\nend",
  "    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = reverse(array) \n        end \n\
    \        even = sum(array) div 2 \n        if even \n            array = reverse(array)\
    \ \n        end \n        array = sort(array) \n        if odd \n            array\
    \ = reverse(array) \n        end \n        return array \n    end \nend \n</cell>\n\
    <code language=julia-1.5>\n@assert sort_array([]) == [] \n@assert sort_array([5])\
    \ == [5] \n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5] \n@assert\
    \ sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0] \n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector.", "    \n    sum = 0\n    for i in array\n  \
    \      sum += i\n    end\n    if sum % 2 == 1\n        sort(array)\n    else\n\
    \        sort(array, by=reverse)\n    end\n    return array\nend", "    if length(array)\
    \ == 0 \n        return array \n    \n    sum = 0\n    for i in array\n      \
    \  sum += i\n    end\n    \n    if sum % 2 == 1 \n        sorted = reverse(array)\
    \ \n    else\n        sorted = array \n    end\n    \n    sorted = sort(sorted)\n\
    \    \n    return sorted \nend\n</cell>\n<code language=julia-1.5>", "    array\
    \ = copy(array)\n    array.sort()\n    return array\nend", "    if length(array)\
    \ == 0 \n        return array\n    end\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 != 0\n        push!(array,\
    \ sum)\n        push!(array, 0)\n    end\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n \
    \   push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n    push!(array,\
    \ 0)\n    \n    push!(array, 0)\n    push!(array, 0)\n    \n    push!(array, 0)\n\
    \    push!(array, ", "    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    if sum % 2 != 0\n        sort!(array)\n    else\n        sort!(array,\
    \ reverse=true)\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes an array of integers and returns the sum of the first and last elements.",
  "    \n    if length(array) == 0 \n        return array\n    end", "    if length(array)\
    \ == 0 \n        return array \n    \n    sum_array = sum(array) \n    if sum_array\
    \ % 2 != 0 \n        array = reverse(array) \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 == 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 != 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 != 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 != 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 != 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 != 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 != 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 != 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 != 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) \n    if sum_array % 2 == 0 \n        array = reverse(array) \n\
    \    \n    sum_array = sum(array) \n    if sum_array % 2 != 0 \n        array\
    \ = reverse(array) \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 0 \n        array = reverse(array) \n    \n    sum_array = sum(array) \n   \
    \ if sum_array % 2 != 0 \n        array = reverse(array) \n    \n    sum_array\
    \ = sum(array) ", "    if length(array) == 0 \n        return array \n    \n \
    \   sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if sum %\
    \ 2 != 0 \n        sorted = reverse(array) \n    else\n        sorted = array\
    \ \n    end\n    \n    return sorted \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(array) == 0 \n        return array \n    \n    sum = 0\n    for i\
    \ in array\n        sum += i\n    end\n    \n    if sum % 2 != 0 \n        array\
    \ = reverse(array) \n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>",
  "    if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = array[2:end] \n            array\
    \ = reverse(array) \n        else \n            array = array[1:end-1] \n    \
    \        array = reverse(array) \n            array = reverse(array) \n      \
    \  end \n        return array \n    end \nend \n</cell>\n<code language=julia-1.5>",
  "    if length(array) == 0 \n        return array \n    else \n        sum_array\
    \ = sum(array) \n        if sum_array % 2 == 1 \n            array = reverse(array)\
    \ \n        else \n            array = sort(array) \n        end \n        return\
    \ array \n    end \nend \n</cell>\n<code language=julia-1.5>", "    sum = 0\n\
    \    for i in array\n        sum += i\n    end\n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, lt=reverse)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>", "    if length(array) == 0 \n        return array\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 != 0 \n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5,\
    \ 6])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the first and last elements.", "    if length(array)\
    \ == 0 \n        return array \n    else \n        odd_sum = sum(array[1:end-1])\
    \ \n        even_sum = sum(array[2:end]) \n        if odd_sum % 2 == 1 \n    \
    \        return array\n        else \n            return array.reverse\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    if sum % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the given array in ascending order.", "    \n    if length(array)\
    \ == 0 \n        return array \n    end \n    \n    sum = 0\n    \n    for ele\
    \ in array \n        sum += ele \n    end \n    \n    if sum % 2 == 1 \n     \
    \   return reverse(array) \n    end \n    \n    sum = 0\n    \n    for ele in\
    \ array \n        sum += ele \n    end \n    \n    if sum % 2 == 0 \n        return\
    \ array \n    end \n    \n    sum = 0\n    \n    for ele in array \n        sum\
    \ += ele \n    end \n    \n    if sum % 2 == 1 \n        return reverse(array)\
    \ \n    end \n    \n    sum = 0\n    \n    for ele in array \n        sum += ele\
    \ \n    end \n    \n    if sum % 2 == 0 \n        return array \n    end \n  \
    \  \n    sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n\
    \    \n    if sum % 2 == 1 \n        return reverse(array) \n    end \n    \n\
    \    sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n   \
    \ \n    if sum % 2 == 0 \n        return array \n    end \n    \n    sum = 0\n\
    \    \n    for ele in array \n        sum += ele \n    end \n    \n    if sum\
    \ % 2 == 1 \n        return reverse(array) \n    end \n    \n    sum = 0\n   \
    \ \n    for ele in array \n        sum += ele \n    end \n    \n    if sum % 2\
    \ == 0 \n        return array \n    end \n    \n    sum = 0\n    \n    for ele\
    \ in array \n        sum += ele \n    end \n    \n    if sum % 2 == 1 \n     \
    \   return reverse(array) \n    end \n    \n    sum = 0\n    \n    for ele in\
    \ array \n        sum += ele \n    end \n    \n    if sum % 2 == 0 \n        return\
    \ array \n    end \n    \n    sum = 0\n    \n    for ele in array \n        sum\
    \ += ele \n    end \n    \n    if sum % 2 == 1 \n        return reverse(array)\
    \ \n    end \n    \n    sum = 0\n    \n    for ele in array \n        sum += ele\
    \ \n    end \n    \n    if sum % 2 == 0 \n        return array \n    end \n  \
    \  \n    sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n\
    \    \n    if sum % 2 == 1 \n        return reverse(array) \n    end \n    \n\
    \    sum = 0\n    \n    for ele in array \n        sum += ele \n    end \n   \
    \ \n    if sum % 2 == 0 \n", "    if length(array) == 0 \n        return array\
    \ \n    end\n    \n    sum = 0\n    for i in 1:length(array) \n        sum +=\
    \ array[i]\n    end\n    \n    if sum % 2 != 0 \n        sorted = sort_array(array[1:end-1])\
    \ \n        return vcat(array, sorted) \n    else \n        sorted = sort_array(array[end+1:end])\
    \ \n        return vcat(sorted, array[1:end-1]) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(array) == 0 \n        return array \n \
    \   \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0 \n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given value appears in the given array.", "    if length(array) == 0 \n  \
    \      return array \n    \n    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    \n    if sum % 2 == 1 \n        sort!(array)\n    else\n       \
    \ sort!(array, reverse=true)\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the maximum of the integers in the vector. \nWrite a\
    \ function that takes a vector of integers and returns the minimum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector, multiplied by the square of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector, multiplied by the square of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector, divided by the square of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector, divided by the square of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector, multiplied by the square of the integers\
    \ in the vector, divided by the square of the integers in the vector. \nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector, divided by the square of the integers in the vector, multiplied\
    \ by the square of the integers in the vector. \nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector, divided\
    \ by the square of the integers in the vector, multiplied by the square of the\
    \ integers in the vector. \nWrite a function that takes a vector of integers and\
    \ returns the sum of the integers in the vector, divided by the square of the\
    \ integers in the vector, multiplied by the square of the integers in the vector,\
    \ divided by the square of the integers in the vector. \nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers in the vector,\
    \ divided by the square of the integers in the vector, multiplied by the square\
    \ of the integers in the vector, divided by the square of the integers in the\
    \ vector. \nWrite a function that takes a vector of integers and returns the sum\
    \ of the integers in the vector, divided by the square of the integers in the\
    \ vector, multiplied by the square of the integers in the vector, divided by the\
    \ square of the integers in the vector, multiplied by the square of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the sum of the integer", "    if sum(array) == 0 \n        return array\n  \
    \  end\n    \n    odd = false\n    even = false\n    \n    if sum(array) % 2 ==\
    \ 0 \n        even = true\n    end\n    \n    if sum(array) % 2 == 1 \n      \
    \  odd = true\n    end\n    \n    if odd \n        array = sort_odd_array(array)\n\
    \    elseif even \n        array = sort_even_array(array)\n    end\n    \n   \
    \ return array\nend", "    if length(array) == 0 \n        return array \n   \
    \ \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if sum\
    \ % 2 != 0\n        array = reverse(array)\n    end\n    \n    return array\n\
    end", "    \n    if length(array) == 0 \n        return array \n    end ", " \
    \   array = copy(array)\n    \n    sum = 0\n    for i in array\n        sum +=\
    \ i\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n     \
    \   sort(array, by=reverse)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sort_array([]) == []\n@assert sort_array([5]) ==\
    \ [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.2 Sum array",
  "    if length(array) == 0 \n        return array \n    end\n    \n    sum = 0\n\
    \    for i in 1:length(array) \n        sum += array[i]\n    end\n    \n    if\
    \ sum % 2 != 0 \n        array = reverse(array) \n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for i in array\n \
    \       sum += i\n    end\n    if sum % 2 == 1\n        sort_array(reverse(array))\n\
    \    else\n        array\n    end\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        even = sum(array) div 2 \n        if odd > even \n         \
    \   odd_sorted = sort_array(array[end-1:end]) \n            even_sorted = sort_array(array[end-1:end-1])\
    \ \n            return merge(odd_sorted, even_sorted) \n        else \n      \
    \      even_sorted = sort_array(array[end-1:end]) \n            odd_sorted = sort_array(array[end-1:end-1])\
    \ \n            return merge(odd_sorted, even_sorted) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    array = copy(array)\n    \n    if length(array)\
    \ == 0 \n        return array\n    end", "    if length(array) == 0 \n       \
    \ return array \n    \n    sum = 0\n    for i in array\n        sum += i\n   \
    \ end\n    \n    if sum % 2 != 0 \n        array = reverse(array)\n    end\n \
    \   \n    return array\nend", "    sum = 0\n    for i in array\n        sum +=\
    \ i\n    end\n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array,\
    \ by=reverse)\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.2 Sort an Array of Strings\n\
    Given an array of strings, return a new array with the strings sorted in alphabetical\
    \ order.", "    if length(array) == 0 \n        return array \n    else \n   \
    \     sum_array = sum(array) \n        if sum_array % 2 == 1 \n            array\
    \ = sort_array(array) \n        else \n            array = sort_array(reverse(array))\
    \ \n        end\n        return array \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2", "    array =\
    \ sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n  \
    \  end\n    return array\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/29797888)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to sort an\
    \ array in ascending order if the sum of the first and last element is odd, or\
    \ in descending order if the sum of the first and last element is even. He also\
    \ wants to do this without changing the original array. He also wants to do this\
    \ without using any packages.\n<|/ c |>\n<| c |>\nThe question was \"How to sort\
    \ an array in Julia?\" not \"How to sort an array in Julia without using any packages?\"\
    \ The answer to the question \"How to sort an array in Julia?\" was \"Use a package\"\
    . Your answer does not answer the question \"How to sort an array in Julia?\"\
    \ it only answers the question \"How to sort an array in Julia without using any\
    \ packages?\" which is not what the question was about.\n<|/ c |>\n<| c |>\nThe\
    \ question was \"How to sort an array in Julia?\" not \"How to sort an array in\
    \ Julia without using any packages?\" The answer to the question \"How to sort\
    \ an array in Julia?\" was \"Use a package\". Your answer does not answer the\
    \ question \"How to sort an array in Julia?\" it only answers the question \"\
    How to sort an array in Julia without using any packages?\" which is not what\
    \ the question was about.\n<|/ c |>\n<| c |>\nThe question was \"How to sort an\
    \ array in Julia?\" not \"How to sort an array in Julia without using any packages?\"\
    \ The answer to the question \"How to sort an array in Julia?\" was \"Use a package\"\
    . Your answer does not answer the question \"How to sort an array in Julia?\"\
    \ it only answers the question \"How to sort an array in Julia without using any\
    \ packages?\" which is not what the question was about.\n<|/ c |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>", "    if length(array) == 0 \n        return array \n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 1 \n        array = reverse(array)\n \
    \   end\n    \n    sum_array = sum(array)\n    if sum_array % 2 == 0 \n      \
    \  array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    array = copy(array)\n    sort(array)\n    return\
    \ array\nend", "    array = copy(array)\n    array.sort()\n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    array = sort(array)\n    if sum(array)\
    \ % 2 == 1\n        array = reverse(array)\n    end\n    return array\nend", " \
    \   array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = sort_array_desc(array) \n    else\
    \ \n        array = sort_array_asc(array) \n    return array \nend", "    array\
    \ = copy(array)\n    \n    sum = 0\n    for i in array\n        sum += i\n   \
    \ end\n    \n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(reverse,\
    \ array)\n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times the given value appears in the given array.", " \
    \   \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 == 1\n        array.sort!\n    else\n        array.reverse!\n    end\n\
    \    \n    return array\nend", "    if length(array) == 0 \n        return array\
    \ \n    end\n    \n    sum = 0\n    \n    for x in array \n        sum += x \n\
    \    end\n    \n    if sum % 2 != 0 \n        push!(array, sum)\n        push!(array,\
    \ -sum)\n    end\n    \n    array = sort(array)\n    \n    return array\nend",
  "    if length(array) == 0 \n        return array \n    \n    sum = 0\n    for x\
    \ in array \n        sum += x \n    end\n    \n    if sum % 2 == 1 \n        sorted\
    \ = sort_array(array[1:end-1]) \n        return vcat(array, sorted) \n    else\
    \ \n        sorted = sort_array(array[2:end]) \n        return vcat(array[1:end-1],\
    \ sorted) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    array = sort(array)\n\
    \    if sum(array) % 2 == 1\n        array = reverse(array)\n    end\n    return\
    \ array\nend", "    \n    sum = 0\n    for i in array\n        sum += i\n    end\n\
    \    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array, by=reverse)\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of times a given value appears in an array.", "    \n    array =\
    \ copy(array)\n    \n    if sum(array) == sum(array[end-1:end])\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend", "    if length(array) == 0 \n        return\
    \ array \n    end", "    if length(array) == 0 \n        return array \n    else\
    \ \n        odd = sum( array[1:end-1] ) % 2 \n        if odd \n            array[1:end-1],\
    \ array[end] = array[end], array[1:end-1] \n        else \n            array[1:end-1],\
    \ array[end] = array[1:end-1], array[end] \n        return array \n    end\nend\n\
    </cell>\n<text>\nProblem 4\nWrite a function that takes a vector of non-negative\
    \ integers and returns the sum of the numbers in the vector.", "    if length(array)\
    \ == 0 \n        return array \n    else \n        sum1 = sum(array[1:end-1])\
    \ \n        sum2 = sum(array[2:end]) \n        if sum1 % 2 == 0 \n           \
    \ return array \n        else \n            return reverse(array) \n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    array = sort(array)\n    if sum(array)\
    \ % 2 == 1\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    if length(array) == 0 \n        return\
    \ array \n    end \n    \n    sum_array = sum(array) \n    \n    if sum_array\
    \ % 2 == 1 \n        array = reverse(array) \n    end \n    \n    sum_array =\
    \ sum(array) \n    \n    if sum_array % 2 == 0 \n        array = reverse(array)\
    \ \n    end \n    \n    return array \nend \n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.5 Find all occurrences of an\
    \ element in a sorted array", "    array = copy(array)\n    array.sort()\n   \
    \ return array\nend", "    if length(array) == 0 \n        return array\n    end\n\
    \    \n    sum = 0\n    for x in array\n        sum += x\n    end\n    \n    if\
    \ sum % 2 == 0 \n        sorted = sort_array(array[1:end-1]) + [array[end]]\n\
    \    else\n        sorted = sort_array(array[1:end-1]) + [array[end], array[1]]\n\
    \    end\n    \n    return sorted\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if sum(array) == 0 \n        return array\n    elseif sum(array) % 2 != 0\
    \ \n        array = reverse(array)\n    end\n    array = sort(array)\n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>", "    sum = 0\n    for i in\
    \ array\n        sum += i\n    end\n    if sum % 2 == 1\n        array.reverse()\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3,\
    \ 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5,\
    \ 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns a sorted array\
    \ of the given array in ascending order if the sum of the first and last element\
    \ is odd, or in descending order if the sum of the first and last element is even.",
  "    if length(array) == 0 \n        return array \n    end\n    \n    sum = 0\n\
    \    for x in array \n        sum += x \n    end\n    \n    if sum % 2 == 1 \n\
    \        array = reverse(array) \n    end\n    \n    array = sort(array) \n  \
    \  \n    return array\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([])\
    \ == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the first n positive integers in the given array.", "    if length(array)\
    \ == 0 \n        return array \n    end\n    \n    sum = 0\n    for i in 1:length(array)\
    \ \n        sum += array[i]\n    end\n    \n    if sum % 2 != 0 \n        array\
    \ = reverse(array) \n    end\n    \n    return array\nend", "    sum = 0\n   \
    \ for i in array\n        sum += i\n    end\n    if sum % 2 != 0\n        array.sort!\n\
    \    else\n        array.reverse!\n    end\n    return array\nend\n</code>\n<|/\
    \ a tags=sorting,arrays,julia |>\n<| a dscore=2 |>\nI like using sort! for sorting\
    \ arrays. It's a little more concise than using sort. \n<code>\njulia> a = [5,4,3,2,1]\n\
    5-element Array{Int64,1}:\n 5\n 4\n 3\n 2\n 1", "    array = copy(array)\n   \
    \ array.sort()\n    return array\nend", "    array = copy(array)\n    \n    if\
    \ sum(array) % 2 == 1\n        array = sort_array_desc(array)\n    else\n    \
    \    array = sort_array_asc(array)\n    end\n    \n    return array\nend", " \
    \   if length(array) == 0 \n        return array \n    end\n    \n    sum_array\
    \ = sum(array)\n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n\
    \        sort_array = reverse(array)\n    end\n    \n    sort_array = sort_array[1:end-1]\n\
    \    \n    return sort_array\nend\n</cell>\n<text>\nQ2. Write a function that\
    \ takes a vector of integers and returns the sum of the numbers in the vector.",
  "    \n    if sum(array) == 0 \n        return array\n    end\n    \n    \n    if\
    \ sum(array) % 2 != 0 \n        array = reverse(array)\n    end\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    sum = 0\n    for i in array\n        sum\
    \ += i\n    end\n    \n    if sum % 2 != 0\n        array = reverse(array)\n \
    \   end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend", "    if length(array) == 0 \n        return\
    \ array \n    \n    sum_array = sum(array) \n    \n    if sum_array % 2 == 1 \n\
    \        array = sort_array(array[end-1:end]) \n        return array \n    else\
    \ \n        array = sort_array(array[end-1:end]) \n        return reverse(array)\
    \ \n    end \nend ", "    if length(array) == 0 \n        return array \n    else\
    \ \n        odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end])\
    \ \n        if odd_sum % 2 == 1 \n            return array\n        else \n  \
    \          return array.reverse\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    if length(array) == 0 \n      \
    \  return array \n    end", "    if length(array) == 0 \n        return array\
    \ \n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n \
    \   if sum % 2 != 0\n        array = reverse(array)\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5,\
    \ 6])\n</cell>\n<text>\n4.2 Sort an array in descending order", "    if length(array)\
    \ == 0 \n        return array \n    \n    sum = 0\n    for i in array\n      \
    \  sum += i \n    end\n    \n    if sum % 2 == 0 \n        sort_array(reverse(array))\n\
    \    else \n        sort_array(array)\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum %\
    \ 2 == 1\n        array = reverse( array )\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times a given value appears in an array.",
  "    \n    array = copy(array)\n    \n    if length(array) == 0 \n        return\
    \ array\n    end", "    if sum(array) == 0 \n        return array \n    else \n\
    \        odd = sum(array) % 2 != 0 \n        even = sum(array) % 2 == 0 \n   \
    \     if odd \n            array = sort_array(array[1::-1]) \n        else \n\
    \            array = sort_array(array[::-1]) \n        return array \n    end\n\
    end\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=1 |>\n<code>", " \
    \   \n    if length(array) == 0 \n        return array \n    end ", "    array\
    \ = copy(array)\n    array.sort()\n    return array\nend", "    array = sort(array)\n\
    \    if sum(array) % 2 == 1\n        array = reverse(array)\n    end\n    return\
    \ array\nend", "    \n    sum = 0\n    for i in array\n        sum += i\n    end\n\
    \    \n    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array,\
    \ reverse=true)\n    end\n    \n    return array\nend", "    \n    array = copy(array)\n\
    \    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    \n    if\
    \ sum % 2 != 0\n        sort_array(reverse(array))\n    else\n        sort_array(array)\n\
    \    end\nend", "    \n    if length(array) == 0 \n        return array\n    end\n\
    \    \n    sum = 0\n    for i in 1:length(array)\n        sum += array[i]\n  \
    \  end\n    \n    if sum % 2 != 0\n        array = reverse( array )\n    end\n\
    \    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n# test your\
    \ code\n@test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Sort a 2D array\nGiven a 2D array\
    \ arr[][] of integers, sort the array in ascending order according to the values\
    \ in the first column.", "    sum = 0\n    for i in array\n        sum += i\n\
    \    end\n    if sum % 2 == 1\n        array = reverse(array)\n    end\n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5,\
    \ 6])\n</cell>\n<text>\nQuestion 3\nWrite a Julia function named sort_array_desc\
    \ that takes in an array of non-negative integers and returns the sorted array\
    \ in descending order.", "    if length(array) == 0 \n        return array \n\
    \    end\n    \n    sum = 0\n    for i in array\n        sum += i\n    end\n \
    \   \n    if sum % 2 != 0 \n        array = reverse(array)\n    end\n    \n  \
    \  return array\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([])\
    \ == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5])\
    \ == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4,\
    \ 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Sum array elements\nGiven an array of non-negative\
    \ integers, return a new array consisting of the sum of the numbers in the original\
    \ array.", "    if length(array) == 0 \n        return array \n    end\n    \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 0 \n        array = sort_array_desc(array)\
    \ \n    else \n        array = sort_array_asc(array) \n    end\n    return array\n\
    end", "    array = sort(array)\n    if sum(array) % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work\
    \ if the array is all negative numbers. Try `sort_array([-5, -4, -3, -2, -1, 0,\
    \ 1, 2, 3, 4, 5])`.\n<|/ c |>\n<| c |>\nI believe this should work, since `sort`\
    \ will sort negative numbers first. `sort_array([-5, -4, -3, -2, -1, 0, 1, 2,\
    \ 3, 4, 5])` returns `[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]`.\n<|/ c |>\n<| c\
    \ |>\nYes, it does. I tested it before posting. My bad.\n<|/ c |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>", "    if length(array) == 0 \n        return array \n    end", " \
    \   \n    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum %\
    \ 2 == 1\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.3>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a value appears\
    \ in an array.", "    if sum(array) == 0 \n        return array\n    end", " \
    \   \n    sum_array = sum(array)\n    if sum_array % 2 == 1\n        sort_array\
    \ = array[end-1:end]\n    else\n        sort_array = array[end-1:end]\n      \
    \  sort_array.reverse\n    end\n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nPart 3: Combining Functions\n\
    Julia has many built-in functions to combine functions. Here are some examples:",
  "    if length(array) == 0 \n        return array \n    else \n        odd = false\n\
    \        even = false\n        sum = 0\n        for i in array\n            sum\
    \ += i\n            if sum % 2 == 0\n                even = true\n           \
    \ else\n                odd = true\n            end\n        end\n        if odd\n\
    \            sort_array_odd(array, sum)\n        else\n            sort_array_even(array,\
    \ sum)\n        end\n    end\nend", "    array = copy(array)\n    \n    if length(array)\
    \ == 0 \n        return array\n    end", "    if length(array) == 0 \n       \
    \ return array \n    else \n        odd = sum( array[1:end-1] ) % 2 \n       \
    \ even = sum( array[1:end-1] ) % 2 != 0 \n        if odd \n            return\
    \ reverse array \n        else \n            return array \n    end\nend\n</cell>\n\
    <text>\nQ. Given an array of non-negative integers, return a copy of the given\
    \ array after sorting in ascending order if the sum( first index value, last index\
    \ value) is odd, or sort it in descending order if the sum( first index value,\
    \ last index value) is even.", "    \n    sum = 0\n    for i in array\n      \
    \  sum += i\n    end\n    if sum % 2 != 0\n        array = reverse(array)\n  \
    \  end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the first and last element of the vector.",
  "    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n@test sort_array([])\
    \ == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) ==\
    \ [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3,\
    \ 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a given array, and if the array is empty, return -1.", "    \n  \
    \  sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 == 1\n\
    \        sort!(array)\n    else\n        sort!(array, reverse=true)\n    end\n\
    \    return array\nend\n</cell>\n<code language=julia-1.5>", "    if length(array)\
    \ == 0 \n        return array \n    else \n        odd = sum( array[1:end-1] )\
    \ % 2 \n        even = sum( array[1:end-1] ) % 2 != 0 \n        if odd \n    \
    \        array[1:end-1], array[end] = array[end], array[1:end-1] \n        else\
    \ \n            array[1:end-1], array[end] = array[1:end-1], array[end] \n   \
    \     return array \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ length(array) == 0 \n        return array \n    \n    sum = 0\n    for i in\
    \ array\n        sum += i\n    end\n    \n    if sum % 2 == 1 \n        array\
    \ = reverse(array)\n    end\n    \n    return array\nend", "    \n    array =\
    \ copy(array)\n    \n    if sum(array) % 2 != 0\n        array = sort_array_desc(array)\n\
    \    else\n        array = sort_array_asc(array)\n    end\n    \n    return array\n\
    end", "    sum = 0\n    for x in array\n        sum += x\n    end\n    if sum\
    \ % 2 == 1\n        sort_array(reverse(array))\n    else\n        array\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in the given array.", "    \n    sum = 0\n    \n\
    \    for i in array\n        sum += i\n    end\n    \n    if sum % 2 != 0\n  \
    \      array = sort_array(array[1...end-1]) \n        push!(array, array[1])\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2, 4,\
    \ 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the number of unique elements in the\
    \ vector.", "    if length(array) == 0 \n        return array \n    else \n  \
    \      odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n\
    \        if odd_sum % 2 == 1 \n            array = array[end:-1:1]\n        else\
    \ \n            array = array[1:end-1]\n        end\n    end\n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    array = sort(array)\n    if sum(array)\
    \ % 2 == 1\n        array = reverse(array)\n    end\n    return array\nend", " \
    \   if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\
    \ \n    if sum_array % 2 == 0 \n        sort_array = array\n    else\n       \
    \ sort_array = reverse(array)\n    end\n    \n    sum_array = sum(sort_array)\
    \ \n    if sum_array % 2 == 1 \n        sort_array = reverse(sort_array)\n   \
    \ end\n    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_array([])\n</cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n\
    <code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a value appears in an array.", "    if length(array)\
    \ == 0 \n        return array \n    else \n        odd = sum( array[1:end-1] )\
    \ % 2 \n        if odd \n            array[1:end-1] \n        else \n        \
    \    array[end-1:end] \n    end\nend\n</cell>\n<text>\nQ2. Write a function that\
    \ takes an array of integers and returns the sum of the numbers in the array.",
  "    \n    array = copy(array)\n    \n    if sum(array) % 2 == 1\n        array\
    \ = sort_array_desc(array)\n    else\n        array = sort_array_asc(array)\n\
    \    end\n    \n    return array\nend", "    if length(array) == 0 \n        return\
    \ array \n    else \n        sum1 = sum(array[1:end-1]) \n        sum2 = sum(array[end:])\
    \ \n        if sum1 % 2 == 0 && sum2 % 2 == 1 \n            return array \n  \
    \      else \n            return sort_array(array[end:]) .+ array .+ sort_array(array[1:end-1])\
    \ \n    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a dscore=1 |>\n\
    <code>", "    if length(array) == 0 \n        return array \n    else \n     \
    \   sum1 = sum(array[1:end-1]) \n        sum2 = sum(array[end:]) \n        if\
    \ sum1 % 2 == 0 \n            array = array[sortperm(array)]\n        else \n\
    \            array = array[sortperm(array,rev=true)]\n        end\n        return\
    \ array \n    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| c |>\n\
    This doesn't work for me. `sortperm` returns `ERROR: MethodError: no method matching\
    \ sortperm(::Array{Int64,1})`\n<|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n\
    <|/ c |>\n<| c |>\nIt works for me in Julia 0.6.2\n<|/ c |>\n<| c |>\nIt works\
    \ for me in Julia 0.6.2\n<|/ c |>\n<| a |>\nI came up with this solution:\n<code>",
  "    \n    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum %\
    \ 2 != 0\n        sort_array(array) \n    else\n        sort_array(reverse(array))\n\
    \    end\nend\n</code>\n<|/ a tags=sorting,arrays,julia |>\n<| a tags=sorting,arrays,julia\
    \ |>\n<code>", "    if length(array) == 0 \n        return array \n    end\n \
    \   \n    sum_array = sum(array)\n    if sum_array % 2 == 1 \n        array =\
    \ reverse(array) \n    end\n    \n    sum_array = sum(array)\n    if sum_array\
    \ % 2 == 0 \n        array = reverse(array) \n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    if sum(array) == 0 \n        return\
    \ array\n    else \n        odd = sum(array) mod 2 != 0\n        if odd \n   \
    \         array = reverse(array)\n            array = sort(array)\n        else\
    \ \n            array = sort(reverse(array))\n            array = reverse(array)\n\
    \        return array\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  if length(array) == 0 \n        return array \n    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1 \n        array = reverse(array) \n    end\n    \n\
    \    sum_array = sum(array)\n    if sum_array % 2 == 0 \n        array = reverse(array)\
    \ \n    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of elements in the given array that are greater than the\
    \ given value.", "    \n    if length(array) == 0 \n        return array\n   \
    \ end", "    array = sort(array)\n    if sum(array) % 2 == 1\n        array =\
    \ reverse(array)\n    end\n    return array\nend\n</cell>\n<code language=julia-1.0>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the given array. Do not use loops.", "    array = copy(array)\n\
    \    array.sort()\n    return array\nend", "    if length(array) == 0 \n     \
    \   return array \n    \n    sum_array = sum(array) \n    if sum_array % 2 ==\
    \ 1 \n        array = sort_array(array[end-1:end]) \n        array = [array[1],\
    \ array[0]] \n    else \n        array = sort_array(array[end-1:end]) \n     \
    \   array = [array[-1], array[-2]] \n    return array \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Sort a 2D array\nGiven a\
    \ 2D array arr[][] of size m x n, sort arr[][] in ascending order by the sum of\
    \ the first column and descending order by the sum of the second column.", " \
    \   if length(array) == 0 \n        return array \n    \n    sum = 0\n    for\
    \ i in array\n        sum += i\n    end", "    if length(array) == 0 \n      \
    \  return array \n    end\n    \n    sum = 0\n    for i in 1:length(array) \n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 == 1 \n        sorted\
    \ = sort_array(array[1:end-1]) \n        sorted[end] = array[end] \n        return\
    \ sorted \n    end\n    \n    sorted = sort_array(array[1:end-1]) \n    sorted[end]\
    \ = array[end] \n    sorted[end-1] = array[end-1] \n    return sorted \nend\n\
    </cell>\n<code language=julia-1.5>", "    array = sort(array)\n    if sum(array)\
    \ % 2 == 1\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the sum of the given\
    \ array.", "    array = copy(array)\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, by=(x->-x, rev=true))\n    end\n    \n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) == []\n\
    @assert sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0,\
    \ 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2,\
    \ 1, 0]\n</cell>\n<text>\nPart III. Sum array in Julia\nNow let's see how we can\
    \ use Julia to solve the problem of summing an array in O(n) time.", "    if length(array)\
    \ == 0 \n        return array \n    end\n    \n    sum1 = sum(array[1:end-1])\n\
    \    sum2 = sum(array[end:])\n    \n    if sum1 % 2 == 0 \n        array = array[sortperm(array)]\n\
    \        return array \n    end\n    \n    if sum2 % 2 == 0 \n        array =\
    \ array[sortperm(array, reverse=true)]\n        return array \n    end\n    \n\
    \    array = array[sortperm(array)]\n    return array \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Find all occurrences of an\
    \ element in a sorted array", "    array = copy(array)\n    sort(array)\n    return\
    \ array\nend", "    if length(array) == 0 \n        return array \n    end\n \
    \   \n    sum_array = sum(array)\n    if sum_array % 2 == 0 \n        sort_array\
    \ = array\n    else\n        sort_array = reverse(array)\n    end\n    \n    sum_array\
    \ = sum(sort_array)\n    if sum_array % 2 == 1 \n        sort_array = reverse(sort_array)\n\
    \    end\n    \n    return sort_array\nend\n</cell>\n<code language=julia-1.5>",
  "    if length(array) == 0 \n        return array \n    else \n        odd_sum =\
    \ sum(array[1:end-1]) \n        even_sum = sum(array[2:end]) \n        if odd_sum\
    \ % 2 == 1 \n            array = array[2:end] \n        else \n            array\
    \ = array[1:end-1] \n        end \n    end \n    return array \nend \n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "    if length(array) == 0 \n        return\
    \ array \n    else \n        sum_array = sum(array) \n        if sum_array % 2\
    \ == 1 \n            array = sort_array(array[end-1:end]) \n        else \n  \
    \          array = sort_array(array[end-1:end]) \n            array = [array[end-1],\
    \ array[end]]\n        end\n        return array \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(array) == 0 \n        return array \n \
    \   else \n        odd_sum = sum(array[1:end-1]) \n        even_sum = sum(array[2:end])\
    \ \n        if odd_sum % 2 == 1 \n            array = array[2:end] \n        else\
    \ \n            array = array[1:end-1] \n        end \n    end \n    return array\
    \ \nend \n</cell>\n<code language=julia-1.5>\n@assert sort_array([]) == []\n@assert\
    \ sort_array([5]) == [5]\n@assert sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2,\
    \ 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the numbers\
    \ in the given array.", "    array = copy(array)\n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    if sum % 2 != 0\n        sort!(array)\n    else\n\
    \        sort!(array, by = x -> -x)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the given array's elements.", "    array\
    \ = copy(array)\n    sum = 0\n    for i in array\n        sum += i\n    end\n\
    \    if sum % 2 == 1\n        sort(array)\n    else\n        sort(array, by=(x->-x,\
    \ x->x))\n    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\n\
    @test sort_array([]) == []\n@test sort_array([5]) == [5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2, 4, 3, 0, 1, 5, 6])\
    \ == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the first n positive integers less than or equal to n.",
  "    sum = 0\n    for i in array\n        sum += i\n    end\n    if sum % 2 == 1\n\
    \        array = reverse(array)\n    end\n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(array) == 0 \n        return array \n \
    \   else \n        sum = 0\n        for i in array\n            sum += i\n   \
    \     end\n        if sum % 2 != 0 \n            reverse(array)\n        end\n\
    \        return array\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given an array of non-negative integers, return a copy of the given array\
    \ after sorting,\n    you will sort the given array in ascending order if the\
    \ sum( first index value, last index value) is odd,\n    or sort it in descending\
    \ order if the sum( first index value, last index value) is even.", "    array\
    \ = copy(array)\n    sort(array)\n    return array\nend", "    array = sort(array)\n\
    \    if sum(array) % 2 == 1\n        array = reverse(array)\n    end\n    return\
    \ array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n</cell>\n<code\
    \ language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0,\
    \ 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the given array.", "    array = sort(array)\n    if sum(array) % 2 != 0\n\
    \        array = reverse(array)\n    end\n    return array\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if length(array) == 0 \n        return array \n \
    \   end", "    if sum(array) == 0 \n        return array \n    else \n       \
    \ odd = sum(array) mod 2 \n        even = sum(array) div 2 \n        if odd >\
    \ even \n            array = sort_array(array[end:-1:1]) \n        else \n   \
    \         array = sort_array(array[end:-1:1]) \n            array = reverse(array)\
    \ \n        end \n        return array \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    @assert sort_array([]) == []\n@assert sort_array([5]) == [5]\n@assert sort_array([2,\
    \ 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@assert sort_array([2, 4, 3, 0, 1, 5,\
    \ 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\n4.3 Sort a vector in descending\
    \ order", "    if length(array) == 0 \n        return array \n    \n    sum =\
    \ 0\n    for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1\
    \ \n        array = reverse(array) \n    end\n    \n    array = sort(array) \n\
    \    \n    return array\nend\n</cell>\n<code language=julia-1.5>", "    if length(array)\
    \ == 0 \n        return array \n    else \n        sum = 0\n        for i in array\n\
    \            sum += i\n        end\n        if sum % 2 == 1 \n            reverse(array)\n\
    \        end\n        return array \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    array = copy(array)\n    sort_array(array)\n    return array\nend", "    if\
    \ length(array) == 0 \n        return array \n    else \n        odd_sum = sum(array[1:end-1])\
    \ \n        even_sum = sum(array[2:end]) \n        if odd_sum % 2 == 1 \n    \
    \        array = array[sortperm(array)]\n        else \n            array = array[sortperm(array,\
    \ reverse = true)]\n        return array \n    end\nend\n</code>\n<|/ a tags=sorting,julia\
    \ |>\n<| a dscore=0 |>\nThe Julia standard library has several sorting functions.\
    \ One of them is sortperm. \n<code>\njulia> sortperm([5,4,3,2,1])\n5-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a tags=sorting,julia |>\n<| c |>\nThis doesn't\
    \ answer the question. `sortperm` sorts the array in ascending order. OP wants\
    \ to sort it in descending order.\n<|/ c |>\n<| c |>\nThe question was \"how to\
    \ sort an array in descending order\", not \"how to sort an array in ascending\
    \ order\". `sortperm` does exactly what OP wants, it sorts the array in descending\
    \ order.\n<|/ c |>\n<| c |>\nThe question was \"how to sort an array in descending\
    \ order\", not \"how to sort an array in ascending order\". `sortperm` does exactly\
    \ what OP wants, it sorts the array in descending order.\n<|/ c |>\n<| c |>\n\
    The question was \"how to sort an array in descending order\", not \"how to sort\
    \ an array in ascending order\". `sortperm` does exactly what OP wants, it sorts\
    \ the array in descending order.\n<|/ c |>\n<| c |>\nThe question was \"how to\
    \ sort an array in descending order\", not \"how to sort an array in ascending\
    \ order\". `sortperm` does exactly what OP wants, it sorts the array in descending\
    \ order.\n<|/ c |>\n<| a tags=sorting,julia |>\nThe Julia standard library has\
    \ several sorting functions. One of them is sortperm. \n<code>\njulia> sortperm([5,4,3,2,1])\n\
    5-element Array{Int64,1}:\n 1\n 2\n 3\n 4\n 5\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis doesn't answer the question. `sortperm` sorts the array in ascending\
    \ order. OP wants to sort it in descending order.\n<|/ c |>", "    \n    sum =\
    \ 0\n    for i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1\n\
    \        array = reverse(array)\n    end\n    \n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_array([])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2, 4, 3, 0, 1, 5, 6])\n\
    </cell>\n<text>\n4.3 Merge Sorting\nMerge sorting is a sorting algorithm that\
    \ works by recursively splitting the input array into two halves and then merging\
    \ the two halves until only one element remains.", "    array = sort(array)\n\
    \    if sum(array) % 2 == 1\n        array = reverse(array)\n    end\n    return\
    \ array\nend", "    if length(array) == 0 \n        return array \n    else \n\
    \        sum_array = sum(array) \n        if sum_array % 2 == 0 \n           \
    \ array = sort_array(array) \n        else \n            array = sort_array(reverse(array))\
    \ \n        end \n        return array \n    end \nend \n</code>\n<|/ a tags=sorting,arrays,julia\
    \ |>\n<| a dscore=2 |>\n<code>", "    \n    if length(array) == 0 \n        return\
    \ array\n    end\n    \n    sum = 0\n    for i in 1:length(array) \n        sum\
    \ += array[i]\n    end\n    \n    if sum % 2 == 1 \n        array = reverse(array)\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the numbers in the given array.", "    if length(array) == 0 \n \
    \       return array \n    end", "    array = sort(array)\n    if sum(array) %\
    \ 2 != 0\n        array = reverse(array)\n    end\n    return array\nend\n</cell>\n\
    <code language=julia-1.5>\n@test sort_array([]) == []\n@test sort_array([5]) ==\
    \ [5]\n@test sort_array([2, 4, 3, 0, 1, 5]) == [0, 1, 2, 3, 4, 5]\n@test sort_array([2,\
    \ 4, 3, 0, 1, 5, 6]) == [6, 5, 4, 3, 2, 1, 0]\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first element of a given array, and if the array\
    \ is empty, return -1.", "    array = copy(array)\n    \n    sum = 0\n    for\
    \ i in array\n        sum += i\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, by = x -> -x)\n    end\n    \n    return array\n\
    end", "    if length(array) == 0 \n        return array \n    else \n        sum\
    \ = 0\n        for i in array\n            sum += i\n        end\n        if sum\
    \ % 2 == 1 \n            reverse(array)\n            return array \n        else\
    \ \n            return sort(array) \n        end\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of times a given value appears\
    \ in an array.", "    array = copy(array)\n    \n    sum = 0\n    for i in 1:length(array)\n\
    \        sum += array[i]\n    end\n    \n    if sum % 2 == 1\n        sort(array)\n\
    \    else\n        sort(array, by=(x->-x))\n    end\n    \n    return array\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    sum_array = sum(array)\n\
    \    if sum_array % 2 == 1\n        array = sort_array_desc(array)\n    else\n\
    \        array = sort_array_asc(array)\n    end\n    return array\nend", "   \
    \ \n    array = sort(array)\n    if sum(array) % 2 == 1\n        array = reverse(array)\n\
    \    end\n    \n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the given array's elements.", "    \n    sum = 0\n    for i in array\n\
    \        sum += i\n    end\n    if sum % 2 != 0\n        array = reverse(array)\n\
    \    end\n    return array\nend\n</cell>\n<code language=julia-1.5>\nsort_array([])\n\
    </cell>\n<code language=julia-1.5>\nsort_array([5])\n</cell>\n<code language=julia-1.5>\n\
    sort_array([2, 4, 3, 0, 1, 5])\n</cell>\n<code language=julia-1.5>\nsort_array([2,\
    \ 4, 3, 0, 1, 5, 6])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of times the given element appears in the given array.", "    if\
    \ sum(array) == 0 \n        return array \n    else \n        odd = sum(array)\
    \ mod 2 \n        if odd \n            array = sort_array(array[2:end-1]) \n \
    \           array = [array[1], array[2], array[3], array[4], array[5]]\n     \
    \   else \n            array = sort_array(array[1:end-1]) \n            array\
    \ = [array[1], array[2], array[3], array[4], array[5], array[6]]\n        return\
    \ array \n    end\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
