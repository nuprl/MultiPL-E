name: HumanEval_104_unique_digits
language: julia
prompt: "\"\"\"Given a list of positive integers x. return a sorted list of all \n\
  \    elements that hasn't any even digit.\n\n    Note: Returned list should be sorted\
  \ in increasing order.\n    \n    For example:\n    >>> unique_digits([15, 33, 1422,\
  \ 1])\n    [1, 15, 33]\n    >>> unique_digits([152, 323, 1422, 10])\n    []\n  \
  \  \"\"\"\nfunction unique_digits(x::Vector{Int64})::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = unique_digits;\n\t@test(candidate([15,\
  \ 33, 1422, 1]) == [1, 15, 33])\n\t@test(candidate([152, 323, 1422, 10]) == Vector{Int64}([]))\n\
  \t@test(candidate([12345, 2033, 111, 151]) == [111, 151])\n\t@test(candidate([135,\
  \ 103, 31]) == [31, 135])\nend\n"
completions: ["    \n    unique_digits = Set()\n    for x in x\n        unique_digits\
    \ += findall(x == digits(x))\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 7: Find all elements that has\
    \ any digit in common", "    unique_digits = Set()\n    for x in x\n        if\
    \ x mod 2 == 0\n            unique_digits.add(x)\n        end\n    end\n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one integer as input. \nThe function\
    \ should return true if the number is prime and false if not.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that given a positive integer x,\
    \ returns True if x is prime and False otherwise.", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for n in x\n        if n % 2 == 0\n            push!(unique_digits,\
    \ n) \n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Set()\n    for i in x\n   \
    \     if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set{Int64}()\n    \n    for i in x\n        if !iszero(i)\n            if\
    \ iszero(digits(i))\n                unique_digits += i\n            else\n  \
    \              unique_digits += digits(i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for x in x\n        if x % 2 == 0\n           \
    \ push!(unique_digits, x)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) ==\
    \ [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\n\
    Problem 7: Unique digits\nGiven a list of positive integers x. return a sorted\
    \ list of all \n    elements that hasn't any odd digit.", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    return sort(unique_digits)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer as input and return true or false accordingly.", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n \
    \   unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n \
    \       if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n  \
    \  end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Set{Int64}()\n    for x in x\n        if x mod 2 == 0\n            unique_digits.add(x)\n\
    \        end\n    end\n    unique_digits\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    unique_digits = Set()\n    for x in x\n     \
    \   if x mod 2 == 0\n            unique_digits += x\n        end\n    end\n  \
    \  unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n    \n   \
    \ for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n \
    \       end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if !iszero(i)\n            unique_digits.add(i)\n\
    \        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for x in x\n        unique_digits += findall(x\
    \ == x % 10)\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for x in x\n        if x % 2 == 0\n           \
    \ push!(unique_digits, x)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a number is prime or not.\
    \ \nThe function should take one integer as input and return true or false as\
    \ output.", "    \n    unique_digits = Set()\n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    return\
    \ sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of unique digits in an integer.",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take one integer as input. \nThe function\
    \ should return true if the number is prime and false otherwise.", "    \n   \
    \ unique_digits = Set{Int64}()\n    \n    for i in x\n        if !iszero(i)\n\
    \            if unique_digits(i) == Set{Int64}()\n                unique_digits\
    \ += i\n            end\n        end\n    end\n    \n    return unique_digits\n\
    end", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n     \
    \   if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Find all numbers with 3 or more digits", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.4>\n@time unique_digits(rand(1:10000));\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns all numbers from 1 to\
    \ n that have exactly two digits.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.", "    \n    unique_digits = Set()\n    for i in x\n    \
    \    if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Set()\n    for x in x\n   \
    \     if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:100000));\n\
    </cell>\n<text>\nExercise 2\nWrite a function that given a positive integer x,\
    \ returns its factorial. \nThe factorial of a number $n!$ is defined as:", " \
    \   unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n         \
    \   unique_digits += x\n        end\n    end\n    return unique_digits\nend\n\
    </cell>\n<code language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.3>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a positive integer and returns the number\
    \ of digits in that integer.", "    unique_digits = Set()\n    for i in x\n  \
    \      if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n   \
    \ end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@time unique_digits([15, 33, 1422, 1])\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that given a positive integer x, returns True if\
    \ x is a power of 2. \n(x ^ 2) mod 2 != 0", "    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    unique_digits_set = Set()\n    for i in\
    \ x\n        if i mod 2 != 0\n            unique_digits_set.add(i)\n        end\n\
    \    end\n    \n    return unique_digits_set\nend", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:100000));\n\
    </cell>\n<text>\nExercise 3\nWrite a function that given a list of positive integers\
    \ x. return a sorted list of all \n    elements that hasn't any odd digit.", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<text>\nProblem 7\nGiven a list of positive\
    \ integers x. return a sorted list of all \n    elements that hasn't any odd digit.",
  "    \n    unique_digits = Set{Int64}()\n    for i in x\n        if !contains(unique_digits,\
    \ i)\n            unique_digits += i\n        end\n    end\n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 7: Find all numbers with unique\
    \ digits", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    unique_digits_helper(x,\
    \ [], 0)\nend", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 == 0\n            unique_digits\
    \ += x\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.4>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number is\
    \ prime or not. \nThe function should take one integer as input and return true\
    \ or false accordingly.", "    unique_digits = Set()\n    for x in x\n       \
    \ if x mod 2 != 0\n            unique_digits += x\n        end\n    end\n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.0>", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that checks if a number is prime or not. \nA prime number\
    \ is a natural number greater than 1 that has no positive divisors other than\
    \ 1 and itself.", "    unique_digits_helper(x, [], 0)\nend", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            unique_digits +=\
    \ x\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 7\nWrite a function that checks\
    \ if a number is prime.", "    \n    unique_digits = Vector{Int64}()\n    \n \
    \   for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:100000));\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns all numbers that are divisible by 7 and 9. \n(Hint: use unique_digits)",
  "    \n    unique_digits = Set()\n    \n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n\
    @assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 9\n\
    Write a function that checks if a number is palindrome or not.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is even\
    \ or odd.", "    \n    unique_digits = Set()\n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    unique_digits\n\
    end", "    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n  \
    \          unique_digits.add(x)\n        end\n    end\n    unique_digits\nend",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 3\nWrite a function that given a positive\
    \ integer x, returns its factorial. \n    \n    For example:\n    >>> factorial(5)\n\
    \    120\n    >>> factorial(10)\n    3628800\n    \"\"\"", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 4\nWrite a function\
    \ that given a positive integer x, returns its factorial. \n    \n    For example:\n\
    \    >>> factorial(5)\n    120\n    >>> factorial(10)\n    3628800\n    \"\"\"",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend", "    \n    unique_digits\
    \ = Set{Int64}()\n    for x in x\n        if x % 2 == 0\n            unique_digits.add(x)\n\
    \        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            unique_digits +=\
    \ x\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.4>", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x % 2 == 0\n            unique_digits +=\
    \ x\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    unique_digits = Set()\n\
    \    for x in x\n        if x mod 2 == 0\n            unique_digits += x\n   \
    \     end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n          \
    \  push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a list\
    \ of integers x, return a sorted list of all elements that \n    has at least\
    \ two digits.", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in\
    \ x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n\
    \    end\n    \n    return unique_digits\nend", "    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    unique_digits = Set()\n    for x in x\n\
    \        if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n \
    \   end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits =\
    \ Set()\n    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) == [1, 15,\
    \ 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\nProblem\
    \ 7: Unique Digits II\nGiven a list of positive integers x. return a sorted list\
    \ of all \n    elements that hasn't any odd digit.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. \nThe function\
    \ should take one integer as input. \nThe function should return true if the number\
    \ is prime and false otherwise.", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in\
    \ x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n\
    \    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.4>", " \
    \   \n    unique_digits = Set()\n    for x in x\n        if x % 2 == 0\n     \
    \       push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits_set\
    \ = Set()\n    for i in x\n        if i mod 2 != 0\n            unique_digits_set.add(i)\n\
    \        end\n    end\n    unique_digits_set\nend", "    \n    unique_digits =\
    \ Set{Int64}()\n    \n    for i in x\n        if !contains(unique_digits, i)\n\
    \            unique_digits += i\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that given a positive integer x returns its factorial.\
    \ \nThe factorial of a number $n$ is defined as:", "    \n    unique_digits =\
    \ Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n           \
    \ push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits_set = Set{Int64}()\n\
    \    unique_digits_set = unique_digits_set + x\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([x for x in unique_digits_set if x % 2 == 0])\n    return unique_digits_set\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    unique_digits = Set()\n    for x in x\n        if x mod 2 != 0\n          \
    \  push!(unique_digits, x)\n        end\n    end\n    return sort(unique_digits)\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            unique_digits\
    \ += x\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    \n    unique_digits = Vector{Int64}()\n  \
    \  \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Set{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7: Sum square difference\nGiven a\
    \ list of integers, return a list of squared differences between each pair of\
    \ consecutive numbers in the list. \nThe first number in the result should be\
    \ the square root of the first number, the second number should be the square\
    \ root of the second number, and so on. \nThe last number in the result should\
    \ be the square root of the last number in the original list.", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if !contains(unique_digits, i)\n    \
    \        unique_digits += i\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.4>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7: Unique Digits II\nGiven a list of integers, return a new list containing\
    \ only the unique digits.", "    \n    unique_digits = Set{Int64}()\n    \n  \
    \  for i in x\n        if !contains(unique_digits, i)\n            unique_digits\
    \ += i\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.4>", "    \n    unique_digits = Set()\n    for x in x\n   \
    \     push!(unique_digits, x)\n    end\n    unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7\nGiven a list of integers, return a new list containing only the positive\
    \ integers. \nYou may use the absolute value.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3\nWrite a function that given\
    \ a positive integer $n$ returns $n!$ ($n!$ is the factorial of $n$).", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a number is prime or not. \nA prime\
    \ number is a natural number greater than 1 that has no positive divisors other\
    \ than 1 and itself.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Set()\n    for x in x\n        if x % 2 == 0\n      \
    \      push!(unique_digits, x)\n        end\n    end\n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.4>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.4>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<code language=julia-1.4>", "  \
    \  \n    unique_digits = Vector{Int64}()\n    \n    for x in x\n        if x %\
    \ 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n   \
    \ unique_digits = Set()\n    for x in x\n        if x mod 2 == 0\n           \
    \ unique_digits.add(x)\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3\nWrite a function that given\
    \ a positive integer x, returns its factorial. \nThe factorial of a number $n$\
    \ is defined as:", "    \n    unique_digits_ = Set()\n    unique_digits_.add(x)\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            unique_digits_.add(i)\n\
    \        end\n    end\n    \n    unique_digits_\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 == 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7: Unique Digits II\nGiven a list\
    \ of integers, return a new list of all the integers in the list that are not\
    \ in the list.", "    \n    unique_digits_set = Set{Int64}()\n    unique_digits_set.add(x)\n\
    \    unique_digits_set = unique_digits_set - Set{Int64}([x for x in unique_digits_set\
    \ if x % 2 == 0])\n    return unique_digits_set\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Set()\n    for x in x\n        unique_digits += x % 10\n\
    \    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    unique_digits = Set()\n    for i in x\n        if !contains(unique_digits,\
    \ i)\n            unique_digits += i\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.3>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.3>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Problem 7: Find all numbers with unique digits", "    \n    unique_digits = Set()\n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.3>",
  "    \n    unique_digits = Set()\n    \n    for i in x\n        if i mod 2 != 0\n\
    \            push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n\
    <code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n\
    <code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n\
    <code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n\
    @time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n@time\
    \ unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n\
    </cell>\n<code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n\
    <code language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code\
    \ language=julia-1.5>\n@time unique_digits(rand(1:10000000))\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits_ = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 != 0\n            push!(unique_digits_, i)\n        end\n    end\n   \
    \ \n    return unique_digits_\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    unique_digits = Set()\n    for\
    \ x in x\n        if x mod 2 == 0\n            unique_digits += x\n        end\n\
    \    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2\
    \ == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    return\
    \ unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nExercise 3\nWrite a function that given a positive integer\
    \ x, returns its factorial. \n    Factorial of a number is the number of times\
    \ that we can divide it by \n    itself without remainder.", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Set()\n\
    \    for x in x\n        if x % 2 == 0\n            unique_digits += x\n     \
    \   end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits_result = []\n    \n    for element in x\n        if element\
    \ % 2 == 0\n            unique_digits_result .= element\n        end\n    end\n\
    \    \n    return unique_digits_result\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 7: Find all numbers with unique digits\
    \ except for those that have odd digits\nGiven a list of positive integers x.\
    \ return a sorted list of all \n    elements that hasn't any odd digit.", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for\
    \ i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n     \
    \   end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end", "    unique_digits = Set()\n    for n in x\n        if n % 2 == 0\n    \
    \        unique_digits += n\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.3>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.3>\nunique_digits([15, 33,\
    \ 1422, 1])\n</cell>\n<code language=julia-1.3>\nunique_digits([152, 323, 1422,\
    \ 10])\n</cell>\n<code language=julia-1.3>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for x in x\n        if x % 2 == 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    return unique_digits\nend", "    unique_digits\
    \ = Set{Int64}()\n    for i in x\n        if i mod 2 != 0\n            unique_digits.add(i)\n\
    \        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.4>",
  "    unique_digits = Set{Int64}()\n    for x in x\n        if x mod 2 == 0\n   \
    \         unique_digits += x\n        end\n    end\n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    unique_digits_set = Set{Int64}()\n\
    \    unique_digits_set = unique_digits_set + x\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 1])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 1])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 2])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 2])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 3])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 3])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 4])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 4])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 5])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 5])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 6])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 6])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 7])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 7])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 8])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 8])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 9])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x ", "    \n    unique_digits = Vector{Int64}()\n \
    \   \n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n\
    @assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n<text>\nProblem 7\n\
    Write a function that checks if a number is prime or not. \nA number is prime\
    \ if all it's digits except one are prime.", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Set()\n    for i in x\n   \
    \     if i mod 2 != 0\n            unique_digits += i\n        end\n    end\n\
    \    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\nunique_digits([15,\
    \ 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152, 323,\
    \ 1422, 10])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a number\
    \ is prime or not. \nThe function should take in a single integer and return a\
    \ boolean.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Set{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nGiven a list of positive integers\
    \ x. return a sorted list of all \n    elements that hasn't any odd digit.", " \
    \   \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i\
    \ mod 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Set()\n    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9: Find all prime factors", "    \n\
    \    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n        \
    \    push!(unique_digits, i)\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Set()\n    for x in x\n\
    \        if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n \
    \   end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    unique_digits = Set{Int64}()\n    \n    for i in x\n        if i mod 2 !=\
    \ 0\n            unique_digits.add(i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    unique_digits = Set()\n    for x in x\n   \
    \     if x mod 2 == 0\n            push!(unique_digits, x)\n        end\n    end\n\
    \    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 == 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend", "    unique_digits = Set()\n    for x in x\n  \
    \      if x mod 2 != 0\n            push!(unique_digits, x)\n        end\n   \
    \ end\n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    unique_digits = Set()\n    for x\
    \ in x\n        unique_digits += x % 10\n    end\n    return unique_digits\nend",
  "    \n    unique_digits = Set()\n    for x in x\n        unique_digits += x % 10\n\
    \    end\n    unique_digits\nend", "    unique_digits = Set()\n    for n in x\n\
    \        if n % 2 == 0\n            push!(unique_digits, n)\n        end\n   \
    \ end\n    return sort(unique_digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<code language=julia-1.5>", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 == 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        push!(unique_digits, i)\n        end\n    end\n    return sort(unique_digits)\n\
    end\n</cell>\n<code language=julia-1.4>", "    \n    unique_digits = Set()\n \
    \   for x in x\n        if x % 2 == 0\n            unique_digits += x\n      \
    \  end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 2\nWrite a function that checks\
    \ if a number is prime or not. \nA number is prime if it has no divisors other\
    \ than 1 and itself.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    unique_digits = Set()\n    for i in x\n        if i mod 2 != 0\n    \
    \        unique_digits += i\n        end\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 == 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend\n</cell>\n<text>\n\
    Problem 3\nGiven a list of positive integers x. return a sorted list of all \n\
    \    elements that hasn't any odd digit.", "    \n    unique_digits_set = Set{Int64}()\n\
    \    unique_digits_set = unique_digits_set + x\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 2 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 3 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 3 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 4 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 4 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 5 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 5 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 6 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 6 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 7 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 7 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 8 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 8 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 9 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 9 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 10 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 10 != 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int64}([i for i in x if i mod 11 == 0])\n    unique_digits_set = unique_digits_set\
    \ - Set{Int", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n\
    \        if i mod 2 == 0\n            push!(unique_digits, i)\n        end\n \
    \   end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns all numbers from 1 to n that have no even digit.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 != 0\n         \
    \   push!(unique_digits, i)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([152, 323, 1422, 10])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a list of positive integers and returns\
    \ a sorted list of all elements that has any even digit.", "    \n    unique_digits\
    \ = Set()\n    for i in x\n        if i mod 2 == 0\n            unique_digits\
    \ += i\n        end\n    end\n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\nunique_digits([152,\
    \ 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite a function that checks if\
    \ a number is prime or not. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.", "    \n    unique_digits\
    \ = Vector{Int64}()\n    \n    for x in x\n        if x mod 2 != 0\n         \
    \   push!(unique_digits, x)\n        end\n    end\n    \n    return unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7", "    \n    unique_digits = Set{Int64}()\n    for i in x\n\
    \        if !iszero(i)\n            if unique_digits[i] == true\n            \
    \    unique_digits[i] = false\n            else\n                unique_digits[i]\
    \ = true\n            end\n        end\n    end\n    return unique_digits\nend\n\
    </cell>\n<code language=julia-1.0>", "    \n    unique_digits = Set()\n    for\
    \ x in x\n        push!(unique_digits, x)\n    end\n    unique_digits\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    unique_digits = Vector{Int64}()\n    \n\
    \    for i in x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n\
    \        end\n    end\n    \n    return unique_digits\nend", "    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    unique_digits = Set()\n\
    \    \n    for i in x\n        if i mod 2 != 0\n            push!(unique_digits,\
    \ i)\n        end\n    end\n    \n    return sort(unique_digits)\nend\n</cell>\n\
    <code language=julia-1.5>\nunique_digits([15, 33, 1422, 1])\n</cell>\n<code language=julia-1.5>\n\
    unique_digits([152, 323, 1422, 10])\n</cell>\n<text>\nProblem 9\nWrite a function\
    \ that checks if a number is prime or not. \nA prime number is a natural number\
    \ greater than 1 that has no positive divisors other than 1 and itself. \nA prime\
    \ number is not divisible by any number other than 1 and itself.", "    \n   \
    \ unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod 2 !=\
    \ 0\n            push!(unique_digits, i)\n        end\n    end\n    \n    unique_digits\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15, 33, 1422,\
    \ 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) == []\n</cell>\n\
    <text>\nProblem 7: Sum square difference\nGiven a vector of integers, find the\
    \ sum of square differences between each pair of consecutive elements.", "   \
    \ \n    unique_digits = Vector{Int64}()\n    \n    for i in x\n        if i mod\
    \ 2 != 0\n            push!(unique_digits, i)\n        end\n    end\n    \n  \
    \  return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n@assert unique_digits([15,\
    \ 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152, 323, 1422, 10]) ==\
    \ []\n</cell>\n<text>\nProblem 7: Find all numbers with unique digits", "    unique_digits\
    \ = Set()\n    for x in x\n        if x mod 2 != 0\n            push!(unique_digits,\
    \ x)\n        end\n    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    unique_digits = Set()\n    for x in x\n        push!(unique_digits, x)\n\
    \    end\n    unique_digits\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    unique_digits = Vector{Int64}()\n    \n    for i in\
    \ x\n        if i mod 2 != 0\n            push!(unique_digits, i)\n        end\n\
    \    end\n    \n    return unique_digits\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert unique_digits([15, 33, 1422, 1]) == [1, 15, 33]\n@assert unique_digits([152,\
    \ 323, 1422, 10]) == []\n</cell>\n<text>\nExercise 3\nWrite a function that checks\
    \ if a number is prime (has only 1 prime factor)."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
