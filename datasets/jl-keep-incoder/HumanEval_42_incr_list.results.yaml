name: HumanEval_42_incr_list
language: julia
results:
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a list.\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph3woq4dl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph3woq4dl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprotiqk77.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprotiqk77.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the numbers in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the product of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the maximum of the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the minimum of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the number of elements in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the product of the squares of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the maximum of\
    \ the squares of the numbers in the list. \nWrite a function that takes in a list\
    \ of numbers and returns the minimum of the squares of the numbers in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the number of\
    \ elements in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the sum of the cubes of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the product of the cubes of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the maximum of the cubes of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the minimum of the cubes of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the number of elements in the list. \nWrite a function that takes in\
    \ a list of numbers and returns the sum of the exponential of the numbers in the\
    \ list. \nWrite a function that takes in a list of numbers and returns the product\
    \ of the exponential of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the maximum of the exponential of the numbers\
    \ in the list. \nWrite a function that takes in a list of numbers and returns\
    \ the minimum of the exponential of the numbers in the list. \nWrite a function\
    \ that takes in a list of numbers and returns the number of elements in the list.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ natural logarithms of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the product of the natural logarithms of the\
    \ numbers in the list. \nWrite a function that takes in a list of numbers and\
    \ returns the maximum of the natural logarithms of the numbers in the list. \n\
    Write a function that takes in a list of numbers and returns the minimum of the\
    \ natural logarithms of the numbers in the list. \nWrite a function that takes\
    \ in a list of numbers and returns the number of elements in the list. \nWrite\
    \ a function that takes in a list of numbers and returns the sum of the logarithms\
    \ of the \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldc1vsvb.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpldc1vsvb.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppr3i4an0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppr3i4an0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw0a5bv85.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw0a5bv85.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9idthgbc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9idthgbc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmped6h2u8a.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmped6h2u8a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfuvp5bqd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfuvp5bqd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr66nw0ii.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr66nw0ii.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr66nw0ii.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwu40ovdc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwu40ovdc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, suppose\
    \ you have a list of numbers and you want to find the first element that is a\
    \ multiple of 5. You can write a function like this:\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpopq6cxtl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpopq6cxtl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1huu5auq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1huu5auq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array. \nWrite a function that returns the product of the\
    \ elements of an array. \nWrite a function that returns the maximum of the elements\
    \ of an array. \nWrite a function that returns the minimum of the elements of\
    \ an array. \nWrite a function that returns the absolute value of the elements\
    \ of an array. \nWrite a function that returns the reciprocal of the elements\
    \ of an array. \nWrite a function that returns the exponential of the elements\
    \ of an array. \nWrite a function that returns the natural logarithm of the elements\
    \ of an array. \nWrite a function that returns the square root of the elements\
    \ of an array. \nWrite a function that returns the reciprocal of the square root\
    \ of the elements of an array. \nWrite a function that returns the factorial of\
    \ the elements of an array. \nWrite a function that returns the factorial of the\
    \ elements of an array. \nWrite a function that returns the sum of all the elements\
    \ of a vector. \nWrite a function that returns the product of the elements of\
    \ a vector. \nWrite a function that returns the maximum of the elements of a vector.\
    \ \nWrite a function that returns the minimum of the elements of a vector. \n\
    Write a function that returns the absolute value of the elements of a vector.\
    \ \nWrite a function that returns the reciprocal of the elements of a vector.\
    \ \nWrite a function that returns the exponential of the elements of a vector.\
    \ \nWrite a function that returns the natural logarithm of the elements of a vector.\
    \ \nWrite a function that returns the square root of the elements of a vector.\
    \ \nWrite a function that returns the reciprocal of the square root of the elements\
    \ of a vector. \nWrite a function that returns the factorial of the elements of\
    \ a vector. \nWrite a function that returns the factorial of the elements of a\
    \ vector. \nWrite a function that returns the sum of all the elements of a matrix.\
    \ \nWrite a function that returns the product of the elements of a matrix. \n\
    Write a function that returns the maximum of the elements of a matrix. \nWrite\
    \ a function that returns the minimum of the elements of a matrix. \nWrite a function\
    \ that returns the absolute value of the elements of a matrix. \nWrite a function\
    \ that returns the reciprocal of the elements of a matrix. \nWrite a function\
    \ that returns the exponential of the elements of a matrix. \nWrite a function\
    \ that returns the natural logarithm of the elements of a matrix. \nWrite a function\
    \ that returns the square root of the elements of a matrix. \nWrite a function\
    \ that returns the reciprocal of the square root of the elements of a matrix.\
    \ \nWrite a function that returns the factorial of the elements of a matrix. \n\
    Write a function that returns the factorial of the elements of a matrix. \nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9djjf7j3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9djjf7j3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a vector, incremented by 1.\n    >>> incr_vec([1, 2, 3])\n    [2,\
    \ 3, 4]\n    >>> incr_vec([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    [6, 4, 6, 3, 4,\
    \ 4, 10, 1, 124]\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph5gbjd9_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph5gbjd9_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpixut5api.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpixut5api.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpixut5api.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpgatxg7uq.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{DataType,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpgatxg7uq.jl:8\n   [5] top-level scope at /tmp/tmpgatxg7uq.jl:16\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpgatxg7uq.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpgatxg7uq.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{DataType,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmpgatxg7uq.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpgatxg7uq.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpgatxg7uq.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpgatxg7uq.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{DataType,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpgatxg7uq.jl:8\n   [5] top-level scope at /tmp/tmpgatxg7uq.jl:18\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpgatxg7uq.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgatxg7uq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector where each element is the sum of the\
    \ previous two elements.\nFor example, incr_vec([1, 2, 3]) should return [3, 4,\
    \ 5].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5_gbcgpr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5_gbcgpr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i] = l[i -\
    \ 1] + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp3647s3u.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp3647s3u.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    @time incr_list([1,2,3])\n</cell>\n<code language=julia-1.4>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the list with elements incremented by 1 but starting from position n.\
    \ \nHint: Use incr_list()\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ak8j9uh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ak8j9uh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, if the\
    \ list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should return 5 because\
    \ 5 is the first element of the list that satisfies the condition (5 > 3).\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz_imz030.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz_imz030.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    length(l) += 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the same vector but with each element incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"length(l)\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprwy2v8la.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprwy2v8la.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    l\nend\n</code>\n<|/ a |>\n<| a tags=julia,list\
    \ |>\nA simple and efficient solution is to use an iterator and take advantage\
    \ of the fact that Julia is lazy by using the iterator syntax:\n<code>\njulia>\
    \ function incr_list(l::Vector{Int64})\n           for i = 1:length(l)\n     \
    \          l[i] = l[i] + 1\n           end\n           l\n       end\nincr_list\
    \ (generic function with 1 method)\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ogkk8in.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ogkk8in.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmfc4vhfe.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmfc4vhfe.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpau5hbx5k.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpau5hbx5k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpau5hbx5k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7tmulvt2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7tmulvt2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns a new vector with each element incremented by 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnvgqzh4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwnvgqzh4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpygqbpdpq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpygqbpdpq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphxt3i0jl.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphxt3i0jl.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a new vector with each element incremented by 1.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8gk4ikos.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8gk4ikos.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmife57e1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmife57e1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdj9zoc2m.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdj9zoc2m.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1]\
    \ + 1\n        i = i-1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphxg89an7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphxg89an7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdg5_2vi7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdg5_2vi7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpz5sqbtil.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpz5sqbtil.jl:8\n   [2] top-level scope at /tmp/tmpz5sqbtil.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz5sqbtil.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpz5sqbtil.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Array{Int64,1}, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] incr_list(::Array{Int64,1}) at /tmp/tmpz5sqbtil.jl:8\n   [2] top-level\
    \ scope at /tmp/tmpz5sqbtil.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz5sqbtil.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpz5sqbtil.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpz5sqbtil.jl:8\n   [2] top-level scope at /tmp/tmpz5sqbtil.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpz5sqbtil.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz5sqbtil.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppdhyyf7z.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{DataType,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1})\
    \ at /tmp/tmppdhyyf7z.jl:8\n   [5] top-level scope at /tmp/tmppdhyyf7z.jl:16\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmppdhyyf7z.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmppdhyyf7z.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{DataType,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmppdhyyf7z.jl:8\n   [5] top-level\
    \ scope at /tmp/tmppdhyyf7z.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmppdhyyf7z.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmppdhyyf7z.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{DataType,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1})\
    \ at /tmp/tmppdhyyf7z.jl:8\n   [5] top-level scope at /tmp/tmppdhyyf7z.jl:18\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmppdhyyf7z.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppdhyyf7z.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpk18d9xnk.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpk18d9xnk.jl:8\n   [5] top-level scope at /tmp/tmpk18d9xnk.jl:16\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpk18d9xnk.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpk18d9xnk.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmpk18d9xnk.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpk18d9xnk.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpk18d9xnk.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpk18d9xnk.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpk18d9xnk.jl:8\n   [5] top-level scope at /tmp/tmpk18d9xnk.jl:18\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpk18d9xnk.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk18d9xnk.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the first element of a list. Test it on a small list to make sure it\
    \ works.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuy9l08oe.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuy9l08oe.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector of integers and returns the same vector but with each element incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpubwkty2j.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpubwkty2j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the number of elements in a list that satisfy a predicate.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvdskkezo.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvdskkezo.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.3>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nThe function should work for both vectors\
    \ and matrices.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvoqo3yud.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvoqo3yud.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i-1\n    end\n    l\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a negative number in the list. For example, `incr_list([-1,\
    \ -2, -3])` returns `[2, 1, 3]` instead of `[3, 2, 1]`.\n<|/ c |>\n<| a dscore=5\
    \ tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph1oberj8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph1oberj8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4daszgyt.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4daszgyt.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = incr(l)\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1_e5h38k.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  UndefVarError:\
    \ incr not defined\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1}) at /tmp/tmp1_e5h38k.jl:9\n\
    \   [2] top-level scope at /tmp/tmp1_e5h38k.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1_e5h38k.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp1_e5h38k.jl:18\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  UndefVarError: incr not defined\n  Stacktrace:\n   [1]\
    \ incr_list(::Array{Int64,1}) at /tmp/tmp1_e5h38k.jl:9\n   [2] top-level scope\
    \ at /tmp/tmp1_e5h38k.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1_e5h38k.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmp1_e5h38k.jl:19\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  UndefVarError:\
    \ incr not defined\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1}) at /tmp/tmp1_e5h38k.jl:9\n\
    \   [2] top-level scope at /tmp/tmp1_e5h38k.jl:19\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp1_e5h38k.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1_e5h38k.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkzvh694w.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkzvh694w.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a vector where each element is the sum of the vector elements\
    \ before it.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25fgs18c.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp25fgs18c.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgmpk8iov.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgmpk8iov.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmplb47w17o.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmplb47w17o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmplb47w17o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpew18uv0_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpew18uv0_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the elements of an array. \nWrite a function that returns the maximum of the\
    \ elements of an array. \nWrite a function that returns the minimum of the elements\
    \ of an array. \nWrite a function that returns the absolute value of the elements\
    \ of an array. \nWrite a function that returns the sign of the elements of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that returns the sum of the first element of an\
    \ array. \nWrite a function that returns the product of the first element of an\
    \ array. \nWrite a function that returns the maximum of the first element of an\
    \ array. \nWrite a function that returns the minimum of the first element of an\
    \ array. \nWrite a function that returns the absolute value of the first element\
    \ of an array. \nWrite a function that returns the sign of the first element of\
    \ an array. \nWrite a function that \nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp31rgfsxq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp31rgfsxq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvt98xnnp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvt98xnnp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = incr(l)\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzfiy0sln.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzfiy0sln.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphevh0x0h.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphevh0x0h.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprkqvskhg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprkqvskhg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpdc2nqial.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpdc2nqial.jl:8\n   [5] top-level scope at /tmp/tmpdc2nqial.jl:16\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpdc2nqial.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpdc2nqial.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmpdc2nqial.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpdc2nqial.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpdc2nqial.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpdc2nqial.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpdc2nqial.jl:8\n   [5] top-level scope at /tmp/tmpdc2nqial.jl:18\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpdc2nqial.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdc2nqial.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i=1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpouf_rqyh.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpouf_rqyh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqpdknk14.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqpdknk14.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppwnlscs6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppwnlscs6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nr3gnc2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9nr3gnc2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i=1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1, 2, 3])\n\
    </cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    </cell>\n<text>\nExercise 2: Write a function that returns the first element of\
    \ a list that satisfies a condition. For example, if the list is [5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123], the function should return 3 because the first element of\
    \ the list that satisfies the condition is 3.\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa40rn909.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa40rn909.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmporqmjecc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmporqmjecc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)+1]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list if it is non-empty, and a default value otherwise.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ym0kgdd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ym0kgdd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplv5bz54s.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplv5bz54s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a list that satisfy a certain condition. For example, how many\
    \ elements in the list below satisfy the condition $x^2 + y^2 = z^2$?\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphvaobedk.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphvaobedk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphhz226nz.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphhz226nz.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l) + 1\n    while i <= length(l)\n       \
    \ l[i] = l[i] + 1\n        i = i + 1\n    end\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns the vector with the elements incremented\
    \ by 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpff2pvn9g.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpff2pvn9g.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements in a list.\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1,\
    \ 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n\
    6\n>>> sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123])\n164\n>>> sum([1, 2, 3])\n6\n>>> sum([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n164\n>>> sum([1, 2, \nusing Test\n\n@testset begin\n\ncandidate =\
    \ incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdzmbjilg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdzmbjilg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkb_c3a1c.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkb_c3a1c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkb_c3a1c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns a list with elements incremented by 1 starting at position\
    \ n. \nFor example, incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123], 3) should return\
    \ [6, 4, 6, 3, 4, 4, 10, 1, 124]. \nHint: Use a for loop to iterate over the list.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2b0t4ewv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2b0t4ewv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9at4fmj5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9at4fmj5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i -\
    \ 1] + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdst4pbab.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdst4pbab.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy7skuqsx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy7skuqsx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns a vector with each element incremented by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxmwlovpz.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxmwlovpz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiubtpl6s.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiubtpl6s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123]);\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the first element of a list.\nWrite a function that\
    \ returns the last element of a list.\nWrite a function that returns the sum of\
    \ a list.\nWrite a function that returns the product of a list.\nWrite a function\
    \ that returns the maximum of a list.\nWrite a function that returns the minimum\
    \ of a list.\nWrite a function that returns the number of elements in a list.\n\
    Write a function that returns the number of unique elements in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ a function that returns the number of occurrences of a value in a list.\nWrite\
    \ \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2xway7s.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg2xway7s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that returns the first element of a list, and a function that\
    \ returns the last element of a list. \nWrite a function that returns the first\
    \ element of a list, and a function that returns the last element of a list. \n\
    Write a function that \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3zsw9ngg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3zsw9ngg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns a vector where each element is the sum of the previous two elements.\n\
    For example, incr_vec([1, 2, 3]) should return [3, 4, 5].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qaihm7a.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qaihm7a.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdgjzg8ry.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdgjzg8ry.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdgjzg8ry.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = length(l); i >= 1; i--\n        l[i] = l[i] +\
    \ 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9g5c43at.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp9g5c43at.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9xgqaw21.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9xgqaw21.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe15kgaft.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe15kgaft.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphiogxasn.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphiogxasn.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the first element of a vector, plus one. Test it on [1, 2, 3] and [5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123].\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppnmmzryd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppnmmzryd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgcecawya.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgcecawya.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the elements\
    \ of a list after removing some elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9pff5wa4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9pff5wa4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the elements of a list that satisfy a condition. For example, a\
    \ function that returns the elements of a list that satisfy the condition x^2\
    \ + y^2 > 5.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx8kkx85n.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx8kkx85n.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2f7gupd7.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2f7gupd7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2f7gupd7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, plus 1.\n    >>> first_element([2, 3, 4])\n \
    \   3\n    >>> first_element([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\
    \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpckz4lsvo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpckz4lsvo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpax97phln.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpax97phln.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = length(l); i >= 1; i--\n        l[i] = l[i] +\
    \ 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.4>\nincr_list([1, 2,\
    \ 3])\n</cell>\n<code language=julia-1.4>\nincr_list([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid operator \"--\"\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpinu973v9.jl:9\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpinu973v9.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpffstqi3g.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpffstqi3g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpq87xcsqq.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpq87xcsqq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpq87xcsqq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpplj59vv2.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpplj59vv2.jl:9\n   [5] top-level scope at /tmp/tmpplj59vv2.jl:17\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpplj59vv2.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpplj59vv2.jl:18\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmpplj59vv2.jl:9\n   [5] top-level\
    \ scope at /tmp/tmpplj59vv2.jl:18\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpplj59vv2.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpplj59vv2.jl:19\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpplj59vv2.jl:9\n   [5] top-level scope at /tmp/tmpplj59vv2.jl:19\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpplj59vv2.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpplj59vv2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkylw_vpa.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkylw_vpa.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpawt329wx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpawt329wx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph12gq3lf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph12gq3lf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjb3vx6hd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjb3vx6hd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpih56pskl.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpih56pskl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the sum of the elements of a list.\nWrite a test that checks the sum of the\
    \ elements of a list with the expected value.\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp984nztb8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp984nztb8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi08iimkm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi08iimkm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo4vt66w5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo4vt66w5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1]\
    \ + 1\n        i = i - 1\n    end\n    return l\nend\n</code>\n<|/ a dscore=2\
    \ |>\n<| c |>\nThanks for your answer. Can you please explain why you use `copy`\
    \ here? I thought that `incr_list` should return a new vector, so why do you use\
    \ `copy`?\n<|/ c |>\n<| c |>\n`copy` creates a new vector and copies the elements\
    \ from the old vector to the new vector. `incr_list` modifies the old vector,\
    \ so `copy` is needed.\n<|/ c |>\n<| c |>\nThanks, I understand now. One more\
    \ question: why do you use `i-1` instead of `i`? I thought that `i` will always\
    \ point to the last element of the vector, so `i-1` will always point to the last\
    \ element of the vector, no matter what is the size of the vector.\n<|/ c |>\n\
    <| c |>\n`i-1` will point to the last element of the vector, but `i` will point\
    \ to the last element of the vector *before* the modification. `i` will point\
    \ to the last element of the vector after the modification.\n<|/ c |>\n<| c |>\n\
    Thanks, I understand now. One more question: why do you use `i-1` instead of `i`?\
    \ I thought that `i` will always point to the last element of the vector, so `i-1`\
    \ will always point to the last element of the vector, no matter what is the size\
    \ of the vector.\n<|/ c |>\n<| a dscore=2 |>\nThe function incr_list can be implemented\
    \ as a one-liner using map:\n<code>\nincr_list = x -> map(x -> x + 1, x)\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThanks for your answer. Can you please explain why\
    \ you use `x -> x + 1` here? I thought that `incr_list` should return a new vector,\
    \ so why do you use `x -> x + 1`?\n<|/ c |>\n<| c |>\n`x -> x + 1` is an anonymous\
    \ function that takes an element `x` and returns the element `x + 1`. `map` applies\
    \ this function to every element in the input vector. `incr_list = x -> map(x\
    \ -> x + 1, x)` is equivalent to `incr_list = x -> map(x -> x + 1, x)`.\n<|/ c\
    \ |>\n<| c |>\nThanks, I understand now. One more question: why do you use `x\
    \ -> x + 1` instead of `x \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmud5x1h3.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmud5x1h3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpovu8_d7i.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpovu8_d7i.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp1il2k8x_.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{DataType,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1})\
    \ at /tmp/tmp1il2k8x_.jl:8\n   [5] top-level scope at /tmp/tmp1il2k8x_.jl:16\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp1il2k8x_.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp1il2k8x_.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{DataType,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmp1il2k8x_.jl:8\n   [5] top-level\
    \ scope at /tmp/tmp1il2k8x_.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp1il2k8x_.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp1il2k8x_.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{DataType,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1})\
    \ at /tmp/tmp1il2k8x_.jl:8\n   [5] top-level scope at /tmp/tmp1il2k8x_.jl:18\n\
    \   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp1il2k8x_.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1il2k8x_.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i-1]\
    \ + 1\n        i = i-1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplkox490k.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplkox490k.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp439h4jo_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp439h4jo_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    push!(l, l[end] + 1)\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nincr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the number of elements in a list that satisfy a certain\
    \ condition. For example, a list with only positive elements can be counted if\
    \ all elements are positive.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuxl5zsm5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuxl5zsm5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i -\
    \ 1] + 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list, and a function that returns the last element of\
    \ a list. \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nWrite a function that returns the\
    \ first element of a list, and a function that returns the last element of a list.\
    \ \nWrite a function that returns the first element of a list, and a function\
    \ that returns the last element of a list. \nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvolvz3wd.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvolvz3wd.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ng9567s.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ng9567s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 0\n        l[i] = l[i -\
    \ 1] + 1\n        i -= 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppdswkw27.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppdswkw27.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd9ipspai.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd9ipspai.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdlwt793y.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdlwt793y.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe1c43nko.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe1c43nko.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the product of\
    \ the elements of a vector. \nWrite a function that returns the maximum of the\
    \ elements of a vector. \nWrite a function that returns the minimum of the elements\
    \ of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \nWrite a function that returns the\
    \ sign of a vector. \nWrite a function that returns the absolute value of a vector.\
    \ \nWrite a function that returns the sign of a vector. \nWrite a function that\
    \ returns the absolute value of a vector. \n\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6aadz7_l.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6aadz7_l.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the first\
    \ element of a list that satisfies a condition. For example, if the list contains\
    \ only positive numbers, return the first positive number. Otherwise, return -1.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpga6ammzs.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpga6ammzs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the elements of a list after removing some elements.\nFor example, suppose you\
    \ have a list of integers and you want to remove all even numbers. Write a function\
    \ that returns a new list with all the even numbers removed.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt8gmynjc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt8gmynjc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcntw_e_j.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcntw_e_j.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphpqtd0ct.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphpqtd0ct.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdzmqjt4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsdzmqjt4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp573kowsd.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp573kowsd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp573kowsd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd6ab_nm_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd6ab_nm_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwddi1c7j.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwddi1c7j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwddi1c7j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm3gn9ca5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3gn9ca5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ktu9pll.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ktu9pll.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzhc08mqd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzhc08mqd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a given condition. For example, if\
    \ the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should return 6. Write\
    \ a second function that returns the last element of a list that satisfies a given\
    \ condition. For example, if the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function\
    \ should return 123.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiex1jqb4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiex1jqb4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, if the\
    \ list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should return 6. Write a\
    \ function that returns the last element of a list that satisfies a condition.\
    \ For example, if the list is [5, 3, 5, 2, 3, 3, 9, 0, 123], the function should\
    \ return 124.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcyxot4bq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcyxot4bq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of elements in a vector. \nFor example, incr_vec(v::Vector{Int64}) should return\
    \ v.size. \nWrite a function that returns the number of elements in a matrix.\
    \ \nFor example, incr_mat(A::Matrix{Int64}) should return size(A,1). \nWrite a\
    \ function that returns the number of elements in a range. \nFor example, incr_range(r::Range{Int64})\
    \ should return length(r). \nWrite a function that returns the number of elements\
    \ in a set. \nFor example, incr_set(s::Set{Int64}) should return length(s).\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5udyuu2m.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5udyuu2m.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg_kigkna.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg_kigkna.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg_kigkna.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1ynprsx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1ynprsx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6pvo2jgx.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6pvo2jgx.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector and returns the same vector but with each element incremented\
    \ by 1.\nFor example, incr_vec([1, 2, 3]) should return [2, 3, 4].\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ql96582.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ql96582.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzxhug1qn.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzxhug1qn.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfhabhsy0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfhabhsy0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi5ba915m.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi5ba915m.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgzqd0xo2.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgzqd0xo2.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxk5sbu_i.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxk5sbu_i.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn54amt4u.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn54amt4u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_zjkl43.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_zjkl43.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8sc2_ro2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8sc2_ro2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy33qljij.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy33qljij.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkk7b0671.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkk7b0671.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the first element of a vector, if it exists. Otherwise return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1xx7l9gw.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1xx7l9gw.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the reciprocal of\
    \ the elements of an array. \nWrite a function that returns the factorial of the\
    \ elements of an array. \nWrite a function that returns the sum of the squares\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the squares of the elements of an array. \nWrite a function that returns the\
    \ maximum of the squares of the elements of an array. \nWrite a function that\
    \ returns the minimum of the squares of the elements of an array. \nWrite a function\
    \ that returns the absolute value of the squares of the elements of an array.\
    \ \nWrite a function that returns the reciprocal of the squares of the elements\
    \ of an array. \nWrite a function that returns the factorial of the squares of\
    \ the elements of an array. \nWrite a function that returns the sum of the cubes\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the cubes of the elements of an array. \nWrite a function that returns the maximum\
    \ of the cubes of the elements of an array. \nWrite a function that returns the\
    \ minimum of the cubes of the elements of an array. \nWrite a function that returns\
    \ the absolute value of the cubes of the elements of an array. \nWrite a function\
    \ that returns the reciprocal of the cubes of the elements of an array. \nWrite\
    \ a function that returns the factorial of the cubes of the elements of an array.\
    \ \nWrite a function that returns the sum of the exponential of the elements of\
    \ an array. \nWrite a function that returns the product of the exponential of\
    \ the elements of an array. \nWrite a function that returns the maximum of the\
    \ exponential of the elements of an array. \nWrite a function that returns the\
    \ minimum of the exponential of the elements of an array. \nWrite a function that\
    \ returns the absolute value of the exponential of the elements of an array. \n\
    Write a function that returns the reciprocal of the exponential of the elements\
    \ of an array. \nWrite a function that returns the factorial of the exponential\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ natural logarithms of the elements of an array. \nWrite a function that returns\
    \ the product of the natural logarithms of the elements of an array. \nWrite a\
    \ function that returns the maximum of the natural logarithms of the elements\
    \ of an array. \nWrite a function that returns the minimum of the natural logarithms\
    \ of the elements of an array. \nWrite a function that returns the absolute value\
    \ of the natural logarithms of the elements of an array. \nWrite a function that\
    \ returns the reciprocal of the natural logarithms of the \nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxe4zeavh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxe4zeavh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpey9ovvzz.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpey9ovvzz.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ element of a vector, incremented by 1.\nWrite a function that returns the last\
    \ element of a vector, decremented by 1.\nWrite a function that returns the average\
    \ of a vector.\nWrite a function that returns the median of a vector.\nWrite a\
    \ function that returns the mode of a vector.\nWrite a function that returns the\
    \ standard deviation of a vector.\nWrite a function that returns the variance\
    \ of a vector.\nWrite a function that returns the sum of a vector.\nWrite a function\
    \ that returns the product of a vector.\nWrite a function that returns the minimum\
    \ of a vector.\nWrite a function that returns the maximum of a vector.\nWrite\
    \ a function that returns the absolute value of a vector.\nWrite a function that\
    \ returns the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write a function that returns the absolute value of a vector.\nWrite a function\
    \ that returns the absolute value of a vector.\nWrite a function that returns\
    \ the absolute value of a vector.\nWrite a function that returns the absolute\
    \ value of a vector.\nWrite a function that returns the absolute value of a vector.\n\
    Write \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuol16pbg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuol16pbg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6kpsffhd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6kpsffhd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns the sum of\
    \ the elements of an array. \nThe function should accept a vector of Int64 elements\
    \ and return an Int64 value.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9z8et4rm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9z8et4rm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppju06rfd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppju06rfd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewkdklde.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewkdklde.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the same vector but with each element incremented by\
    \ 1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyzllp97b.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyzllp97b.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp48thifto.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp48thifto.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuldn_9zu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuldn_9zu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfd184jik.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfd184jik.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdn3q0d06.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdn3q0d06.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the vector with its elements incremented by 1.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjo6kplp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjo6kplp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the vector with its elements incremented by 1.\n>>> incr_vector([1,\
    \ 2, 3])\n[2, 3, 4]\n>>> incr_vector([5, 3, 5, 2, 3, 3, 9, 0, 123])\n[6, 4, 6,\
    \ 3, 4, 4, 10, 1, 124]\n</text>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdchwxecg.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdchwxecg.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    length(l) += 1 \n    l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the elements of a list after removing all occurrences of an element from a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid assignment location \"length(l)\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ml3nkj5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ml3nkj5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpligbu9wr.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpligbu9wr.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgbrj5kkq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgbrj5kkq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1ikn1o2z.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ikn1o2z.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp326mz5mo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp326mz5mo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of elements in a vector that are greater than a specified value.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmnp99av.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplmnp99av.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0_zigz01.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0_zigz01.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a list that satisfies a condition. For example, if the\
    \ list contains only positive numbers, return the first positive number. Otherwise,\
    \ return -1.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbaq34a34.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbaq34a34.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the sum of the elements of an array. \n    >>> sum([1, 2, 3])\n    6\n    >>>\
    \ sum([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4i4meb2v.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4i4meb2v.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpas3sj9ak.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpas3sj9ak.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_qa41avf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_qa41avf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpf_8w03j2.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpf_8w03j2.jl:8\n   [2] top-level scope at /tmp/tmpf_8w03j2.jl:16\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf_8w03j2.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpf_8w03j2.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Array{Int64,1}, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] incr_list(::Array{Int64,1}) at /tmp/tmpf_8w03j2.jl:8\n   [2] top-level\
    \ scope at /tmp/tmpf_8w03j2.jl:17\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf_8w03j2.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpf_8w03j2.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpf_8w03j2.jl:8\n   [2] top-level scope at /tmp/tmpf_8w03j2.jl:18\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpf_8w03j2.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpf_8w03j2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of numbers and returns the list with its elements multiplied by 2.\n\
    >>> incr_list_mult([1, 2, 3])\n[2, 4, 6]\n>>> incr_list_mult([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n[5, 15, 35, 5, 15, 35, 35, 95, 125, 150]\n</text>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv02tcacm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv02tcacm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_gepd4fu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_gepd4fu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first element of a vector, incremented by 1.\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2c5gd_3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2c5gd_3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise: Write a function that returns the first element of a list that\
    \ satisfies a condition. For example, suppose you have a list of integers and\
    \ you want to find the first element that satisfies the condition $x^2 + y^2 =\
    \ z^2$. Write a function that returns the first element that satisfies this condition.\
    \ For example, suppose you have a list of integers and you want to find the first\
    \ element that satisfies the condition $x^2 + y^2 = z^2$. Write a function that\
    \ returns the first element that satisfies this condition. For example, suppose\
    \ you have a list of integers and you want to find the first element that satisfies\
    \ the condition $x^2 + y^2 = z^2$. Write a function that returns the first element\
    \ that satisfies this condition. For example, suppose you have a list of integers\
    \ and you want to find the first element that satisfies the condition $x^2 + y^2\
    \ = z^2$. Write a function that returns the first element that satisfies this\
    \ condition. For example, suppose you have a list of integers and you want to\
    \ find the first element that satisfies the condition $x^2 + y^2 = z^2$. Write\
    \ a function that returns the first element that satisfies this condition. For\
    \ example, suppose you have a list of integers and you want to find the first\
    \ element that satisfies the condition $x^2 + y^2 = z^2$. Write a function that\
    \ returns the first element that satisfies this condition. For example, suppose\
    \ you have a list of integers and you want to find the first element that satisfies\
    \ the condition $x^2 + y^2 = z^2$. Write a function that returns the first element\
    \ that satisfies this condition. For example, suppose you have a list of integers\
    \ and you want to find the first element that satisfies the condition $x^2 + y^2\
    \ = z^2$. Write a function that returns the first element that satisfies this\
    \ condition. For example, suppose you have a list of integers and you want to\
    \ find the first element that satisfies the condition $x^2 + y^2 = z^2$. Write\
    \ a function that returns the first element that satisfies this condition. For\
    \ example, suppose you have a list of integers and you want to find the first\
    \ element that satisfies the condition $x^2 + y^2 = z^2$. Write a function that\
    \ returns the first element that satisfies this condition. For example, suppose\
    \ you have a list of integers and you want to find the first element that satisfies\
    \ the condition $x^2 + y^2 = z^2$. Write a function that returns the first element\
    \ that \nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoe5_t9by.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoe5_t9by.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector and returns the same vector but with each element incremented by 1.\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7n0i_80x.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7n0i_80x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    for i = 1:length(l)\n        l[i] = l[i] + 1\n    end\n\
    \    return l\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5fwrhrb7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5fwrhrb7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    \n    while i > 1\n        l[i-1]\
    \ = l[i] - 1\n        i = i-1\n    end\n    \n    return l\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpebgie45i.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpebgie45i.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of a list.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxq4xd8ip.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxq4xd8ip.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpptxcq4h1.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpptxcq4h1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyc5y00vl.jl:17\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpyc5y00vl.jl:9\n   [2] top-level scope at /tmp/tmpyc5y00vl.jl:17\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyc5y00vl.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc5y00vl.jl:18\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  MethodError: no method matching +(::Array{Int64,1}, ::Int64)\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n    +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n\
    \    +(!Matched::Missing, ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n\
    \   [1] incr_list(::Array{Int64,1}) at /tmp/tmpyc5y00vl.jl:9\n   [2] top-level\
    \ scope at /tmp/tmpyc5y00vl.jl:18\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyc5y00vl.jl:16\n  \ntest set: Error During\
    \ Test at /tmp/tmpyc5y00vl.jl:19\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  MethodError:\
    \ no method matching +(::Array{Int64,1}, ::Int64)\n  Closest candidates are:\n\
    \    +(::Any, ::Any, !Matched::Any, !Matched::Any...) at operators.jl:529\n  \
    \  +(!Matched::Complex{Bool}, ::Real) at complex.jl:301\n    +(!Matched::Missing,\
    \ ::Number) at missing.jl:115\n    ...\n  Stacktrace:\n   [1] incr_list(::Array{Int64,1})\
    \ at /tmp/tmpyc5y00vl.jl:9\n   [2] top-level scope at /tmp/tmpyc5y00vl.jl:19\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpyc5y00vl.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyc5y00vl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the elements of an array.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmjtjt2yq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmjtjt2yq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n    l = l |> Vector{Int64}\n\
    \    l = l |> Vector{Int64}\n    l = l |> Vector\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp840vjapj.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp840vjapj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp840vjapj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnwbpv9q.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnwbpv9q.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5csnop6i.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5csnop6i.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i-1] = l[i]\
    \ - 1\n        i = i - 1\n    end\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp94bagyu7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp94bagyu7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the elements of an array. \nWrite a function that returns the product\
    \ of the elements of an array. \nWrite a function that returns the maximum of\
    \ the elements of an array. \nWrite a function that returns the minimum of the\
    \ elements of an array. \nWrite a function that returns the absolute value of\
    \ the elements of an array. \nWrite a function that returns the reciprocal of\
    \ the elements of an array. \nWrite a function that returns the sum of the squares\
    \ of the elements of an array. \nWrite a function that returns the product of\
    \ the squares of the elements of an array. \nWrite a function that returns the\
    \ maximum of the squares of the elements of an array. \nWrite a function that\
    \ returns the minimum of the squares of the elements of an array. \nWrite a function\
    \ that returns the absolute value of the squares of the elements of an array.\
    \ \nWrite a function that returns the reciprocal of the squares of the elements\
    \ of an array. \nWrite a function that returns the sum of the cubes of the elements\
    \ of an array. \nWrite a function that returns the product of the cubes of the\
    \ elements of an array. \nWrite a function that returns the maximum of the cubes\
    \ of the elements of an array. \nWrite a function that returns the minimum of\
    \ the cubes of the elements of an array. \nWrite a function that returns the absolute\
    \ value of the cubes of the elements of an array. \nWrite a function that returns\
    \ the reciprocal of the cubes of the elements of an array. \nWrite a function\
    \ that returns the sum of the exponential of the elements of an array. \nWrite\
    \ a function that returns the product of the exponential of the elements of an\
    \ array. \nWrite a function that returns the maximum of the exponential of the\
    \ elements of an array. \nWrite a function that returns the minimum of the exponential\
    \ of the elements of an array. \nWrite a function that returns the absolute value\
    \ of the exponential of the elements of an array. \nWrite a function that returns\
    \ the reciprocal of the exponential of the elements of an array. \nWrite a function\
    \ that returns the sum of the natural logarithms of the elements of an array.\
    \ \nWrite a function that returns the product of the natural logarithms of the\
    \ elements of an array. \nWrite a function that returns the maximum of the natural\
    \ logarithms of the elements of an array. \nWrite a function that returns the\
    \ minimum of the natural logarithms of the elements of an array. \nWrite a function\
    \ that returns the absolute value of the natural logarithms of the elements of\
    \ an array. \nWrite a function that returns the reciprocal of the natural logarithms\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ absolute value of the elements of an array. \nWrite a function that returns\
    \ the product of the absolute value of the elements of an array. \nWrite a function\
    \ that returns the maximum of the absolute value of the elements of an array.\
    \ \nWrite a function that returns the minimum of the absolute value of the elements\
    \ of an array\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprxhsjvcj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprxhsjvcj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 4\nWrite a function that returns the first\
    \ element of a vector, plus 1.\n    >>> first_element([2, 3, 4])\n    3\n    >>>\
    \ first_element([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuqi031t6.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuqi031t6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements of an array. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a matrix. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite \nusing Test\n\n@testset begin\n\ncandidate\
    \ = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t\
    @test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq2wbqbog.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq2wbqbog.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n@time incr_list([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements of a given list. \nThe function should work\
    \ for both vectors and matrices.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkvw6je_a.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkvw6je_a.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    i = length(l)\n    while i > 1\n        l[i - 1] = l[i\
    \ - 1] + 1\n        i = i - 1\n    end\n    l\nend\n</code>\n<|/ a dscore=1 |>\n\
    <| a dscore=1 |>\nI came up with a solution using only built-in functions:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp68isrxj3.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp68isrxj3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyriyxcqs.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpyriyxcqs.jl:8\n   [5] top-level scope at /tmp/tmpyriyxcqs.jl:16\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpyriyxcqs.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpyriyxcqs.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmpyriyxcqs.jl:8\n   [5] top-level\
    \ scope at /tmp/tmpyriyxcqs.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpyriyxcqs.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmpyriyxcqs.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmpyriyxcqs.jl:8\n   [5] top-level scope at /tmp/tmpyriyxcqs.jl:18\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpyriyxcqs.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyriyxcqs.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nincr_list([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the elements in a vector.\nWrite a function that returns the product of the\
    \ elements in a vector.\nWrite a function that returns the maximum of the elements\
    \ in a vector.\nWrite a function that returns the minimum of the elements in a\
    \ vector.\nWrite a function that returns the absolute value of the elements in\
    \ a vector.\nWrite a function that returns the sign of the elements in a vector.\n\
    Write a function that returns the absolute value of the elements in a vector.\n\
    Write a function that returns the sign of the elements in a vector.\nWrite a function\
    \ that returns the absolute value of the elements in a vector.\nWrite a function\
    \ that returns the sign of the elements in a vector.\nWrite a function that returns\
    \ the absolute value of the elements in a vector.\nWrite a function that returns\
    \ the sign of the elements in a vector.\nWrite a function that returns the absolute\
    \ value of the elements in a vector.\nWrite a function that returns the sign of\
    \ the elements in a vector.\nWrite a function that returns the absolute value\
    \ of the elements in a vector.\nWrite a function that returns the sign of the\
    \ elements in a vector.\nWrite a function that returns the absolute value of the\
    \ elements in a vector.\nWrite a function that returns the sign of the elements\
    \ in a vector.\nWrite a function that returns the absolute value of the elements\
    \ in a vector.\nWrite a function that returns the sign of the elements in a vector.\n\
    Write a function that returns the absolute value of the elements in a vector.\n\
    Write a function that returns the sign of the elements in a vector.\nWrite a function\
    \ that returns the absolute value of the elements in a vector.\nWrite a function\
    \ that returns the sign of the elements in a vector.\nWrite a function that returns\
    \ the absolute value of the elements in a vector.\nWrite a function that returns\
    \ the sign of the elements in a vector.\nWrite a function that returns the absolute\
    \ value of the elements in a vector.\nWrite a function that returns the sign of\
    \ the elements in a vector.\nWrite a function that returns the absolute value\
    \ of the elements in a vector.\nWrite a function that returns the sign of the\
    \ elements in a vector.\nWrite a function that returns the absolute value of the\
    \ elements in a vector.\nWrite a function that returns the sign of the elements\
    \ in a vector.\nWrite a function that returns the absolute value of the elements\
    \ in a vector.\nWrite a function that returns the sign of the elements in a vector.\n\
    Write a function that returns the absolute value of the elements in a vector.\n\
    Write a function that returns the sign of the elements in a vector.\nWrite a function\
    \ that returns the absolute value of the elements in a vector.\nWrite a function\
    \ that returns the sign of the elements in a vector.\nWrite a function that returns\
    \ the absolute value of the elements in a vector.\nWrite a function that returns\
    \ the sign of the elements in a vector.\nWrite a function that returns the absolute\
    \ value of the elements in a vector.\nWrite a function that returns the sign of\
    \ the elements in a vector.\nWrite a function that returns the absolute value\
    \ of the elements in a vector.\nWrite a function that returns the sign of the\
    \ elements in a vector.\nWrite a function that returns the absolute value of the\
    \ elements in a vector.\nWrite a function that \nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx5djq4qq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx5djq4qq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjj11zz2a.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjj11zz2a.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\nusing Test\n\n@testset begin\n\n\
    candidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppju5wm_v.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmppju5wm_v.jl:8\n   [5] top-level scope at /tmp/tmppju5wm_v.jl:16\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmppju5wm_v.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmppju5wm_v.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmppju5wm_v.jl:8\n   [5] top-level\
    \ scope at /tmp/tmppju5wm_v.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmppju5wm_v.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmppju5wm_v.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmppju5wm_v.jl:8\n   [5] top-level scope at /tmp/tmppju5wm_v.jl:18\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmppju5wm_v.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppju5wm_v.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + ones(length(l)) * 1 \n    return l\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\
    \t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu9g2pykg.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu9g2pykg.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64(1)]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpml0znsqd.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpml0znsqd.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [length(l)+1]\n    return l\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\
    \t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3,\
    \ 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp17jd7zpw.jl:16\n  Test threw exception\n\
    \  Expression: candidate(Vector{Int64}([])) == Vector{Int64}([])\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(0),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmp17jd7zpw.jl:8\n   [5] top-level scope at /tmp/tmp17jd7zpw.jl:16\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp17jd7zpw.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp17jd7zpw.jl:17\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [4, 3, 2]\n  DimensionMismatch(\"dimensions must match: a has dims\
    \ (Base.OneTo(3),), b has dims (Base.OneTo(1),), mismatch at 1\")\n  Stacktrace:\n\
    \   [1] promote_shape at ./indices.jl:178 [inlined]\n   [2] promote_shape at ./indices.jl:169\
    \ [inlined]\n   [3] +(::Array{Int64,1}, ::Array{Int64,1}) at ./arraymath.jl:45\n\
    \   [4] incr_list(::Array{Int64,1}) at /tmp/tmp17jd7zpw.jl:8\n   [5] top-level\
    \ scope at /tmp/tmp17jd7zpw.jl:17\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp17jd7zpw.jl:15\n  \ntest set: Error During\
    \ Test at /tmp/tmp17jd7zpw.jl:18\n  Test threw exception\n  Expression: candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124]\n  DimensionMismatch(\"\
    dimensions must match: a has dims (Base.OneTo(9),), b has dims (Base.OneTo(1),),\
    \ mismatch at 1\")\n  Stacktrace:\n   [1] promote_shape at ./indices.jl:178 [inlined]\n\
    \   [2] promote_shape at ./indices.jl:169 [inlined]\n   [3] +(::Array{Int64,1},\
    \ ::Array{Int64,1}) at ./arraymath.jl:45\n   [4] incr_list(::Array{Int64,1}) at\
    \ /tmp/tmp17jd7zpw.jl:8\n   [5] top-level scope at /tmp/tmp17jd7zpw.jl:18\n  \
    \ [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmp17jd7zpw.jl:15\n  \nTest Summary: | Error \
    \ Total\ntest set      |     3      3\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp17jd7zpw.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l .+ 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7u33vusl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7u33vusl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1 \n    return l \nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9xkge8xs.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9xkge8xs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + [Int64]\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    incr_list([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nincr_list([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ a list with elements incremented by 1 until a condition is met. For example,\
    \ if the list is [1, 2, 3, 4], the function should return [2, 3, 4] until the\
    \ number 3 is encountered. Then, it should return [3, 4, 4] until the number 4\
    \ is encountered.\nusing Test\n\n@testset begin\n\ncandidate = incr_list;\n\t\
    @test(candidate(Vector{Int64}([])) == Vector{Int64}([]))\n\t@test(candidate([3,\
    \ 2, 1]) == [4, 3, 2])\n\t@test(candidate([5, 2, 5, 2, 3, 3, 9, 0, 123]) == [6,\
    \ 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaoh3kehx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaoh3kehx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = copy(l)\n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2u9tzdh.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg2u9tzdh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return list with elements incremented by 1.\n    >>> incr_list([1,\
    \ 2, 3])\n    [2, 3, 4]\n    >>> incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n  \
    \  [6, 4, 6, 3, 4, 4, 10, 1, 124]\n    \"\"\"\nfunction incr_list(l::Vector{Int64})::Vector{Int64}\
    \ \n    l = l + 1\n    return l\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ incr_list([1, 2, 3])\n@time incr_list([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the elements of a\
    \ vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a vector.\
    \ \nWrite a function that returns the sum of the elements of a vector. \nWrite\
    \ a function that returns the sum of the elements of a vector. \nWrite a function\
    \ that returns the sum of the elements of a vector. \nWrite a function that returns\
    \ the sum of the elements of a vector. \nWrite a function that returns the sum\
    \ of the elements of a vector. \nWrite a function that returns the sum of the\
    \ elements of a vector. \nWrite a function that returns the sum of the elements\
    \ of a vector. \nWrite a function that returns the sum of the elements of a \n\
    using Test\n\n@testset begin\n\ncandidate = incr_list;\n\t@test(candidate(Vector{Int64}([]))\
    \ == Vector{Int64}([]))\n\t@test(candidate([3, 2, 1]) == [4, 3, 2])\n\t@test(candidate([5,\
    \ 2, 5, 2, 3, 3, 9, 0, 123]) == [6, 3, 6, 3, 4, 4, 10, 1, 124])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp34xsym6k.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp34xsym6k.jl:11\n"
  exit_code: 1
  status: Exception
