name: HumanEval_8_sum_product
language: julia
prompt: "\"\"\" For a given list of integers, return a tuple consisting of a sum and\
  \ a product of all the integers in a list.\n    Empty sum should be equal to 0 and\
  \ empty product should be equal to 1.\n    >>> sum_product([])\n    (0, 1)\n   \
  \ >>> sum_product([1, 2, 3, 4])\n    (10, 24)\n    \"\"\"\nfunction sum_product(numbers::Vector{Int64})::Tuple{Int64,\
  \ Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = sum_product;\n\t@test(candidate(Vector{Int64}([]))\
  \ == (0, 1))\n\t@test(candidate([1, 1, 1]) == (3, 1))\n\t@test(candidate([100, 0])\
  \ == (100, 0))\n\t@test(candidate([3, 5, 7]) == (15, 105))\n\t@test(candidate([10])\
  \ == (10, 10))\nend\n"
completions: ["    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nThe function should raise a TypeError if the\
    \ vector is empty.\nThe function should raise a TypeError if the vector contains\
    \ non-integer values.\nThe function should raise a TypeError if the vector contains\
    \ negative values.\nThe function should raise a TypeError if the vector contains\
    \ values larger than the maximum integer value.\nThe function should raise a TypeError\
    \ if the vector contains values smaller than the minimum integer value.\nThe function\
    \ should raise a TypeError if the vector contains values outside the range of\
    \ Int64.\nThe function should raise a TypeError if the vector contains NaN values.\n\
    The function should raise a TypeError if the vector contains infinities or negative\
    \ infinities.\nThe function should raise a TypeError if the vector contains values\
    \ outside the range of Int64.\nThe function should raise a TypeError if the vector\
    \ contains values outside the range of Int64.\nThe function should raise a TypeError\
    \ if the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int64.\n\
    The function should raise a TypeError if the vector contains values outside the\
    \ range of Int64.\nThe function should raise a TypeError if the vector contains\
    \ values outside the range of Int64.\nThe function should raise a TypeError if\
    \ the vector contains values outside the range of Int64.\nThe function should\
    \ raise a TypeError if the vector contains values outside the range of Int", " \
    \   if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_\
    \ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n         \
    \   sum_ = sum_ + i\n            prod_ = prod_ * i\n        return (sum_, prod_)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([", "    sum_product = sum(numbers)\n    product_product\
    \ = 1\n    for i in numbers\n        product_product *= i\n    end\n    return\
    \ (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the squares\
    \ of the numbers in a vector.\n    >>> sum_of_squares([1,2,3,4,5])\n    25\n \
    \   >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    >>> ", "    if\
    \ length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1]\n        product_of_numbers = numbers[1]\n        for number in\
    \ numbers[2:end] \n            sum_product = sum_product + number\n          \
    \  product_of_numbers = product_of_numbers * number\n        end\n        return\
    \ (sum_product, product_of_numbers)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square_of_list([])\n\
    \    0.0\n    >>> sum_square_of_list([4, 9, 16])\n    49.0\n    \"\"\"", "   \
    \ if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_ =\
    \ numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n           \
    \ sum_ += i\n            prod_ *= i\n        return (sum_, prod_)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 3)\n\
    @assert sum_product([1, 2, 3, 4]) == (10, 24)\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a list of integers and returns a list of all possible\
    \ permutations of the integers in the list.\nFor example, given [1,2,3], the function\
    \ should return [1,2,3], [1,3,2], [2,1,3], [2,3,1], [3,1,2], and [3,2,1].\nThe\
    \ order of the output does not matter.\nThe function should work for lists of\
    \ any size.\nThe function should work for empty lists as well.\nThe function should\
    \ work for any type of collection that implements length.\nThe function should\
    \ work for any type of collection that implements append.\nThe function should\
    \ work for any type of collection that implements push.", "    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[length(numbers)] \n        return (sum_product, sum_product * numbers[1])\
    \ \nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns a vector of integers containing the squares of the integers\
    \ in the vector.\nFor example, given [1,2,3], the function should return [1,2,3].\n\
    The function should return nothing if the vector is empty.\nThe function should\
    \ return nothing if the vector is of length 1.\nThe function should return nothing\
    \ if the vector is of length 2.\nThe function should return nothing if the vector\
    \ is of length 3.\nThe function should return nothing if the vector is of length\
    \ 4.\nThe function should return nothing if the vector is of length 5.\nThe function\
    \ should return nothing if the vector is of length 6.\nThe function should return\
    \ nothing if the vector is of length 7.\nThe function should return nothing if\
    \ the vector is of length 8.\nThe function should return nothing if the vector\
    \ is of length 9.\nThe function should return nothing if the vector is of length\
    \ 10.\nThe function should return nothing if the vector is of length 11.\nThe\
    \ function should return nothing if the vector is of length 12.\nThe function\
    \ should return nothing if the vector is of length 13.\nThe function should return\
    \ nothing if the vector is of length 14.\nThe function should return nothing if\
    \ the vector is of length 15.\nThe function should return nothing if the vector\
    \ is of length 16.\nThe function should return nothing if the vector is of length\
    \ 17.\nThe function should return nothing if the vector is of length 18.\nThe\
    \ function should return nothing if the vector is of length 19.\nThe function\
    \ should return nothing if the vector is of length 20.\nThe function should return\
    \ nothing if the vector is of length 21.\nThe function should return nothing if\
    \ the vector is of length 22.\nThe function should return nothing if the vector\
    \ is of length 23.\nThe function should return nothing if the vector is of length\
    \ 24.\nThe function should return nothing if the vector is of length 25.\nThe\
    \ function should return nothing if the vector is of length 26.\nThe function\
    \ should return nothing if the vector is of length 27.\nThe function should return\
    \ nothing if the vector is of length 28.\nThe function should return nothing if\
    \ the vector is of length 29.\nThe function should return nothing if the vector\
    \ is of length 30.\nThe function should return nothing if the vector is of length\
    \ 31.\nThe function should return nothing if the vector is of length 32.\nThe\
    \ function should return nothing if the vector is of length 33.\nThe function\
    \ should return nothing if the vector is of length 34.\nThe function should return\
    \ nothing if the vector is of length 35.\n", "    sum_ = 0\n    product_ = 1\n\
    \    for n in numbers\n        sum_ = sum_ + n\n        product_ = product_ *\
    \ n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 7: Write a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\n    >>> sum_of_squares([1,2,3,4])\n\
    \    25\n    >>> sum_of_squares([-3,-2,-1,0,1,2,3])\n    25\n    \"\"\"", "  \
    \  sum_product = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.\n    >>> sum_squares_list([])\n\
    \    0.0\n    >>> sum_squares_list([1, 2, 3, 4])\n    25.0\n    \"\"\"", "   \
    \ sum = zero(Int64)\n    product = one(Int64)\n    for n in numbers\n        sum\
    \ += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]", "    if length(numbers) == 0 \n        return (0,\
    \ 1) \n    else \n        sum_ = numbers[1]\n        prod_ = 1\n        for i\
    \ in numbers[2:end] \n            sum_ = sum_ + i \n            prod_ = prod_\
    \ * i \n        return (sum_, prod_)\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector and a number as inputs and returns the sum of\
    \ the numbers in the vector up to and including the number.", "    sum_product\
    \ = numbers[1]\n    product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n\
    \        sum_product = sum_product + number\n        product_of_numbers = product_of_numbers\
    \ * number\n    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the integers in a\
    \ given list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    >>> sum_square([-1,\
    \ 2, -3, 4])\n    25\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the dot product of\
    \ the vector with itself. \nThe dot product is defined as:", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a given list.\n    >>> sum_square_of_numbers([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_numbers([1, 2, -3, 4])\n    25\n    >>> sum_square_of_numbers([])\n\
    \    0\n    \"\"\"", "    if length(numbers) == 0 \n        return (0, 1) \n \
    \   else \n        sum_ = numbers[1] + numbers[2] + numbers[3] + numbers[4] +\
    \ numbers[5] + numbers[6] + numbers[7] + numbers[8] + numbers[9] + numbers[10]\
    \ + numbers[11] + numbers[12] + numbers[13] + numbers[14] + numbers[15] + numbers[16]\
    \ + numbers[17] + numbers[18] + numbers[19] + numbers[20] + numbers[21] + numbers[22]\
    \ + numbers[23] + numbers[24] + numbers[25] + numbers[26] + numbers[27] + numbers[28]\
    \ + numbers[29] + numbers[30] + numbers[31] + numbers[32] + numbers[33] + numbers[34]\
    \ + numbers[35] + numbers[36] + numbers[37] + numbers[38] + numbers[39] + numbers[40]\
    \ + numbers[41] + numbers[42] + numbers[43] + numbers[44] + numbers[45] + numbers[46]\
    \ + numbers[47] + numbers[48] + numbers[49] + numbers[50] + numbers[51] + numbers[52]\
    \ + numbers[53] + numbers[54] + numbers[55] + numbers[56] + numbers[57] + numbers[58]\
    \ + numbers[59] + numbers[60] + numbers[61] + numbers[62] + numbers[63] + numbers[64]\
    \ + numbers[65] + numbers[66] + numbers[67] + numbers[68] + numbers[69] + numbers[70]\
    \ + numbers[71] + numbers[72] + numbers[73] + numbers[74] + numbers[75] + numbers[76]\
    \ + numbers[77] + numbers[78] + numbers[79] + numbers[80] + numbers[81] + numbers[82]\
    \ + numbers[83] + numbers[84] + numbers[85] + numbers[86] + numbers[87] + numbers[88]\
    \ + numbers[89] + numbers[90] + numbers[91] + numbers[92] + numbers[93] + numbers[94]\
    \ + numbers[95] + numbers[96] + numbers[97] + numbers[98] + numbers[99] + numbers[100]\
    \ + numbers[101] + numbers[102] + numbers[103] + numbers[104] + numbers[105] +\
    \ numbers[106] + numbers[107] + numbers[108] + numbers[109] + numbers[110] + numbers[111]\
    \ + numbers[112] + numbers[113] + numbers[114] + numbers[115] + numbers[116] +\
    \ numbers[117] + numbers[118] + numbers[", "    sum_product = numbers[1]\n   \
    \ product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n        sum_product\
    \ = sum_product + number\n        product_of_numbers = product_of_numbers * number\n\
    \    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.\n    >>> square_sum([1,2,3,4,5])\n    25\n    >>> square_sum([1,4,9,16,25])\n\
    \    490\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_", "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3,\
    \ 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n25\n>>> square_sum([1, 2, -3, 4])\n\
    25\n>>> square_sum([-1, -2, -3, -4, 5])\n25\n>>> square_sum([1, 2, -3, 4, 5])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, 6])\n25\n>>> square_sum([1, 2, -3, 4,\
    \ -5, 6])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, 7])\n25\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, 7])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, 8])\n\
    25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, 8])\n25\n>>> square_sum([-1, -2,\
    \ -3, -4, -5, -6, -7, -8])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8])\n\
    25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9])\n25\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, -7, -8, 9])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, 9, 10])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, 10])\n25\n\
    >>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10, 11])\n25\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, -7, -8, 9, 10, 11])\n25\n>>> square_sum([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, 9, 10, 11, 12])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8,\
    \ 9, 10, 11, 12])\n25\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, 10,\
    \ 11, 12, 13])\n25\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, 10, 11, 12,\
    \ 13])\n25\n>>> square_sum([-1, -2, -3, -4, -", "    sum = 0\n    product = 1\n\
    \    for number in numbers\n        sum += number\n        product *= number\n\
    \    return (sum, product)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the squares of the numbers in a list.\nThe function\
    \ should take a list of integers as an argument, and return a list of squared\
    \ integers.\nThe function should return an empty list if the list is empty.\n\
    The function should raise an error if the list contains non-integer values.\n\
    >>> square_sum([])\n[]\n>>> square_sum([1, 2, 3, 4])\n[4, 9, 16, 25]\n>>> square_sum([1,\
    \ 2, \"3\", 4])\n[4, 9, 16, 25]\n>>> square_sum([1, 2, \"3\", 4])\nERROR: TypeMismatch(\"\
    expected Int, got String\")\n\"\"\"", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum_product = numbers[1]\n        prod_product =\
    \ 1\n        for i in numbers[2:end]\n            sum_product += i\n         \
    \   prod_product *= i\n        return (sum_product, prod_product)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 3)\n\
    @assert sum_product([1, 2, 3, 4, 5]) == (20, 120)\n@assert sum_product([1, 2,\
    \ 3, 4, 5]) == (20, 120)\n</cell>\n<text>\nProblem 7\nWrite a function that returns\
    \ the sum of the squares of the first $n$ integers in a vector. \nFor example,\
    \ sum_of_squares([4, 9, 16, 25]) should return 385. \nIf there are less than $n$\
    \ integers in the vector, return $0$.\nIf there are no integers in the vector,\
    \ return $0$.", "    sum = Int64(0)\n    prod = Int64(1)\n    for x in numbers\n\
    \        sum = sum + x\n        prod = prod * x\n    return (sum, prod)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a list.\nThe function should work for both real and complex\
    \ numbers.\nThe function should work for any number of arguments.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\nThe function\
    \ should work for any type of numbers, not just integers and floats.\n", "   \
    \ if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1]\n        product = 1\n        for i in numbers[2:end]\n       \
    \     product *= i\n            sum_product += product\n        return (sum_product,\
    \ product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,\
    \ 2, 3]) == (6, 3)\n@assert sum_product([1, 2, 3, 4, 5]) == (24, 120)\n@assert\
    \ sum_product([1, 2, 3, 4, 5]) == (24, 120)\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that returns the sum of the squares of the first $n$ integers in\
    \ a list.\nIf $n$ is less than or equal to 0, return 0.\nIf $n$ is greater than\
    \ the number of integers in the list, raise an error.\nThe function should work\
    \ for any $n$, including negative numbers.", "    sum_ = 0\n    product_ = 1\n\
    \    for n in numbers\n        sum_ = sum_ + n\n        product_ = product_ *\
    \ n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers containing the first n integers of the vector.\n\
    For instance, if the vector is [1,2,3,4,5,6,7,8,9], the function should return\
    \ [1,2,3,4,5,6].\nIf the vector is empty, the function should return an empty\
    \ vector.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both vectors of integers and vectors of\
    \ floats.\nThe function should work for both ", "    sum_ = 0\n    product_ =\
    \ 1\n    for number in numbers\n        sum_ = sum_ + number\n        product_\
    \ = product_ * number\n    return (sum_, product_)\nend", "    sum_ = 0\n    product_\
    \ = 1\n    for i in numbers\n        sum_ = sum_ + i\n        product_ = product_\
    \ * i\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120,121,122,123,124,125,126,127,128,129,130,131,132,133,134,135,136,137,138,139,140,141,142,143,144,145,146,147,148,149,150,151,152,153,154,155,156,157,158,159,160,161,162,163,164,165,166,167,168,169,170,171,172,173,174,175,176,177,178,179,180,181,182,183,184,185,186,187,188,189,190,191,192,193,194,195,196,197,198,199,200,201,202,203,204,205,206,207,208,209,210,211,212,213,214,215,216,217,218,219,220,221,222,223,224,225,226,227,228,229,230,23",
  "    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_ += n\n     \
    \   product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the sum of the squares of the numbers in a given vector.\nThe function\
    \ should work for both real and complex numbers.\nThe function should work for\
    \ both vectors and matrices.\nThe function should work for both scalars and vectors.",
  "    if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_ =\
    \ numbers[1] + numbers[2] \n        prod_ = numbers[1] * numbers[2] \n       \
    \ return (sum_, prod_) \nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the elements in the vector. \nWrite a\
    \ function that takes a vector and returns the product of the elements in the\
    \ vector. \nWrite a function that takes a vector and returns the sum and product\
    \ of the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite ", " \
    \   if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1] + numbers[0]\n        product_product = 1\n        for i in 2:length(numbers)\
    \ \n            sum_product = sum_product + numbers[i]\n            product_product\
    \ = product_product * numbers[i]\n        end\n        return (sum_product, product_product)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ integers in a given list.\n    >>> sum_square([1,2,3,4])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n\
    \    25\n    >>> sum_square([-3,-2,-1,0,1,2,3])\n    25\n    >>> sum_square([-",
  "    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,", "    sum_product\
    \ = sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\n    >>> square_sum([])\n    0\n    >>> square_sum([1,\
    \ 2, 3, 4])\n    25\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns a list\
    \ of all unique elements in the list.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consists of an element in the original list and a boolean indicating\
    \ whether that element was in the original list before.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of tuples,\
    \ where each tuple consist", "    sum_ = 0\n    product_ = 1\n    for number in\
    \ numbers\n        sum_ = sum_ + number\n        product_ = product_ * number\n\
    \    end\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum_product = numbers[1] * numbers[0]\n        sum_product\
    \ = sum_product + sum_product(numbers[2:end])\n        return (sum_product, numbers[1]\
    \ * numbers[2])\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,\
    \ 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum\
    \ of the squares of the first n integers in a list.\nIf n is greater than the\
    \ length of the list, return 0.\nThe function should work for both positive and\
    \ negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function should work for both positive and negative integers.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both positive and negative integers.\nThe function should work\
    \ for both positive and negative integers.\nThe function should work for both\
    \ positive and negative integers.\nThe function should work for both positive\
    \ and negative integers.\nThe function should work for both positive and negative\
    \ integers.\nThe function ", "    sum_ = 0\n    product_ = 1\n    for n in numbers\n\
    \        sum_ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of integers and returns\
    \ the sum of the squares of the integers in the list.\nThe function should return\
    \ 0 if the list is empty.\nThe function should return 0 if the list contains only\
    \ integers.\nThe function should return 0 if the list contains only negative integers.\n\
    The function should return 0 if the list contains only positive integers.\nThe\
    \ function should return 0 if the list contains only non-integer values.\nThe\
    \ function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n\
    The function should return 0 if the list contains only integers that are not integers.\n",
  "    if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1]\n        product_of_numbers = numbers[1]\n        for number in\
    \ numbers[2:end] \n            sum_product = sum_product + number\n          \
    \  product_of_numbers = product_of_numbers * number\n        end\n        return\
    \ (sum_product, product_of_numbers)\n    end\nend\n</code>\n<|/ a tags=julia,function,for-loop,arrays\
    \ |>\n<| a tags=julia,function,for-loop,arrays |>\n<code>", "    sum_product =\
    \ sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,", "    sum_product = sum(numbers)\n   \
    \ product_of_numbers = prod(numbers)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<text>\nExercise 3: Write a function that takes a vector of integers\
    \ and returns a vector of sums of all the integers in the vector.\n    Empty sums\
    \ should be equal to 0.\n    >>> sum_vector([1, 2, 3])\n    [1, 2, 3]\n    >>>\
    \ sum_vector([])\n    [0]\n    \"\"\"", "    sum_ = 0\n    product_ = 1\n    for\
    \ number in numbers\n        sum_ = sum_ + number\n        product_ = product_\
    \ * number\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of numbers and returns the sum\
    \ of the squares of the numbers in the list.\nThe squares should be calculated\
    \ using the formula $x^2$", "    sum = product = 1\n    for n in numbers\n   \
    \     sum *= n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes in a list of integers and returns the sum of\
    \ the squares of the integers in the list.\nThe function should return 0 if the\
    \ list is empty.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe function should return 0 if the list contains only 1 integer.\n\
    The function should return 0 if the list contains only 1 integer.\nThe function\
    \ should return 0 if the list contains only 1 integer.\nThe function should return\
    \ 0 if the list contains only 1 integer.\nThe function should return 0 if the\
    \ list contains only 1 integer.\nThe function should return 0 if the list contains\
    \ only 1 integer.\nThe ", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </", "    if length(numbers) == 0 \n        return (0, 1) \n    else \n      \
    \  sum_product = numbers[1] * numbers[0]\n        sum_product = sum_product +\
    \ sum_product(numbers[2:end])\n        return (sum_product, numbers[1] * numbers[0])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe function should\
    \ work for an empty list as well.\nThe function should work for a list of integers\
    \ of any length.\nThe function should work for a list of integers of even length.\n\
    The function should work for a list of integers of odd length.\nThe function should\
    \ work for a list of integers of even length.\nThe function should work for a\
    \ list of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.\nThe function should work for a list of integers\
    \ of even length.\nThe function should work for a list of integers of odd length.\n\
    The function should work for a list of integers of even length.\nThe function\
    \ should work for a list of integers of odd length.\nThe function should work\
    \ for a list of integers of even length.\nThe function should work for a list\
    \ of integers of odd length.", "    sum = 0\n    product = 1\n    for number in\
    \ numbers\n        sum += number\n        product *= number\n    return (sum,\
    \ product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that returns the sum of the squares of the\
    \ integers in a given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>>\
    \ sum_square_of_list([1,2,3])\n    9.0\n    \"\"\"", "    if length(numbers) ==\
    \ 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1]\n  \
    \      product_of_numbers = numbers[1]\n        for i in 2:length(numbers) \n\
    \            sum_product = sum_product + numbers[i]\n            product_of_numbers\
    \ = product_of_numbers * numbers[i]\n        end\n        return (sum_product,\
    \ product_of_numbers)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)", " \
    \   sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_ += n\n    \
    \    product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\nThe squares should be calculated using the formula $x^2$\nThe function\
    \ should return nothing but a tuple consisting of the sum of the squares and the\
    \ sum of the integers in the vector.\nThe function should raise an error if the\
    \ vector is empty.\nThe function should raise an error if the vector contains\
    \ non-integer values.\nThe function should raise an error if the vector contains\
    \ negative values.\nThe function should raise an error if the vector contains\
    \ values greater than $10$\nThe function should raise an error if the vector contains\
    \ values greater than $100$\nThe function should raise an error if the vector\
    \ contains values greater than $1000$\nThe function should raise an error if the\
    \ vector contains values greater than $10000$\nThe function should raise an error\
    \ if the vector contains values greater than $100000$\nThe function should raise\
    \ an error if the vector contains values greater than $1000000$\nThe function\
    \ should raise an error if the vector contains values greater than $10000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $100000000$\nThe function should raise an error if the vector contains values\
    \ greater than $1000000000$\nThe function should raise an error if the vector\
    \ contains values greater than $10000000000$\nThe function should raise an error\
    \ if the vector contains values greater than $100000000000$\nThe function should\
    \ raise an error if the vector contains values greater than $1000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $10000000000000$\nThe function should raise an error if the vector contains\
    \ values greater than $100000000000000$\nThe function should raise an error if\
    \ the vector contains values greater than $1000000000000000$\nThe function should\
    \ raise an error if the vector contains values greater than $10000000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $100000000000000000$\nThe function should raise an error if the vector contains\
    \ values greater than $1000000000000000000$\nThe function should raise an error\
    \ if the vector contains values greater than $10000000000000000000$\nThe function\
    \ should raise an error if the vector contains values greater than $100000000000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $1000000000000000000000$\nThe function should raise an error if the vector contains\
    \ values greater than $10000000000000000000000$\nThe function should raise an\
    \ error if the vector contains values greater than $100000000000000000000000$\n\
    The function should raise an error if the vector contains values greater than\
    \ $1000000000000000000000000$\nThe function should raise an error if the vector\
    \ contains values ", "    if length(numbers) == 0 \n        return (0, 1) \n \
    \   else \n        sum_ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n\
    \            sum_ = sum_ + i\n            prod_ = prod_ * i\n        return (sum_,\
    \ prod_)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the product of the elements in the vector. \n\
    Write a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector and returns the\
    \ sum and product of the elements in the vector. \nWrite a function that takes\
    \ a vector and returns the sum and product of the elements in the vector. \nWrite\
    \ a function that takes a vector and returns the sum and product of the elements\
    \ in the vector. \nWrite a function that takes a vector and returns the sum and\
    \ product of the elements in the vector. \nWrite a function that takes a vector\
    \ and returns the sum and product of the elements in the vector. \nWrite a function\
    \ that takes a vector and returns the sum and product of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum and product of the\
    \ elements in the vector. \nWrite a function that takes a vector ", "    sum_product\
    \ = Int64(0)\n    product_of_numbers = Int64(1)\n    for number in numbers\n \
    \       sum_product += number\n        product_of_numbers = number * product_of_numbers\n\
    \    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns the sum of the absolute\
    \ values of the elements in the vector. \nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for ", "    if length(numbers) == 0 \n        return (0, 1) \n    else\
    \ \n        sum_ = numbers[1] + numbers[0] \n        prod_ = 1\n        for i\
    \ in 2:length(numbers) \n            sum_ += numbers[i] \n            prod_ *=\
    \ i \n        return (sum_, prod_) \nend\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a list of integers and returns the sum of the squares of\
    \ the integers in the list.\nThe function should raise an error if the list is\
    \ empty.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains negative numbers.\n\
    The function should raise an error if the list contains non-positive numbers.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-integer elements.\n\
    The function should raise an error if the list contains non-", "    sum_ = 0\n\
    \    product_ = 1\n    for n in numbers\n        sum_ += n\n        product_ *=\
    \ n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given list.\n    >>> sum_square_of_list([])\n    0.0\n \
    \   >>> sum_square_of_list([1,2,3])\n    9.0\n    \"\"\"", "    sum_product =\
    \ numbers[1]\n    product = 1\n    for i in numbers[2:end]\n        product *=\
    \ i\n        sum_product += product\n    end\n    return sum_product, product\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a vector.\n>>> sum_square_of_vector([1,2,3])\n25\n>>> sum_square_of_vector([1,4,9])\n\
    49\n>>> sum_square_of_vector([1,4,9,16])\n81\n>>> sum_square_of_vector([1,4,9,16,25])\n\
    1225\n>>> sum_square_of_vector([1,4,9,16,25,36])\n15683\n>>> sum_square_of_vector([1,4,9,16,25,36,49])\n\
    204457\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64])\n2469025\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81])\n\
    292581181\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100])\n4134962825\n\
    >>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121])\n4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189,225])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189,225,250])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,100,121,144,161,189,225,250,289])\n\
    4134962825\n>>> sum_square_of_vector([1,4,9,16,25,36,49,64,81,", "    if length(numbers)\
    \ == 0 \n        (0, 1) \n    else \n        sum_product(numbers[1:], numbers[0]*numbers[1])\
    \ \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,julia |>\n<code>",
  "    sum_product = Int64(0)\n    product_of_numbers = Int64(1)\n    for number in\
    \ numbers\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, ", " \
    \   if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_\
    \ = numbers[1]\n        prod_ = 1\n        for i in numbers[2:end]\n         \
    \   sum_ += i\n            prod_ *= i\n        return (sum_, prod_)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)", "    sum_ = 0\n    product_ = 1\n    for number in numbers\n   \
    \     sum_ = sum_ + number\n        product_ = product_ * number\n    return (sum_,\
    \ product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\n>>> square_sum([])\n\
    0.0\n>>> square_sum([1, 2, 3, 4])\n25.0\n>>> square_sum([-1, -2, -3, -4])\n25.0\n\
    >>> square_sum([1, 2, -3, 4])\n25.0\n>>> square_sum([-1, -2, -3, -4, 5])\n25.0\n\
    >>> square_sum([1, 2, -3, 4, 5])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, 6])\n\
    25.0\n>>> square_sum([1, 2, -3, 4, -5, 6])\n25.0\n>>> square_sum([-1, -2, -3,\
    \ -4, -5, -6, 7])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, 7])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, 8])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, -7,\
    \ 8])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8])\n25.0\n>>> square_sum([1,\
    \ 2, -3, 4, -5, -6, -7, -8])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7,\
    \ -8, 9])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, 10])\n25.0\n>>> square_sum([1, 2, -3, 4, -5,\
    \ -6, -7, -8, 9, 10])\n25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9,\
    \ -10, 11])\n25.0\n>>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, -10, 11])\n\
    25.0\n>>> square_sum([-1, -2, -3, -4, -5, -6, -7, -8, 9, -10, -12, 13])\n25.0\n\
    >>> square_sum([1, 2, -3, 4, -5, -6, -7, -8, 9, -10, -12, 13])\n25.0\n>>> square_sum([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, 9, -10, -12, 13, 14])\n25.0\n", "    sum = 0\n \
    \   product = 1\n    for number in numbers\n        sum = sum + number\n     \
    \   product = product * number\n    return (sum, product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector. \nThe function should work for both real and\
    \ complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both real\
    \ and complex numbers.\nThe function should work for both real and complex numbers.\n\
    The function should work for both real and complex numbers.\nThe function should\
    \ work for both real ", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\n>>> square_sum([])\n0\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([-1, -2, -3, -4])\n25\n>>> square_sum([1, 2, -3,\
    \ 4])\n25\n>>> square_sum([1, 2, -3, -4])\n25\n>>> square_sum([1, 2, 3, -4, 5])\n\
    25\n>>> square_sum([1, 2, 3, -4, -5, 6])\n25\n>>> square_sum([1, 2, 3, -4, -5,\
    \ -6, 7])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, 8])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8,\
    \ 9])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8, -9, 10])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8, -9, -10, 11])\n25\n>>> square_sum([1, 2, 3, -4, -5,\
    \ -6, -7, -8, -9, -10, -10, 12])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7,\
    \ -8, -9, -10, -10, -10, 13])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8,\
    \ -9, -10, -10, -10, -10, 14])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6, -7, -8,\
    \ -9, -10, -10, -10, -10, -10, 15])\n25\n>>> square_sum([1, 2, 3, -4, -5, -6,\
    \ -7, -8, -9, -10, -10, -10, -10, -10, -10, 16])\n25\n>>> square_sum([1, 2, 3,\
    \ -4, -5, -6, -7, -8, -9, -10, -10, -10, -10, -10, -10, -17])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8, -9, -10, -10, -10, -10, -10, -10, -18])\n25\n>>> square_sum([1,\
    \ 2, 3, -4, -5, -6, -7, -8, -9, -10, -10, -10, ", "    sum_ = 0\n    product_\
    \ = 1\n    for number in numbers\n        sum_ = sum_ + number\n        product_\
    \ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)", "    sum_ = 0\n    product_ = 1\n   \
    \ for number in numbers\n        sum_ += number\n        product_ *= number\n\
    \    return (sum_, product_)\nend", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ a new vector with the elements of the original vector multiplied by 2.\n   \
    \ >>> vec = [1, 2, 3, 4]\n    >>> vec2 = vectorize_function(vec)\n    >>> vec2\n\
    \    [2, 4, 6, 8]\n    \"\"\"", "    sum_ = 0\n    product_ = 1\n    for n in\
    \ numbers\n        sum_ += n\n        product_ *= n\n    return (sum_, product_)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe sum of\
    \ the squares should be equal to the sum of the squares of the integers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector contains non-integer values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains values greater than 100.\nThe function\
    \ should raise an error if the vector contains values less than 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.\nThe function should\
    \ raise an error if the vector contains values greater than or equal to 100.\n\
    The function should raise an error if the vector contains values less than or\
    \ equal to 0.\nThe function should raise an error if the vector contains values\
    \ greater than or equal to 100.\nThe function should raise an error if the vector\
    \ contains values less than or equal to 0.\nThe function should raise an error\
    \ if the vector contains values greater than or equal to 100.\nThe function should\
    \ raise an error if the vector contains values less than or equal to 0.\nThe function\
    \ should raise an error if the vector contains values greater than or equal to\
    \ 100.\nThe function should raise an error if the vector contains values less\
    \ than or equal to 0.\nThe function should raise an error if the vector contains\
    \ values greater than or equal to 100.\nThe function should raise an error if\
    \ the vector contains values less than or equal to 0.\nThe function should raise\
    \ an error if the vector contains values greater than or equal to 100.\nThe function\
    \ should raise an error if the vector contains values less than or equal to 0.\n\
    The function should raise an error if the vector contains values greater than\
    \ or equal to 100.\nThe function should raise an error if the vector contains\
    \ values less than or equal to 0.\nThe function should raise an error if the vector\
    \ contains values greater than or equal to 100.\nThe function should raise an\
    \ error if the vector contains values less than or equal to 0.", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return\
    \ (sum_product, product_of_numbers)\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,function,sum,product\
    \ |>\n<code>", "    if length(numbers) == 0 \n        return (0, 1) \n    else\
    \ \n        sum_product = numbers[1] + numbers[2]\n        product_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, product_product)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1, 2, 3]) == (6, 6)\n\
    @assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6,\
    \ 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3])\
    \ == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3]) == (6, 6)\n@assert sum_product([1, 2, 3]", "    sum_ = 0\n    product_\
    \ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_ = product_\
    \ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.0>\n\
    @time sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.\nThe function should work for vectors of any\
    \ length.\nThe function should work for vectors of any type.\nThe function should\
    \ work for vectors of any element type.", "    if length(numbers) == 0 \n    \
    \    return (0, 1) \n    else \n        sum_ = numbers[1]\n        prod_ = 1\n\
    \        for i in numbers[2:end]\n            sum_ += i\n            prod_ *=\
    \ i\n        return (sum_, prod_)\n    end\nend\n</code>\n<|/ a tags=julia,list\
    \ |>\n<| c |>\nThanks for your answer. Your code is very concise, but I wonder\
    \ if there is a way to do it without using loops.\n<|/ c |>\n<| c |>\nI guess\
    \ there is, but I haven't found it yet. I'll keep looking.\n<|/ c |>\n<| c |>\n\
    I added a solution that doesn't use loops.\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. \nThe function should raise an error if the vector is empty.\n\
    >>> sum_squares([])\n0\n>>> sum_squares([1, 2, 3, 4])\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4])\n25\n>>> sum_squares([-1, 2, -3, 4], 0)\n0\n>>> sum_squares([-1,\
    \ 2, -3, 4], 1)\n25\n>>> sum_squares([-1, 2, -3, 4], 2)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 3)\n25\n>>> sum_squares([-1, 2, -3, 4], 4)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 5)\n25\n>>> sum_squares([-1, 2, -3, 4], 6)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 7)\n25\n>>> sum_squares([-1, 2, -3, 4], 8)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 9)\n25\n>>> sum_squares([-1, 2, -3, 4], 10)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 11)\n25\n>>> sum_squares([-1, 2, -3, 4], 12)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 13)\n25\n>>> sum_squares([-1, 2, -3, 4], 14)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 15)\n25\n>>> sum_squares([-1, 2, -3, 4], 16)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 17)\n25\n>>> sum_squares([-1, 2, -3, 4], 18)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 19)\n25\n>>> sum_squares([-1, 2, -3, 4], 20)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 21)\n25\n>>> sum_squares([-1, 2, -3, 4], 22)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 23)\n25\n>>> sum_squares([-1, 2, -3, 4], 24)\n25\n>>> sum_squares([-1,\
    \ 2, -3, 4], 25)\n25\n>>> ", "    sum_product = Int64(0)\n    product_of_numbers\
    \ = Int64(1)\n    for number in numbers\n        sum_product = sum_product + number\n\
    \        product_of_numbers = product_of_numbers * number\n    end\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_", "    sum_product = numbers[1]\n\
    \    product = 1\n    for i in numbers[2:end]\n        sum_product += i\n    \
    \    product *= i\n    return (sum_product, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum and product of the integers in a given list.\nThe function should\
    \ work for any type of iterable (including vectors and matrices).\nThe function\
    \ should work for both positive and negative numbers.\nThe function should work\
    \ for any type of numbers (including integers and floats).\nThe function should\
    \ work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of numbers (including integers and floats).\nThe function\
    \ should work for any type of ", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers containing the squares of the integers in the\
    \ vector.\nFor example, if the input vector is [4, 6, 9], then the output vector\
    \ should be [16, 25, 36].\nThe function should work for vectors of any size.\n\
    The function should work for both positive and negative numbers.\nThe function\
    \ should work for vectors of any type.", "    if length(numbers) == 0 \n     \
    \   return (0, 1) \n    else \n        sum_product = numbers[1]\n        product_of_numbers\
    \ = numbers[2:end]\n        sum_product += numbers[1]\n        sum_product *=\
    \ product_of_numbers\n        return (sum_product, sum_product)\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe function should\
    \ raise an error if the list is empty.\nThe function should raise an error if\
    \ the list contains non-integer values.\nThe function should raise an error if\
    \ the list contains negative values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should raise an error if the list contains\
    \ values greater than 100.\nThe function should ", "    sum = 0\n    product =\
    \ 1\n    for n in numbers\n        sum += n\n        product *= n\n    return\
    \ (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([", "    sum_ = 0\n    product_ = 1\n    for\
    \ number in numbers\n        sum_ = sum_ + number\n        product_ = product_\
    \ * number\n    end\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.\nThe function should raise an error if the list is empty.\nThe function\
    \ should raise an error if the list contains non-integer values.\nThe function\
    \ should raise an error if the list contains negative values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains negative values.\nThe function should raise an\
    \ error if the list contains values greater than 100.\nThe function should raise\
    \ an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list contains values greater than 100.\nThe function should\
    \ raise an error if the list ", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = prod(numbers)\n    return (sum_product, product_of_numbers)\nend", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the numbers in a given list.\n>>> sum_square([1,2,3])\n25\n\
    >>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n25\n>>> sum_square([1,2,3])\n\
    25\n>>> sum_square([", "    sum_product = sum(numbers)\n    product_product =\
    \ 1\n    for n in numbers\n        product_product *= n\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)", "    sum_ = numbers[1]\n    prod = numbers[1]\n    for n in numbers[2:end]\n\
    \        sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert\
    \ sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum_product = numbers[1] + numbers[2] \n       \
    \ product = 1\n        for i in numbers[2:end] \n            product = product\
    \ * i \n        \n        return (sum_product, product) \nend \n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector.", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert\
    \ sum_product([1,2,3,4,5]) == (15, 120)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([", "    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1]\n      \
    \  product_ = 1\n        for i in 2:length(numbers) \n            sum_ = sum_\
    \ + numbers[i]\n            product_ = product_ * numbers[i]\n        end\n  \
    \      return (sum_, product_)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the sum of the squares of the integers in a list.\n\
    \    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([4, 9, 16])\n\
    \    49.0\n    >>> sum_square_of_list([4, 9, 16, 25])\n    49.0\n    \"\"\"",
  "    sum = 0\n    product = 1\n    for n in numbers\n        sum += n\n        product\
    \ *= n\n    return (sum, product)\nend", "    sum = Int64(0)\n    prod = Int64(1)\n\
    \    for n in numbers\n        sum += n\n        prod *= n\n    return (sum, prod)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n",
  "    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n    for number\
    \ in numbers[2:end]\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of the integers\
    \ in a given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"", "    sum_product = numbers[1]\n    product = 1\n    for\
    \ number in numbers\n        sum_product += number\n        product *= number\n\
    \    return (sum_product, product)\nend\n</cell>\n<code language=julia-1.4>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, ", "    sum_product = sum .(numbers)\n   \
    \ product_of_numbers = product .(numbers)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@time sum_product([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe squares should\
    \ be calculated using the formula $x^2 = y^2 + z^2$, where $x$ and $y$ are the\
    \ two numbers in the list, and $z$ is the third number in the list.\nThe function\
    \ should return the sum of the squares.\nThe function should return 0 if the list\
    \ is empty.\nThe function should return Inf if the list contains only one number.\n\
    The function should return NaN if the list contains two or more numbers.\nThe\
    \ function should raise an error if the list contains non-integer numbers.\nThe\
    \ function should raise an error if the list contains negative numbers.\nThe function\
    \ should raise an error if the list contains zero, negative or non-integer numbers.\n\
    The function should raise an error if the list contains two or more negative numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ zero, negative or non-integer numbers.\nThe function should raise an error if\
    \ the list contains two or more non-integer numbers.\nThe function should raise\
    \ an error if the list contains two or more non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more non-integer numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ non-integer numbers.\nThe function should raise an error if the list contains\
    \ two or more non-integer numbers.\nThe function should raise an error if the\
    \ list contains two or more non-integer numbers.\nThe function should raise an\
    \ error if the list contains two or more non-integer numbers.\nThe function should\
    \ raise an error if the list contains two or more non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more non-integer numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ non-integer numbers.\nThe function should raise an error if the list contains\
    \ two or more non-integer numbers.\nThe function should raise an error if the\
    \ list contains two or more non-integer numbers.\nThe function should raise an\
    \ error if the list contains two or more non-integer numbers.\nThe function should\
    \ raise an error if the list contains two or more non-integer numbers.\nThe function\
    \ should raise an error if the list contains two or more non-integer numbers.\n\
    The function should raise an error if the list contains two or more non-integer\
    \ numbers.\nThe function should raise an error if the list contains two or more\
    \ non-integer ", "    sum_ = 0\n    product_ = 1\n    for n in numbers\n     \
    \   sum_ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\n\
    end\n</cell>\n<code language=julia-1.3>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list.\nThe function should work\
    \ for empty lists and lists with one or more integers.\nThe function should work\
    \ for lists with negative integers and lists with integers greater than or equal\
    \ to 0.\nThe function should work for lists with integers greater than or equal\
    \ to 0.\nThe function should work for lists with integers less than 0.\nThe function\
    \ should work for lists with integers less than 0.\nThe function should work for\
    \ lists with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integers equal to 0.\nThe function should\
    \ work for lists with integers equal to 0.\nThe function should work for lists\
    \ with integers equal to 0.\nThe function should work for lists with integers\
    \ equal to 0.\nThe function should work for lists with integers equal to 0.\n\
    The function should work for lists with integer", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</", "    if length(numbers) == 0 \n        return (0, 1)\
    \ \n    else \n        sum_product = numbers[1] + numbers[2] \n        return\
    \ (sum_product, numbers[1] * numbers[2]) \nend\n</code>\n<|/ a dscore=0 |>\n<|\
    \ c |>\nThis does not provide an answer to the question. To critique or request\
    \ clarification from an author, leave a comment below their post. - [From Review](/review/low-quality-posts/28258597)\n\
    <|/ c |>\n<| c |>\nI believe this does answer the question. He wants to know how\
    \ to use recursion to solve this problem. He also asked for help on how to solve\
    \ the problem with recursion. He also asked for help on how to solve the problem\
    \ with recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help on how to solve the problem with recursion. He also asked for help\
    \ on how to solve the problem with recursion. He also asked for help on how to\
    \ solve the problem with recursion. He also asked for help on how to solve the\
    \ problem with recursion. He also asked for help on how to solve the problem with\
    \ recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help on how to solve the problem with recursion. He also asked for help\
    \ on how to solve the problem with recursion. He also asked for help on how to\
    \ solve the problem with recursion. He also asked for help on how to solve the\
    \ problem with recursion. He also asked for help on how to solve the problem with\
    \ recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help on how to solve the problem with recursion. He also asked for help\
    \ on how to solve the problem with recursion. He also asked for help on how to\
    \ solve the problem with recursion. He also asked for help on how to solve the\
    \ problem with recursion. He also asked for help on how to solve the problem with\
    \ recursion. He also asked for help on how to solve the problem with recursion.\
    \ He also asked for help on how to solve the problem with recursion. He also asked\
    \ for help ", "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the sum of the squares of the numbers in a given\
    \ vector.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square_of_numbers([])\n    0\n    \"\"\"",
  "    sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n\
    \        product_ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.3>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.3>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.3>\nsum_product([", "  \
    \  sum_product = sum(numbers)\n    product_product = 1\n    for i in numbers\n\
    \        product_product *= i\n    end\n    return (sum_product, product_product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([-1, -2, -3, -4])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6])\n</cell>\n<code language=julia-1.5>\nsum_product([-1,\
    \ -2, -3, -4, -5, -6, -7, -8])\n</cell>\n<code language=julia-1.5>\nsum_product([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11,\
    \ -12, -13])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13, -14])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8,\
    \ -9, -10, -11, -12, -13, -14, -15, -16])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15,\
    \ -16, -17])\n</cell>\n<code language=julia-1.5>\nsum_product([-1, -2, -3, -4,\
    \ -5, -6, -7, -8, -9, -10, -11, -12, -13, -14, -15, -16, -17, -18])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10,\
    \ -11, -12, -13, -14, -15, -16, -17, -18, -19])\n</cell>", "    sum_ = 0\n   \
    \ product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n        product_\
    \ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers containing the squares of the integers in the vector.\nThe function\
    \ should work for vectors of any length.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe ", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = prod(numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>", "    sum_ = 0\n    product_ = 1\n    for n in\
    \ numbers\n        sum_ = sum_ + n\n        product_ = product_ * n\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that takes in a list of\
    \ integers and returns the sum of the integers squared. \nThe function should\
    \ return 0 if the list is empty.\nThe function should return 0 if the list contains\
    \ only zeros.\nThe function should return 0 if the list contains only negative\
    \ numbers.\nThe function should return 0 if the list contains only positive numbers.\n\
    The function should return 0 if the list contains only integers less than 10.\n\
    The function should return 0 if the list contains only integers greater than 10.\n\
    The function should return 0 if the list contains only integers less than or equal\
    \ to 10.\nThe function should return 0 if the list contains only integers greater\
    \ than or equal to 10.\nThe function should return 0 if the list contains only\
    \ integers less than or equal to 100 and greater than or equal to 100.\nThe function\
    \ should return 0 if the list contains only integers greater than or equal to\
    \ 100 and less than or equal to 100.\nThe function should return 0 if the list\
    \ contains only integers less than or equal to 1,000 and greater than or equal\
    \ to 1,000.\nThe function should return 0 if the list contains only integers greater\
    \ than or equal to 1,000 and less than or equal to 1,000.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10,000 and\
    \ greater than or equal to 10,000.\nThe function should return 0 if the list contains\
    \ only integers greater than or equal to 10,000 and less than or equal to 10,000.\n\
    The function should return 0 if the list contains only integers less than or equal\
    \ to 100,000 and greater than or equal to 100,000.\nThe function should return\
    \ 0 if the list contains only integers greater than or equal to 100,000 and less\
    \ than or equal to 100,000.\nThe function should return 0 if the list contains\
    \ only integers less than or equal to 1,000,000 and greater than or equal to 1,000,000.\n\
    The function should return 0 if the list contains only integers greater than or\
    \ equal to 1,000,000 and less than or equal to 1,000,000.\nThe function should\
    \ return 0 if the list contains only integers less than or equal to 10,000,000\
    \ and greater than or equal to 10,000,000.\nThe function should return 0 if the\
    \ list contains only integers greater than or equal to 10,000,000 and less than\
    \ or equal to 10,000,000.\nThe function should return 0 if the list contains only\
    \ integers less than or equal to 100,000,000 and greater than or equal to 100,000,000.\n\
    The function should return 0 if the list contains only integers greater than or\
    \ equal to ", "    sum_product = sum(numbers)\n    product_product = 1\n    for\
    \ number in numbers\n        product_product *= number\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, ", "    if length(numbers) == 0 \n        return (0, 1)\n    end\n  \
    \  sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n    for n in\
    \ numbers[2:end]\n        sum_product = sum_product + n\n        product_of_numbers\
    \ = product_of_numbers * n\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5,6])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8])\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5,6,7,8,9,10])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,",
  "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the squares of all the integers in a given list.\n    >>> sum_square_of_numbers([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_numbers([1, 2, 3, -4, 5])\n    25\n    \"\"\"", "    sum_product\
    \ = sum(numbers)\n    product_product = 1\n    for number in numbers\n       \
    \ product_product *= number\n    end\n    return (sum_product, product_product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector and a number as inputs\
    \ and returns the sum of the vector and the number multiplied by the sum of the\
    \ vector.\nThe function should return two values - a sum and a product.\nThe function\
    \ should also return 0 if either of the inputs is 0.\nThe function should also\
    \ return 0 if both inputs are 0.\nThe function should also return 0 if either\
    \ of the inputs is NaN.\nThe function should also return 0 if both inputs are\
    \ NaN.\nThe function should also return 0 if either of the inputs is Inf.\nThe\
    \ function should also return 0 if both inputs are Inf.\nThe function should also\
    \ return 0 if either of the inputs is -Inf.\nThe function should also return 0\
    \ if both inputs are -Inf.\nThe function should also return 0 if either of the\
    \ inputs is +Inf.\nThe function should also return 0 if both inputs are +Inf.\n\
    The function should also return 0 if either of the inputs is -Inf or +Inf.\nThe\
    \ function should also return 0 if both inputs are -Inf or +Inf.\nThe function\
    \ should also return 0 if either of the inputs is Inf or -Inf.\nThe function should\
    \ also return 0 if both inputs are Inf or -Inf.\nThe function should also return\
    \ 0 if either of the inputs is NaN or +Inf or -Inf.\nThe function should also\
    \ return 0 if both inputs are NaN or +Inf or -Inf.\nThe function should also return\
    \ 0 if either of the inputs is NaN or -Inf or +Inf.\nThe function should also\
    \ return 0 if both inputs are NaN or -Inf or +Inf.\nThe function should also return\
    \ 0 if either of the inputs is NaN or +Inf or -Inf or -Inf.\nThe function should\
    \ also return 0 if both inputs are NaN or +Inf or -Inf or -Inf.\nThe function\
    \ should also return 0 if either of the inputs is NaN or -Inf or +Inf or +Inf.\n\
    The function should also return 0 if both inputs are NaN or -Inf or +Inf or +Inf.\n\
    The function should also return 0 if either of the inputs is NaN or +Inf or -Inf\
    \ or -Inf or +Inf.\nThe function should also return 0 if both inputs are NaN or\
    \ -Inf or +Inf or ", "    sum_product = sum(numbers)\n    product_of_numbers =\
    \ reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n",
  "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a vector consisting of the\
    \ sum of the first and last element of the vector and the product of the rest\
    \ of the elements.\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n\
    \    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n   \
    \ >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n\
    \    (3, 6)\n    >>> sum_and_product(Vector{Int64}([1,2,3]))\n    (", "    sum_\
    \ = 0\n    product_ = 1\n    for i in numbers\n        sum_ += i\n        product_\
    \ *= i\n    return (sum_, product_)\nend", "    if length(numbers) == 0 \n   \
    \     return (0, 1) \n    else \n        sum_ = numbers[1] + numbers[2] + numbers[3]\
    \ + numbers[4] + numbers[5] + numbers[6] + numbers[7] + numbers[8] + numbers[9]\
    \ + numbers[10] + numbers[11] + numbers[12] + numbers[13] + numbers[14] + numbers[15]\
    \ + numbers[16] + numbers[17] + numbers[18] + numbers[19] + numbers[20] + numbers[21]\
    \ + numbers[22] + numbers[23] + numbers[24] + numbers[25] + numbers[26] + numbers[27]\
    \ + numbers[28] + numbers[29] + numbers[30] + numbers[31] + numbers[32] + numbers[33]\
    \ + numbers[34] + numbers[35] + numbers[36] + numbers[37] + numbers[38] + numbers[39]\
    \ + numbers[40] + numbers[41] + numbers[42] + numbers[43] + numbers[44] + numbers[45]\
    \ + numbers[46] + numbers[47] + numbers[48] + numbers[49] + numbers[50] + numbers[51]\
    \ + numbers[52] + numbers[53] + numbers[54] + numbers[55] + numbers[56] + numbers[57]\
    \ + numbers[58] + numbers[59] + numbers[60] + numbers[61] + numbers[62] + numbers[63]\
    \ + numbers[64] + numbers[65] + numbers[66] + numbers[67] + numbers[68] + numbers[69]\
    \ + numbers[70] + numbers[71] + numbers[72] + numbers[73] + numbers[74] + numbers[75]\
    \ + numbers[76] + numbers[77] + numbers[78] + numbers[79] + numbers[80] + numbers[81]\
    \ + numbers[82] + numbers[83] + numbers[84] + numbers[85] + numbers[86] + numbers[87]\
    \ + numbers[88] + numbers[89] + numbers[90] + numbers[91] + numbers[92] + numbers[93]\
    \ + numbers[94] + numbers[95] + numbers[96] + numbers[97] + numbers[98] + numbers[99]\
    \ + numbers[100] + numbers[101] + numbers[102] + numbers[103] + numbers[104] +\
    \ numbers[105] + numbers[106] + numbers[107] + numbers[108] + numbers[109] + numbers[110]\
    \ + numbers[111] + numbers[112] + numbers[113] + numbers[114] + numbers[115] +\
    \ numbers[116] + numbers[117] + numbers[118] + number", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = prod(numbers)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,", "    if length(numbers) == 0 \n        return (0,\
    \ 1) \n    else \n        sum_product = numbers[1] + numbers[2]\n        prod_product\
    \ = numbers[1] * numbers[2]\n        return (sum_product, prod_product)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe sum of\
    \ the squares should be equal to the sum of the squares of the integers in the\
    \ vector.\nThe function should raise an error if the vector is empty.\nThe function\
    \ should raise an error if the vector contains non-integer values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains negative values.\nThe function\
    \ should raise an error if the vector contains non-integer values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains duplicate values.\nThe function\
    \ should raise an error if the vector contains ", "    if length(numbers) == 0\
    \ \n        return (0, 1) \n    else \n        sum_product = numbers[1] + numbers[2]\n\
    \        prod_product = numbers[1] * numbers[2]\n        return (sum_product,\
    \ prod_product)\nend\n</cell>\n<text>\nExercise 10\nWrite a function that returns\
    \ the sum of the squares of the numbers in a list.\nThe function should take a\
    \ list of integers and return a number.\nThe function should return 0 if the list\
    \ is empty.\nThe function should return 0 if the list contains only zeros.\nThe\
    \ function should return 0 if the list contains only negative numbers.\nThe function\
    \ should return 0 if the list contains only positive numbers.\nThe function should\
    \ return 0 if the list contains only even numbers.\nThe function should return\
    \ 0 if the list contains only odd numbers.\nThe function should return 0 if the\
    \ list contains only positive integers and 1 if the list contains only negative\
    \ integers and -1 if the list contains only even numbers and 1 if the list contains\
    \ only odd numbers.\nThe function should return 0 if the list contains only positive\
    \ integers and -1 if the list contains only negative integers and 1 if the list\
    \ contains only even numbers and -1 if the list contains only odd numbers.\nThe\
    \ function should return 0 if the list contains only positive integers and 1 if\
    \ the list contains only negative integers and -1 if the list contains only even\
    \ numbers and 1 if the list contains only odd numbers.\nThe function should return\
    \ 0 if the list contains only positive integers and -1 if the list contains only\
    \ negative integers and -1 if the list contains only even numbers and -1 if the\
    \ list contains only odd numbers.\nThe function should return 0 if the list contains\
    \ only positive integers and 1 if the list contains only negative integers and\
    \ 1 if the list contains only even numbers and 1 if the list contains only odd\
    \ numbers.\nThe function should return 0 if the list contains only positive integers\
    \ and -1 if the list contains only negative integers and -1 if the list contains\
    \ only even numbers and -1 if the list contains only odd numbers.\nThe function\
    \ should return 0 if the list contains only positive integers and 1 if the list\
    \ contains only negative integers and 1 if the list contains only even numbers\
    \ and 1 if the list contains only odd numbers.\nThe function should return 0 if\
    \ the list contains only positive integers and -1 if the list contains only negative\
    \ integers and -1 if the list contains only even numbers and -1 if the list contains\
    \ only odd numbers.\nThe function should return 0 if the list contains only positive\
    \ integers and 1 if the list contains only negative integers and -1 if the list\
    \ contains only even numbers and 1 if the list contains only odd numbers.\nThe\
    \ function should return 0 if the list contains only positive integers and -1\
    \ if the list contains only negative integers and -1 if the list contains only\
    \ even numbers and -1 if the list contains only odd numbers.\nThe function should\
    \ return 0 if the list contains ", "    sum_ = 0\n    product_ = 1\n    for number\
    \ in numbers\n        sum_ = sum_ + number\n        product_ = product_ * number\n\
    \    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15, 120)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert\
    \ sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2]) == (3, 6)\n@", "  \
    \  sum = 0\n    product = 1\n    for i in numbers\n        sum = sum + i\n   \
    \     product = product * i\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5]) == (15,\
    \ 120)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10]) == (120, 3628800)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum and product of all the\
    \ integers in a vector, except the integers that come before a specific integer\
    \ in a vector. For example, if the vector is [1,2,3,4,5,6,7,8,9,10], the function\
    \ should return the sum and product of the integers except the integers that come\
    \ before 7 (i.e. the function should return (15, 120).", "    sum_ = 0\n    product_\
    \ = 1\n    for n in numbers\n        sum_ += n\n        product_ *= n\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product", "    sum = 0\n    product = 1\n    for n in\
    \ numbers\n        sum = sum + n\n        product = product * n\n    return (sum,\
    \ product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe sum of the\
    \ squares should be equal to the sum of the integers in the list.\nThe function\
    \ should return nothing if the list is empty.\nThe function should raise an error\
    \ if the list contains non-integer values.\nThe function should raise an error\
    \ if the list contains negative values.\nThe function should raise an error if\
    \ the list contains values greater than 100.\nThe function should raise an error\
    \ if the list contains values greater than or equal to 0.\nThe function should\
    \ raise an error if the list contains values less than 0.\nThe function should\
    \ raise an error if the list contains values less than or equal to 0.\nThe function\
    \ should raise an error if the list contains values greater than or equal to 0.",
  "    if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1] + numbers[2] \n        product_of_numbers = numbers[1] * numbers[2]\
    \ \n        return (sum_product, product_of_numbers) \nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)",
  "    sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n    for number\
    \ in numbers[2:end]\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a tags=julia |>\n<code>", "    if length(numbers)\
    \ == 0 \n        return (0, 1)\n    else \n        sum_product = numbers[1]\n\
    \        product_of_numbers = numbers[1]\n        for i in 2:length(numbers)\n\
    \            sum_product = sum_product + numbers[i]\n            product_of_numbers\
    \ = product_of_numbers * numbers[i]\n        end\n        return (sum_product,\
    \ product_of_numbers)\n    end\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes as input a vector of\
    \ integers and returns a vector of integers containing the squares of the integers\
    \ in the input vector.\nThe function should work for vectors of any length.\n\
    The function should work for vectors of integers and floats.", "    sum_ = 0\n\
    \    product_ = 1\n    for number in numbers\n        sum_ = sum_ + number\n \
    \       product_ = product_ * number\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nWrite a function that takes a vector\
    \ of integers and returns the product of the integers in the vector.\nWrite a\
    \ function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector and product of the integers in the vector.\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers in the vector and product of the integers in the vector.", " \
    \   sum_ = Int64(0)\n    product_ = Int64(1)\n    for n in numbers\n        sum_\
    \ += n\n        product_ *= n\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\nsum_product", "    sum_product\
    \ = sum(numbers)\n    product_product = 1\n    for n in numbers\n        product_product\
    \ *= n\n    return (sum_product, product_product)\nend", "    sum = 0\n    product\
    \ = 1\n    for n in numbers\n        sum += n\n        product *= n\n    return\
    \ (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\n    >>> square_sum([])\n\
    \    0.0\n    >>> square_sum([1, 2, 3, 4])\n    25.0\n    \"\"\"", "    sum_ =\
    \ 0\n    product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n       \
    \ product_ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the product of all\
    \ the integers in a vector. \nThe function should work for both vectors and matrices.\n\
    The function should work for both positive and negative integers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both integers and floating point\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both integers and floating point\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function should work for both integers and floating\
    \ point numbers.\nThe function should work for both integers and floating point\
    \ numbers.\nThe function should work for both integers and floating point numbers.\n\
    The function should work for both integers and floating point numbers.\nThe function\
    \ should work for both integers and floating point numbers.\nThe function should\
    \ work for both integers and floating point numbers.\nThe function should work\
    \ for both integers and floating point numbers.\nThe function should work for\
    \ both integers and floating point numbers.\nThe function should work for both\
    \ integers and floating point numbers.\nThe function should work for both integers\
    \ and floating point numbers.\nThe function should work for both integers and\
    \ floating point numbers.\nThe function ", "    sum = 0\n    product = 1\n   \
    \ for n in numbers\n        sum += n\n        product *= n\n    return (sum, product)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1, 2, 3, 4]) ==\
    \ (10, 24)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum\
    \ of the squares of the integers in a given list.\n    >>> sum_square([1, 2, 3,\
    \ 4]) == 14\n    \"\"\"", "    if length(numbers) == 0 \n        return (0, 1)\n\
    \    else \n        sum_product = numbers[1]\n        product = 1\n        for\
    \ i in numbers[2:end]\n            product *= i\n            sum_product += product\n\
    \        return (sum_product, product)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a list of integers and returns the sum of the squares of the integers\
    \ in the list.\n    >>> square_sum([])\n    0.0\n    >>> square_sum([1, 2, 3,\
    \ 4])\n    25.0\n    \"\"\"", "    sum_ = 0\n    product_ = 1\n    for n in numbers\n\
    \        sum_ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the squares of the\
    \ numbers in a given list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\
    \"", "    sum = 0\n    product = 1\n    for n in numbers\n        sum += n\n \
    \       product *= n\n    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_squares_list([])\n\
    \    0\n    >>> sum_squares_list([4, 9, 16])\n    49\n    >>> sum_squares_list([-4,\
    \ 9, 16])\n    -120\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of integers and returns a vector\
    \ of integers containing the first n integers of the vector. \nFor example, if\
    \ the input vector is [1,2,3,4,5,6], then the output vector should be [1,2,3].\
    \ \nIf the input vector is empty, then the output vector should be an empty vector.\n\
    If the input vector is of length 0, then the output vector should be an empty\
    \ vector.\nIf the input vector is of length 1, then the output vector should be\
    \ that vector itself.\nIf the input vector is of length 2, then the output vector\
    \ should be [2,3].\nIf the input vector is of length 3, then the output vector\
    \ should be [3,4].\nIf the input vector is of length 4, then the output vector\
    \ should be [4,5].\nIf the input vector is of length 5, then the output vector\
    \ should be [5,6].\nIf the input vector is of length 6, then the output vector\
    \ should be [6,1].\nIf the input vector is of length 7, then the output vector\
    \ should be [6,1,2].\nIf the input vector is of length 8, then the output vector\
    \ should be [6,1,2,3].\nIf the input vector is of length 9, then the output vector\
    \ should be [6,1,2,3,4].\nIf the input vector is of length 10, then the output\
    \ vector should be [6,1,2,3,4].\nIf the input vector is of length 11, then the\
    \ output vector should be [6,1,2,3,4].\nIf the input vector is of length 12, then\
    \ the output vector should be [6,1,2,3,4].\nIf the input vector is of length 13,\
    \ then the output vector should be [6,1,2,3,4].\nIf the input vector is of length\
    \ 14, then the output vector should be [6,1,2,3,4].\nIf the input vector is of\
    \ length 15, then the output vector should be [6,1,2,3,4].\nIf the input vector\
    \ is of length 16, then the output vector should be [6,1,2,3,4].\nIf the input\
    \ vector is of length 17, then the output vector should be [6,1,2,3,4].\nIf the\
    \ input vector is of length 18, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 19, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 20, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 21, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 22, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 23, then the output vector should be [6,1,2,3,4].\n\
    If the input vector is of length 24, ", "    sum = 0\n    product = 1\n    for\
    \ n in numbers\n        sum = sum + n\n        product = product * n\n    return\
    \ (sum, product)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a list of integers and returns the sum of the squares of the integers in the\
    \ list.\nThe function should return 0 if the list is empty.\nThe function should\
    \ return 0 if the list contains only zeros.\nThe function should return 0 if the\
    \ list contains only negative numbers.\nThe function should return 0 if the list\
    \ contains only positive numbers.\nThe function should return 0 if the list contains\
    \ only even numbers.\nThe function should return 0 if the list contains only odd\
    \ numbers.\nThe function should return 0 if the list contains only integers less\
    \ than or equal to 10.\nThe function should return 0 if the list contains only\
    \ integers greater than or equal to 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than 10.\nThe function should return\
    \ 0 if the list contains only integers equal to or less than 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or greater than\
    \ or equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or less than or equal to 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or less than or\
    \ equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or greater than or equal to 10.\nThe function should return 0 if the\
    \ list contains only integers equal to or less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or greater than\
    \ or equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or less than or equal to 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or less than or\
    \ equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or greater than or equal to 10.\nThe function should return 0 if the\
    \ list contains only integers equal to or less than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or greater than\
    \ or equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or less than or equal to 10.\nThe function should return 0 if the list\
    \ contains only integers equal to or greater than or equal to 10.\nThe function\
    \ should return 0 if the list contains only integers equal to or less than or\
    \ equal to 10.\nThe function should return 0 if the list contains only integers\
    \ equal to or greater than or equal to 10.\nThe function should return 0 if the\
    \ list contains only integers equal to or less than ", "    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in numbers[2:end] \n            sum = sum + i \n\
    \            product = product * i \n        return (sum, product) \nend\n</cell>\n\
    <code language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3,4,5])\
    \ == (15, 120)\n@assert sum_product([1,2,3,4,5,6,7,8,9,10]) == (120, 3628800)\n\
    @assert sum_product([1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100])\
    \ == (3628800, 120)\n</cell>\n<text>\nProblem 7: Write a function that accepts\
    \ a vector of integers and returns the sum of the squares of the integers in the\
    \ vector.\n    >>> sum_of_squares([1,2,3,4])\n    25\n    >>> sum_of_squares([-1,-2,-3,-4])\n\
    \    -1\n    \"\"\"", "    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the product of a list of integers multiplied by\
    \ their squares.\n    >>> square_product([])\n    1\n    >>> square_product([1,\
    \ 2, 3, 4])\n    24\n    \"\"\"", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum = numbers[1]\n        product = 1\n        for\
    \ i in numbers[2:end] \n            sum = sum + i\n            product = product\
    \ * i\n        end\n        return (sum, product)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 5\n\
    Write a function that returns the sum of the squares of the integers in a given\
    \ list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum and product of all the integers in a list except the first one.\n\
    \    >>> sum_except_first([1, 2, 3, 4])\n    (6, 12)\n    \"\"\"", "    sum =\
    \ Int64(0)\n    product = Int64(1)\n    for n in numbers\n        sum += n\n \
    \       product *= n\n    return (sum, product)\nend", "    sum_ = 0\n    product_\
    \ = 1\n    for number in numbers\n        sum_ = sum_ + number\n        product_\
    \ = product_ * number\n    end\n    return (sum_, product_)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a vector of integers and returns a vector of integers\
    \ consisting of the product of all the integers in the vector.\nFor example, given\
    \ [1,2,3,4,5], the function should return [1,2,6,24,120].", "    sum = 0\n   \
    \ product = 1\n    for n in numbers\n        sum += n\n        product *= n\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the squares of the integers in the vector.\nThe function\
    \ should return 0 if the vector is empty.\nThe function should return Inf if the\
    \ vector is empty.\nThe function should return Inf if the vector is empty.\nThe\
    \ function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function should return Inf if the vector is\
    \ empty.\nThe function should return Inf if the vector is empty.\nThe function\
    \ should return Inf if the vector is empty.\nThe function should return Inf if\
    \ the vector is empty.\nThe function should return Inf if the vector is empty.\n\
    The function should return Inf if the vector is empty.\nThe function should return\
    \ Inf if the vector is empty.\nThe function ", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the sum of the squares of all the integers\
    \ in a given list.\n    >>> sum_square_of_list([])\n    0.0\n    >>> sum_square_of_list([1,2,3])\n\
    \    9.0\n    \"\"\"", "    sum_product = sum(numbers)\n    product_product =\
    \ 1\n    for number in numbers\n        product_product *= number\n    end\n \
    \   return (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.3>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the integers in a given list.\n    >>> sum_square([1,\
    \ 2, 3, 4])\n    25\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers and\
    \ returns the sum of the squares of the integers in the list.\nThe sum of the\
    \ squares should be equal to the sum of the integers squared.\nThe function should\
    \ raise an error if the list is empty.\n>>> square_sum([])\n0\n>>> square_sum([1,\
    \ 2, 3, 4])\n25\n>>> square_sum([1, 2, 3])\nTraceback (most recent call last):\n\
    \  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n\
    \  File \"<stdin>\", line 2, in sum\nTypeError: Non-boolean (Int64) argument to\
    \ sum\n>>> square_sum([1, 2, 3])\nTraceback (most recent call last):\n  File \"\
    <stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n  File\
    \ \"<stdin>\", line 2, in sum\nTypeError: Non-boolean (Int64) argument to sum\n\
    >>> square_sum([1, 2, 3, 4])\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\"\
    , line 2, in sum\nTypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([])\n\
    0\n>>> square_sum([1, 2, 3, 4])\n25\n>>> square_sum([1, 2, 3])\nTraceback (most\
    \ recent call last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\"\
    , line 2, in square_sum\n  File \"<stdin>\", line 2, in sum\nTypeError: Non-boolean\
    \ (Int64) argument to sum\n>>> square_sum([1, 2, 3])\nTraceback (most recent call\
    \ last):\n  File \"<stdin>\", line 1, in <module>\n  File \"<stdin>\", line 2,\
    \ in square_sum\n  File \"<stdin>\", line 2, in sum\nTypeError: Non-boolean (Int64)\
    \ argument to sum\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 4])\n25\n>>>\
    \ square_sum([1, 2, 3])\nTraceback (most recent call last):\n  File \"<stdin>\"\
    , line 1, in <module>\n  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\"\
    , line 2, in sum\nTypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([1,\
    \ 2, 3])\nTraceback (most recent call last):\n  File \"<stdin>\", line 1, in <module>\n\
    \  File \"<stdin>\", line 2, in square_sum\n  File \"<stdin>\", line 2, in sum\n\
    TypeError: Non-boolean (Int64) argument to sum\n>>> square_sum([])\n0\n>>> square_sum([1,\
    \ 2, 3, 4", "    if length(numbers) == 0 \n        return (0, 1) \n    else \n\
    \        sum_product = numbers[1] + numbers[2]\n        prod_product = numbers[1]\
    \ * numbers[2]\n        return (sum_product, prod_product)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the sum of the first n positive\
    \ integers. \nThe function should take an argument n and return the sum of the\
    \ first n positive integers.\nIf the argument n is less than or equal to 0, the\
    \ function should return 0.\nIf the argument n is greater than or equal to 0,\
    \ the function should return the sum of the first n positive integers.\nIf the\
    \ argument n is equal to 0, the function should return 0.\nHint: Use a while loop\
    \ to solve this problem.", "    sum = product = 0\n    for n in numbers\n    \
    \    sum += n\n        product *= n\n    return (sum, product)\nend", "    sum_product\
    \ = sum(numbers)\n    product_product = 1\n    for number in numbers\n       \
    \ product_product *= number\n    end\n    return (sum_product, product_product)\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,", "    sum_product\
    \ = sum(numbers)\n    product_of_numbers = reduce(mul, numbers)\n    return (sum_product,\
    \ product_of_numbers)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that\
    \ returns the sum of the squares of the numbers in a list.\n    >>> sum_square_of_numbers([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1, -2, -3, -4])\n    25\n\
    \    >>> sum_square_of_numbers([])\n    0\n    \"\"\"", "    sum_ = 0\n    product_\
    \ = 1\n    for number in numbers\n        sum_ = sum_ + number\n        product_\
    \ = product_ * number\n    end\n    return (sum_, product_)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector and returns a vector where each\
    \ element is the sum of the vector except for the first element. For example,\
    \ if the input vector is [1,2,3,4,5], the output vector should be [2,3,6,10,15].",
  "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul, numbers)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and returns a new vector where each\
    \ element is the sum of the vector except for the first element. For example,\
    \ if the vector is [1,2,3], the function should return [2,3,4].", "    sum_product\
    \ = numbers[1]\n    product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n\
    \        sum_product = sum_product + number\n        product_of_numbers = product_of_numbers\
    \ * number\n    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    >>> sum_square([-1,\
    \ -2, -3, -4])\n    25\n    >>> sum_square([-1, -2, -3, -4, -5, -6, -7, -8, -9])\n\
    \    210\n    \"\"\"", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the squares of the numbers in a\
    \ given list.\n    >>> sum_of_squares([1,2,3])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n\
    \    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4,\
    \ -3, -2, -1, 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1,\
    \ 0, 1, 2, 3, 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3,\
    \ 4])\n    25\n    >>> sum_of_squares([-4, -3, -2, -1, 0, 1, 2, 3, 4])\n    ",
  "    sum_product = sum(numbers)\n    product_product = 1\n    for i in numbers\n\
    \        product_product = product_product * i\n    end\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<code language=julia-1.3>\n@assert sum_product([1,\
    \ 2, 3, 4]) == (10, 24)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the product of all the integers in a list.\n    >>> product_product([])\n  \
    \  1\n    >>> product_product([1, 2, 3, 4])\n    24\n    \"\"\"", "    sum = 0\n\
    \    product = 1\n    for n in numbers\n        sum += n\n        product *= n\n\
    \    return (sum, product)\nend", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum_ = numbers[1] + numbers[2] \n        prod_ =\
    \ 1\n        for i in numbers[2:end] \n            prod_ *= i \n        end\n\
    \        return (sum_, prod_)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1, 2, 3, 4]) == (10, 24)\n@assert sum_product([-1, -2, -3])\
    \ == (0, 0)\n@assert sum_product([-4, -5, -6]) == (1, -6)\n@assert sum_product([-7,\
    \ -8, -9]) == (-7, -36)\n@assert sum_product([-10, -11, -12]) == (-36, -144)\n\
    @assert sum_product([-13, -14, -15]) == (-144, -252)\n@assert sum_product([-16,\
    \ -17, -18]) == (-252, -344)\n@assert sum_product([-19, 20, 21]) == (-344, -448)\n\
    @assert sum_product([-20, -21, -22]) == (-448, -528)\n@assert sum_product([-23,\
    \ -24, -25]) == (-528, -624)\n@assert sum_product([-26, -27, -28]) == (-624, -704)\n\
    @assert sum_product([-29, -30, -31]) == (-704, -800)\n@assert sum_product([-32,\
    \ -33, 34]) == (-800, -800)\n@assert sum_product([-34, 35, -36]) == (-800, -800)\n\
    @assert sum_product([-37, -38, -39]) == (-800, -800)\n@assert sum_product([-40,\
    \ -41, -42]) == (-800, -800)\n@assert sum_product([-43, -44, -45]) == (-800, -800)\n\
    @assert sum_product([-46, -47, -48]) == (-800, -800)\n@assert sum_product([-49,\
    \ -50, -51]) == (-800, -800)\n@assert sum_product([-52, -53, -54]) == (-800, -800)\n\
    @assert sum_product([-55, -56, -57]) == (-800, -800)\n@assert sum_product([-58,\
    \ -59, -60]) == (-800, -800)\n@assert sum_product([-61, -62, -63]) == (-800, -800)\n\
    @assert sum_product([-64, -65, -66]) == (-800, -800)\n@assert sum_product([-67,\
    \ -68, -69]) == (-800, -800)\n", "    sum_product = Int64(0)\n    product_of_numbers\
    \ = Int64(1)\n    for number in numbers\n        sum_product += number\n     \
    \   product_of_numbers *= number\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.4>\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2]) == (3, 2)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@", "    sum_product = sum .(numbers)\n\
    \    product_product = 1\n    for i in numbers\n        product_product *= i\n\
    \    end\n    return (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.0>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.0>\nsum_product", "    sum_product = Int64(0)\n\
    \    product_of_numbers = Int64(1)\n    for number in numbers\n        sum_product\
    \ = sum_product + number\n        product_of_numbers = product_of_numbers * number\n\
    \    end\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the squares of the integers in a given list.\n    >>> sum_square_of_numbers([1,\
    \ 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1, -2, -3, -4])\n    25\n\
    \    \"\"\"", "    sum = Int64(0)\n    product = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n", "    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_product = numbers[1] +\
    \ numbers[2] \n        return (sum_product, sum_product * numbers[1]) \nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers containing the first 3 integers of the original\
    \ vector. \nThe function should return the following vector:\n[1,2,3]\nHint: Use\
    \ a for loop to iterate over the vector and append the elements to a list.", " \
    \   sum_ = 0\n    product_ = 1\n    for number in numbers\n        sum_ = sum_\
    \ + number\n        product_ = product_ * number\n    end\n    return (sum_, product_)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n\
    @assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3]) == (", " \
    \   if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_\
    \ = numbers[1] + numbers[2] + numbers[3] + numbers[4] + numbers[5] + numbers[6]\
    \ + numbers[7] + numbers[8] + numbers[9] + numbers[10] + numbers[11] + numbers[12]\
    \ + numbers[13] + numbers[14] + numbers[15] + numbers[16] + numbers[17] + numbers[18]\
    \ + numbers[19] + numbers[20] + numbers[21] + numbers[22] + numbers[23] + numbers[24]\
    \ + numbers[25] + numbers[26] + numbers[27] + numbers[28] + numbers[29] + numbers[30]\
    \ + numbers[31] + numbers[32] + numbers[33] + numbers[34] + numbers[35] + numbers[36]\
    \ + numbers[37] + numbers[38] + numbers[39] + numbers[40] + numbers[41] + numbers[42]\
    \ + numbers[43] + numbers[44] + numbers[45] + numbers[46] + numbers[47] + numbers[48]\
    \ + numbers[49] + numbers[50] + numbers[51] + numbers[52] + numbers[53] + numbers[54]\
    \ + numbers[55] + numbers[56] + numbers[57] + numbers[58] + numbers[59] + numbers[60]\
    \ + numbers[61] + numbers[62] + numbers[63] + numbers[64] + numbers[65] + numbers[66]\
    \ + numbers[67] + numbers[68] + numbers[69] + numbers[70] + numbers[71] + numbers[72]\
    \ + numbers[73] + numbers[74] + numbers[75] + numbers[76] + numbers[77] + numbers[78]\
    \ + numbers[79] + numbers[80] + numbers[81] + numbers[82] + numbers[83] + numbers[84]\
    \ + numbers[85] + numbers[86] + numbers[87] + numbers[88] + numbers[89] + numbers[90]\
    \ + numbers[91] + numbers[92] + numbers[93] + numbers[94] + numbers[95] + numbers[96]\
    \ + numbers[97] + numbers[98] + numbers[99] + numbers[100] + numbers[101] + numbers[102]\
    \ + numbers[103] + numbers[104] + numbers[105] + numbers[106] + numbers[107] +\
    \ numbers[108] + numbers[109] + numbers[110] + numbers[111] + numbers[112] + numbers[113]\
    \ + numbers[114] + numbers[115] + numbers[116] + numbers[117] + numbers[118] +\
    \ numbers[", "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum and product of a given list of integers,\
    \ where the product is defined as the product of all the integers in the list.\n\
    The function should work for lists of any length.\nThe function should work for\
    \ lists of integers and floats.\nThe function should work for lists of integers\
    \ and floats where the product is defined as the product of all the integers in\
    \ the list.\nThe function should work for lists of integers and floats where the\
    \ product is defined as the product of all the integers in the list.\nThe function\
    \ should work for lists of integers and floats where the product is defined as\
    \ the product of all the integers in the list.\nThe function should work for lists\
    \ of integers and floats where the product is defined as the product of all the\
    \ integers in the list.\nThe function should work for lists of integers and floats\
    \ where the product is defined as the product of all the integers in the list.\n\
    The function should work for lists of integers and floats where the product is\
    \ defined as the product of all the integers in the list.\nThe function should\
    \ work for lists of integers and floats where the product is defined as the product\
    \ of all the integers in the list.\nThe function should work for lists of integers\
    \ and floats where the product is defined as the product of all the integers in\
    \ the list.\nThe function should work for lists of integers and floats where the\
    \ product is defined as the product of all the integers in the list.\nThe function\
    \ should work for lists of integers and floats where the product is defined as\
    \ the product of all the integers in the list.\nThe function should work for lists\
    \ of integers and floats where the product is defined as the product of all the\
    \ integers in the list.\nThe function should work for lists of integers and floats\
    \ where the product is defined as the product of all the integers in the list.\n\
    The function should work for lists of integers and floats where the product is\
    \ defined as the product of all the integers in the list.\nThe function should\
    \ work for lists of integers and floats where the product is defined as the product\
    \ of all the integers in the list.\nThe function should work for lists of integers\
    \ and floats where the product is defined as the product of all the integers in\
    \ the list.\nThe function should work for lists of integers and floats where the\
    \ product is defined as the product of all the integers in the list.\nThe function\
    \ should work for lists of integers and floats where the product is defined as\
    \ the product of all the integers in the list.\nThe function ", "    sum_product\
    \ = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n        sum_product\
    \ = sum_product + i\n        product = product * i\n    return (sum_product, product)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe sum of the squares should\
    \ be equal to the sum of the integers squared.\nThe function should work for vectors\
    \ of any length.\nThe function should work for vectors of any type of numbers.\n\
    The function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vectors of any type of numbers.\nThe\
    \ function should work for vectors of any type of numbers.\nThe function should\
    \ work for vectors of any type of numbers.\nThe function should work for vectors\
    \ of any type of numbers.\nThe function should work for vectors of any type of\
    \ numbers.\nThe function should work for vector", "    sum_product = sum(numbers)\n\
    \    product_product = 1\n    for i in numbers\n        product_product *= i\n\
    \    return (sum_product, product_product)\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\nThe function should raise an error if the list\
    \ is empty.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should raise an error if the list contains non-integer\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains non-positive\
    \ numbers.\nThe function should ", "    sum_product = sum(numbers)\n    product_product\
    \ = 1\n    for i in numbers\n        product_product *= i\n    return (sum_product,\
    \ product_product)\nend", "    if length(numbers) == 0 \n        return (0, 1)\
    \ \n    else \n        sum = numbers[1]\n        product = 1\n        for i in\
    \ 2:length(numbers) \n            sum = sum + numbers[i] \n            product\
    \ = product * numbers[i] \n        end\n        return (sum, product)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers squared. \nThe function should raise an\
    \ error if the vector is empty.\n>>> square_sum([])\n0\n>>> square_sum([1, 2,\
    \ 3, 4])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n\
    >>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3,\
    \ 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n\
    >>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1,\
    \ 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2,\
    \ 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3,\
    \ 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4,\
    \ 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n\
    25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n\
    >>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>>\
    \ square_sum([1, 2, 3, 4, 5])\n25\n>>> square_sum([1, 2, 3, 4, 5])\n25\n>>> square_",
  "    sum_product = sum(numbers)\n    product_of_numbers = prod(numbers)\n    return\
    \ (sum_product, product_of_numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,", "    sum_product\
    \ = sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    end\n    return (sum_product, product_product)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\n\
    Write a function that takes a list of integers and returns the sum of the squares\
    \ of the integers in the list.\nThe squares should be calculated using the formula\
    \ $x^2 = y^2 + z^2$, where $x, y, z$ are integers in the list.\nThe function should\
    \ return nothing if the list is empty.\nThe function should raise an error if\
    \ the list contains non-integer values.\nThe function should raise an error if\
    \ the list contains negative values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains duplicate values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains duplicate values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains duplicate values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise an error if the list contains duplicate values.\nThe function should raise\
    \ an error if the list contains duplicate values.\nThe function should raise an\
    \ error if the list contains duplicate values.\nThe function should raise an error\
    \ if the list contains duplicate values.\nThe function should raise an error if\
    \ the list contains duplicate values.\nThe function should raise an error if the\
    \ list contains duplicate values.\nThe function should raise an error if the list\
    \ contains duplicate values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains duplicate\
    \ values.\nThe function should raise an error if the list contains duplicate values.\n\
    The function should raise an error if the list contains duplicate values.\nThe\
    \ function should raise an error if the list contains duplicate values.\nThe function\
    \ should raise an error if the list contains duplicate values.\nThe function should\
    \ raise ", "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul,\
    \ numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the squares of the numbers\
    \ in a list.\n    >>> sum_square_of_numbers([1, 2, 3, 4])\n    25\n    >>> sum_square_of_numbers([-1,\
    \ -2, -3, -4])\n    25\n    \"\"\"", "    sum = product = 1\n    for n in numbers\n\
    \        sum += n\n        product *= n\n    return (sum, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the sum of the squares of the integers in a\
    \ given list.\n    >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"", "    if\
    \ length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1] + numbers[2] \n        return (sum_product, numbers[1] * numbers[2])\
    \ \nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the integers in a list.\n    >>> sum_square_of_list([])\n   \
    \ 0.0\n    >>> sum_square_of_list([4, 9, 16])\n    49.0\n    >>> sum_square_of_list([-1,\
    \ 2, -3, 4])\n    0.0\n    \"\"\"", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum = numbers[1]\n        product = 1\n        for\
    \ i in 2:length(numbers) \n            sum = sum + numbers[i] \n            product\
    \ = product * i \n        end\n        return (sum, product) \n    end\nend\n\
    </cell>\n<text>\nExercise 4\nWrite a function that takes a list of numbers and\
    \ returns the sum of the numbers, and the product of the numbers. \nThe function\
    \ should return two values, the sum and the product.\nThe function should raise\
    \ an error if the list is empty.\nThe function should raise an error if the list\
    \ contains non-numeric values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should raise an error if the list contains\
    \ values greater than the maximum value of the corresponding type.\nThe function\
    \ should raise an error if the list contains values less than the minimum value\
    \ of the corresponding type.\nThe function should ", "    sum = 0\n    product\
    \ = 1\n    for n in numbers\n        sum += n\n        product *= n\n    return\
    \ (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a list of integers\
    \ and returns the sum of the squares of the integers in the list.\nThe squares\
    \ should be added up and returned as a single integer.\nThe function should work\
    \ for an empty list.\n>>> square_sum([])\n0\n>>> square_sum([1, 2, 3, 4])\n25\n\
    >>> square_sum([1, 2, 3])\n6\n>>> square_sum([1, 2, 3, 0])\n25\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2,\
    \ -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3,\
    \ 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n\
    0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2,\
    \ -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3,\
    \ 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n\
    0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2,\
    \ -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3,\
    \ 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n\
    0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>>\
    \ square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> square_sum([-1,\
    \ -2, -3, 0])\n0\n>>> square_sum([-1, -2, -3, 0])\n0\n>>> ", "    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum_ = numbers[1] + numbers[2]\
    \ + numbers[3] + numbers[4] + numbers[5] + numbers[6] + numbers[7] + numbers[8]\
    \ + numbers[9] + numbers[10] + numbers[11] + numbers[12] + numbers[13] + numbers[14]\
    \ + numbers[15] + numbers[16] + numbers[17] + numbers[18] + numbers[19] + numbers[20]\
    \ + numbers[21] + numbers[22] + numbers[23] + numbers[24] + numbers[25] + numbers[26]\
    \ + numbers[27] + numbers[28] + numbers[29] + numbers[30] + numbers[31] + numbers[32]\
    \ + numbers[33] + numbers[34] + numbers[35] + numbers[36] + numbers[37] + numbers[38]\
    \ + numbers[39] + numbers[40] + numbers[41] + numbers[42] + numbers[43] + numbers[44]\
    \ + numbers[45] + numbers[46] + numbers[47] + numbers[48] + numbers[49] + numbers[50]\
    \ + numbers[51] + numbers[52] + numbers[53] + numbers[54] + numbers[55] + numbers[56]\
    \ + numbers[57] + numbers[58] + numbers[59] + numbers[60] + numbers[61] + numbers[62]\
    \ + numbers[63] + numbers[64] + numbers[65] + numbers[66] + numbers[67] + numbers[68]\
    \ + numbers[69] + numbers[70] + numbers[71] + numbers[72] + numbers[73] + numbers[74]\
    \ + numbers[75] + numbers[76] + numbers[77] + numbers[78] + numbers[79] + numbers[80]\
    \ + numbers[81] + numbers[82] + numbers[83] + numbers[84] + numbers[85] + numbers[86]\
    \ + numbers[87] + numbers[88] + numbers[89] + numbers[90] + numbers[91] + numbers[92]\
    \ + numbers[93] + numbers[94] + numbers[95] + numbers[96] + numbers[97] + numbers[98]\
    \ + numbers[99] + numbers[100] + numbers[101] + numbers[102] + numbers[103] +\
    \ numbers[104] + numbers[105] + numbers[106] + numbers[107] + numbers[108] + numbers[109]\
    \ + numbers[110] + numbers[111] + numbers[112] + numbers[113] + numbers[114] +\
    \ numbers[115] + numbers[116] + numbers[117] + numbers[118] + numbers[", "   \
    \ sum_product = sum(numbers)\n    product_product = 1\n    for n in numbers\n\
    \        product_product *= n\n    return (sum_product, product_product)\nend",
  "    if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_ =\
    \ sum(numbers) \n        product_ = 1\n        for n in numbers \n           \
    \ product_ *= n \n        return (sum_, product_) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n\
    </cell>\n<code language=julia-1.4>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1,2,3])\n</cell>\n<code language=", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\n>>> sum_square_of_vector([1,\
    \ 2, 3])\n25\n>>> sum_square_of_vector([-1, -2, -3])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0])\n0\n\
    >>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0,\
    \ 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n\
    >>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n\
    >>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2,\
    \ -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>>\
    \ sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4,\
    \ -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n\
    0\n>>> sum_square_of_vector([4, -2, -6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0\n>>> sum_square_of_vector([4, -2, -6, 0,\
    \ 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0])\n0",
  "    sum_product = sum .(numbers)\n    product_of_numbers = product .(numbers)\n\
    \    return sum_product, product_of_numbers\nend\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector.\nThe function should work for vectors of any length.\nThe function\
    \ should work for vectors of any element type.", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nsum_product([1, 2, 3, 4])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ a vector of integers containing the square of each of the numbers in the vector.\n\
    For example, if the input vector is [4, 6, 9], then the output vector should be\
    \ [16, 25, 36].\nThe function should work for vectors of any length.\nThe function\
    \ should work for vectors of any type.", "    sum_product = sum(numbers)\n   \
    \ product_of_numbers = prod(numbers)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </code>\n<|/ a |>\n<| c |>\nThis doesn't answer the question. OP asked for a solution\
    \ that doesn't require any loops.\n<|/ c |>\n<| c |>\nI agree, but I thought it\
    \ would be helpful to show how to solve this problem without loops. I added a\
    \ solution that doesn't require loops.\n<|/ c |>\n<| c |>\nI added a solution\
    \ that doesn't require loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't\
    \ require loops.\n<|/ c |>\n<| c |>\nI added a solution that doesn't require loops.\n\
    <|/ c |>\n<| a tags=julia,functional-programming |>\nHere is a solution without\
    \ loops:\n<code>", "    sum_ = 0\n    product_ = 1\n    for n in numbers\n   \
    \     sum_ = sum_ + n\n        product_ = product_ * n\n    return (sum_, product_)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n",
  "    if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_product\
    \ = numbers[1] * numbers[0]\n        product = 1\n        for i in 2:length(numbers)\
    \ \n            product *= numbers[i]\n            sum_product += numbers[i]\n\
    \        end\n        return (sum_product, product)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@assert sum_product([1, 2, 3]) == (6, 6)\n@assert sum_product([1,\
    \ 2, 3, 4]) == (24, 12)\n@assert sum_product([1, 2, 3, 4, 5]) == (120, 120)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6]) == (5040, 5040)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7,\
    \ 8]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9]) == (5040,\
    \ 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10]) == (5040, 5040)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11]) == (5040, 5040)\n@assert\
    \ sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) == (5040, 5040)\n@assert\
    \ sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) == (5040, 5040)\n@assert\
    \ sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) == (5040, 5040)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15]) == (5040,\
    \ 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15,\
    \ 16]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11,\
    \ 12, 13, 14, 15, 16, 17]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18]) == (5040, 5040)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19]) == (5040, 5040)\n\
    @assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17,\
    \ 18, 19, 20]) == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21]) == (5040, 5040)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22])\
    \ == (5040, 5040)\n@assert sum_product([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12,\
    \ 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23]) == (5040, 5040)\n@assert sum_product([1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, ", " \
    \   sum_product = numbers[1]\n    product_of_numbers = numbers[1]\n    for number\
    \ in numbers[2:end]\n        sum_product = sum_product + number\n        product_of_numbers\
    \ = product_of_numbers * number\n    end\n    return (sum_product, product_of_numbers)\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis answer does not take into account the fact\
    \ that `sum_product` should return `0` and `1` when given an empty list. Also,\
    \ it does not take into account the fact that `sum_product` should return `0`\
    \ and `1` when given an empty list.\n<|/ c |>\n<| c |>\nThe question was about\
    \ how to implement the function, so I gave the solution that I thought would be\
    \ the most straightforward.\n<|/ c |>\n<| c |>\nThe question was about how to\
    \ implement the function, so I gave the solution that I thought would be the most\
    \ straightforward. Your answer does not take into account the fact that `sum_product`\
    \ should return `0` and `1` when given an empty list. Also, it does not take into\
    \ account the fact that `sum_product` should return `0` and `1` when given an\
    \ empty list.\n<|/ c |>\n<| c |>\nI agree with you, my answer does not take into\
    \ account the fact that `sum_product` should return `0` and `1` when given an\
    \ empty list. Also, it does not take into account the fact that `sum_product`\
    \ should return `0` and `1` when given an empty list. Thanks for pointing that\
    \ out.\n<|/ c |>\n<| c |>\nI agree with you, my answer does not take into account\
    \ the fact that `sum_product` should return `0` and `1` when given an empty list.\
    \ Also, it does not take into account the fact that `sum_product` should return\
    \ `0` and `1` when given an empty list. Thanks for pointing that out.\n<|/ c |>\n\
    <| a tags=julia |>\nThe most straightforward way is to just use sum and prod functions:\n\
    <code>\njulia> sum([1,2,3])\n6", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should raise a TypeError\
    \ if the list contains non-integer values.\nThe function should raise a TypeError\
    \ if the list contains negative values.\nThe function should raise a TypeError\
    \ if the list contains values greater than $10$.\nThe function should raise a\
    \ TypeError if the list contains values greater than $100$.\nThe function should\
    \ raise a TypeError if the list contains values greater than $1000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $10000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $100000$.\nThe function should raise a TypeError if the list contains values\
    \ greater than $1000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $10000000$.\nThe function should raise a TypeError if the\
    \ list contains values greater than $100000000$.\nThe function should raise a\
    \ TypeError if the list contains values greater than $1000000000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $10000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $100000000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $1000000000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $10000000000000$.\nThe function should\
    \ raise a TypeError if the list contains values greater than $100000000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $1000000000000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $10000000000000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $100000000000000000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $1000000000000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $10000000000000000000$.\nThe function should raise a TypeError if the list contains\
    \ values greater than $100000000000000000000$.\nThe function should raise a TypeError\
    \ if the list contains values greater than $1000000000000000000000$.\nThe function\
    \ should raise a TypeError if the list contains values greater than $10000000000000000000000$.\n\
    The function should raise a TypeError if the list contains values greater than\
    \ $100000000000000000000000$.\nThe function should raise a TypeError if the list\
    \ contains values greater than $1000000000000000000", "    sum_product = numbers[1]\n\
    \    product_of_numbers = numbers[1]\n    for number in numbers[2:end]\n     \
    \   sum_product = sum_product + number\n        product_of_numbers = product_of_numbers\
    \ * number\n    end\n    return (sum_product, product_of_numbers)\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a tags=julia |>\n<code>", "    if length(numbers) == 0\
    \ \n        return (0, 1) \n    else \n        sum_ = numbers[1]\n        prod_\
    \ = 1\n        for n in numbers[2:end]\n            sum_ = sum_ + n\n        \
    \    prod_ = prod_ * n\n        return (sum_, prod_)\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a list of integers and returns\
    \ the sum of the squares of the integers in the list.\nThe function should raise\
    \ an error if the list is empty.\nThe function should raise an error if the list\
    \ contains non-integer values.\nThe function should raise an error if the list\
    \ contains negative values.\nThe function should raise an error if the list contains\
    \ duplicate values.\nThe function should raise an error if the list contains any\
    \ non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the list contains\
    \ any negative values.\nThe function should raise an error if the list contains\
    \ any duplicate values.\nThe function should raise an error if the list contains\
    \ any non-integer values.\nThe function should raise an error if the ", "    sum_product\
    \ = numbers[1]\n    product = 1\n    for i in numbers[2:end]\n        sum_product\
    \ += i\n        product *= i\n    return (sum_product, product)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1,2,3,4,5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a list of integers and returns the sum of the\
    \ squares of the integers in the list.\n>>> square_sum([1,2,3,4,5])\n25\n>>> square_sum([1,2,3])\n\
    6\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n3\n>>> square_sum([1,2])\n\
    3\n>>> square_sum([1,2])\n", "    sum_product = numbers[1]\n    product_of_numbers\
    \ = numbers[1]\n    for number in numbers[2:end]\n        sum_product = sum_product\
    \ + number\n        product_of_numbers = product_of_numbers * number\n    end\n\
    \    return (sum_product, product_of_numbers)\nend\n</code>\n<|/ a |>\n<| a dscore=0\
    \ |>\n<code>", "    if length(numbers) == 0 \n        return (0, 1) \n    else\
    \ \n        sum_ = sum(numbers) \n        prod_ = 1\n        for i in numbers\
    \ \n            prod_ *= i \n        return (sum_, prod_) \nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the sum\
    \ of the squares of the integers in the vector.\nThe sum of the squares should\
    \ be equal to the product of the squares of the integers in the vector.\nThe function\
    \ should return nothing if the vector is empty.\nThe function should raise an\
    \ error if the vector contains non-integer values.\nThe function should raise\
    \ an error if the vector contains negative values.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains values greater than the maximum integer value.\nThe function\
    \ should raise an error if the vector contains values less than the minimum integer\
    \ value.\nThe function should raise an error if the vector contains values greater\
    \ than the maximum integer value.\nThe function should raise an error if the vector\
    \ contains values less than the minimum integer value.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains values greater than the maximum integer value.\nThe function\
    \ should raise an error if the vector contains values less than the minimum integer\
    \ value.\nThe function should raise an error if the vector contains values greater\
    \ than the maximum integer value.\nThe function should raise an error if the vector\
    \ contains values less than the minimum integer value.\nThe function should raise\
    \ an error if the vector contains values greater than the maximum integer value.\n\
    The function should raise an error if the vector contains values less than the\
    \ minimum integer value.\nThe function should raise an error if the vector contains\
    \ values greater than the maximum integer value.\nThe function should raise an\
    \ error if the vector contains values less than the minimum integer value.\nThe\
    \ function should raise an error if the vector contains values greater than the\
    \ maximum integer value.\nThe function should raise an error if the vector contains\
    \ values less than the minimum integer value.\nThe function should raise an error\
    \ if the vector contains values ", "    sum_product = sum(numbers)\n    product_of_numbers\
    \ = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the product of all the integers in a\
    \ list.\nThe function should take one argument, a list of integers, and return\
    \ one number.\nThe function should return the product of all the integers in the\
    \ list.\nThe function should raise an error if the list is empty.\nThe function\
    \ should raise an error if the list contains non-integers.\nThe function should\
    \ raise an error if the list contains negative integers.\nThe function should\
    \ raise an error if the list contains zero, negative or non-integer numbers.\n\
    The function should raise an error if the list contains any non-positive integers.\n\
    The function should raise an error if the list contains any non-integer numbers.\n\
    The function should raise an error if the list contains any negative numbers.\n\
    The function should raise an error if the list contains any non-positive numbers.\n\
    The function should raise an error if the list contains any zero, non-integer\
    \ or non-positive numbers.\nThe function should raise an error if the list contains\
    \ any non-integer numbers.\nThe function should raise an error if the list contains\
    \ any negative numbers.\nThe function should raise an error if the list contains\
    \ any non-positive numbers.\nThe function should raise an error if the list contains\
    \ any zero, non-integer or non-positive numbers.\nThe function should raise an\
    \ error if the list contains any non-integer numbers.\nThe function should raise\
    \ an error if the list contains any negative numbers.\nThe function should raise\
    \ an error if the list contains any non-positive numbers.\nThe function should\
    \ raise an error if the list contains any zero, non-integer or non-positive numbers.\n\
    The function should raise an error if the list contains any non-integer numbers.\n\
    The function should raise an error if the list contains any negative numbers.\n\
    The function should raise an error if the list contains any non-positive numbers.\n\
    The function should raise an error if the list contains any zero, non-integer\
    \ or non-positive numbers.\nThe function should raise an error if the list contains\
    \ any non-integer numbers.\nThe function should raise an error if the list contains\
    \ any negative numbers.\nThe function should raise an error if the list contains\
    \ any non-positive numbers.\nThe function should raise an error if the list contains\
    \ any zero, non-integer or non-positive numbers.\nThe function should raise an\
    \ error if the list contains any non-integer numbers.\nThe function should raise\
    \ an error if the list contains any negative numbers.\nThe function should raise\
    \ an error if the list contains any non-positive numbers.\nThe function should\
    \ raise an error if the list contains any zero, non-integer or non-positive numbers.\n\
    The function should raise an error if the list contains any non-integer numbers.\n\
    The function should raise an error if the list ", "    sum_product = sum .(numbers)\n\
    \    product_product = 1\n    for number in numbers\n        product_product *=\
    \ number\n    end\n    return sum_product, product_product\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsum_product([1,2,3])\n</cell>\n<code language=julia-1.5>\n\
    sum_product([1,2,3,4,5])\n</cell>\n<code language=julia-1.5>\nsum_product([1,2,3,4,5,6,7,8,9,10])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the sum of the squares\
    \ of the integers in a given list.\n    >>> sum_square_of_list([])\n    0.0\n\
    \    >>> sum_square_of_list([1,2,3])\n    9.0\n    >>> sum_square_of_list([1,2,3,4,5])\n\
    \    25.0\n    >>> sum_square_of_list([1,2,3,4,5,6,7,8,9,10])\n    5025.0\n  \
    \  \"\"\"", "    if length(numbers) == 0 \n        return (0, 1) \n    else \n\
    \        sum_ = numbers[1] + numbers[2] \n        product = numbers[1] * numbers[2]\
    \ \n        return (sum_, product) \nend\n</cell>\n<text>\nExercise 4\nWrite a\
    \ function that returns the sum of the squares of the integers in a list.\n  \
    \  >>> sum_square([1, 2, 3, 4])\n    25\n    \"\"\"", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that returns the sum of the\
    \ squares of the numbers in a vector.\nThe vector can contain any type of numbers.\n\
    The function should work for vectors of any length.\nThe function should work\
    \ for vectors of any type of numbers.\nThe function should work for vectors of\
    \ any number of numbers.\nThe function should work for vectors of any type of\
    \ numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of any type of numbers, including\
    \ vectors of vectors.\nThe function should work for vectors of any type of numbers,\
    \ including vectors of vectors.\nThe function should work for vectors of any type\
    \ of numbers, including vectors of vectors.\nThe function should work for vectors\
    \ of any type of numbers, including vectors of vectors.\nThe function should work\
    \ for vectors of any type of numbers, including vectors of vectors.\nThe function\
    \ should work for vectors of any type of numbers, including vectors of vectors.\n\
    The function should work for vectors of any type of numbers, including vectors\
    \ of vectors.\nThe function should work for vectors of ", "    if length(numbers)\
    \ == 0 \n        return (0, 1) \n    else \n        sum = numbers[1]\n       \
    \ product = 1\n        for i in 2:length(numbers) \n            sum = sum + numbers[i]\n\
    \            product = product * numbers[i]\n        end\n        return (sum,\
    \ product)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers containing the squares\
    \ of the integers in the vector.\nFor example, square_of_vector([1, 2, 3]) should\
    \ return [1, 4, 9].\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector and should return\
    \ the same vector if the input vector is empty.\nThe function should work for\
    \ any vector and should return the same vector if the input vector is empty.\n\
    The function should work for any vector and should return the same vector if the\
    \ input vector is empty.\nThe function should work for any vector ", "    sum_product\
    \ = sum(numbers)\n    product_product = 1\n    for i in numbers\n        product_product\
    \ *= i\n    return (sum_product, product_product)\nend\n</cell>\n<code language=julia-1.3>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n\
    @assert sum_product([1,2,3]) == (6, ", "    sum = zero(Int64)\n    product = one(Int64)\n\
    \    for number in numbers\n        sum += number\n        product *= number\n\
    \    return (sum, product)\nend\n</cell>\n<code language=julia-1.3>\nsum_product([1,2,3,4,5])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the sum of the squares\
    \ of the numbers in a given vector.\n>>> sum_square_of_numbers([1,2,3,4,5])\n\
    25\n>>> sum_square_of_numbers([1,2,3])\n9\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n\
    4\n>>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n\
    >>> sum_square_of_numbers([1,2])\n4\n>>> sum_square_of_numbers([1,2])\n4\n>>>\
    \ sum_square_of_numbers([1,2])\n4\n>>> sum_square", "    sum_product = numbers[1]\n\
    \    prod = 1\n    for i in numbers[2:end]\n        sum_product += i\n       \
    \ prod *= i\n    return (sum_product, prod)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1, 2, 3]) == 10\n@assert sum_product([4, 6, 8]) == 42\n@assert\
    \ sum_product([10, 20, 30]) == 100\n@assert sum_product([100, 200, 300]) == 10000\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the dot product of the vector with itself. \nThe dot product is defined as:",
  "    sum_product = sum(numbers)\n    product_of_numbers = reduce(mul, numbers, 1)\n\
    \    return (sum_product, product_of_numbers)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers containing the squares of all the integers in the vector.\nFor example,\
    \ given [1,2,3], the function should return [1,2,3].\n>>> square_of_vector([1,\
    \ 2, 3])\n[1,2,3]\n>>> square_of_vector([4, 9, 16])\n[16, 25, 36]\n>>> square_of_vector([-1,\
    \ -2, -3])\n[-1,-2,-3]\n>>> square_of_vector([0, 0])\n[0, 0]\n>>> square_of_vector([-1])\n\
    []\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([-1])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n\
    >>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0, 0])\n[]\n>>> square_of_vector([0,\
    \ 0])\n[]\n>>> square_of_vector([0, 0])\n[]", "    sum_product = sum(numbers)\n\
    \    product_of_numbers = reduce(mul, numbers, 1)\n    return (sum_product, product_of_numbers)\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the sum of the\
    \ squares of the integers in a list.\nThe sum of the squares should be equal to\
    \ the product of the squares of the integers in the list.\n>>> sum_square_of_numbers([1,\
    \ 2, 3, 4])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4])\n25\n>>> sum_square_of_numbers([])\n\
    0\n>>> sum_square_of_numbers([1, 2, 3, 4, 5])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9,\
    \ 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n\
    25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n\
    >>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>>\
    \ sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1,\
    \ -2, -3, -4, -5, -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2,\
    \ 3, 4, 5, 6, 7, 8, 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5,\
    \ -6, -7, -8, -9, -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8,\
    \ 9, 10])\n25\n>>> sum_square_of_numbers([-1, -2, -3, -4, -5, -6, -7, -8, -9,\
    \ -10])\n25\n>>> sum_square_of_numbers([1, 2, 3, 4, 5, 6, 7, 8, 9, 10])\n25\n\
    >>> sum_square", "    sum = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n\
    \        sum += n\n        prod *= n\n    return (sum, prod)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n", "    sum = 0\n    product\
    \ = 1\n    for n in numbers\n        sum += n\n        product *= n\n    return\
    \ (sum, product)\nend\n</cell>\n<code language=julia-1.5>\nsum_product([1, 2,\
    \ 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of\
    \ integers and returns the sum of the squares of the integers in the vector.\n\
    The function should raise an error if the vector is empty.\nThe function should\
    \ raise an error if the vector contains non-integer values.\nThe function should\
    \ raise an error if the vector contains negative values.\nThe function should\
    \ raise an error if the vector contains duplicate values.\nThe function should\
    \ raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any negative values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise an error if the vector contains any duplicate values.\nThe function\
    \ should raise an error if the vector contains any non-integer values.\nThe function\
    \ should raise an error if the vector contains any non-positive values.\nThe function\
    \ should raise ", "    sum_ = Int64(0)\n    prod = Int64(1)\n    for n in numbers\n\
    \        sum_ = sum_ + n\n        prod = prod * n\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a list of integers and returns the sum\
    \ of the squares of the integers in the list.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-integer elements.\nThe function should raise an error if the list contains\
    \ negative numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should raise an error if the list contains duplicate\
    \ elements.\nThe function should raise an error if the list contains negative\
    \ numbers.\nThe function should ", "    if length(numbers) == 0 \n        return\
    \ (0, 1)\n    end\n    sum_ = numbers[1]\n    prod = 1\n    for i in numbers[2:end]\n\
    \        sum_ += i\n        prod *= i\n    end\n    return (sum_, prod)\nend\n\
    </cell>\n<code language=julia-1.0>\n@assert sum_product([1, 2, 3]) == (6, 3)\n\
    @assert sum_product([-1, -2, -3]) == (0, 3)\n@assert sum_product([-4, -5, -6])\
    \ == (24, 12)\n@assert sum_product([-7, -8, -9]) == (120, 27)\n@assert sum_product([-10,\
    \ -11, -12]) == (720, 144)\n@assert sum_product([-13, -14, -15]) == (5040, 912)\n\
    @assert sum_product([-16, -17, -18]) == (362880, 72976)\n@assert sum_product([-19,\
    \ -20, -21]) == (362880, 72976)\n@assert sum_product([-22, -23, -24]) == (362880,\
    \ 72976)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the numbers in a given list. \nThe function should work for an\
    \ empty list as well.\n>>> sum_squares([])\n0\n>>> sum_squares([1, 2, 3, 4])\n\
    25\n>>> sum_squares([-1, -2, -3])\n0\n>>> sum_squares([-4, -5, -6])\n25\n>>> sum_squares([-7,\
    \ -8, -9])\n49\n>>> sum_squares([-10, -11, -12])\n49\n>>> sum_squares([-13, -14,\
    \ -15])\n49\n>>> sum_squares([-16, -17, -18])\n49\n>>> sum_squares([-19, -20,\
    \ -21])\n49\n>>> sum_squares([-22, -23, -24])\n49\n</text>\n<code language=julia-1.0>",
  "    if length(numbers) == 0 \n        return (0, 1) \n    else \n        sum_ =\
    \ sum(numbers)\n        prod_ = 1\n        for i in numbers \n            prod_\
    \ *= i \n        return (sum_, prod_)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product", "    sum_product = sum(numbers)\n    product_product = 1\n\
    \    for i in numbers\n        product_product *= i\n    return (sum_product,\
    \ product_product)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of integers and returns a list of all the even numbers in the list.\n\
    The even numbers are those that are divisible by 2.\nThe function should return\
    \ an empty list if the list is empty.\nThe function should return a list of integers\
    \ otherwise.\nThe function should return a list of integers even if the list contains\
    \ non-integer elements.\nThe function should return a list of integers even if\
    \ the list contains negative integers.\nThe function should return a list of integers\
    \ even if the list contains non-positive integers.\nThe function should return\
    \ a list of integers even if the list contains negative integers.\nThe function\
    \ should return a list of integers even if the list contains non-positive integers.\n\
    The function should return a list of integers even if the list contains negative\
    \ integers.\nThe function should return a list of integers even if the list contains\
    \ non-positive integers.\nThe function should return a list of integers even if\
    \ the list contains non-integer elements.\nThe function should return a list of\
    \ integers even if the list contains non-positive integers.\nThe function should\
    \ return a list of integers even if the list contains non-integer elements.\n\
    The function should return a list of integers even if the list contains non-positive\
    \ integers.\nThe function should return a list of integers even if the list contains\
    \ non-integer elements.\nThe function should return a list of integers even if\
    \ the list contains non-positive integers.\nThe function should return a list\
    \ of integers even if the list contains non-integer elements.\nThe function should\
    \ return a list of integers even if the list contains non-positive integers.\n\
    The function should return a list of integers even if the list contains non-integer\
    \ elements.\nThe function should return a list of integers even if the list contains\
    \ non-positive integers.\nThe function should return a list of integers even if\
    \ the list contains non-integer elements.\nThe function should return a list of\
    \ integers even if the list contains non-positive integers.\nThe function should\
    \ return a list of integers even if the list contains non-integer elements.\n\
    The function should return a list of integers even if the list contains non-positive\
    \ integers.\nThe function should return a list of integers even if the list contains\
    \ non-integer elements.\nThe function should return a list of integers even if\
    \ the list contains non-positive integers.\nThe function should return a list\
    \ of integers even if the list contains non-integer elements.\nThe function should\
    \ return a list of integers even if the list contains non-positive integers.\n\
    The function should return a list of integers even if the list contains non-integer\
    \ elements.\nThe function should return a list of integers even if the list contains\
    \ non-positive integers.\nThe function should return a list of integers ", " \
    \   sum_product = sum(numbers)\n    product_product = 1\n    for number in numbers\n\
    \        product_product *= number\n    end\n    return (sum_product, product_product)\n\
    end\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n\
    @assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3]) == (6, ",
  "    if length(numbers) == 0 \n        return (0, 1)\n    end\n    sum_product =\
    \ (sum(numbers), prod(numbers))\n    return sum_product\nend\n</cell>\n<code language=julia-1.4>\n\
    sum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the squares of the numbers in a vector.\nThe function should\
    \ work for both real and complex numbers.\nThe function should work for both vectors\
    \ and matrices.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and matrices.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and matrices.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalars and vectors.\nThe function\
    \ should work for both scalars and vectors.\nThe function should work for both\
    \ scalars and vectors.\nThe function should work for both scalars and vectors.\n\
    The function should work for both scalars and vectors.\nThe function should work\
    \ for both scalars and vectors.\nThe function should work for both scalars and\
    \ vectors.\nThe function should work for both scalar", "    sum_ = 0\n    product_\
    \ = 1\n    for n in numbers\n        sum_ += n\n        product_ *= n\n    return\
    \ (sum_, product_)\nend\n</cell>\n<code language=julia-1.0>\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2]) == (3, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([1,2,3]) == (6, 6)\n@assert sum_product([1,2,3])\
    \ == (6, 6)\n@assert sum_product([", "    if length(numbers) == 0 \n        return\
    \ (0, 1) \n    else \n        sum_product = numbers[1] + numbers[2]\n        product_product\
    \ = 1\n        for i in numbers[2:end]\n            product_product *= i\n   \
    \     end\n        return (sum_product, product_product)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product([1,2,3])\
    \ == (6, 3)\n@assert sum_product([1,2,3]) == (6, 3)\n@assert sum_product", " \
    \   sum_ = 0\n    product_ = 1\n    for n in numbers\n        sum_ = sum_ + n\n\
    \        product_ = product_ * n\n    return (sum_, product_)\nend\n</cell>\n\
    <code language=julia-1.5>\nsum_product([1, 2, 3, 4])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector of integers and returns the sum of the\
    \ squares of the integers in the vector.\nThe function should return nothing but\
    \ a tuple of two Int64 numbers, the first one being the sum of the squares and\
    \ the second one being the product of the squares.\nThe function should raise\
    \ an error if the vector is empty.\n>>> sum_of_squares([])\n(0.0, 0.0)\n>>> sum_of_squares([1,\
    \ 2, 3, 4])\n(25, 25)\n>>> sum_of_squares([-1, -2, -3, -4])\n(0.0, 1.0)\n>>> sum_of_squares([-5,\
    \ -6, -7, -8])\n(0.0, 1.0)\n>>> sum_of_squares([-9, -10, -11, -12])\n(0.0, 1.0)\n\
    >>> sum_of_squares([-13, -14, -15, -16])\n(0.0, 1.0)\n>>> sum_of_squares([-17,\
    \ 18, -19, -20])\n(0.0, 1.0)\n>>> sum_of_squares([-21, -22])\n(0.0, 1.0)\n>>>\
    \ sum_of_squares([-23, -24])\n(0.0, 1.0)\n>>> sum_of_squares([-25, -26])\n(0.0,\
    \ 1.0)\n>>> sum_of_squares([-27, -28])\n(0.0, 1.0)\n>>> sum_of_squares([-29, -30])\n\
    (0.0, 1.0)\n>>> sum_of_squares([-31, -32])\n(0.0, 1.0)\n>>> sum_of_squares([-33,\
    \ -34])\n(0.0, 1.0)\n>>> sum_of_squares([-35, -36])\n(0.0, 1.0)\n>>> sum_of_squares([-37,\
    \ -38])\n(0.0, 1.0)\n>>> sum_of_squares([-39, -40])\n(0.0, 1.0)\n>>> sum_of_squares([-41,\
    \ -42])\n(0.0, 1.0)\n>>> sum_of_squares([-43, -44])\n(0.0, 1.0)\n>>> sum_of_squares([-45,\
    \ -46])\n(0.0, 1.0)\n>>> sum_of_squares([-47, -48])\n(0.0, 1.0)\n>>> sum_of_squares([-49,\
    \ -50])\n(0.0, 1.0)\n>>> sum_of_squares([-51, -52])\n(0.0, 1.0)\n>>> sum_of_squares([-53,\
    \ -54])\n(0.0, 1.0)\n>>> sum_of_squares([-55, -"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
