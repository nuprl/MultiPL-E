name: HumanEval_31_is_prime
language: julia
prompt: "\"\"\"Return true if a given number is prime, and false otherwise.\n    >>>\
  \ is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n\
  \    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n \
  \   >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n    \"\"\"\nfunction\
  \ is_prime(n::Int64)::Bool \n"
tests: "using Test\n\n@testset begin\n\ncandidate = is_prime;\n\t@test(candidate(6)\
  \ == false)\n\t@test(candidate(101) == true)\n\t@test(candidate(11) == true)\n\t\
  @test(candidate(13441) == true)\n\t@test(candidate(61) == true)\n\t@test(candidate(4)\
  \ == false)\n\t@test(candidate(1) == false)\n\t@test(candidate(5) == true)\n\t@test(candidate(11)\
  \ == true)\n\t@test(candidate(17) == true)\n\t@test(candidate(85) == false)\n\t\
  @test(candidate(77) == false)\n\t@test(candidate(255379) == false)\nend\n"
completions: ["    if is_prime_impl(n) then return true else return false\nend", " \
    \   if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n] ==\
    \ false \n        then \n            prime_cache[n] = true\n            prime_cache[n+1]\
    \ = false\n            prime_cache[n+2] = false\n            prime_cache[n+3]\
    \ = false\n            prime_cache[n+4] = false\n            prime_cache[n+5]\
    \ = false\n            prime_cache[n+6] = false\n            prime_cache[n+7]\
    \ = false\n            prime_cache[n+8] = false\n            prime_cache[n+9]\
    \ = false\n            prime_cache[n+10] = false\n            prime_cache[n+11]\
    \ = false\n            prime_cache[n+12] = false\n            prime_cache[n+13]\
    \ = false\n            prime_cache[n+14] = false\n            prime_cache[n+15]\
    \ = false\n            prime_cache[n+16] = false\n            prime_cache[n+17]\
    \ = false\n            prime_cache[n+18] = false\n            prime_cache[n+19]\
    \ = false\n            prime_cache[n+20] = false\n            prime_cache[n+21]\
    \ = false\n            prime_cache[n+22] = false\n            prime_cache[n+23]\
    \ = false\n            prime_cache[n+24] = false\n            prime_cache[n+25]\
    \ = false\n            prime_cache[n+26] = false\n            prime_cache[n+27]\
    \ = false\n            prime_cache[n+28] = false\n            prime_cache[n+29]\
    \ = false\n            prime_cache[n+30] = false\n            prime_cache[n+31]\
    \ = false\n            prime_cache[n+32] = false\n            prime_cache[n+33]\
    \ = false\n            prime_cache[n+34] = false\n            prime_cache[n+35]\
    \ = false\n            prime_cache[n+36] = false\n            prime_cache[n+37]\
    \ = false\n            prime_cache[n+38] = false\n            prime_cache[n+39]\
    \ = false\n            prime_cache[n+40] = false\n            prime_cache[n+41]\
    \ = false\n            prime_cache[n+42] = false\n            prime_cache[n+43]\
    \ = false\n            prime_cache[n+44] = false\n            prime_cache[n+45]\
    \ = false\n            prime_cache[n+46] = false\n            prime_cache[n+47]\
    \ = false\n            prime_cache[n+48] = false\n            prime_cache[n+",
  "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then return false\n    else\
    \ if n % 2 == 1 \n        then return false\n    else if n % 3 == 1 \n       \
    \ then return false\n    else \n        x <- 2\n        y <- 3\n        while\
    \ x % y != 0 \n            do x <- x + 1\n            do y <- y + 2\n        \
    \    if x == y \n                then return false\n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a given number is\
    \ divisible by another given number. \nFor example, divisible by 6 is true for\
    \ 6, 12, 18, 24, 30, 36, 40.\nWrite a function that checks if a given number is\
    \ divisible by another given number. \nFor example, divisible by 6 is true for\
    \ 6, 12, 18, 24, 30, 36, 40.\nWrite a function that checks if a given number is\
    \ divisible by another given number. \nFor example, divisible by 6 is true for\
    \ 6, 12, 18, 24, 30, 36, 40.", "    if is_prime_impl(n) == true\n    else \n \
    \       true\n    end\nend\n</cell>\n<code language=julia-1.3>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(61)\n</cell>\n<code language=julia-1.3>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by all numbers from 1\
    \ to n.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    \n\
    \    if n < 2 \n        return false\n    \n    if n == 2 \n        return true\n\
    \    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    while i\
    \ * i <= n \n        if n % i == 0 \n            return false\n        i += 2\n\
    \    \n    return true\nend", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 1 \n        return false\n    \n    prime_cache = [true, false, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, true, true,\
    \ true, true, true, true, true, true, true, true, true, true, true, ", "    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if is_prime_cache[n]\
    \ = is_prime_cache[n] or\n        n <= 1 or\n        n % 2 == 0 or\n        n\
    \ % 3 == 0 or\n        n % 5 == 0 or\n        n % 7 == 0 or\n        n % 11 ==\
    \ 0 or\n        n % 13 == 0 or\n        n % 17 == 0 or\n        n % 19 == 0 or\n\
    \        n % 23 == 0 or\n        n % 29 == 0 or\n        n % 31 == 0 or\n    \
    \    n % 37 == 0 or\n        n % 41 == 0:\n        is_prime_cache[n] = False\n\
    \        return is_prime_cache[n]\n    is_prime_cache[n] = True\n    return is_prime_cache[n]\n\
    end\n</cell>\n<code language=julia-1.3>\nis_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.3>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(13441)\n</cell>\n<code language=julia-1.3>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if a given\
    \ number is divisible by all numbers from 1 to 20.", "    if n < 2 || n % 2 ==\
    \ 0 \n        then return False\n    else \n        primes <- primes(n)\n    \
    \    for i in primes\n            if n % i == 0 \n                then return\
    \ False\n            else return True\nend\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.0>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(11)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(4)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the first n prime numbers. \nFor example, for n=10, the function should return\
    \ [2,3,5,7,11,13,17,19,23,29]", "    if is_prime_impl(n) \n    else \n       \
    \ prime_impl(n) \n    end\nend", "    if is_prime_impl(n) then return true else\
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(101)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns all prime numbers less\
    \ than a given number.", "    if n < 2 || n % 2 == 0 \n        then return false\
    \ \n    else \n        primes <- primes(n)\n        for i in primes \n       \
    \     if n % i == 0 \n                then return false \n        else return\
    \ true \nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of prime factors of a given number.", "    if is_prime_cache[n] == true \n \
    \   else \n        if is_prime_cache[n] == false \n        else \n           \
    \ prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = true\n    \
    \        \n            \n            \n            \n            \n          \
    \  \n            \n            \n            \n            \n            \n  \
    \          \n            \n            \n            \n            \n        \
    \    \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n", "    if n < 2 || n\
    \ % 2 == 0 \n        then return False\n    else if n == 2 \n        then return\
    \ True\n    else \n        for m in range(3, floor(sqrt(n)), 2) \n           \
    \ if n % m == 0 \n                then return False\n    else \n        return\
    \ True\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of prime factors of a given number. For example,\
    \ if the input number is $6$, the output should be $3$.", "    if is_prime_cache[n]\
    \ == true\n    else \n        if is_prime_cache[n] == false\n        then \n \
    \           prime_cache[n] = true\n            prime_cache[n+1] = false\n    \
    \        prime_cache[n+2] = false\n            prime_cache[n+3] = false\n    \
    \        prime_cache[n+4] = false\n            prime_cache[n+5] = false\n    \
    \        prime_cache[n+6] = false\n            prime_cache[n+7] = false\n    \
    \        prime_cache[n+8] = false\n            prime_cache[n+9] = false\n    \
    \        prime_cache[n+10] = false\n            prime_cache[n+11] = false\n  \
    \          prime_cache[n+12] = false\n            prime_cache[n+13] = false\n\
    \            prime_cache[n+14] = false\n            prime_cache[n+15] = false\n\
    \            prime_cache[n+16] = false\n            prime_cache[n+17] = false\n\
    \            prime_cache[n+18] = false\n            prime_cache[n+19] = false\n\
    \            prime_cache[n+20] = false\n            prime_cache[n+21] = false\n\
    \            prime_cache[n+22] = false\n            prime_cache[n+23] = false\n\
    \            prime_cache[n+24] = false\n            prime_cache[n+25] = false\n\
    \            prime_cache[n+26] = false\n            prime_cache[n+27] = false\n\
    \            prime_cache[n+28] = false\n            prime_cache[n+29] = false\n\
    \            prime_cache[n+30] = false\n            prime_cache[n+31] = false\n\
    \            prime_cache[n+32] = false\n            prime_cache[n+33] = false\n\
    \            prime_cache[n+34] = false\n            prime_cache[n+35] = false\n\
    \            prime_cache[n+36] = false\n            prime_cache[n+37] = false\n\
    \            prime_cache[n+38] = false\n            prime_cache[n+39] = false\n\
    \            prime_cache[n+40] = false\n            prime_cache[n+41] = false\n\
    \            prime_cache[n+42] = false\n            prime_cache[n+43] = false\n\
    \            prime_cache[n+44] = false\n            prime_cache[n+45] = false\n\
    \            prime_cache[n+46] = false\n            prime_cache[n+47] = false\n\
    \            prime_cache[n+48] = false\n            prime_cache[n+", "    if is_prime_impl(n)\
    \ then return true else return false\nend", '    if n < 2 || n % 2 == 0 || n %
    3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17 ==
    0 || n % 19 == 0 || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 ||
    n % 41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n %
    61 == 0 || n % 67 == 0 || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n % 83
    == 0 || n % 89 == 0 || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 107
    == 0 || n % 109 == 0 || n % 113 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123
    == 0 || n % 127 == 0 || n % 129 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139
    == 0 || n % 141 == 0 || n % 143 == 0 || n % 147 == 0 || n % 149 == 0 || n % 151
    == 0 || n % 153 == 0 || n % 157 == 0 || n % 159 == 0 || n % 163 == 0 || n % 167
    == 0 || n % 171 == 0 || n % 173 == 0 || n % 177 == 0 || n % 179 == 0 || n % 181
    == 0 || n % 183 == 0 || n % 187 == 0 || n % 189 == 0 || n % 191 == 0 || n % 193
    == 0 || n % 197 == 0 || n % 199 == 0 || n % 201 == 0 || n % 203 == 0 || n % 207
    == 0 || n % 209 == 0 || n % 211 == 0 || n % 213 == 0 || n % 215 == 0 || n % 217
    == 0 || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 || n % 227 == 0 || n % 229
    == 0 || n % 231 == 0 || n % 233 == 0 || n % 239 == 0 || n % 241 == 0 || n % 243
    == 0 || n % 247 == 0 || n % 249 == 0 || n % 251 == 0 || n % 253 == 0 || n % 257
    == 0 || n % 259 == 0 || n % 261 == 0 || n % 263 == 0 || n % 267 == 0 || n % 269
    == 0 || n % 271 == 0 || n % 273 == 0 || n % 277 == 0 || n % 279 == 0 || n % 281
    == 0 || n % 283 == 0 || n % 287 == 0 || n % 289 == 0 || n % 291 == 0 || n % 293
    == 0 || n % 297 == 0 || n % 301 == 0 || n % 303 == 0 || n % 307 == 0 || n % 309
    == 0 || n % 311 == 0 || n % 313 == 0 || n % 315 == 0 || n % 317 == 0 || n % 319
    == 0 || n % 321 == 0 || n % 323 == 0 || n % 327 == 0 || n % 329 == 0 || n % 331
    == 0 || n % 333 == 0 || n % 337 == 0 || n % 339 == 0 || n % 341 == 0 || n % 343
    == 0 || n % 347 == 0 || n % 349 == 0 || n % 351 == 0 || n % 353 == 0 || n % 357
    == 0 || n % 359 == 0 || n % 361 == 0 || n % 363 == 0 || n % 367 == 0 || n % 369',
  "    if is_prime_impl(n) == true\n    else \n        return false\n    end\nend",
  '    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11
    == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0 || n % 29 ==
    0 || n % 31 == 0 || n % 37 == 0 || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 ||
    n % 53 == 0 || n % 59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 || n %
    73 == 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 || n % 97 == 0 || n % 101
    == 0 || n % 103 == 0 || n % 107 == 0 || n % 109 == 0 || n % 113 == 0 || n % 117
    == 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 || n % 129 == 0 || n % 131
    == 0 || n % 137 == 0 || n % 139 == 0 || n % 141 == 0 || n % 143 == 0 || n % 147
    == 0 || n % 149 == 0 || n % 151 == 0 || n % 157 == 0 || n % 159 == 0 || n % 163
    == 0 || n % 167 == 0 || n % 171 == 0 || n % 173 == 0 || n % 177 == 0 || n % 179
    == 0 || n % 181 == 0 || n % 183 == 0 || n % 187 == 0 || n % 189 == 0 || n % 191
    == 0 || n % 193 == 0 || n % 197 == 0 || n % 199 == 0 || n % 201 == 0 || n % 203
    == 0 || n % 207 == 0 || n % 209 == 0 || n % 211 == 0 || n % 213 == 0 || n % 217
    == 0 || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 || n % 227 == 0 || n % 229
    == 0 || n % 233 == 0 || n % 239 == 0 || n % 241 == 0 || n % 243 == 0 || n % 247
    == 0 || n % 249 == 0 || n % 251 == 0 || n % 253 == 0 || n % 257 == 0 || n % 259
    == 0 || n % 261 == 0 || n % 263 == 0 || n % 267 == 0 || n % 269 == 0 || n % 271
    == 0 || n % 273 == 0 || n % 277 == 0 || n % 279 == 0 || n % 281 == 0 || n % 283
    == 0 || n % 287 == 0 || n % 289 == 0 || n % 291 == 0 || n % 293 == 0 || n % 297
    == 0 || n % 301 == 0 || n % 303 == 0 || n % 307 == 0 || n % 309 == 0 || n % 311
    == 0 || n % 313 == 0 || n % 317 == 0 || n % 319 == 0 || n % 321 == 0 || n % 323
    == 0 || n % 327 == 0 || n % 329 == 0 || n % 331 == 0 || n % 333 == 0 || n % 337
    == 0 || n % 339 == 0 || n % 341 == 0 || n % 343 == 0 || n % 347 == 0 || n % 349
    == 0 || n % 351 == 0 || n % 353 == 0 || n % 357 == 0 || n % 359 == 0 || n % 361
    == 0 || n % 363 == 0 || n % 367 == 0 || n % 369 == 0 || n % 371 == 0 || n % 373
    == 0 || n % 377 == 0 || n % 379', "    if n < 2 || n % 2 == 0 \n        return\
    \ false\n    \n    i = 2\n    while i <= sqrt(n) \n        if n % i == 0 \n  \
    \          return false\n        i += 1\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(7)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(8)\n</cell>\n<code language=julia-1.5>\n@time is_prime(9)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(10)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(12)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(14)\n</cell>\n<code language=julia-1.5>\n@time is_prime(15)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(16)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(17)\n</cell>\n<code language=julia-1.5>\n@time is_prime(18)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(19)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(20)\n</cell>\n<code language=julia-1.5>\n@time is_prime(21)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(22)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(23)\n</cell>\n<code language=julia-1.5>\n@time is_prime(24)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(25)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(26)\n</cell>\n<code language=julia-1.5>\n@time is_prime(27)\n</cell>\n\
    <code language=juli", "    if is_prime_cache[n] == true \n    else \n        if\
    \ is_prime_cache[n] == false \n        else \n            is_prime_cache[n] =\
    \ is_prime_cache[n] or is_prime_cache[n-1] == true \n        end\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nis_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.3>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(13441)\n</cell>\n<code language=julia-1.3>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1)\n</cell>\n<text>\nExercise\nWrite a function that returns the first\
    \ n prime numbers. \nHint: use the function is_prime(n::Int64)::Bool to determine\
    \ whether a number is prime.", "    if is_prime_impl(n) \n    else \n        prime_impl(n)\
    \ \nend\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code\
    \ language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-", "    if is_prime_helper(n)\
    \ == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n",
  "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n       \
    \ then return false\n    else if n == 1 || n == 3 || n == 5 || n == 7 \n     \
    \   then return true\n    else if n % 6 == 0 then return is_prime(n / 6) else\
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true if\
    \ a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n\
    \    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n\
    \    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n  \
    \  >>> is_prime(1)\n    False\n    \"\"\"", "    if n < 2 || n % 2 == 0\n    \
    \    false\n    else\n        if is_prime(n - 2)\n            true\n        else\n\
    \            if is_prime(n - 3)\n                true\n            else\n    \
    \            false\n        end\n    end\nend\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns True if a number is divisible by another number, and\
    \ False otherwise.\nWrite a function that returns True if a number is even, and\
    \ False otherwise.\nWrite a function that returns True if a number is odd, and\
    \ False otherwise.\nWrite a function that returns True if a number is prime and\
    \ False otherwise.\nWrite a function that returns True if a number is divisible\
    \ by any number between 2 and 100, and False otherwise.\nWrite a function that\
    \ returns True if a number is divisible by any number between 2 and 100, and False\
    \ otherwise.\nWrite a function that returns True if a number is divisible by any\
    \ number between 2 and 100, and False otherwise.\nWrite a function that returns\
    \ True if a number is divisible by any number between 2 and 100, and False otherwise.\n\
    Write a function that returns True if a number is divisible by any number between\
    \ 2 and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is divisible by any number between 2 and 100, and False otherwise.\nWrite a\
    \ function that returns True if a number is divisible by any number between 2\
    \ and 100, and False otherwise.\nWrite a function that returns True if a number\
    \ is ", "    if n < 2 || n % 2 == 0 \n        then return false \n    else \n\
    \        if is_factor(n) \n            then return false \n        else \n   \
    \         primes <- primes(n)\n            for p in primes \n                do\
    \ if n % p == 0 \n                    then return false \n            end\n  \
    \          return true\n        end\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the prime factors of a given number.", "    if is_prime_cache[n]\
    \ == true \n    else \n        if is_prime_cache[n] == false \n        then \n\
    \            is_prime_cache[n] = is_prime_test(n) \n        else \n          \
    \  is_prime_cache[n] = is_prime_test(n) \n        end\n    end\nend", "    if\
    \ is_prime_impl(n) \n    else \n        prime_impl_error()\n    end\nend\n</cell>\n\
    <code language=julia-1.3>", "    if is_prime_impl(n) \n    else \n        prime_impl(\n\
    \            n, \n            prime_impl(\n                n, \n             \
    \   prime_impl(\n                    n, \n                    prime_impl(\n  \
    \                      n, \n                        prime_impl(\n            \
    \                n, \n                            prime_impl(\n              \
    \                  n, \n                                prime_impl(\n        \
    \                            n, \n                                    prime_impl(\n\
    \                                        n, \n                               \
    \         prime_impl(\n                                            n, \n     \
    \                                       prime_impl(\n                        \
    \                        n, \n                                               \
    \ prime_impl(\n                                                    n, \n     \
    \                                               prime_impl(\n                \
    \                                        n, \n                               \
    \                         prime_impl(\n                                      \
    \                      n, \n                                                 \
    \           prime_impl(\n                                                    \
    \            n, \n                                                           \
    \     prime_impl(\n                                                          \
    \          n, \n                                                             \
    \       prime_impl(\n                                                        \
    \                n, \n                                                       \
    \                 prime_impl(\n                                              \
    \                              n, \n                                         \
    \                                   prime_impl(\n                            \
    \                                                    n, \n                   \
    \                                                             prime_impl(\n  \
    \                                                                            \
    \      n, \n                                                                 \
    \                   prime_impl(\n                                            \
    \                                            n, \n                           \
    \                                                             prime_impl(\n  \
    \                                                                            \
    \              n, \n                                                         \
    \                                   prime_impl(\n                            \
    \                                                                    n, \n   \
    \                                                                            \
    \                 prime_impl(\n                                              \
    \                                                      n, \n                 \
    \                                                                            \
    \       prime_impl(\n                                                        \
    \                                                n, \n                       \
    \                                                                            \
    \     prime_impl(\n                                                          \
    \                                                  n, \n                     \
    \                                                                            \
    \           prime_impl(\n                                                    \
    \                                                            n, \n           \
    \                                                                            \
    \                         prime_impl(\n                                      \
    \                                                                            \
    \  n, \n                                                                     \
    \                                               prime_impl(\n                \
    \                                                                            \
    \                            n, \n                                           \
    \                                                                            \
    \ prime_impl(\n                                                              \
    \                                                              n, \n         \
    \                                                                            \
    \                                       prime_impl(\n                        \
    \                                                                            \
    \                            n, \n                                           \
    \                                                                            \
    \         prime_impl(\n                                                      \
    \                                                                            \
    \  n, \n                                                                     \
    \                                                               prime_impl(\n\
    \                                                                            \
    \                                                            n, \n           \
    \                                                                            \
    \                                                 prime_impl(\n              \
    \                                                                            \
    \                                                  n, \n                     \
    \                                                                            \
    \                                           prime_impl(\n                    \
    \                                                                            \
    \                                                n, \n                       \
    \                                                                            \
    \                                             prime_impl(\n                  \
    \                                                                            \
    \                                                      n, \n                 \
    \                                                                            \
    \                                                       prime_impl(\n        \
    \                                                                            \
    \                                                                    n, \n   \
    \                                                                            \
    \                                                                         prime_impl(\n\
    \                                                                            \
    \                                                                            \
    \    n, \n                                                                   \
    \                                                                            \
    \             prime_impl(\n                                                  \
    \                                                                            \
    \                                  n, \n                                     \
    \                                                                            \
    \                                               prime_impl(\n                \
    \                                                                            \
    \                                                                        n, \n\
    \                                                                            \
    \                                                                            \
    \            prime_impl(\n                                                   \
    \                                                                            \
    \                                         n, \n                              \
    \                                                                            \
    \                                                              prime_impl(\n \
    \                                                                            \
    \                                                                            \
    \                   n, \n                                                    \
    \                                                                            \
    \                                            prime_impl(\n                   \
    \                                                                            \
    \                                                                            \
    \     n, \n                                                                  \
    \                                                                            \
    \                                  prime_impl(\n                             \
    \                                                                            \
    \                                                                           n,\
    \ \n                                                                         \
    \                                                                            \
    \                               prime_impl(\n                                \
    \                                                                            \
    \                                                                            n,\
    \ \n                                                                         \
    \                                                                            \
    \                                   prime_impl(\n                            \
    \                                                                            \
    \                                                                            \
    \        n, \n                                                               \
    \                                                                            \
    \                                                 prime_impl(", "    if is_prime_cache[n]\
    \ == true\n    else \n        if is_prime_cache[n] == false\n        else \n \
    \           if is_prime_cache[n] == true\n            else \n                is_prime_cache[n]\
    \ = is_prime(n-1)\n        end\n    end\nend", "    if is_prime_cache[n] \n  \
    \      return is_prime_cache[n]\n    \n    if n <= 1 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    i = 5\n    while i * i <= n \n        i += 2\n    \n\
    \    if n == i \n        return true\n    \n    return false\nend", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    \n    if n < 2 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    i = 5\n    while i * i <= n \n        i += 2\n    \n\
    \    if n == i \n        return true\n    \n    return false\nend", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n <= 1 \n        return false\n \
    \   \n    prime_cache[n] = true\n    \n    if n <= 3 \n        return true\n \
    \   \n    i = 2\n    while i * i <= n \n        if n % i == 0 \n            return\
    \ false\n        i += 1 \n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime factors of a given\
    \ number.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n    then return false\n    else return true\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the number of prime numbers less than a given\
    \ number.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n   \
    \ \n    if n <= 1 \n        return False \n    \n    prime_cache = [True]\n  \
    \  \n    for p in prime_cache\n        if n % p == 0 \n            return False\
    \ \n    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if\
    \ n % p == 1 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 2 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 3 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 4 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 5 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 6 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 7 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 8 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 9 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 10 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 11 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 12 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 13 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 14 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 15 \n            return True \n    \n    prime_cache = [True]\n    \n\
    \    for p in prime_cache\n        if n % p == 16 \n            return False \n\
    \    \n    prime_cache = [False]\n    \n    for p in prime_cache\n        if n\
    \ % p == 17 \n            return True \n    \n    prime_cache = [True]\n", " \
    \   if is_prime_impl(n) then return true else return false \nend", "    if is_prime_impl(n)\
    \ \n    else \n        prime_impl_error(n)\nend", "    if is_prime_impl(n) ==\
    \ true\n    else \n        false\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n",
  "    if is_prime_impl(n) == true\n    else \n        return false\nend", "    if\
    \ n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n     \
    \   then return true\n    else \n        begin \n            n = n / 2\n     \
    \       for i in 2..n \n                do \n                    if n % i == 0\
    \ \n                        then return false \n            end \n           \
    \ return true \n        end\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=2\
    \ |>\n<code>", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n %\
    \ 7 == 0 \n    then return false \n    else return true\nend\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the number of prime factors of a given\
    \ number.", "    if is_prime_impl(n) == true\n    else \n        prime_check(n)\
    \ == false\nend", "    if n < 2 || n % 2 == 0 \n        then return false\n  \
    \  else if n == 2 \n        then return true\n    else \n        if is_prime(n\
    \ / 2) \n            then return true\n        else return false\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"Return true if a given number is even, and false\
    \ otherwise.\n    >>> is_even(6)\n    False\n    >>> is_even(10)\n    True\n \
    \   >>> is_even(11)\n    True\n    >>> is_even(13441)\n    True\n    >>> is_even(61)\n\
    \    True\n    >>> is_even(4)\n    False\n    >>> is_even(1)\n    False\n    \"\
    \"\"", "    if n <= 1 \n        true\n    else\n        if n % 2 == 0 \n     \
    \       false\n        else\n            if n % 3 == 0 \n                false\n\
    \            else\n                if n % 5 == 0 \n                    false\n\
    \                else\n                    if n % 7 == 0 \n                  \
    \      false\n                    else\n                        if n % 11 == 0\
    \ \n                            false\n                        else\n        \
    \                    if n % 13 == 0 \n                                false\n\
    \                            else\n                                if n % 17 ==\
    \ 0 \n                                    false\n                            \
    \    else\n                                    if n % 19 == 0 \n             \
    \                           false\n                                    else\n\
    \                                        if n % 23 == 0 \n                   \
    \                         false\n                                        else\n\
    \                                            if n % 29 == 0 \n               \
    \                                 false\n                                    \
    \        else\n                                                if n % 31 == 0\
    \ \n                                                    false\n              \
    \                                  else\n                                    \
    \                if n % 37 == 0 \n                                           \
    \             false\n                                                    else\n\
    \                                                        if n % 41 == 0 \n   \
    \                                                         false\n            \
    \                                            else\n                          \
    \                                  if n % 43 == 0 \n                         \
    \                                       false\n                              \
    \                              else\n                                        \
    \                        if n % 47 == 0 \n                                   \
    \                                 false\n                                    \
    \                            else\n                                          \
    \                          if n % 53 == 0 \n                                 \
    \                                       false\n                              \
    \                                      else\n                                \
    \                        if n % 59 == 0 \n                                   \
    \                         false\n                                            \
    \            else\n                                                          \
    \  if n % 61 == 0 \n                                                         \
    \       false\n                                                            else\n\
    \                                                                if n % 67 ==\
    \ 0 \n                                                                    false\n\
    \                                                                else\n      \
    \                                                              if n % 71 == 0\
    \ \n                                                                        false\n\
    \                                                                    else\n  \
    \                                                      if n % 73 == 0 \n     \
    \                                                       false\n              \
    \                                          else\n                            \
    \                                if n % 79 == 0 \n                           \
    \                                     false\n                                \
    \                            else\n                                          \
    \                      if n % 83 == 0 \n                                     \
    \                               false\n                                      \
    \                          else\n                                            \
    \                        if n % 89 == 0 \n                                   \
    \                                     false\n                                \
    \                                    else\n                                  \
    \                      if n % 97 == 0 \n                                     \
    \                       false\n                                              \
    \          else\n                                                            if\
    \ n % 101 == 0 \n                                                            \
    \    false\n                                                            else\n\
    \                                                                if n % 103 ==\
    \ 0 \n                                                                    false\n\
    \                                                                else\n      \
    \                                                              if n % 107 == 0\
    \ \n                                                                        false\n\
    \                                                                    else\n  \
    \                                                      if n % 111 == 0 \n    \
    \                                                        false\n             \
    \                                           else\n                           \
    \                                 if n % 115 == 0 \n                         \
    \                                       false\n                              \
    \                              else\n                                        \
    \                        if n % 117 == 0 \n                                  \
    \                                  false\n                                   \
    \                             else\n                                         \
    \                           if n % 121 == 0 \n                               \
    \                                         false\n                            \
    \                                        else\n                              \
    \                          if n % 123 == 0 \n                                \
    \                            false\n                                         \
    \               else\n                                                       \
    \     if n % 127 == 0 \n                                                     \
    \           false\n                                                          \
    \  else\n                                                                if n\
    \ % 131 == 0 \n                                                              \
    \      false\n                                                               \
    \ else\n                                                                    if\
    \ n % 137 == 0 \n                                                            \
    \            false\n                                                         \
    \           else\n                                                        if n\
    \ % 141 == 0 \n                                                            false\n\
    \                                                        else\n              \
    \                                              if n % 147 == 0 \n", "    if n\
    \ < 2 || n > 1000000000 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n        || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n\
    \ % 23 == 0 \n        || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 || n % 41 ==\
    \ 0 || n % 43 == 0 \n        || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n\
    \ % 61 == 0 || n % 67 == 0 \n        || n % 71 == 0 || n % 73 == 0 || n % 79 ==\
    \ 0 || n % 83 == 0 || n % 89 == 0 \n        || n % 97 == 0 || n % 101 == 0 ||\
    \ n % 103 == 0 || n % 107 == 0 || n % 109 == 0 \n        || n % 113 == 0 || n\
    \ % 117 == 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 \n        || n %\
    \ 129 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139 == 0 || n % 141 == 0 \n\
    \        || n % 143 == 0 || n % 147 == 0 || n % 151 == 0 || n % 153 == 0 || n\
    \ % 157 == 0 \n        || n % 159 == 0 || n % 163 == 0 || n % 167 == 0 || n %\
    \ 171 == 0 || n % 173 == 0 \n        || n % 177 == 0 || n % 179 == 0 || n % 181\
    \ == 0 || n % 183 == 0 || n % 185 == 0 \n        || n % 187 == 0 || n % 189 ==\
    \ 0 || n % 191 == 0 || n % 193 == 0 || n % 197 == 0 \n        || n % 199 == 0\
    \ || n % 201 == 0 || n % 203 == 0 || n % 205 == 0 || n % 207 == 0 \n        ||\
    \ n % 209 == 0 || n % 211 == 0 || n % 213 == 0 || n % 215 == 0 || n % 217 == 0\
    \ \n        || n % 219 == 0 || n % 221 == 0 || n % 223 == 0 || n % 225 == 0 ||\
    \ n % 227 == 0 \n        || n % 229 == 0 || n % 231 == 0 || n % 233 == 0 || n\
    \ % 239 == 0 || n % 241 == 0 \n        || n % 243 == 0 || n % 247 == 0 || n %\
    \ 249 == 0 || n % 251 == 0 || n % 253 == 0 \n        || n % 257 == 0 || n % 259\
    \ == 0 || n % 261 == 0 || n % 263 == 0 || n % 265 == 0 \n        || n % 267 ==\
    \ 0 || n % 269 == 0 || n % 271 == 0 || n % 273 == 0 || n % 275 == 0 \n       \
    \ || n % 277 == 0 || n % 279 == 0 || n % 281 == 0 || n % 283 == 0 || n % 285 ==\
    \ 0 \n        || n % 287 == 0 || n % 289 == 0 || n % 291 == 0 || n % 293 == 0\
    \ || n % 295 == 0 \n        || n % 297 == 0 || n % 299 == 0 || n % 301 == 0 ||\
    \ n % 303 == 0 || n % 305 == 0 \n        || n % 307 == ", "    if n == 0\n   \
    \     true\n    else\n        if n % 2 == 0\n            false\n        else\n\
    \            if n % 3 == 0\n                false\n            else\n        \
    \        if n % 5 == 0\n                    false\n                else\n    \
    \                if n % 7 == 0\n                        false\n              \
    \      else\n                        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 1 \n        return false\n    if n % 2 == 0 \n        return false\n\
    \    \n    i = 5\n    while i * i <= n \n        if n % i == 0 \n            return\
    \ false\n        i += 2\n    return true\nend", "    if n < 2 || n > 1000000000\
    \ || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        then return\
    \ false\n    else if n == 1 || n == 3 || n == 5 || n == 7 || n == 9 || n == 11\
    \ \n        then return true\n    else if n == 2 || n % 2 == 0 then return false\n\
    \    else if n % 3 == 0 then return false\n    else if n % 5 == 0 then return\
    \ false\n    else if n % 7 == 0 then return false\n    else if n == 9 || n ==\
    \ 11 then return true\n    else return is_prime(n-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    \n    if n < 2 \n        return false\n\
    \    \n    prime_cache = [true, false, true]\n    \n    for i = 2 to n \n    \
    \    if prime_cache[i] \n            return false\n        \n        if n % i\
    \ == 0 \n            prime_cache[i] = false\n            \n    return true\nend\n\
    </cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if a given\
    \ number is divisible by all numbers from 1 to n (inclusive).", "    if n < 2\
    \ || n % 2 == 0 \n        then return false\n    else if n == 2 \n        then\
    \ return true\n    else \n        if is_prime(n - 1) \n            then return\
    \ true\n        else return false\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if n < 2 || n %\
    \ 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n        then return false\n\
    \    else if n == 2 || n == 3 || n == 5 || n == 7 \n        then return true\n\
    \    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 \n        then return false\n\
    \    else if n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n        then return true\n\
    \    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 ==\
    \ 5 || n % 6 == 6 \n        then return false\n    else if n % 6 == 1 || n % 6\
    \ == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n        then\
    \ return true\n    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 ==\
    \ 4 || n % 6 == 5 || n % 6 == 6 \n        then return false\n    else if n % 6\
    \ == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n\
    \        then return true\n    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3\
    \ || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n        then return false\n    else\
    \ if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n %\
    \ 6 == 6 \n        then return true\n    else if n % 6 == 1 || n % 6 == 2 || n\
    \ % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n        then return false\n\
    \    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 ==\
    \ 5 || n % 6 == 6 \n        then return true\n    else if n % 6 == 1 || n % 6\
    \ == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n        then\
    \ return false\n    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 ==\
    \ 4 || n % 6 == 5 || n % 6 == 6 \n        then return true\n    else if n % 6\
    \ == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n\
    \        then return false\n    else if n % 6 == 1 || n % 6 == 2 || n % 6 == 3\
    \ || n % 6 == 4 || n % 6 == 5 || n % 6 == 6 \n        then return true\n    else\
    \ if n % 6 == 1 || n % 6 == 2 || n % 6 == 3 || n % 6 == 4 || n % 6 == 5 || n %\
    \ 6 == 6 \n        then return false\n    else if n % 6 == 1 || n % 6 == 2 ||\
    \ n % ", "    if n < 2 || n % 2 == 0 \n        return false\n    else \n     \
    \   return is_prime(n - 1) || is_prime(n - 3)\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\n\
    is_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    is_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\n\
    is_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\n\
    is_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\
    \"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\nis_prime(101)\n\
    is_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\"\"\"\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\n\
    is_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code\
    \ language=julia-1.3>\n\"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\n\
    is_prime(61)\nis_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\n\
    is_prime(4)\nis_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\n\
    is_prime(6)\nis_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\n\
    is_prime(1)\n\"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\n\
    is_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\
    \"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\nis_prime(101)\n\
    is_", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <\
    \ 2 \n        return false\n    \n    prime_cache = [true]\n    prime_cache[1]\
    \ = false\n    \n    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n % 2 == 0 \n        return false\n    \n    for i in 3:(n / 2)\n\
    \        if n % i == 0 \n            return false\n        prime_cache[i] = false\n\
    \    \n    for i in 2:(n / 2)\n        if prime_cache[i] \n            return\
    \ false\n        prime_cache[i] = true\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.3>\nis_prime_cache = [true]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100]\n</cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache[100]\n</cell>\n<code language=julia-1.3>\n\
    is_prime_cache[100", "    if is_prime_cache[n] == true\n    else \n        if\
    \ is_prime_cache[n] == false\n        then \n            prime_cache[n] = true\n\
    \            prime_cache[n+1] = false\n            \n            for i in 2..n\n\
    \            do \n                if n % i == 0\n                then \n     \
    \               prime_cache[n] = false\n                    prime_cache[n+1] =\
    \ true\n                end\n            end\n        end\n    end\n    return\
    \ prime_cache[n]\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<code language=julia-1.5>\n\
    is_prime_cache = [false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, ", "    if is_prime_impl(n) then return true else\
    \ return false\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(6)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(4)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a given number is divisible by any number\
    \ between 1 and a given number. For example, if the given number is 10, then any\
    \ number between 1 and 10 can be divided by any number between 1 and 10. Write\
    \ a function that checks if a given number is divisible by any number between\
    \ 1 and a given number.", "    if is_prime_impl(n) \n    else \n        prime_impl(prime_impl(n))\n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.3>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(11)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a given number is divisible by any number between 1 and 100 (both included).",
  "    if is_prime_impl(n) \n    else \n        prime_impl_error(n)\nend\n</cell>\n\
    <code language=julia-1.0>\n@code_native is_prime(6)\n</cell>\n<code language=julia-1.0>\n\
    @code_native is_prime(101)\n</cell>\n<code language=julia-1.0>\n@code_native is_prime(11)\n\
    </cell>\n<code language=julia-1.0>\n@code_native is_prime(13441)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @code_native is_prime(4)\n</cell>\n<code language=julia-1.0>\n@code_native is_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns True if n is prime, and\
    \ False otherwise.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 1 \n        return false\n    if n % 2 == 0 \n        return false\n\
    \    \n    prime_cache = [true, false]\n    \n    prime_cache[1] = true\n    prime_cache[2]\
    \ = true\n    \n    prime_cache[3] = true\n    prime_cache[4] = true\n    \n \
    \   prime_cache[5] = true\n    prime_cache[6] = true\n    \n    prime_cache[7]\
    \ = true\n    prime_cache[8] = true\n    \n    prime_cache[9] = true\n    \n \
    \   prime_cache[10] = true\n    prime_cache[11] = true\n    \n    prime_cache[12]\
    \ = true\n    prime_cache[13] = true\n    \n    prime_cache[14] = true\n    prime_cache[15]\
    \ = true\n    \n    prime_cache[16] = true\n    prime_cache[17] = true\n    \n\
    \    prime_cache[18] = true\n    prime_cache[19] = true\n    \n    prime_cache[20]\
    \ = true\n    prime_cache[21] = true\n    \n    prime_cache[22] = true\n    prime_cache[23]\
    \ = true\n    \n    prime_cache[24] = true\n    prime_cache[25] = true\n    \n\
    \    prime_cache[26] = true\n    prime_cache[27] = true\n    \n    prime_cache[28]\
    \ = true\n    prime_cache[29] = true\n    \n    prime_cache[30] = true\n    prime_cache[31]\
    \ = true\n    \n    prime_cache[32] = true\n    prime_cache[33] = true\n    \n\
    \    prime_cache[34] = true\n    prime_cache[35] = true\n    \n    prime_cache[36]\
    \ = true\n    prime_cache[37] = true\n    \n    prime_cache[38] = true\n    prime_cache[39]\
    \ = true\n    \n    prime_cache[40] = true\n    prime_cache[41] = true\n    \n\
    \    prime_cache[42] = true\n    prime_cache[43] = true\n    \n    prime_cache[44]\
    \ = true\n    prime_cache[45] = true\n    \n    prime_cache[46] = true\n    prime_cache[47]\
    \ = true\n    \n    prime_cache[48] = true\n    prime_cache[49] = true\n    \n\
    \    prime_cache[50] = true\n    prime_cache[51] = true\n    \n    prime_cache[52]\
    \ = true\n    prime_", "    if n < 2 || n % 2 == 0\n        return false\n   \
    \ \n    i = 5\n    while i * i <= n\n        if n % i == 0\n            return\
    \ false\n        i += 6\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return true if a given number is even, and false otherwise.\n    >>> is_even(6)\n\
    \    True\n    >>> is_even(10)\n    False\n    >>> is_even(1)\n    False\n   \
    \ \"\"\"", "    if is_prime_impl(n) == true\n    else return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(1344", "    if is_prime_impl(n)\
    \ then return true else return false\nend", "    if is_prime_impl(n) \n    else\
    \ \n        prime_impl(n) \nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of prime factors of a given number.", " \
    \   if n < 2 || n % 2 == 0 \n        then return False\n    else if n == 2 \n\
    \        then return True\n    else \n        for i in 2..(n-1) do \n        \
    \    if n % i == 0 \n                then return False\n            else \n  \
    \              return True \nend\n</code>\n<|/ a tags=julia,primes |>\n<| c |>\n\
    This code does not work. `is_prime(13)` returns true.\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug and added a test case to show that it works.\n<|/ c |>\n<| c |>\nThe\
    \ code now works. I added a test case to show that it works.\n<|/ c |>\n<| c |>\n\
    The code now works. I added a test case to show that it works.\n<|/ c |>\n<| c\
    \ |>\nThe code now works. I added a test case to show that it works.\n<|/ c |>\n\
    <| a tags=julia,primes |>\n<code>", "    if n < 2 || n % 2 == 0 || n % 3 == 0\
    \ \n        then return false\n    else if n % 2 == 1 || n % 3 == 1 \n       \
    \ then return true\n    else if n % 2 == 0 || n % 3 == 0 \n        then return\
    \ false\n    else if n % 3 == 1 \n        then return true\n    else if n % 5\
    \ == 0 \n        then return false\n    else if n % 7 == 0 \n        then return\
    \ false\n    else if n % 11 == 0 \n        then return false\n    else if n %\
    \ 13 == 0 \n        then return false\n    else if n % 17 == 0 \n        then\
    \ return false\n    else if n % 19 == 0 \n        then return false\n    else\
    \ if n % 23 == 0 \n        then return false\n    else if n % 29 == 0 \n     \
    \   then return false\n    else if n % 31 == 0 \n        then return false\n \
    \   else if n % 37 == 0 \n        then return false\n    else if n % 41 == 0 \n\
    \        then return false\n    else if n % 43 == 0 \n        then return false\n\
    \    else if n % 47 == 0 \n        then return false\n    else if n % 53 == 0\
    \ \n        then return false\n    else if n % 59 == 0 \n        then return false\n\
    \    else if n % 61 == 0 \n        then return false\n    else if n % 67 == 0\
    \ \n        then return false\n    else if n % 71 == 0 \n        then return false\n\
    \    else if n % 73 == 0 \n        then return false\n    else if n % 79 == 0\
    \ \n        then return false\n    else if n % 83 == 0 \n        then return false\n\
    \    else if n % 89 == 0 \n        then return false\n    else if n % 97 == 0\
    \ \n        then return false\n    else if n % 101 == 0 \n        then return\
    \ false\n    else if n % 103 == 0 \n        then return false\n    else if n %\
    \ 107 == 0 \n        then return false\n    else if n % 113 == 0 \n        then\
    \ return false\n    else if n % 117 == 0 \n        then return false\n    else\
    \ if n % 121 == 0 \n        then return false\n    else if n % 123 == 0 \n   \
    \     then return false\n    else if n % 127 == 0 \n        then return false\n\
    \    else if n % 131 == 0 \n        then return false\n    else if n % 137 ==\
    \ 0 \n        then return false\n    else if n % 141 == 0 \n        then return\
    \ false\n    else if n % 147 == 0 \n        then return false", "    if is_prime_impl(n)\
    \ then return true else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @", '    if n < 2 || n > 1000000000 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0
    || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n
    % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 || n % 41 == 0 || n % 43
    == 0 || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n % 61 == 0 || n % 67 ==
    0 || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 ||
    n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 107 == 0 || n % 109 == 0 ||
    n % 113 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 ||
    n % 129 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139 == 0 || n % 141 == 0 ||
    n % 143 == 0 || n % 147 == 0 || n % 149 == 0 || n % 151 == 0 || n % 157 == 0 ||
    n % 159 == 0 || n % 163 == 0 || n % 167 == 0 || n % 171 == 0 || n % 173 == 0 ||
    n % 177 == 0 || n % 179 == 0 || n % 181 == 0 || n % 183 == 0 || n % 185 == 0 ||
    n % 187 == 0 || n % 189 == 0 || n % 191 == 0 || n % 193 == 0 || n % 197 == 0 ||
    n % 199 == 0 || n % 201 == 0 || n % 203 == 0 || n % 207 == 0 || n % 209 == 0 ||
    n % 211 == 0 || n % 213 == 0 || n % 217 == 0 || n % 219 == 0 || n % 221 == 0 ||
    n % 223 == 0 || n % 227 == 0 || n % 229 == 0 || n % 231 == 0 || n % 233 == 0 ||
    n % 239 == 0 || n % 241 == 0 || n % 243 == 0 || n % 247 == 0 || n % 249 == 0 ||
    n % 251 == 0 || n % 253 == 0 || n % 257 == 0 || n % 259 == 0 || n % 261 == 0 ||
    n % 263 == 0 || n % 267 == 0 || n % 269 == 0 || n % 271 == 0 || n % 273 == 0 ||
    n % 277 == 0 || n % 279 == 0 || n % 281 == 0 || n % 283 == 0 || n % 287 == 0 ||
    n % 289 == 0 || n % 291 == 0 || n % 293 == 0 || n % 297 == 0 || n % 301 == 0 ||
    n % 303 == 0 || n % 307 == 0 || n % 309 == 0 || n % 311 == 0 || n % 313 == 0 ||
    n % 317 == 0 || n % 319 == 0 || n % 321 == 0 || n % 323 == 0 || n % 327 == 0 ||
    n % 329 == 0 || n % 331 == 0 || n % 333 == 0 || n % 337 == 0 || n % 339 == 0 ||
    n % 341 == 0 || n % 343 == 0 || n % 347 == 0 || n % 349 == 0 || n % 351 == 0 ||
    n % 353 == 0 || n % 357 == 0 || n % 359 == 0 || n % 361 == 0 || n % 363 == 0 ||
    n % 367 == 0 || n % 369 == 0 || n % 37', "    if n <= 1 \n        return false\
    \ \n    else if n % 2 == 0 \n        return false \n    else if n % 3 == 0 \n\
    \        return false \n    else if n % 5 == 0 \n        return false \n    else\
    \ if n % 7 == 0 \n        return false \n    else \n        return true \nend\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"Return true if a given number is prime,\
    \ and false otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n\
    \    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n\
    \    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n\
    \    False\n    \"\"\"", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n < 2 \n        return false\n    if n == 2 \n        return true\n  \
    \  if n % 2 == 0 \n        return false\n    \n    prime_cache = [true, false]\n\
    \    \n    prime_cache[1] = false\n    prime_cache[2] = true\n    \n    for i\
    \ in 3..n \n        if prime_cache[i] \n            prime_cache[i] = false\n \
    \           \n    for i in 2..n \n        if prime_cache[i] \n            return\
    \ false\n    \n    return true\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns all prime numbers up to a given number. Hint: Use a\
    \ for loop!", "    if is_prime_helper(n) == true\n    else \n        return false\n\
    end\n</cell>\n<code language=julia-1.1>\n@time is_prime(61)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that checks if a given number is divisible by another\
    \ given number.", "    if n < 2 || n == 1 \n        then return false\n    else\
    \ if n == 2 \n        then return true\n    else if n % 2 == 0 \n        then\
    \ return false\n    else \n        for i in 3..sqrt(n) \n            if n % i\
    \ == 0 \n                then return false\n    return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n\
    </cell>\n<text>\nExercise 1\nWrite a function that returns the number of prime\
    \ factors of a given number.", "    if n < 2 || n % 2 == 0 \n        then return\
    \ False \n    else \n        x <- 3\n        while x < n \n            do if n\
    \ % x == 0 \n                then return False \n                x <- x + 2\n\
    \        return True \nend \n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n < 2 \n        return false\n    \n    if n == 2 \n        return\
    \ true\n    \n    if n % 2 == 0 \n        return false\n    \n    i = 5\n    while\
    \ i * i <= n \n        i += 2\n    \n    if n == i \n        return true\n   \
    \ \n    return false\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by all numbers from 1\
    \ to n.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if\
    \ n < 2 \n        return false\n    if n == 2 \n        return true\n    if n\
    \ % 2 == 0 \n        return false\n    \n    prime_cache = [true]\n    prime_cache[1]\
    \ = false\n    \n    for i = 2 to n \n        if prime_cache[i] \n           \
    \ prime_cache[i] = false\n        else \n            prime_cache[i] = true\n \
    \   \n    return prime_cache[n]\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns all prime numbers less than a given number. \nFor example,\
    \ given n = 10, the function should return [2, 3, 4, 5, 6, 7, 8, 9, 10].", " \
    \   if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n\
    \        return false\n    if n == 2 \n        return true\n    if n % 2 == 0\
    \ \n        return false\n    \n    i = 5\n    while i * i <= n \n        i +=\
    \ 2\n    \n    if n == i \n        return true\n    \n    return false\nend\n\
    </cell>\n<code language=julia-1.5>\nis_prime_cache = Dict()\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that checks if a given number is divisible\
    \ by all numbers from 1 to 20.", "    if is_prime_impl(n) == true\n    else return\
    \ false\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a given number is divisible by another given number.\
    \ \nFor example, \nif n is divisible by 3, return true. \nif n is divisible by\
    \ 5, return true. \nif n is divisible by 7, return true. \nif n is divisible by\
    \ 11, return true. \nif n is divisible by 13, return true. \nif n is divisible\
    \ by 17, return true. \nif n is divisible by 19, return true. \nif n is divisible\
    \ by 23, return true. \nif n is divisible by 29, return true. \nif n is divisible\
    \ by 31, return true. \nif n is divisible by 37, return true. \nif n is divisible\
    \ by 41, return true. \nif n is divisible by 43, return true. \nif n is divisible\
    \ by 47, return true. \nif n is divisible by 53, return true. \nif n is divisible\
    \ by 59, return true. \nif n is divisible by 61, return true. \nif n is divisible\
    \ by 67, return true. \nif n is divisible by 71, return true. \nif n is divisible\
    \ by 73, return true. \nif n is divisible by 79, return true. \nif n is divisible\
    \ by 83, return true. \nif n is divisible by 89, return true. \nif n is divisible\
    \ by 97, return true. \nif n is divisible by 101, return true. \nif n is divisible\
    \ by 103, return true. \nif n is divisible by 107, return true. \nif n is divisible\
    \ by 113, return true. \nif n is divisible by 119, return true. ", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n <= 1 \n        return false\n \
    \   if n == 2 \n        return true\n    if n % 2 == 0 \n        return false\n\
    \    \n    prime_cache = [true, false]\n    \n    prime_cache[1] = true\n    prime_cache[2]\
    \ = true\n    \n    for i = 4; i * i <= n; i = i + 2 \n        if n % i == 0 \n\
    \            prime_cache[i] = false\n    \n    is_prime_cache[n] = prime_cache[n]\n\
    \    return prime_cache[n]\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the number of prime factors of a given number. For\
    \ example, for $n = 2^{10}$ it should return $10$.", "    if n == 1 \n       \
    \ true\n    else\n        if is_factor(n) == false \n            false\n     \
    \   else\n            if is_prime(n - 1) \n                true\n            else\n\
    \                is_prime(n)\n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if n < 2 || n %\
    \ 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else if n % 3 == 0 \n        then return false\n    else if n % 5\
    \ == 0 \n        then return false\n    else \n        primes <- primes(n)\n \
    \       for p in primes\n            if p * p > n\n                then return\
    \ false\n            else return true\nend\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(", "    if is_prime_cache[n] \n    \
    \    return is_prime_cache[n]\n    if n <= 1 \n        return false\n    if n\
    \ == 2 \n        return true\n    if n % 2 == 0 \n        return false\n    \n\
    \    prime_cache = [true, false]\n    \n    for i in 3..n \n        if is_prime_cache[i]\
    \ \n            prime_cache[i] = false\n        else \n            prime_cache[i]\
    \ = true\n    \n    is_prime_cache[n] = prime_cache[n]\n    return is_prime_cache[n]\n\
    end\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if a given\
    \ number is divisible by any number between 1 and 100. Hint: Use a for loop!",
  "    if is_prime_impl(n) then return true else return false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(101)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(11)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_warntype is_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(1)\n</cell>\n<text>\nExercise\nWrite a function that returns\
    \ the prime factorization of an integer.", "    if n < 2 || n % 2 == 0 \n    \
    \    then return False \n    else if n % 3 == 0 \n        then return True \n\
    \    else if n % 5 == 0 \n        then return True \n    else \n        return\
    \ is_prime(3*n+5) or is_prime(3*n+7) or is_prime(3*n+11)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@time is_prime(61)\n</cell>\n<text>\nExercise: Write a\
    \ function that checks if a given number is divisible by all numbers from 1 to\
    \ 100. Hint: Use a for loop.", "    if is_prime_impl(n) == true\n    else \n \
    \       error(\"is_prime: n must be prime\")\nend\n</cell>\n<code language=julia-1.5>",
  "    if is_prime_impl(n) == true\n    else \n        error(\"is_prime: n is not\
    \ prime\")\n    end\nend", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 1 \n        return false\n    if n % 2 == 0 \n        return false\n\
    \    \n    prime_cache = [true, false, true]\n    \n    for i in 2..n \n     \
    \   if prime_cache[i] \n            prime_cache[i] = false\n            if n %\
    \ i == 0 \n                return false\n            \n    return true\nend\n\
    </cell>\n<code language=julia-1.3>\nis_prime_cache = [true, false, true]\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise\nWrite\
    \ a function that returns the first n prime numbers. \nThe function should take\
    \ an argument n that specifies the number of prime numbers to return.", "    if\
    \ is_prime_impl(n) then return true else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(6)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell", "    if is_prime_impl(n) == true\n    else\
    \ \n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(6)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(101)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that returns the first n prime numbers.\
    \ \nHint: Use a while loop and a boolean variable.", "    if is_prime_cache[n]\n\
    \        return is_prime_cache[n]\n    \n    if n <= 1\n        return false\n\
    \    \n    if n == 2\n        return true\n    \n    if n % 2 == 0\n        return\
    \ false\n    \n    i = 5\n    \n    while i * i <= n\n        i += 1\n    \n \
    \   if i == n\n        return true\n    \n    primes = primes_cache\n    \n  \
    \  while primes[i]\n        i += 1\n    \n    primes[i] = true\n    \n    return\
    \ false\nend", "    if n < 2 || n % 2 == 0 || n % 3 == 0 then return false\n \
    \   else if n == 2 || n == 3 then return true\n    else if n % 4 == 0 then return\
    \ false\n    else if n % 6 == 0 then return false\n    else if n % 8 == 0 then\
    \ return false\n    else if n % 10 == 0 then return false\n    else if n % 12\
    \ == 0 then return false\n    else if n % 14 == 0 then return false\n    else\
    \ if n % 16 == 0 then return false\n    else if n % 18 == 0 then return false\n\
    \    else if n % 20 == 0 then return false\n    else if n % 22 == 0 then return\
    \ false\n    else if n % 24 == 0 then return false\n    else if n % 26 == 0 then\
    \ return false\n    else if n % 28 == 0 then return false\n    else if n % 30\
    \ == 0 then return false\n    else if n % 32 == 0 then return false\n    else\
    \ if n % 34 == 0 then return false\n    else if n % 36 == 0 then return false\n\
    \    else if n % 38 == 0 then return false\n    else if n % 40 == 0 then return\
    \ false\n    else if n % 42 == 0 then return false\n    else if n % 44 == 0 then\
    \ return false\n    else if n % 46 == 0 then return false\n    else if n % 48\
    \ == 0 then return false\n    else if n % 50 == 0 then return false\n    else\
    \ if n % 52 == 0 then return false\n    else if n % 54 == 0 then return false\n\
    \    else if n % 56 == 0 then return false\n    else if n % 58 == 0 then return\
    \ false\n    else if n % 60 == 0 then return false\n    else if n % 62 == 0 then\
    \ return false\n    else if n % 64 == 0 then return false\n    else if n % 66\
    \ == 0 then return false\n    else if n % 68 == 0 then return false\n    else\
    \ if n % 70 == 0 then return false\n    else if n % 72 == 0 then return false\n\
    \    else if n % 74 == 0 then return false\n    else if n % 76 == 0 then return\
    \ false\n    else if n % 78 == 0 then return false\n    else if n % 80 == 0 then\
    \ return false\n    else if n % 82 == 0 then return false\n    else if n % 84\
    \ == 0 then return false\n    else if n % 86 == 0 then return false\n    else\
    \ if n % 88 == 0 then return false\n    else if n % 90 == 0 then return false\n\
    \    else ", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n  \
    \  if n <= 1 \n        return false\n    if n == 2 \n        return true\n   \
    \ if n % 2 == 0 \n        return false\n    \n    prime_cache = [true, false]\n\
    \    \n    for i in 3..n \n        if prime_cache[i] \n            return false\n\
    \        prime_cache[i] = n % i == 0\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the number of prime factors of a given\
    \ number.", "    if n == 1\n        return true\n    \n    if n % 2 == 0\n   \
    \     return false\n    \n    i = 5\n    while i * i <= n\n        i += 2\n  \
    \  \n    return n % i == 0\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(101)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(11)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime factors of a given number. For example, if the input is\
    \ 25, the output should be {2, 5}.", "    if is_prime_cache[n]\n        return\
    \ is_prime_cache[n]\n    if n <= 1\n        return false\n    if n == 2\n    \
    \    return true\n    if n % 2 == 0\n        return false\n    \n    prime_cache\
    \ = [true, false]\n    \n    for i in 2..n-1\n        if is_prime_cache[i]\n \
    \           prime_cache[i] = false\n        else\n            prime_cache[i] =\
    \ true\n    end\n    \n    is_prime_cache[n] = prime_cache[n]\n    return prime_cache[n]\n\
    end\n</cell>\n<code language=julia-1.4>\nis_prime(6)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.4>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.4>\nis_prime(13441)\n</cell>\n<code language=julia-1.4>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.4>\nis_prime(4)\n</cell>\n<code language=julia-1.4>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that calculates the factorial\
    \ of a given number. Hint: use the factorial function.", "    if n < 2 || n %\
    \ 2 == 0\n        false\n    else\n        if is_prime(n / 2)\n            true\n\
    \        else\n            false\n    end\nend\n</cell>\n<text>\nExercise 9: Write\
    \ a function that checks if a given number is even.\nHint: Use a while loop and\
    \ a recursive function.", "    if is_prime_impl(n) == true\n    else \n      \
    \  false\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n", "    if is_prime_impl(n)\
    \ then return true else return false\nend\n</cell>\n<code language=julia-1.0>\n\
    @code_native is_prime(6)\n</cell>\n<code language=julia-1.0>\n@code_native is_prime(101)\n\
    </cell>\n<code language=julia-1.0>\n@code_native is_prime(11)\n</cell>\n<code\
    \ language=julia-1.0>\n@code_native is_prime(13441)\n</cell>\n<code language=julia-1.0>\n\
    @code_native is_prime(61)\n</cell>\n<code language=julia-1.0>\n@code_native is_prime(4)\n\
    </cell>\n<code language=julia-1.0>\n@code_native is_prime(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of prime factors of a given\
    \ number.", "    if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n]\
    \ == false \n        then \n            if is_prime_cache[n+1] == true \n    \
    \        then \n                is_prime_cache[n+1] = false \n            else\
    \ \n                is_prime_cache[n+1] = is_prime_cache[n] + is_prime(n+1) \n\
    \        else \n            is_prime_cache[n] = is_prime_cache[n] + is_prime(n)\
    \ \n    return is_prime_cache[n] \n</code>\n<|/ a dscore=0 |>\n<| a tags=primes,haskell\
    \ |>\n<code>\nimport Data.List", "    if is_prime_cache[n] == true \n    else\
    \ \n        if is_prime_cache[n] == false \n        then \n            prime_cache[n]\
    \ = true\n            \n            \n            \n            \n           \
    \ \n            \n            \n            \n            \n            \n   \
    \         \n            \n            \n            \n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n",
  "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n \
    \       then return true\n    else if n % 3 == 0 \n        then return false\n\
    \    else if n % 5 == 0 \n        then return false\n    else if n % 7 == 0 \n\
    \        then return false\n    else \n        primes <- primes(n)\n        for\
    \ p in primes\n            if n % p == 0 \n                then return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\n\
    is_prime(101)\nis_prime(11)\nis_prime(13441)\nis_prime(61)\nis_prime(4)\nis_prime(1)\n\
    \"\"\"\n</cell>\n<code language=julia-1.3>\n\"\"\"\nprimes(n::Int64)", "    if\
    \ is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <= 1 \n     \
    \   return false\n    if n == 2 \n        return true\n    if n % 2 == 0 \n  \
    \      return false\n    \n    prime_cache = [true, false]\n    \n    for d in\
    \ range(3, n+1, 2) do \n        if n % d == 0 \n            prime_cache[0] = false\n\
    \            prime_cache[1] = false\n            break\n    \n    is_prime_cache[n]\
    \ = prime_cache[1]\n    return prime_cache[1]\nend", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if n <= 1 \n        return false\n \
    \   if n == 2 \n        return true\n    if n % 2 == 0 \n        return false\n\
    \    \n    prime_cache = [true]\n    \n    for d in range(3, floor(sqrt(n))+1,\
    \ 2) \n        if n % d == 0 \n            prime_cache = false\n            break\n\
    \    \n    is_prime_cache[n] = prime_cache\n    return prime_cache\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that checks if a given number is even.",
  "    if is_prime_impl(n) == true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a given number is divisible by any number between 1 and a given number. Hint:\
    \ Use a for loop.", "    if is_prime_impl(n) then return true else return false\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(6)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a given number is divisible by any number between 1 and 100 (inclusive).\nHint:\
    \ Use a for loop.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    if n <= 1 \n        return is_prime_cache[n]\n    if n % 2 == 0 \n      \
    \  return is_prime_cache[n]\n    if n % 3 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 5 == 0 \n        return is_prime_cache[n]\n    if n % 7 == 0 \n  \
    \      return is_prime_cache[n]\n    if n % 11 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 13 == 0 \n        return is_prime_cache[n]\n    if n % 17 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 19 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 23 == 0 \n        return is_prime_cache[n]\n    if n % 29 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 31 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 37 == 0 \n        return is_prime_cache[n]\n    if n % 41 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 43 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 47 == 0 \n        return is_prime_cache[n]\n    if n % 53 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 59 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 61 == 0 \n        return is_prime_cache[n]\n    if n % 67 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 71 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 73 == 0 \n        return is_prime_cache[n]\n    if n % 79 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 83 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 89 == 0 \n        return is_prime_cache[n]\n    if n % 97 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 101 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 103 == 0 \n        return is_prime_cache[n]\n    if n % 107 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 109 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 113 == 0 \n        return is_prime_cache[n]\n    if n % 127 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 131 == 0 \n        return is_prime_cache[n]\n\
    \    if n % 137 == 0 \n        return is_prime_cache[n]\n    if n % 139 == 0 \n\
    \        return is_prime_cache[n]\n    if n % 147 == 0 \n        return is_prime_",
  "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n       \
    \ then return false\n    else if n == 2 || n == 3 || n == 5 || n == 7 \n     \
    \   then return true\n    else if n % 6 == 0 \n        then return false\n   \
    \ else if n % 6 == 1 \n        then return true\n    else if n % 6 == 2 \n   \
    \     then return false\n    else if n % 6 == 3 \n        then return true\n \
    \   else if n % 6 == 5 \n        then return false\n    else if n % 6 == 7 \n\
    \        then return true\n    else if n % 6 == 11\n        then return false\n\
    \    else if n % 6 == 13\n        then return true\n    else if n % 6 == 17\n\
    \        then return false\n    else if n % 6 == 23 \n        then return true\n\
    \    else if n % 6 == 29\n        then return false\n    else if n % 6 == 31 \n\
    \        then return true\n    else if n % 6 == 37\n        then return false\n\
    \    else if n % 6 == 43 \n        then return true\n    else if n % 6 == 47\n\
    \        then return false\n    else if n % 6 == 53 \n        then return true\n\
    \    else if n % 6 == 59\n        then return false\n    else if n % 6 == 71 \n\
    \        then return true\n    else if n % 6 == 79\n        then return false\n\
    \    else if n % 6 == 111\n        then return false\n    else if n % 6 == 131\n\
    \        then return true\n    else if n % 6 == 171\n        then return false\n\
    \    else if n % 6 == 191\n        then return true\n    else if n % 6 == 269\n\
    \        then return false\n    else if n % 6 == 297\n        then return true\n\
    \    else if n % 6 == 399\n        then return false\n    else if n % 6 == 567\n\
    \        then return true\n    else if n % 6 == 597\n        then return false\n\
    \    else if n % 6 == 767\n        then return true\n    else if n % 6 == 797\n\
    \        then return false\n    else if n % 6 == 1197\n        then return false\n\
    \    else if n % 6 == 1397\n        then return true\n    else if n % 6 == 1797\n\
    \        then return false\n    else if n % 6 == 1987\n        then return true\n\
    \    else if n % 6 == 2469\n        then return false\n    else if n % 6 == 2499\n\
    \        ", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n        then return false\n    else if n == 2 || n == 3 || n == 5\n    \
    \    then return true\n    else if n % 6 == 0 \n        then return true\n   \
    \ else if n % 6 == 1 \n        then return false\n    else if n % 6 == 2 \n  \
    \      then return true\n    else if n % 6 == 3 \n        then return true\n \
    \   else if n % 6 == 5 \n        then return true\n    else if n % 6 == 7 \n \
    \       then return true\n    else if n % 6 == 11\n        then return true\n\
    \    else if n % 6 == 13\n        then return true\n    else if n % 6 == 17\n\
    \        then return true\n    else if n % 6 == 23 \n        then return true\n\
    \    else if n % 6 == 29\n        then return true\n    else if n % 6 == 31 \n\
    \        then return true\n    else if n % 6 == 37\n        then return true\n\
    \    else if n % 6 == 43 \n        then return true\n    else if n % 6 == 47\n\
    \        then return true\n    else if n % 6 == 55\n        then return true\n\
    \    else if n % 6 == 59\n        then return true\n    else if n % 6 == 73 \n\
    \        then return true\n    else if n % 6 == 79\n        then return true\n\
    \    else if n % 6 == 111\n        then return true\n    else if n % 6 == 127\n\
    \        then return true\n    else if n % 6 == 131\n        then return true\n\
    \    else if n % 6 == 137\n        then return true\n    else if n % 6 == 153\n\
    \        then return true\n    else if n % 6 == 159\n        then return true\n\
    \    else if n % 6 == 173\n        then return true\n    else if n % 6 == 179\n\
    \        then return true\n    else if n % 6 == 181\n        then return true\n\
    \    else if n % 6 == 191\n        then return true\n    else if n % 6 == 193\n\
    \        then return true\n    else if n % 6 == 197\n        then return true\n\
    \    else if n % 6 == 199\n        then return true\n    else if n % 6 == 211\n\
    \        then return true\n    else if n % 6 == 223\n        then return true\n\
    \    else if n % 6 == 227\n        then return true\n    else if n % 6 == 229\n\
    \        then return true\n    else ", "    if is_prime_cache[n] == true \n  \
    \  else \n        is_prime_cache[n] = is_prime_helper(n) \n    return is_prime_cache[n]\
    \ \nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of prime factors of a given number.", "    if is_prime_impl(n) == true\n   \
    \ else \n        return false\nend\n</cell>\n<code language=julia-1.3>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.3>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Write a function that returns the number of prime factors of\
    \ a given number.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 ||\
    \ n % 7 == 0 \n        then return false\n    else \n        for i in 2..n-1 do\
    \ \n            if n % i == 0 || n % (i + 2) == 0 \n                then return\
    \ false\n            else return true\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if is_prime_cache[n]\
    \ \n        return is_prime_cache[n]\n    if is_prime_cache[n] = is_prime(n-1)\n\
    \    return is_prime_cache[n]\nend\n</cell>\n<code language=julia-1.3>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(61)\n</cell>\n<code language=julia-1.3>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the first n prime numbers. Use a while loop to do this.",
  "    if n <= 1 \n        true\n    else\n        n <= sqrt(n) \n            && n\
    \ != 1 \n            && n != n \n            && n != n \n            && n != n\
    \ \n            && n != n \n            && n != n \n            && n != n \n \
    \           && n != n \n            && n != n \n            && n != n \n     \
    \       && n != n \n            && n != n \n            && n != n \n         \
    \   && n != n \n            && n != n \n            && n != n \n            &&\
    \ n != n \n            && n != n \n            && n != n \n            && n !=\
    \ n \n            && n != n \n            && n != n \n            && n != n \n\
    \            && n != n \n            && n != n \n            && n != n \n    \
    \        && n != n \n            && n != n \n            && n != n \n        \
    \    && n != n \n            && n != n \n            && n != n \n            &&\
    \ n != n \n            && n != n \n            && n != n \n            && n !=\
    \ n \n            && n != n \n            && n != n \n            && n != n \n\
    \            && n != n \n            && n != n \n            && n != n \n    \
    \        && n != n \n            && n != n \n            && n != n \n        \
    \    && n != n \n            && n != n \n            && n != n \n            &&\
    \ n != n \n            && n != n \n            && n != n \n            && n !=\
    \ n \n            && n != n \n            && n != n \n            && n != n \n\
    \            && n != n \n            && n != n \n            && n != n \n    \
    \        && n != n \n            && n != n \n            && n != n \n        \
    \    && n != n \n            && n != n \n            && n != n \n            &&\
    \ n != n \n            && n != n \n            && n != n \n            && n !=\
    \ n \n            && n != n \n            && n != n \n            && n != n \n\
    \            && n != n \n            && n != n \n            && n != n \n    \
    \        && n != n \n            && n != n \n            && n != n \n        \
    \    && n != n \n            && n != n \n            && n != n \n            &&\
    \ n != n \n            && n != n \n            && n ", "    if n < 2 || n % 2\
    \ == 0 \n        then return false\n    else if n == 2 \n        then return true\n\
    \    else \n        for m in 3..sqrt(n) \n            do if n % m == 0 \n    \
    \            then return false\n    end \nend\n</code>\n<|/ a tags=julia,primes\
    \ |>\n<| a dscore=2 |>\nThe answer by is correct, but I wanted to add some explanation\
    \ as to why it works.\nThe function is_prime is defined as follows:\n<code>",
  "    if is_prime_cache[n]\n        return is_prime_cache[n]\n    if n <= 1\n   \
    \     return false\n    if n == 2\n        return true\n    if n % 2 == 0\n  \
    \      return false\n    \n    primes = primes_cache\n    primes_cache = []\n\
    \    \n    for p in primes\n        if n % p == 0\n            return false\n\
    \    \n    primes_cache.append(n)\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that returns the first n prime numbers. Use a while\
    \ loop to do this.", "    if n < 2 || n % 2 == 0\n        true\n    else\n   \
    \     false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"Return true\
    \ if a given number is even, and false otherwise.\n    >>> is_even(6)\n    True\n\
    \    >>> is_even(101)\n    False\n    >>> is_even(11)\n    True\n    >>> is_even(13441)\n\
    \    True\n    >>> is_even(61)\n    True\n    >>> is_even(4)\n    False\n    >>>\
    \ is_even(1)\n    False\n    \"\"\"", "    if is_prime_impl(n) then return true\
    \ else return false\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n prime numbers. \nHint: use the function\
    \ is_prime(n) to determine whether a number is prime.", "    if n < 2 || n % 2\
    \ == 0 \n        then return false\n    else if n == 2 \n        then return true\n\
    \    else if n % 3 == 0 \n        then return false\n    else \n        return\
    \ is_prime(3*n-1) || is_prime(3*n+1)\nend\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(61)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.1>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.1>\n\"\"\"\nis_", "    if is_prime_cache[n] ==\
    \ true \n    else \n        is_prime_cache[n] = is_prime_impl(n)\n    end\nend\n\
    </cell>\n<code language=julia-1.3>\nis_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.3>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(13441)\n</cell>\n<code language=julia-1.3>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of prime factors of a given number.", "    if n < 2 || n > 1000000000 || n %\
    \ 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 \n    then return false\n \
    \   else if n == 2 || n == 3 || n == 5 || n == 7 || n == 11 \n    then return\
    \ true\n    else if n == 6 || n == 9 \n    then return true\n    else if n ==\
    \ 10 || n == 12 \n    then return true\n    else if n == 14 || n == 16 || n ==\
    \ 18 || n == 20 || n == 24 || n == 28 || n == 32 || n == 36 || n == 40 \n    then\
    \ return true\n    else if n == 44 || n == 48 || n == 52 || n == 56 || n == 60\
    \ || n == 64 || n == 68 || n == 72 || n == 76 || n == 80 || n == 84 || n == 88\
    \ || n == 92 || n == 96 || n == 98 || n == 100\n    then return true\n    else\
    \ if n == 104 || n == 108 || n == 111 || n == 115 || n == 119 \n    then return\
    \ true\n    else if n == 120 || n == 124 || n == 128 || n == 132 || n == 136 ||\
    \ n == 140 \n    then return true\n    else if n == 144 || n == 148 || n == 152\
    \ || n == 156 || n == 160 || n == 164 || n == 168 || n == 172 || n == 176 || n\
    \ == 180 || n == 184 || n == 188 || n == 192 || n == 196 || n == 200\n    then\
    \ return true\n    else if n == 204 || n == 208 || n == 212 || n == 216 || n ==\
    \ 218 || n == 222 || n == 226 || n == 232 \n    then return true\n    else if\
    \ n == 236 || n == 240 || n == 244 || n == 248 || n == 252 || n == 256 || n ==\
    \ 260 || n == 264 || n == 268 || n == 272 || n == 276 || n == 280 || n == 284\
    \ || n == 288 || n == 292 || n == 296 || n == 300\n    then return true\n    else\
    \ if n == 304 || n == 308 || n == 312 || n == 316 || n == 320 || n == 324 || n\
    \ == 328 || n == 332 || n == 336 || n == 340 || n == 344 || n == 348 || n == 352\
    \ || n == 356 || n == 360\n    then return true\n    else if n == 364 || n ==\
    \ 368 || n = 372 || n = 376 || n = 380 || n = 384 || n = 388 || n == 392 || n\
    \ == 396 || n == 400 || n == 404 || ", "    if is_prime_impl(n) \n    else \n\
    \        prime_impl(n) \nend\n</cell>\n<code language=julia-1.3>\n@code_native\
    \ is_prime(6)\n</cell>\n<code language=julia-1.3>\n@code_native is_prime(101)\n\
    </cell>\n<code language=julia-1.3>\n@code_native is_prime(11)\n</cell>\n<code\
    \ language=julia-1.3>\n@code_native is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @code_native is_prime(61)\n</cell>\n<code language=julia-1.3>\n@code_native is_prime(4)\n\
    </cell>\n<code language=julia-1.3>\n@code_native is_prime(1)\n</cell>\n<text>\n\
    Exercise: Write a function that checks if a given number is divisible by any number\
    \ between 2 and 100. Hint: Use a for loop.", "    if n < 2 || n % 2 == 0 || n\
    \ % 3 == 0 then return false\n    else if n == 2 || n == 3 then return true\n\
    \    else if n % 4 == 0 then return false\n    else if n % 6 == 0 then return\
    \ false\n    else if n % 8 == 0 then return false\n    else if n % 10 == 0 then\
    \ return false\n    else if n % 12 == 0 then return false\n    else if n % 14\
    \ == 0 then return false\n    else if n % 16 == 0 then return false\n    else\
    \ if n % 18 == 0 then return false\n    else if n % 20 == 0 then return false\n\
    \    else if n % 22 == 0 then return false\n    else if n % 24 == 0 then return\
    \ false\n    else if n % 26 == 0 then return false\n    else if n % 28 == 0 then\
    \ return false\n    else if n % 30 == 0 then return false\n    else if n % 32\
    \ == 0 then return false\n    else if n % 34 == 0 then return false\n    else\
    \ if n % 36 == 0 then return false\n    else if n % 38 == 0 then return false\n\
    \    else if n % 40 == 0 then return false\n    else if n % 42 == 0 then return\
    \ false\n    else if n % 44 == 0 then return false\n    else if n % 46 == 0 then\
    \ return false\n    else if n % 48 == 0 then return false\n    else if n % 50\
    \ == 0 then return false\n    else if n % 52 == 0 then return false\n    else\
    \ if n % 54 == 0 then return false\n    else if n % 56 == 0 then return false\n\
    \    else if n % 58 == 0 then return false\n    else if n % 60 == 0 then return\
    \ false\n    else if n % 62 == 0 then return false\n    else if n % 64 == 0 then\
    \ return false\n    else if n % 66 == 0 then return false\n    else if n % 68\
    \ == 0 then return false\n    else if n % 70 == 0 then return false\n    else\
    \ if n % 72 == 0 then return false\n    else if n % 74 == 0 then return false\n\
    \    else if n % 76 == 0 then return false\n    else if n % 78 == 0 then return\
    \ false\n    else if n % 80 == 0 then return false\n    else if n % 82 == 0 then\
    \ return false\n    else if n % 84 == 0 then return false\n    else if n % 86\
    \ == 0 then return false\n    else if n % 88 == 0 then return false\n    else\
    \ if n % 90 == 0 then return false\n    else ", "    if is_prime_cache[n] == true\
    \ \n    else \n        if is_prime_cache[n] == false \n        else \n       \
    \     if is_prime_cache[n] == true \n            else \n                is_prime_cache[n]\
    \ = is_prime(n-1) == false \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime_cache = Array{Bool}(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise 1\nWrite\
    \ a function that checks if a number is even.", "    if n < 2 || n == 1 \n   \
    \     then return false \n    else if n == 2 \n        then return true \n   \
    \ else if n % 2 == 0 \n        then return false \n    else \n        for m in\
    \ range(3, floor(sqrt(n))+1, 2) \n            if n % m == 0 \n               \
    \ then return false \n        else return true \nend\n</code>\n<|/ a tags=julia,primes\
    \ |>\n<| a dscore=3 |>\nI wrote a Julia package for prime number generation. \n\
    https://github.com/kamens/Primes.jl\n<code>\nusing Primes", "    if is_prime_impl(n)\
    \ then return true else return false end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the number of prime factors of a given number. For example, if the number is\
    \ 61, it should return 3.", "    if n < 2\n        return false\n    if n == 2\n\
    \        return true\n    if n % 2 == 0\n        return false\n    \n    for d\
    \ in range(3, ceil(sqrt(n))+1, 2)\n        if n % d == 0\n            return false\n\
    \    return true\nend\n</cell>\n<code language=julia-1.3>\n@time is_prime(101)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(11)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that calculates\
    \ the number of prime factors of a given number.", "    if n < 2 || n % 2 == 0\
    \ || n % 3 == 0 \n        then return false\n    else if n == 2 || n == 3 || n\
    \ == 5 || n == 7 || n == 11 \n        then return true\n    else \n        for\
    \ i in 2..n \n            if n % i == 0 || n % (i + 2) == 0 \n               \
    \ then return false\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if n < 2 || n %\
    \ 2 == 0 \n        then return false\n    else if n == 2 \n        then return\
    \ true\n    else if n % 3 == 0 \n        then return false\n    else \n      \
    \  for i in 2..(sqrt(n)-1) \n            if n % i == 0 \n                then\
    \ return false\n    return true\nend\n</cell>\n<code language=julia-1.4>\n\"\"\
    \"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if is_prime_impl(n)\
    \ then return true else return false\nend", "    if is_prime_impl(n) == true\n\
    \    else return false\nend", "    if n < 2 || n % 2 == 0 \n        then return\
    \ false\n    else \n        for i in 2..n \n            if n % i == 0 \n     \
    \           then return false\n            else \n                return true\n\
    end\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of prime factors of a given\
    \ number.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 ==\
    \ 0 \n    then return false\n    else if n == 1 || n == 3 || n == 5 || n == 7\
    \ \n    then return true\n    else if n % 6 == 1 then return false\n    else if\
    \ n % 6 == 3 then return true\n    else if n % 6 == 5 then return false\n    else\
    \ if n % 6 == 7 then return true\n    else if n % 6 == 9 then return false\n \
    \   else if n % 6 == 11 || n % 6 == 13 then return true\n    else if n % 6 ==\
    \ 15 then return false\n    else if n % 6 == 17 then return true\n    else if\
    \ n % 6 == 19 then return false\n    else if n % 6 == 23 then return true\n  \
    \  else if n % 6 == 29 then return false\n    else if n % 6 == 31 then return\
    \ true\n    else if n % 6 == 35 || n % 6 == 39 then return true\n    else if n\
    \ % 6 == 47 then return false\n    else if n % 6 == 59 then return true\n    else\
    \ if n % 6 == 73 then return false\n    else if n % 6 == 79 then return true\n\
    \    else if n % 6 == 93 then return false\n    else if n % 6 == 111 then return\
    \ true\n    else if n % 6 == 131 then return false\n    else if n % 6 == 151 then\
    \ return true\n    else if n % 6 == 173 then return false\n    else if n % 6 ==\
    \ 193 then return true\n    else if n % 6 == 235 then return true\n    else if\
    \ n % 6 == 283 then return false\n    else if n % 6 == 313 then return true\n\
    \    else if n % 6 == 353 then return true\n    else if n % 6 == 379 then return\
    \ false\n    else if n % 6 == 419 then return true\n    else if n % 6 == 451 then\
    \ return true\n    else if n % 6 == 493 then return false\n    else if n % 6 ==\
    \ 539 then return true\n    else if n % 6 == 591 then return false\n    else if\
    \ n % 6 == 659 then return true\n    else if n % 6 == 709 then return false\n\
    \    else if n % 6 == 741 then return true\n    else if n % 6 == 793 then return\
    \ false\n    else if n % 6 == 829 then return true\n    else if n % 6 == 891 then\
    \ return false\n    else if n % 6 == 959 then return true\n    else if n % 6",
  "    if n < 2 || n % 2 == 0 \n        then return false\n    else if n == 2 \n \
    \       then return true\n    else if n % 3 == 0 \n        then return false\n\
    \    else if n % 5 == 0 \n        then return false\n    else if n % 7 == 0 \n\
    \        then return false\n    else if n % 11 == 0 \n        then return false\n\
    \    else if n % 13 == 0 \n        then return false\n    else if n % 17 == 0\
    \ \n        then return false\n    else if n % 19 == 0 \n        then return false\n\
    \    else if n % 23 == 0 \n        then return false\n    else if n % 29 == 0\
    \ \n        then return false\n    else if n % 31 == 0 \n        then return false\n\
    \    else if n % 37 == 0 \n        then return false\n    else if n % 41 == 0\
    \ \n        then return false\n    else if n % 43 == 0 \n        then return false\n\
    \    else if n % 47 == 0 \n        then return false\n    else if n % 53 == 0\
    \ \n        then return false\n    else if n % 59 == 0 \n        then return false\n\
    \    else if n % 61 == 0 \n        then return false\n    else if n % 67 == 0\
    \ \n        then return false\n    else if n % 71 == 0 \n        then return false\n\
    \    else if n % 73 == 0 \n        then return false\n    else if n % 79 == 0\
    \ \n        then return false\n    else if n % 83 == 0 \n        then return false\n\
    \    else if n % 89 == 0 \n        then return false\n    else if n % 97 == 0\
    \ \n        then return false\n    else if n % 101 == 0 \n        then return\
    \ false\n    else if n % 103 == 0 \n        then return false\n    else if n %\
    \ 107 == 0 \n        then return false\n    else if n % 113 == 0 \n        then\
    \ return false\n    else if n % 117 == 0 \n        then return false\n    else\
    \ if n % 121 == 0 \n        then return false\n    else if n % 123 == 0 \n   \
    \     then return false\n    else if n % 127 == 0 \n        then return false\n\
    \    else if n % 131 == 0 \n        then return false\n    else if n % 137 ==\
    \ 0 \n        then return false\n    else if n % 143 == 0 \n        then return\
    \ false\n    else if n % 147 == 0 \n        then return false\n    else if n %\
    \ 151 == 0 \n        then return false\n    else if n % 157 == 0 \n", "    if\
    \ n < 2 || n % 2 == 0\n        true\n    else\n        false\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=juli", "    if is_prime_helper(n) == true\n    else return false\n\
    end", "    if is_prime_impl(n) == true\n    else \n        return false\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 ==\
    \ 0 || n % 7 == 0 \n        || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 || n\
    \ % 19 == 0 || n % 23 == 0 \n        || n % 29 == 0 || n % 31 == 0 || n % 37 ==\
    \ 0 || n % 41 == 0 || n % 43 == 0 \n        || n % 47 == 0 || n % 53 == 0 || n\
    \ % 59 == 0 || n % 61 == 0 || n % 67 == 0 \n        || n % 71 == 0 || n % 73 ==\
    \ 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 \n        || n % 97 == 0 || n\
    \ % 101 == 0 || n % 103 == 0 || n % 107 == 0 || n % 109 == 0 \n        || n %\
    \ 113 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 \n\
    \        || n % 129 == 0 || n % 131 == 0 || n % 133 == 0 || n % 137 == 0 || n\
    \ % 139 == 0 \n        || n % 141 == 0 || n % 143 == 0 || n % 147 == 0 || n %\
    \ 149 == 0 || n % 151 == 0 \n        || n % 153 == 0 || n % 157 == 0 || n % 159\
    \ == 0 || n % 163 == 0 || n % 167 == 0 \n        || n % 171 == 0 || n % 173 ==\
    \ 0 || n % 177 == 0 || n % 179 == 0 || n % 181 == 0 \n        || n % 183 == 0\
    \ || n % 187 == 0 || n % 189 == 0 || n % 191 == 0 || n % 193 == 0 \n        ||\
    \ n % 197 == 0 || n % 199 == 0 || n % 201 == 0 || n % 203 == 0 || n % 205 == 0\
    \ \n        || n % 207 == 0 || n % 209 == 0 || n % 211 == 0 || n % 213 == 0 ||\
    \ n % 215 == 0 \n        || n % 217 == 0 || n % 219 == 0 || n % 221 == 0 || n\
    \ % 223 == 0 || n % 225 == 0 \n        || n % 227 == 0 || n % 229 == 0 || n %\
    \ 231 == 0 || n % 233 == 0 || n % 235 == 0 \n        || n % 239 == 0 || n % 241\
    \ == 0 || n % 243 == 0 || n % 245 == 0 || n % 247 == 0 \n        || n % 249 ==\
    \ 0 || n % 251 == 0 || n % 253 == 0 || n % 255 == 0 \n    then return false\n\
    \    else return true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    Return true if a given number is even, and false otherwise.\n    >>> is_even(6)\n\
    \    False\n    >>> is_even(101)\n    True\n    >>> is_even(11)\n    True\n  \
    \  >>> is_even(13441)\n    True\n    >>> is_even(61)\n    True\n    >>> is_even(4)\n\
    \    False\n    >>> is_even(1)\n    False\n    \"\"\"", "    if is_prime_impl(n)\
    \ then return true else return false\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that checks if a given number is even.\nWrite a function that checks\
    \ if a given number is odd.\nWrite a function that checks if a given number is\
    \ prime, and false otherwise.\nWrite a function that checks if a given number\
    \ is even.\nWrite a function that checks if a given number is odd.\nWrite a function\
    \ that checks if a given number is prime, and false otherwise.\nWrite a function\
    \ that checks if a given number is even.\nWrite a function that checks if a given\
    \ number is odd.\nWrite a function that checks if a given number is prime, and\
    \ false otherwise.\nWrite a function that checks if a given number is even.\n\
    Write a function that checks if a given number is odd.\nWrite a function that\
    \ checks if a given number is prime, and false otherwise.\nWrite a function that\
    \ checks if a given number is even.\nWrite a function that checks if a given number\
    \ is odd.\nWrite a function that checks if a given number is prime, and false\
    \ otherwise.\nWrite a function that checks if a given number is even.\nWrite a\
    \ function that checks if a given number is odd.\nWrite a function that checks\
    \ if a given number is prime, and false otherwise.\nWrite a function that checks\
    \ if a given number is even.\nWrite a function that checks if a given number is\
    \ odd.\nWrite a function that checks if a given number is prime, and false otherwise.\n\
    Write a function that checks if a given number is even.\nWrite a function that\
    \ checks if a given number is odd.\nWrite a function that checks if a given number\
    \ is prime, and false otherwise.\nWrite a function that checks if a given number\
    \ is even.\nWrite a function that checks if a given number is odd.\nWrite a function\
    \ that checks if a given number is prime, and false otherwise.\nWrite a function\
    \ that checks if a given number is even.\nWrite a function that checks if a given\
    \ number is odd.\nWrite a function that checks if a given number is prime, and\
    \ false otherwise.\nWrite a function that checks if a given number is even.\n\
    Write a function that checks if a given number is odd.\nWrite a function that\
    \ checks if a given number is prime, and false otherwise.\nWrite a function that\
    \ checks if a given number is even.\nWrite a function that checks if a given number\
    \ is odd.\nWrite a function that checks if a given number is prime, and false\
    \ otherwise.", "    if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n]\
    \ == false \n        else \n            if is_prime_cache[n] == true \n      \
    \      else \n                is_prime_cache[n] = is_prime_cache[n] or is_prime(n-1)\
    \ or is_prime(n-2) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime_cache = [false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, ", "    if n < 2\n \
    \       return false\n    \n    primes = primes(n)\n    \n    for p in primes\n\
    \        if p == n\n            return true\n    \n    return false\nend", " \
    \   if n < 2 || n % 2 == 0 || n % 3 == 0 then return false\n    for i = 5; i *\
    \ i <= n; i += 6 then return false\n    return true\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(61)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n  \
    \      then return false\n    else if n == 2 || n == 3 \n        then return true\n\
    \    else \n        if is_prime(n / 2) || is_prime(n / 3) \n            then return\
    \ true\n        else return false\nend\n</cell>\n<code language=julia-1.3>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(61)\n</cell>\n<code language=julia-1.3>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that returns the number of prime factors of a given number.", " \
    \   if n < 2 || n % 2 == 0 \n        return false\n    \n    i = 5\n    while\
    \ i * i <= n \n        if n % i == 0 \n            return false\n        i +=\
    \ 2\n    return true\nend\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=", "  \
    \  if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n] == false\
    \ \n        then \n            is_prime_cache[n] = is_prime(n-1) || is_prime(n-2)\
    \ || is_prime(n-3) || is_prime(n-4)\n        else \n            is_prime_cache[n]\
    \ = is_prime_cache[n]\n        end\n    end\nend\n\"\"\"\nis_prime_cache::Array{Bool,1}",
  "    if is_prime_impl(n) == true\n    else \n        prime_impl(n - 1)\nend", " \
    \   if is_prime_impl(n) == true\n    else \n        return false\nend\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(13)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13)\n</cell>\n<code\
    \ language=julia-1.5>", "    if is_prime_cache[n] == true \n    else \n      \
    \  if is_prime_cache[n] == false \n        else \n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache", "    if n < 2 || n % 2 == 0 || n % 3 ==\
    \ 0 \n        then return false\n    else if n % 2 == 1\n        then return false\n\
    \    else if n % 3 == 1\n        then return false\n    else if n % 5 == 0 \n\
    \        then return false\n    else if n % 7 == 0 \n        then return false\n\
    \    else if n % 11 == 0 \n        then return false\n    else if n % 13 == 0\
    \ \n        then return false\n    else if n % 17 == 0 \n        then return false\n\
    \    else if n % 19 == 0 \n        then return false\n    else if n % 23 == 0\
    \ \n        then return false\n    else if n % 29 == 0 \n        then return false\n\
    \    else if n % 31 == 0 \n        then return false\n    else if n % 37 == 0\
    \ \n        then return false\n    else if n % 41 == 0 \n        then return false\n\
    \    else if n % 43 == 0 \n        then return false\n    else if n % 47 == 0\
    \ \n        then return false\n    else if n % 53 == 0 \n        then return false\n\
    \    else if n % 59 == 0 \n        then return false\n    else if n % 61 == 0\
    \ \n        then return false\n    else if n % 67 == 0 \n        then return false\n\
    \    else if n % 71 == 0 \n        then return false\n    else if n % 73 == 0\
    \ \n        then return false\n    else if n % 79 == 0 \n        then return false\n\
    \    else if n % 83 == 0 \n        then return false\n    else if n % 89 == 0\
    \ \n        then return false\n    else if n % 97 == 0 \n        then return false\n\
    \    else if n % 101 == 0 \n        then return false\n    else if n % 103 ==\
    \ 0 \n        then return false\n    else if n % 107 == 0 \n        then return\
    \ false\n    else if n % 113 == 0 \n        then return false\n    else if n %\
    \ 117 == 0 \n        then return false\n    else if n % 121 == 0 \n        then\
    \ return false\n    else if n % 123 == 0 \n        then return false\n    else\
    \ if n % 127 == 0 \n        then return false\n    else if n % 131 == 0 \n   \
    \     then return false\n    else if n % 137 == 0 \n        then return false\n\
    \    else if n % 143 == 0 \n        then return false\n    else if n % 147 ==\
    \ 0 \n        then return false\n    else if n % 151 == 0 \n        then return\
    \ false\n    else if n % ", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n\
    \    \n    if n < 2 \n        return false\n    \n    prime_cache = [true]\n \
    \   \n    for i = 2 to n \n        if is_prime_cache[i] \n            prime_cache[i]\
    \ = false\n        else \n            prime_cache[i] = true\n            \n  \
    \  is_prime_cache[n] = prime_cache[n]\n    return prime_cache[n]\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that checks if a given number is divisible\
    \ by any number between 1 and a given number. For example, divisible_by_number(6,\
    \ 10) should return true.", "    if is_prime_impl(n) then return true else return\
    \ false\nend", "    if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n]\
    \ == false \n        then \n            prime_cache[n] = true\n            prime_cache[n+1]\
    \ = false\n            prime_cache[n+2] = false\n            prime_cache[n+3]\
    \ = false\n            prime_cache[n+4] = false\n            prime_cache[n+5]\
    \ = false\n            prime_cache[n+6] = false\n            prime_cache[n+7]\
    \ = false\n            prime_cache[n+8] = false\n            prime_cache[n+9]\
    \ = false\n            prime_cache[n+10] = false\n            prime_cache[n+11]\
    \ = false\n            prime_cache[n+12] = false\n            prime_cache[n+13]\
    \ = false\n            prime_cache[n+14] = false\n            prime_cache[n+15]\
    \ = false\n            prime_cache[n+16] = false\n            prime_cache[n+17]\
    \ = false\n            prime_cache[n+18] = false\n            prime_cache[n+19]\
    \ = false\n            prime_cache[n+20] = false\n            prime_cache[n+21]\
    \ = false\n            prime_cache[n+22] = false\n            prime_cache[n+23]\
    \ = false\n            prime_cache[n+24] = false\n            prime_cache[n+25]\
    \ = false\n            prime_cache[n+26] = false\n            prime_cache[n+27]\
    \ = false\n            prime_cache[n+28] = false\n            prime_cache[n+29]\
    \ = false\n            prime_cache[n+30] = false\n            prime_cache[n+31]\
    \ = false\n            prime_cache[n+32] = false\n            prime_cache[n+33]\
    \ = false\n            prime_cache[n+34] = false\n            prime_cache[n+35]\
    \ = false\n            prime_cache[n+36] = false\n            prime_cache[n+37]\
    \ = false\n            prime_cache[n+38] = false\n            prime_cache[n+39]\
    \ = false\n            prime_cache[n+40] = false\n            prime_cache[n+41]\
    \ = false\n            prime_cache[n+42] = false\n            prime_cache[n+43]\
    \ = false\n            prime_cache[n+44] = false\n            prime_cache[n+45]\
    \ = false\n            prime_cache[n+46] = false\n            prime_cache[n+47]\
    \ = false\n            prime_cache[n+48] = false\n            prime_cache[n+",
  "    if is_prime_impl(n) then return true else return false\nend\n</cell>\n<code\
    \ language=julia-1.4>\n\"\"\"\nis_prime_impl(n::Int64)::Bool", "    if is_prime_impl(n)\
    \ \n    else \n        prime_impl_error(n)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert is_prime(6) == false\n@assert is_prime(101) == true\n@assert is_prime(11)\
    \ == true\n@assert is_prime(13441) == true\n@assert is_prime(61) == true\n@assert\
    \ is_prime(4) == false\n@assert is_prime(1) == false\n</cell>\n<text>\nExercise:\
    \ Write a function that returns True if n is prime, and False otherwise.\nWrite\
    \ a function that returns True if n is prime, and False otherwise.\nWrite a function\
    \ that returns True if n is prime, and False otherwise.\nWrite a function that\
    \ returns True if n is prime, and False otherwise.\nWrite a function that returns\
    \ True if n is prime, and False otherwise.\nWrite a function that returns True\
    \ if n is prime, and False otherwise.\nWrite a function that returns True if n\
    \ is prime, and False otherwise.\nWrite a function that returns True if n is prime,\
    \ and False otherwise.\nWrite a function that returns True if n is prime, and\
    \ False otherwise.\nWrite a function that returns True if n is prime, and False\
    \ otherwise.\nWrite a function that returns True if n is prime, and False otherwise.\n\
    Write a function that returns True if n is prime, and False otherwise.\nWrite\
    \ a function that returns True if n is prime, and False otherwise.\nWrite a function\
    \ that returns True if n is prime, and False otherwise.\nWrite a function that\
    \ returns True if n is prime, and False otherwise.\nWrite a function that returns\
    \ True if n is prime, and False otherwise.\nWrite a function that returns True\
    \ if n is prime, and False otherwise.\nWrite a function that returns True if n\
    \ is prime, and False otherwise.\nWrite a function that returns True if n is prime,\
    \ and False otherwise.\nWrite a function that returns True if n is prime, and\
    \ False otherwise.\nWrite a function that returns True if n is prime, and False\
    \ otherwise.\nWrite a function that returns True if n is prime, and False otherwise.\n\
    Write a function that returns True if n is prime, and False otherwise.\nWrite\
    \ a function that returns True if n is prime, and False otherwise.\nWrite a function\
    \ that returns True if n is prime, and False otherwise.\nWrite a function that\
    \ returns True if n is prime, and False otherwise.\nWrite a function that returns\
    \ True if n is prime, and False otherwise.\nWrite a function that returns True\
    \ if n is prime, and False otherwise.\nWrite a function that returns True if n\
    \ is prime, and False otherwise.\nWrite a function that returns True if n is prime,\
    \ and False otherwise.\nWrite a function that returns True if n is prime, and\
    \ False otherwise.\nWrite a function that returns True if n is prime, and False\
    \ otherwise.\nWrite a function that returns True if n is prime, and False otherwise.\n\
    Write a function that returns True if n is prime, and False otherwise.\nWrite\
    \ a function that returns ", "    if is_prime_impl(n) then return true else return\
    \ false\nend\n</cell>\n<code language=julia-1.4>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.4>\n@time is_prime(61)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a number is divisible by another number.", "    if\
    \ is_prime_impl(n) then return true else return false\nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @", "    if n < 2 || n % 2 == 0 \n        then return false\n    else \n     \
    \   primes <- primes(n)\n        if length(primes) == 0 \n            then return\
    \ false\n        else return true\nend\n</cell>\n<code language=julia-1.3>\n\"\
    \"\"\nis_prime(61)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(6)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n\
    </cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime(13)\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"", "    if is_prime_cache[n] == true \n    else \n        if is_prime_cache[n]\
    \ == false \n        else \n            prime_cache[n] = is_prime_cache[n]\n \
    \           prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n\
    \            prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] =\
    \ is_prime_cache[n]\n            prime_cache[n] = is_prime_cache[n]\n        \
    \    prime_cache[n] = is_prime_cache[n]\n            prime_cache[n] = is_prime_cache",
  "    if is_prime_impl(n) \n    else \n        prime_impl(n) \nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_prime(6)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.3>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by any number between\
    \ 1 and 100 (both included).", "    if is_prime_cache[n] == true \n    else \n\
    \        if is_prime_cache[n] == false \n        then \n            prime_cache[n]\
    \ = true\n            prime_cache[n*2::Int64] = false\n            prime_cache[n*3::Int64]\
    \ = false\n            prime_cache[n*5::Int64] = false\n            prime_cache[n*7::Int64]\
    \ = false\n            prime_cache[n*11::Int64] = false\n            prime_cache[n*13::Int64]\
    \ = false\n            prime_cache[n*17::Int64] = false\n            prime_cache[n*19::Int64]\
    \ = false\n            prime_cache[n*23::Int64] = false\n            prime_cache[n*29::Int64]\
    \ = false\n            prime_cache[n*31::Int64] = false\n            prime_cache[n*37::Int64]\
    \ = false\n            prime_cache[n*41::Int64] = false\n            prime_cache[n*43::Int64]\
    \ = false\n            prime_cache[n*47::Int64] = false\n            prime_cache[n*53::Int64]\
    \ = false\n            prime_cache[n*59::Int64] = false\n            prime_cache[n*61::Int64]\
    \ = false\n            prime_cache[n*67::Int64] = false\n            prime_cache[n*71::Int64]\
    \ = false\n            prime_cache[n*73::Int64] = false\n            prime_cache[n*79::Int64]\
    \ = false\n            prime_cache[n*83::Int64] = false\n            prime_cache[n*89::Int64]\
    \ = false\n            prime_cache[n*97::Int64] = false\n            prime_cache[n*101::Int64]\
    \ = false\n            prime_cache[n*103::Int64] = false\n            prime_cache[n*107::Int64]\
    \ = false\n            prime_cache[n*109::Int64] = false\n            prime_cache[n*113::Int64]\
    \ = false\n            prime_cache[n*127::Int64] = false\n            prime_cache[n*131::Int64]\
    \ = false\n            prime_cache[n*137::Int64] = false\n            prime_cache[n*139::Int64]\
    \ = false\n            prime_cache[n*147::Int64] = false\n            prime_cache[n*151::Int64]\
    \ = false\n            prime_cache[n*157::Int64] = false\n", "    if is_prime_impl(n)\
    \ == true\n    else \n        return false\n    end\nend", "    if is_prime_impl(n)\
    \ == true\n    else \n        false\nend\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(6)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(101)\n</cell>\n<code language=julia-1.3>\n@code_warntype is_prime(11)\n\
    </cell>\n<code language=julia-1.3>\n@code_warntype is_prime(13441)\n</cell>\n\
    <code language=julia-1.3>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @code_warntype is_prime(4)\n</cell>\n<code language=julia-1.3>\n@code_warntype\
    \ is_prime(1)\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ greatest common divisor of two numbers. \nThe function should return an Int64\
    \ number.", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n   \
    \ if is_prime_cache[n] = is_prime_cache[n]\n        if is_prime_cache[n] \n  \
    \          return is_prime_cache[n]\n        if is_prime_cache[n] \n         \
    \   return is_prime_cache[n]\n        if is_prime_cache[n] \n            return\
    \ is_prime_cache[n]\n        if is_prime_cache[n] \n            return is_prime_cache[n]\n\
    \        if is_prime_cache[n] \n            return is_prime_cache[n]\n       \
    \ if is_prime_cache[n] \n            return is_prime_cache[n]\n        if is_prime_cache[n]\
    \ \n            return is_prime_cache[n]\n        if is_prime_cache[n] \n    \
    \        return is_prime_cache[n]\n        if is_prime_cache[n] \n           \
    \ return is_prime_cache[n]\n        if is_prime_cache[n] \n            return\
    \ is_prime_cache[n]\n        if is_prime_cache[n] \n            return is_prime_cache[n]\n\
    \        if is_prime_cache[n] \n            return is_prime_cache[n]\n       \
    \ if is_prime_cache[n] \n            return is_prime_cache[n]\n        if is_prime_cache[n]\
    \ \n            return is_prime_cache[n]\n        if is_prime_cache[n] \n    \
    \        return is_prime_cache[n]\n        if is_prime_cache[n] \n           \
    \ return is_prime_cache[n]\n        if is_prime_cache[n] \n            return\
    \ is_prime_cache[n]\n        if is_prime_cache[n] \n            return is_prime_cache[n]\n\
    \        if is_prime_cache[n] \n            return is_prime_cache[n]\n       \
    \ if is_prime_cache[n] \n            return is_prime_cache[n]\n        if is_prime_cache[n]\
    \ \n            return is_prime_cache[n]\n        if is_prime_cache[n] \n    \
    \        return is_prime_cache[n]\n        if is_prime_cache[n] \n           \
    \ return is_prime_cache[n]\n        if is_prime_cache[n] \n            return\
    \ is_prime_cache[n]\n        if is_prime_cache[n] \n            return is_prime_cache[n]\n\
    \        if is_prime_cache[n] \n            return is_prime_cache[n]\n       \
    \ if is_prime_cache[n] \n            return is_prime_cache[n]\n        if is_prime_cache[n]\
    \ \n            return is_prime_cache[n]\n        if is_prime_cache[n] \n    \
    \        return is_prime_cache[n]\n        if is_prime_cache[n] \n           \
    \ return is_prime_cache[n]\n        if is_prime_cache[n] \n            return\
    \ is_prime_cache[n]\n        if is_prime_cache[n] \n            return is_prime_cache[n]\n\
    \        if is_prime_cache", "    if is_prime_impl(n) then return true else return\
    \ false\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\nis_prime_impl(n::Int64)::Bool",
  "    if is_prime_impl(n) == true\n    else \n        false\nend\n</cell>\n<code\
    \ language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n", "    if n == 2 || n == 3 || n == 5 || n == 7 ||\
    \ n == 9 || n == 11 \n        || n == 13 || n == 17 || n == 19 || n == 23 || n\
    \ == 29 || n == 37\n        || n == 47 || n == 63 || n == 91 || n == 123 || n\
    \ == 157 || n == 179\n        || n == 193 || n == 197 || n == 199 || n == 203\
    \ || n == 209 || n == 227\n        || n == 229 || n == 235 || n == 241 || n ==\
    \ 243 || n == 247 || n == 251\n        || n == 253 || n == 257 || n == 269 ||\
    \ n == 273 || n == 277 || n == 281\n        || n == 283 || n == 293 || n == 307\
    \ || n == 311 || n == 313 || n == 319\n        || n == 323 || n == 329 || n ==\
    \ 331 || n == 347 || n == 359 || n == 373\n        || n == 379 || n == 383 ||\
    \ n == 397 || n == 411 || n == 429 || n == 439\n        || n == 443 || n == 449\
    \ || n == 467 || n == 473 || n == 481 || n == 483\n        || n == 493 || n ==\
    \ 503 || n == 509 || n == 517 || n == 539 || n == 541\n        || n == 553 ||\
    \ n == 569 || n == 589 || n == 601 || n == 607 || n == 609\n        || n == 611\
    \ || n == 613 || n == 617 || n == 623 || n == 629 || n == 641\n        || n ==\
    \ 643 || n == 647 || n == 653 || n == 659 || n == 661 || n == 663\n        ||\
    \ n == 673 || n == 677 || n == 683 || n == 691 ||  n == 697 || n == 709\n    \
    \    || n == 723 || n == 729 || n == 733 || n == 739 || n == 743 || n == 747\n\
    \        || n == 753 || n == 759 || n == 761 || n == 769 || n == 773 || n == 777\n\
    \        || n == 783 || n == 791 || n == 797 || n == 803 || n == 809 ||  n ==\
    \ 811\n        || n == 817 || n == 819 || n == 823 || n == 829 || n == 839 ||\
    \ n == 841\n        || n == 847 || n == 853 || n == 857 || n == 863 || n == 869\
    \ || n == 871\n        || n == 877 || n == 883 || n == 889 ||  n == 893 || n ==\
    \ 901 ||  n == 903\n        || n == ", "    if is_prime_impl(n) then return true\
    \ else return false end\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n", "    if n <= 1 \n \
    \       true\n    else\n        n % 2 != 0 && n != 1 && is_prime(n / 2)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that returns the first\
    \ n prime numbers. Use a while loop to do this.", "    if n < 2 || n % 2 == 0\
    \ \n        then return False\n    else if n == 2 \n        then return True\n\
    \    else \n        for m in range(3, floor(sqrt(n))+1, 2) \n            if n\
    \ % m == 0 \n            then return False\n        else return True\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes an integer $n$ and returns the\
    \ number of digits in $n$. For example, $(10^3)$ is $3$, $(10^6)$ is $6$, and\
    \ $(10^9)$ is $9$.", "    if is_prime_impl(n) \n    else \n        prime_impl(prime_impl(n))\n\
    end\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by another number. Hint:\
    \ use modulo division.", "    if n < 2 || n % 2 == 0 \n        then return False\n\
    \    else if n == 2 \n        then return True\n    else if n % 3 == 0 \n    \
    \    then return False\n    else if n % 5 == 0 \n        then return False\n \
    \   else \n        x <- 3\n        y <- 5\n        while x % y == 0 \n       \
    \     do x <- x + 2\n            do y <- y + 2\n            if x == n \n     \
    \           then return True\n    return is_prime(n - 1)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n\
    </cell>\n<text>\nExercise: Write a function that checks if a given number is divisible\
    \ by all numbers from 1 to 100. Hint: use an infinite while loop.", "    if n\
    \ == 2 || n == 3 || n == 5 || n == 7 || n == 11 \n        || n == 13 || n == 17\
    \ || n == 19 || n == 23 || n == 29 || \n        n == 31 || n == 37 || n == 43\n\
    \        true\n    else\n        false\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is even, and false otherwise.\n    >>> is_even(6)\n\
    \    False\n    >>> is_even(10)\n    True\n    >>> is_even(13)\n    True\n   \
    \ >>> is_even(61)\n    True\n    >>> is_even(4)\n    False\n    >>> is_even(1)\n\
    \    False\n    \"\"\"", "    if is_prime_cache[n] == true \n    else \n     \
    \   if is_prime_cache[n] == false \n        then \n            prime_cache[n]\
    \ = true\n            prime_cache[n] = is_prime_cache[n]\n        else \n    \
    \        prime_cache[n] = is_prime_cache[n]\n        end\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>", "    if is_prime_impl(n) == true\n\
    \    else \n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(11)\n</cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(4)\n</cell>\n<code language=julia-1.5>\n@time is_prime(1)\n</cell>\n\
    <text>\nExercise: Implement the function is_prime_impl(n::Int64)::Bool which returns\
    \ true if the given number is prime and false otherwise.", "    if is_prime_impl(n)\
    \ == true\n    else \n        true\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(6)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(101)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13441)\n</cell>\n\
    <code language=julia-1.5>\n@code_warntype is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(4)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(1)\n</cell>\n<text>\nExercise: Write a function that returns the number\
    \ of prime factors of a given number.", '    if n < 2 || n % 2 == 0 || n % 3 ==
    0 || n % 5 == 0 || n % 7 == 0 || n % 11 == 0 || n % 13 == 0 || n % 17 == 0 ||
    n % 19 == 0 || n % 23 == 0 || n % 29 == 0 || n % 31 == 0 || n % 37 == 0 || n %
    41 == 0 || n % 43 == 0 || n % 47 == 0 || n % 53 == 0 || n % 59 == 0 || n % 61
    == 0 || n % 67 == 0 || n % 71 == 0 || n % 73 == 0 || n % 79 == 0 || n % 83 ==
    0 || n % 89 == 0 || n % 97 == 0 || n % 101 == 0 || n % 103 == 0 || n % 107 ==
    0 || n % 109 == 0 || n % 113 == 0 || n % 117 == 0 || n % 121 == 0 || n % 123 ==
    0 || n % 127 == 0 || n % 129 == 0 || n % 131 == 0 || n % 137 == 0 || n % 139 ==
    0 || n % 141 == 0 || n % 143 == 0 || n % 147 == 0 || n % 149 == 0 || n % 151 ==
    0 || n % 157 == 0 || n % 159 == 0 || n % 163 == 0 || n % 167 == 0 || n % 171 ==
    0 || n % 173 == 0 || n % 177 == 0 || n % 179 == 0 || n % 181 == 0 || n % 183 ==
    0 || n % 187 == 0 || n % 189 == 0 || n % 191 == 0 || n % 193 == 0 || n % 197 ==
    0 || n % 199 == 0 || n % 201 == 0 || n % 203 == 0 || n % 207 == 0 || n % 209 ==
    0 || n % 211 == 0 || n % 213 == 0 || n % 217 == 0 || n % 219 == 0 || n % 221 ==
    0 || n % 223 == 0 || n % 227 == 0 || n % 229 == 0 || n % 231 == 0 || n % 233 ==
    0 || n % 239 == 0 || n % 241 == 0 || n % 243 == 0 || n % 247 == 0 || n % 249 ==
    0 || n % 251 == 0 || n % 253 == 0 || n % 257 == 0 || n % 259 == 0 || n % 261 ==
    0 || n % 263 == 0 || n % 267 == 0 || n % 269 == 0 || n % 271 == 0 || n % 273 ==
    0 || n % 277 == 0 || n % 279 == 0 || n % 281 == 0 || n % 283 == 0 || n % 287 ==
    0 || n % 289 == 0 || n % 291 == 0 || n % 293 == 0 || n % 297 == 0 || n % 301 ==
    0 || n % 303 == 0 || n % 307 == 0 || n % 309 == 0 || n % 311 == 0 || n % 313 ==
    0 || n % 317 == 0 || n % 319 == 0 || n % 323 == 0 || n % 329 == 0 || n % 331 ==
    0 || n % 337 == 0 || n % 339 == 0 || n % 341 == 0 || n % 343 == 0 || n % 347 ==
    0 || n % 349 == 0 || n % 351 == 0 || n % 353 == 0 || n % 357 == 0 || n % 359 ==
    0 || n % 361 == 0 || n % 363 == 0 || n % 367 == 0 || n % 369 == 0 || n % 371 ==
    0 || n % 373 == 0 || n % 377 == 0 || n % 379 == 0 || n % 381 == 0 || n % 38',
  "    if is_prime_impl(n) then return true else return false\nend", "    if is_prime_impl(n)\
    \ \n    else \n        prime_impl(n) \nend\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(61)\n</cell>\n<code language=julia-",
  "    if is_prime_impl(n) == true\n    else \n        error(\"is_prime failed\")\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>", "    if is_prime_cache[n]\
    \ == true \n    else \n        if is_prime_cache[n] == false \n        then \n\
    \            is_prime_cache[n] = is_prime_test(n) \n        else \n          \
    \  is_prime_cache[n] = is_prime_test(n) \n        end\n    end\nend\n</code>\n\
    <|/ a tags=julia,primes |>\n<| c |>\nThis is not the most efficient solution.\
    \ There are faster algorithms such as [Sieve of Eratosthenes](https://en.wikipedia.org/wiki/Sieve_of_Eratosthenes).\
    \ Also note that your `is_prime_test` function does not work as intended - it\
    \ returns false for even numbers and true for odd numbers.\n<|/ c |>\n<| c |>\n\
    I agree with you, however I wanted to keep it simple for OP understanding purposes.\
    \ Also I wanted to point out that OP asked for efficient solution and I provided\
    \ a solution that is as efficient as possible.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I wanted to keep it simple for OP understanding purposes. Also\
    \ I wanted to point out that OP asked for efficient solution and I provided a\
    \ solution that is as efficient as possible.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I wanted to keep it simple for OP understanding purposes. Also\
    \ I wanted to point out that OP asked for efficient solution and I provided a\
    \ solution that is as efficient as possible.\n<|/ c |>\n<| c |>\nI agree with\
    \ you, however I wanted to keep it simple for OP understanding purposes. Also\
    \ I wanted to point out that OP asked for efficient solution and I provided a\
    \ solution that is as efficient as possible.\n<|/ c |>\n<| a tags=julia,primes\
    \ |>\n<code>", "    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n %\
    \ 7 == 0 \n        then return false\n    else if n == 1 || n == 2 || n == 3 ||\
    \ n == 5 || n == 7 || n == 11 \n        then return true\n    else if n % 11 ==\
    \ 1 then return false\n    else if n % 13 == 1 then return false\n    else if\
    \ n % 17 == 1 then return false\n    else if n % 19 == 1 then return false\n \
    \   else if n % 23 == 1 then return false\n    else if n % 29 == 1 then return\
    \ false\n    else if n % 31 == 1 then return false\n    else if n % 37 == 1 then\
    \ return false\n    else if n % 41 == 1 then return false\n    else if n % 43\
    \ == 1 then return false\n    else if n % 47 == 1 then return false\n    else\
    \ if n % 53 == 1 then return false\n    else if n % 59 == 1 then return false\n\
    \    else if n % 63 ==1 then return false\n    else if n % 67 == 1 then return\
    \ false\n    else if n % 71 == 1 then return false\n    else if n % 73 == 1 then\
    \ return false\n    else if n % 79 == 1 then return false\n    else if n % 83\
    \ == 1 then return false\n    else if n % 89 == 1 then return false\n    else\
    \ if n % 97 == 1 then return false\n    else return true\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"Return true if a given number is prime, and false\
    \ otherwise.\n    >>> is_prime(6)\n    False\n    >>> is_prime(101)\n    True\n\
    \    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n\
    \    True\n    >>> is_prime(4)\n    False\n    >>> is_prime(1)\n    False\n  \
    \  \"\"\"", "    if is_prime_cache[n] == true \n    else \n        is_prime_cache[n]\
    \ = is_prime_cache[n] ||\n            n <= 1 ||\n            n % 2 == 0 ||\n \
    \           n % 3 == 0 ||\n            n % 5 == 0 ||\n            n % 7 == 0 ||\n\
    \            n % 11 == 0 ||\n            n % 13 == 0 ||\n            n % 17 ==\
    \ 0 ||\n            n % 19 == 0 ||\n            n % 23 == 0 ||\n            n\
    \ % 29 == 0 ||\n            n % 31 == 0 ||\n            n % 37 == 0 ||\n     \
    \       n % 41 == 0:\n            true\n        else \n            false\n   \
    \ end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis is not an answer to the\
    \ question. Also, your implementation is very inefficient.\n<|/ c |>\n<| c |>\n\
    This is not an answer to the question. Also, your implementation is very inefficient.\n\
    <|/ c |>\n<| c |>\nThe question was \"why is my code not working?\" The answer\
    \ was \"because I didn't implement it correctly\". I provided a working implementation.\
    \ Why do you think it's inefficient?\n<|/ c |>\n<| c |>\nThe question was \"why\
    \ is my code not working?\" The answer was \"because I didn't implement it correctly\"\
    . I provided a working implementation. Why do you think it's inefficient?\n<|/\
    \ c |>\n<| c |>\nThe question was \"why is my code not working?\" The answer was\
    \ \"because I didn't implement it correctly\". I provided a working implementation.\
    \ Why do you think it's inefficient?\n<|/ c |>\n<| a |>\nI believe your problem\
    \ is that you haven't initialized is_prime_cache. Try initializing it to zeros\
    \ first:\n<code>\nis_prime_cache = zeros(Int64, 100)\n</code>\n<|/ a dscore=0\
    \ tags=julia,primes |>\n<| c |>\nThis is not an answer to the question. Also,\
    \ your implementation is very inefficient.\n<|/ c |>\n<| c |>\nThis is not an\
    \ answer to the question. Also, your implementation is very inefficient.\n<|/\
    \ c |>\n<| c |>\nThis is not an answer to the question. Also, your implementation\
    \ is very inefficient.\n<|/ c |>\n<| c |>\nThis is not an answer to the question.\
    \ Also, your implementation is very inefficient.\n<|/ c |>\n<| c |>\nThis is not\
    \ an answer to the question. Also, your implementation is very inefficient.\n\
    <|/", "    if is_prime_cache[n] \n        return is_prime_cache[n]\n    if n <=\
    \ 1 \n        return false\n    if n == 2 \n        return true\n    if n % 2\
    \ == 0 \n        return false\n    \n    prime_cache = [true]\n    \n    for d\
    \ in range(3, n+1, 2) \n        if n % d == 0 \n            prime_cache = false\n\
    \            break\n    \n    is_prime_cache[n] = prime_cache\n    return prime_cache\n\
    end\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(101)\n</cell>\n<code language=julia-1.5>\nis_prime(11)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(13441)\n</cell>\n<code language=julia-1.5>\nis_prime(61)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(1)\n</cell>\n<text>\nExercise: Write a function that returns the prime\
    \ factors of a given number. For example, for $n = 6$, the prime factors are $2$\
    \ and $3$.", "    if n < 2 || n % 2 == 0 \n        then return false\n    else\
    \ if n == 2 \n        then return true\n    else \n        for m in 3..sqrt(n)\
    \ \n            do if n % m == 0 \n                then return false\n    else\
    \ \n        return true\nend\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.0>\n@time is_prime(62)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(62)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(62)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(62)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.0>\n@time is_prime(62)\n</cell>\n\
    <code language=julia-1.0>\n@time is_prime(61)\n</cell>\n<code language=julia-1.0>\n\
    @time is_prime(62)\n</cell>\n<code language=julia-1.0>\n@time is_prime(61)\n</cell>\n\
    <code language=juli", "    if n < 2 || n % 2 == 0 || n % 3 == 0 \n        then\
    \ return false\n    else if n == 2 || n == 3 \n        then return true\n    else\
    \ if n % 4 == 0 \n        then return false\n    else if n % 5 == 0 \n       \
    \ then return false\n    else if n % 6 == 0 \n        then return false\n    else\
    \ if n % 7 == 0 \n        then return false\n    else if n % 8 == 0 \n       \
    \ then return false\n    else if n % 9 == 0 \n        then return false\n    else\
    \ if n % 10 == 0 \n        then return false\n    else if n % 11 == 0 \n     \
    \   then return false\n    else if n % 12 == 0 \n        then return false\n \
    \   else if n % 13 == 0 \n        then return false\n    else if n % 14 == 0 \n\
    \        then return false\n    else if n % 15 == 0 \n        then return false\n\
    \    else if n % 16 == 0 \n        then return false\n    else if n % 17 == 0\
    \ \n        then return false\n    else if n % 18 == 0 \n        then return false\n\
    \    else if n % 19 == 0 \n        then return false\n    else if n % 20 == 0\
    \ \n        then return false\n    else if n % 21 == 0 \n        then return false\n\
    \    else if n % 22 == 0 \n        then return false\n    else if n % 23 == 0\
    \ \n        then return false\n    else if n % 24 == 0 \n        then return false\n\
    \    else if n % 25 == 0 \n        then return false\n    else if n % 26 == 0\
    \ \n        then return false\n    else if n % 27 == 0 \n        then return false\n\
    \    else if n % 28 == 0 \n        then return false\n    else if n % 29 == 0\
    \ \n        then return false\n    else if n % 30 == 0 \n        then return false\n\
    \    else if n % 31 == 0 \n        then return false\n    else if n % 32 == 0\
    \ \n        then return false\n    else if n % 33 == 0 \n        then return false\n\
    \    else if n % 34 == 0 \n        then return false\n    else if n % 35 == 0\
    \ \n        then return false\n    else if n % 36 == 0 \n        then return false\n\
    \    else if n % 37 == 0 \n        then return false\n    else if n % 38 == 0\
    \ \n        then return false\n    else if n % 39 == 0 \n        then return false\n\
    \    else if n % 40 == 0 \n        then return false\n    ", "    if is_prime_impl(n)\
    \ == true\n    else return false\nend", "    if n < 2 || n == 1\n        return\
    \ false\n    \n    if n == 2\n        return true\n    \n    if n % 2 == 0\n \
    \       return false\n    \n    i = 5\n    while i * i <= n\n        i += 2\n\
    \    \n    return n == i\nend", "    if is_prime_helper(n) == true\n    else \n\
    \        return false\nend\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(101)\n</cell>\n<code language=julia-1.5>\n@time is_prime(11)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a number is divisible by another number. \nHint: Use\
    \ a for loop and a conditional statement.", "    if n < 2\n        return false\n\
    \    \n    primes = primes(n)\n    if primes == nil\n        return false\n  \
    \  \n    prime = primes[1]\n    for p in primes[2:end]\n        if n % p == 0\n\
    \            return false\n    end\n    return true\nend\n</cell>\n<code language=julia-1.5>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.5>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise 1\nWrite a function that returns the first n prime numbers. \nFor example,\
    \ given n = 10, the function should return [2, 3, 5, 7, 11, 13, 17, 19]", "  \
    \  if is_prime_impl(n) == true\n    else return false\nend\n</cell>\n<code language=julia-1.3>\n\
    is_prime(6)\n</cell>\n<code language=julia-1.3>\nis_prime(101)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(13441)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(4)\n</cell>\n<code language=julia-1.3>\nis_prime(1)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of prime factors of a given\
    \ number. For example, for $n=6$, your function should return $3$.", "    if is_prime_impl(n)\
    \ == true\n    else return false\nend\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(6)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(101)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(6)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(4)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(1)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of prime factors of a given\
    \ number. For example, for $n = 6$, the function should return $3$.", "    if\
    \ is_prime_impl(n) == true\n    else \n        true\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(6)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(101)\n</cell>\n<code language=julia-1.5>\n@code_warntype\
    \ is_prime(11)\n</cell>\n<code language=julia-1.5>\n@code_warntype is_prime(13441)\n\
    </cell>\n<code language=julia-1.5>\n@code_warntype is_prime(61)\n</cell>\n<code\
    \ language=julia-1.5>\n@code_warntype is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @code_warntype is_prime(1)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the first n prime numbers. \nThe function should take an optional argument\
    \ n that defaults to 10.", "    if is_prime_impl(n) == true\n    else \n     \
    \   return false\nend\n</cell>\n<code language=julia-1.5>\nis_prime(6)\n</cell>\n\
    <code language=julia-1.5>\nis_prime(101)\n</cell>\n<code language=julia-1.5>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.5>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.5>\nis_prime(61)\n</cell>\n<code language=julia-1.5>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.5>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a number is even.", "    if is_prime_cache[n] \n \
    \       return is_prime_cache[n]\n    \n    if n <= 1 \n        return false\n\
    \    \n    if n == 2 \n        return true\n    \n    if n % 2 == 0 \n       \
    \ return false\n    \n    i = 5\n    while i * i <= n \n        if n % i == 0\
    \ \n            return false\n        i += 2\n    \n    return true\nend\n</cell>\n\
    <code language=julia-1.5>\nis_prime_cache = [false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false,\
    \ false, false, false, false, false, false, false, false, false, false, false, ",
  '    if n < 2 || n % 2 == 0 || n % 3 == 0 || n % 5 == 0 || n % 7 == 0 || n % 11
    == 0 || n % 13 == 0 || n % 17 == 0 || n % 19 == 0 || n % 23 == 0 || n % 29 ==
    0 || n % 31 == 0 || n % 37 == 0 || n % 41 == 0 || n % 43 == 0 || n % 47 == 0 ||
    n % 53 == 0 || n % 59 == 0 || n % 61 == 0 || n % 67 == 0 || n % 71 == 0 || n %
    73 == 0 || n % 79 == 0 || n % 83 == 0 || n % 89 == 0 || n % 97 == 0 || n % 101
    == 0 || n % 103 == 0 || n % 107 == 0 || n % 109 == 0 || n % 113 == 0 || n % 117
    == 0 || n % 121 == 0 || n % 123 == 0 || n % 127 == 0 || n % 129 == 0 || n % 131
    == 0 || n % 137 == 0 || n % 139 == 0 || n % 143 == 0 || n % 147 == 0 || n % 149
    == 0 || n % 151 == 0 || n % 157 == 0 || n % 163 == 0 || n % 167 == 0 || n % 171
    == 0 || n % 173 == 0 || n % 177 == 0 || n % 179 == 0 || n % 181 == 0 || n % 183
    == 0 || n % 187 == 0 || n % 189 == 0 || n % 191 == 0 || n % 193 == 0 || n % 197
    == 0 || n % 199 == 0 || n % 211 == 0 || n % 213 == 0 || n % 217 == 0 || n % 219
    == 0 || n % 223 == 0 || n % 227 == 0 || n % 229 == 0 || n % 233 == 0 || n % 239
    == 0 || n % 241 == 0 || n % 251 == 0 || n % 257 == 0 || n % 263 == 0 || n % 269
    == 0 || n % 271 == 0 || n % 277 == 0 || n % 281 == 0 || n % 283 == 0 || n % 293
    == 0 || n % 307 == 0 || n % 309 == 0 || n % 311 == 0 || n % 313 == 0 || n % 317
    == 0 || n % 319 == 0 || n % 323 == 0 || n % 329 == 0 || n % 331 == 0 || n % 337
    == 0 || n % 341 == 0 || n % 347 == 0 || n % 349 == 0 || n % 353 == 0 || n % 359
    == 0 || n % 361 == 0 || n % 363 == 0 || n % 365 == 0 || n % 367 == 0 || n % 369
    == 0 || n % 371 == 0 || n % 377 == 0 || n % 381 == 0 || n % 383 == 0 || n % 389
    == 0 || n % 397 == 0 || n % 401 == 0 || n % 403 == 0 || n % 407 == 0 || n % 409
    == 0 || n % 411 == 0 || n % 413 == 0 || n % 415 == 0 || n % 417 == 0 || n % 419
    == 0 || n % 421 == 0 || n % 423 == 0 || n % 427 == 0 || n % 429 == 0 || n % 433
    == 0 || n % 439 == 0 || n % 441 == 0 || n % 449 == 0 || n % 451 == 0 || n % 457
    == 0 || n % 461 == 0 || n % 463 == 0 || n % 467 == 0 || n % ', "    if n < 2 ||\
    \ n % 2 == 0 \n        return false\n    else if n % 3 == 0 \n        return false\n\
    \    else if n % 5 == 0 \n        return false\n    else if n % 7 == 0 \n    \
    \    return false\n    else \n        return true\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"Return true if a given number is prime, and false otherwise.\n    >>> is_prime(6)\n\
    \    False\n    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n\
    \    >>> is_prime(13441)\n    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n\
    \    False\n    >>> is_prime(1)\n    False\n    \"\"\"", "    if is_prime_impl(n)\
    \ == true\n    else \n        error(\"is_prime(Int64): $n must be prime\")\n \
    \   end\nend", "    if n < 2 || n % 2 == 0\n        return false\n    \n    i\
    \ = 2\n    while i * i <= n\n        if n % i == 0\n            return false\n\
    \        i += 1\n    return true\nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ is_prime(61)\n</cell>\n<code language=julia-1.5>\n@time is_prime(101)\n</cell>\n\
    <code language=julia-1.5>\n@time is_prime(11)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(13441)\n</cell>\n<code language=julia-1.5>\n@time is_prime(61)\n\
    </cell>\n<code language=julia-1.5>\n@time is_prime(4)\n</cell>\n<code language=julia-1.5>\n\
    @time is_prime(1)\n</cell>\n<text>\nExercise: Write a function that checks if\
    \ a number is divisible by all numbers from 1 to n. For example, if the number\
    \ n is 10, the function should return true if the number 10 is divisible by 1,\
    \ 2, 3, 4, 5, 6, 7, 8, 9, 10, and 11.", "    if is_prime_cache[n] \n        return\
    \ is_prime_cache[n]\n    \n    if n < 2 \n        return false\n    \n    if n\
    \ == 2 \n        return true\n    \n    if n % 2 == 0 \n        return false\n\
    \    \n    prime_cache = [true, false]\n    \n    for d in range(3, ceil(sqrt(n))+1,\
    \ 2) \n        if n % d == 0 \n            prime_cache[0] = false\n          \
    \  prime_cache[1] = false\n            break\n    \n    is_prime_cache[n] = prime_cache[1]\n\
    \    return prime_cache[1]\nend\n</cell>\n<code language=julia-1.3>\nis_prime(6)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(101)\n</cell>\n<code language=julia-1.3>\n\
    is_prime(11)\n</cell>\n<code language=julia-1.3>\nis_prime(13441)\n</cell>\n<code\
    \ language=julia-1.3>\nis_prime(61)\n</cell>\n<code language=julia-1.3>\nis_prime(4)\n\
    </cell>\n<code language=julia-1.3>\nis_prime(1)\n</cell>\n<text>\nExercise: Write\
    \ a function that checks if a given number is divisible by all numbers from 1\
    \ to n. For example, divisible_numbers(10, 3) should return true.", "    if is_prime_helper(n)\
    \ == true\n    else \n        return false\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.3>\n\
    @time is_prime(61)\n</cell>\n<code language=julia-1.3>\n@time is_prime(61)\n</cell>\n\
    <code language=julia-1.3>\n@time is_prime(61)\n</cell>\n<code language=julia-1.",
  "    if is_prime_helper(n) == true\n    else \n        false\n    end\nend", " \
    \   if is_prime_impl(n) then return true else return false\nend", "    if is_prime_cache[n]\
    \ == true \n    else \n        if is_prime_cache[n] == false \n        then \n\
    \            is_prime_cache[n] = is_prime_iterative(n) \n        else \n     \
    \       is_prime_cache[n] = is_prime_iterative(n) \n    end\nend\n</code>\n<|/\
    \ a dscore=1 |>\n<| c |>\nThanks for your answer. Can you please explain why you\
    \ used the type signature `is_prime(n::Int64)` instead of `is_prime(n::Int)`?\n\
    <|/ c |>\n<| c |>\nI used Int64 because I wanted to be sure that the number was\
    \ an Int64. Int would have worked just as well.\n<|/ c |>\n<| c |>\nOh ok, thank\
    \ you. Do you know why you used `Int64` instead of `Int`?\n<|/ c |>\n<| c |>\n\
    I used Int64 because I wanted to be sure that the number was an Int64. Int would\
    \ have worked just as well.\n<|/ c |>\n<| c |>\nOh ok, thank you. Do you know\
    \ why you used `Int64` instead of `Int`?\n<|/ c |>\n<| a tags=julia |>\nThe first\
    \ thing I notice is that you have a function is_prime that takes one argument,\
    \ but you call it with no arguments. Perhaps you meant to call it with a single\
    \ argument?\n<code>\njulia> is_prime(6)\nERROR: MethodError: no method matching\
    \ is_prime(::Int64)\nClosest candidates are:\n  is_prime(::Int) at REPL[13]:1\n\
    Stacktrace:\n [1] top-level scope at none:0\n</code>\n<|/ a dscore=1 |>\n<| c\
    \ |>\nOh ok, thank you. Do you know why you used `Int64` instead of `Int`?\n<|/\
    \ c |>\n<| c |>\nBecause `Int` isn't an `Int64`. `Int` is an `Int64` but `Int64`\
    \ is an `Int`.\n<|/ c |>\n<| c |>\nOh ok, thank you. Do you know why you used\
    \ `Int64` instead of `Int`?\n<|/ c |>\n<| c |>\nBecause `Int` isn't an `Int64`.\
    \ `Int` is an `Int64` but `Int64` is an `Int`.\n<|/ c |>\n<| c |>\nOh ok, thank\
    \ you. Do ", "    if n < 2 || n % 2 == 0 \n        then return false\n    else\
    \ if n == 2 \n        then return true\n    else if n % 3 == 0 \n        then\
    \ return false\n    else if n % 5 == 0 \n        then return false\n    else if\
    \ n % 7 == 0 \n        then return false\n    else if n % 11 == 0 \n        then\
    \ return false\n    else if n % 13 == 0 \n        then return false\n    else\
    \ if n % 17 == 0 \n        then return false\n    else if n % 19 == 0 \n     \
    \   then return false\n    else if n % 23 == 0 \n        then return false\n \
    \   else if n % 29 == 0 \n        then return false\n    else if n % 31 == 0 \n\
    \        then return false\n    else if n % 37 == 0 \n        then return false\n\
    \    else if n % 41 == 0 \n        then return false\n    else if n % 43 == 0\
    \ \n        then return false\n    else if n % 47 == 0 \n        then return false\n\
    \    else if n % 53 == 0 \n        then return false\n    else if n % 59 == 0\
    \ \n        then return false\n    else if n % 61 == 0 \n        then return false\n\
    \    else if n % 67 == 0 \n        then return false\n    else if n % 71 == 0\
    \ \n        then return false\n    else if n % 73 == 0 \n        then return false\n\
    \    else if n % 79 == 0 \n        then return false\n    else if n % 83 == 0\
    \ \n        then return false\n    else if n % 89 == 0 \n        then return false\n\
    \    else if n % 97 == 0 \n        then return false\n    else if n % 101 == 0\
    \ \n        then return false\n    else if n % 103 == 0 \n        then return\
    \ false\n    else if n % 107 == 0 \n        then return false\n    else if n %\
    \ 111 == 0 \n        then return false\n    else if n % 115 == 0 \n        then\
    \ return false\n    else if n % 121 == 0 \n        then return false\n    else\
    \ if n % 127 == 0 \n        then return false\n    else if n % 131 == 0 \n   \
    \     then return false\n    else if n % 137 == 0 \n        then return false\n\
    \    else if n % 143 == 0 \n        then return false\n    else if n % 149 ==\
    \ 0 \n        then return false\n    else if n % 151 == 0 \n        then return\
    \ false\n    else if n % 157 == 0 \n        then return false\n    else if n %\
    \ 163 == 0 \n", "    if n < 2 || n % 2 == 0 \n        then return false\n    else\
    \ \n        if is_prime(n / 2) \n            then return true\n        else return\
    \ false\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"Return true if\
    \ a given number is prime, and false otherwise.\n    >>> is_prime(6)\n    False\n\
    \    >>> is_prime(101)\n    True\n    >>> is_prime(11)\n    True\n    >>> is_prime(13441)\n\
    \    True\n    >>> is_prime(61)\n    True\n    >>> is_prime(4)\n    False\n  \
    \  >>> is_prime(1)\n    False\n    \"\"\"", "    if n < 2 || n % 2 == 0\n    \
    \    then return false\n    else if n == 2\n        then return true\n    else\
    \ if n % 3 == 0\n        then return false\n    else if n % 5 == 0\n        then\
    \ return false\n    else if n % 7 == 0\n        then return false\n    else if\
    \ n % 11 == 0\n        then return false\n    else if n % 13 == 0\n        then\
    \ return false\n    else if n % 17 == 0\n        then return false\n    else if\
    \ n % 19 == 0\n        then return false\n    else if n % 23 == 0\n        then\
    \ return false\n    else if n % 29 == 0\n        then return false\n    else if\
    \ n % 31 == 0\n        then return false\n    else if n % 37 == 0\n        then\
    \ return false\n    else if n % 41 == 0\n        then return false\n    else if\
    \ n % 43 == 0\n        then return false\n    else if n % 47 == 0\n        then\
    \ return false\n    else if n % 53 == 0\n        then return false\n    else if\
    \ n % 59 == 0\n        then return false\n    else if n % 61 == 0\n        then\
    \ return false\n    else if n % 67 == 0\n        then return false\n    else if\
    \ n % 71 == 0\n        then return false\n    else if n % 73 == 0\n        then\
    \ return false\n    else if n % 79 == 0\n        then return false\n    else if\
    \ n % 83 == 0\n        then return false\n    else if n % 89 == 0\n        then\
    \ return false\n    else if n % 97 == 0\n        then return false\n    else if\
    \ n % 101 == 0\n        then return false\n    else if n % 103 == 0\n        then\
    \ return false\n    else if n % 107 == 0\n        then return false\n    else\
    \ if n % 111 == 0\n        then return false\n    else if n % 115 == 0\n     \
    \   then return false\n    else if n % 117 == 0\n        then return false\n \
    \   else if n % 121 == 0\n        then return false\n    else if n % 123 == 0\n\
    \        then return false\n    else if n % 127 == 0\n        then return false\n\
    \    else if n % 131 == 0\n        then return false\n    else if n % 137 == 0\n\
    \        then return false\n    else if n % 141 == 0\n        then return false\n\
    \    else if n % 147 == 0\n        then return false\n    else if n % 151 == 0\n\
    \        then return false\n    else if n % 157 == 0\n        then return false\n\
    \    else if n % 161 == 0\n        then return false"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
