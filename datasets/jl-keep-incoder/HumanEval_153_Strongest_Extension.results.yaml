name: HumanEval_153_Strongest_Extension
language: julia
results:
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpshhk2r7_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpshhk2r7_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpshhk2r7_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions_sorted\n\
    \        \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n        \n        if strength > 0\n            break\n   \
    \     end\n    end\n    \n    return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted[findfirst(x -> x == extension), 1], extensions_sorted)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns the string with\
    \ the longest common prefix. \nFor example, if the first argument is a string\
    \ and the second is a list [\"AB\", \"AC\", \"AD\"], \nthe function should return\
    \ \"AB\".\nIf the first argument is a string and the second is a list [\"AB\"\
    , \"AC\", \"AD\", \"AE\"], \nthe function should return \"AB\".\nIf the first\
    \ argument is a string and the second is a list [\"AB\", \"AC\", \"AD\", \"AE\"\
    , \"AF\"], \nthe function should return \"AB\".\nIf the first argument is a string\
    \ and the second is a list [\"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\"], \n\
    the function should return \"AB\".\nIf the first argument is a string and the\
    \ second is a list [\"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\"], \n\
    the function should return \"AB\".\nIf the first argument is a string and the\
    \ second is a list [\"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"AH\", \"\
    AI\"], \nthe function should return \"AB\".\nIf the first argument is a string\
    \ and the second is a list [\"AB\", \"AC\", \"AD\", \"AE\", \"AF\", \"AG\", \"\
    AH\", \"AI\", \"AJ\"], \nthe function should return \"AB\".\nIf the first argument\
    \ is a string and the second is a list [\"AB\", \"AC\", \"AD\", \"AE\", \"AF\"\
    , \"AG\", \"AH\", \"AI\", \"AJ\", \"AK\"], \nthe function should return \"AB\"\
    .\nIf the first argument is a string and the second is a list [\"AB\", \"AC\"\
    , \"AD\", \"AE\", \"AF\", \"AG\", \"AH\", \"AI\", \"AJ\", \"AK\", \"AL\"], \n\
    the function should return \"AB\".\nIf the first argument is a string and the\
    \ second is a \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgso1d61a.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgso1d61a.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = 0.0\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_uppercase_letters = length(extension) - length(upper(extension))\n\
    \        extension_lowercase_letters = length(extension) - length(lower(extension))\n\
    \        \n        strength_of_extensions += extension_uppercase_letters - extension_lowercase_letters\n\
    \        \n    end\n    \n    strength_of_extensions = strength_of_extensions\
    \ / length(extensions_sorted)\n    \n    if strength_of_extensions == 0.0\n  \
    \      \n        error(\"No extensions found\")\n        \n    elseif strength_of_extensions\
    \ > 1.0\n        \n        error(\"More than one extension found\")\n        \n\
    \    elseif strength_of_extensions < 0.0\n        \n        error(\"No extensions\
    \ found\")\n        \n    else\n        \n        extensions_sorted = sort(extensions)\n\
    \        \n        extension_strength_sorted = sort(strength_of_extensions)\n\
    \        \n        extension_strength_sorted = extension_strength_sorted[extension_strength_sorted\
    \ .!= 0]\n        \n        extension_strength_sorted = extension_strength_sorted[1]\n\
    \        \n        extensions_sorted = extensions_sorted[extensions_sorted .!=\
    \ extension_strength_sorted]\n        \n        extensions_sorted = extensions_sorted[1]\n\
    \        \n        return class_name * \".\" .* extensions_sorted\n        \n\
    \    end\n    \nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmb5d173i.jl:65\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmb5d173i.jl:65\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9w1m437v.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9w1m437v.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper())\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower())\n            \n        end\n    end\n    \n    if\
    \ strength == -1\n        \n        error(\"No extension found with strength -1\"\
    )\n        \n    elseif strength == 0\n        \n        error(\"No extension\
    \ found with strength 0\")\n        \n    elseif strength == 1\n        \n   \
    \     return class_name\n        \n    elseif strength > 1\n        \n       \
    \ error(\"Multiple extensions found with strength $(strength)\")\n        \n \
    \   end\n    \nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a list of strings as arguments.\
    \ \nThe function should return the string with the longest common prefix among\
    \ the list of strings.\nFor example, if the list of strings is [\"abc\", \"def\"\
    , \"ghi\"] and the string \"abcdefghi\" \nis passed as an argument, the function\
    \ should return \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\"\
    ] and the string \"abcefghi\" \nis passed as an argument, the function should\
    \ return \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\"] and the\
    \ string \"abcefgh\" \nis passed as an argument, the function should return \"\
    abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\"] and the string \"\
    abcefg\" \nis passed as an argument, the function should return \"abc\".\nIf the\
    \ list of strings is [\"abc\", \"def\", \"ghi\"] and the string \"abcef\" \nis\
    \ passed as an argument, the function should return \"abc\".\nIf the list of strings\
    \ is [\"abc\", \"def\", \"ghi\"] and the string \"abce\" \nis passed as an argument,\
    \ the function should return \"abc\".\nIf the list of strings is [\"abc\", \"\
    def\", \"ghi\"] and the string \"abc\" \nis passed as an argument, the function\
    \ should return \"abc\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\"\
    ] and the string \"a\" \nis passed as an argument, the function should return\
    \ \"a\".\nIf the list of strings is [\"abc\", \"def\", \"ghi\"] and the string\
    \ \"\" \nis passed as an argument, the function should \nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpevu80lxe.jl:55\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpevu80lxe.jl:55\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -2\n    \n    for extension in extensions\n        if extension.contains(class_name)\n\
    \            strength = extension.count(class_name) - extension.count(lowercase(class_name))\n\
    \            break\n        end\n    end\n    \n    if strength == -2\n      \
    \  error(\"No extension found for class $class_name\")\n    end\n    \n    extension\
    \ = extensions[findfirst(isequal(class_name), extensions)]\n    \n    return \"\
    $class_name.$extension\"\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo949hyvw.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo949hyvw.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6k_awlmm.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6k_awlmm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6k_awlmm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd8q08baq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd8q08baq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd8q08baq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcf49oybo.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcf49oybo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcf49oybo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[0]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns a string\
    \ in the following format:\n    ClassName[ExtensionName1, ExtensionName2, ...,\
    \ ExtensionNameN]\nFor example, if the class is \"my_class\" and there are three\
    \ extensions [\"AA\", \"Be\", \"CC\"]\nthen you should return \"my_class.AA, my_class.Be,\
    \ my_class.CC\"\nHint: Use Strongest_Extension defined above.\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz_zt_i8u.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz_zt_i8u.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        \n        return class_name\n        \n    else\n  \
    \      \n        return class_name .. \".\" .. extensions_sorted[1]\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnfi2nyyg.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnfi2nyyg.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp29_tj7jh.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp29_tj7jh.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp35iyx9r4.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp35iyx9r4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp35iyx9r4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp092sk1xc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp092sk1xc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp092sk1xc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvyz8dzhr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvyz8dzhr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvyz8dzhr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_p2ljs92.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_p2ljs92.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_p2ljs92.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension.lowercase)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength),\
    \ by=x->x[1])\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1l7t1w2.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz1l7t1w2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1l7t1w2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpevqk0k4m.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpevqk0k4m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpevqk0k4m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strengths = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strengths[extension]\
    \ = length(extension) - length(lowercase(extension))\n    end\n    \n    sorted_extensions\
    \ = sort(collect(keys(extension_strengths)), by=extension_strengths)\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkj3cxlwl.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkj3cxlwl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkj3cxlwl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for ext in extensions\n  \
    \      \n        if isupper(ext[length(ext)]) == isupper(class_name[length(class_name)])\n\
    \            \n            strength = strength + length(ext) - length(class_name)\n\
    \            \n        end\n        \n    end\n    \n    if strength == -1\n \
    \       \n        return class_name\n        \n    else\n        \n        return\
    \ class_name .* \".\" .* extensions[strength]\n        \n    end\n    \nend\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and a list of strings as arguments and returns a string in the following\
    \ format:\nClassName.StrongestExtensionName.\nIf there are two or more extensions\
    \ with the same strength, you should\nchoose the one that comes first in the list.\n\
    For example, if you are given \"Slices\" as the class and a list of the\nextensions:\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes'\
    \ since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nExample:\n\
    for Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\nHint:\
    \ Use isupper and islower functions to check whether a character is upper or lower\
    \ case.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t\
    @test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprkp18nmc.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprkp18nmc.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa_bzcqvy.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa_bzcqvy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa_bzcqvy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper())\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower())\n            \n        end\n        \n    end\n\
    \    \n    return class_name * \".\" .* extensions_sorted[findfirst(x -> x ==\
    \ extensions_sorted[findfirst(x -> x == extensions_sorted)][1], extensions_sorted)]\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ a string with the first letter of each word capitalized. \nExample: \n    capitalize_first_letter(\"\
    Hello World\") == \"Hello World\"\n    capitalize_first_letter(\"Hello World!\"\
    ) == \"Hello World!\"\n    capitalize_first_letter(\"Hello World!!\") == \"Hello\
    \ World!!\"\n    capitalize_first_letter(\"Hello World!!!\") == \"Hello World!!!\"\
    \n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n    capitalize_first_letter(\"Hello World!!!\") ==\
    \ \"\"\n    capitalize_first_letter(\"Hello World!!!\") == \"\"\n    capitalize_first_letter(\"\
    Hello World!!!\") == \"\"\n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2c9f89g6.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2c9f89g6.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4shviega.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4shviega.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4shviega.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpowo9ydxv.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpowo9ydxv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpowo9ydxv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpl___pdlp.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpl___pdlp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpl___pdlp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time begin\n    \n    extensions = [\"SErviNGSliCes\", \"Cheese\", \"StuFfed\"\
    ]\n    \n    Strongest_Extension(\"my_class\", extensions)\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes as input a vector of strings and returns\
    \ a vector of strings. \nThe function should remove all duplicate strings from\
    \ the input vector. \nThe function should return the input vector unchanged if\
    \ there are no duplicate strings. \nThe function should return an empty vector\
    \ if there are duplicate strings.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm3ytzrwv.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3ytzrwv.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == 0\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<text>\nPart III. Solutions\n\
    Now that we have implemented the function Strongest_Extension, we can test it\
    \ on some examples:\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb2ynyqcn.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb2ynyqcn.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0tcfdwun.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0tcfdwun.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0tcfdwun.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and a list of strings as arguments and\
    \ returns a string with the first letter of each string in the list capitalized.\
    \ \nFor example, \n    capitalize_first_letter(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\"]) should return \"MyClass\".\n    capitalize_first_letter(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) should return \"MyClass\".\n    capitalize_first_letter(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) should return \"MyClass\"\
    .\n    capitalize_first_letter(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\",\
    \ \"EE\", \"FF\"]) should return \"MyClass\".\n    capitalize_first_letter(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) should return\
    \ \"MyClass\".\n    capitalize_first_letter(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) should return \"MyClass\".\n  \
    \  capitalize_first_letter(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\"]) should return \"MyClass\".\n    capitalize_first_letter(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) should return \"MyClass\".\n    capitalize_first_letter(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\"]) should return \"MyClass\".\n    capitalize_first_letter(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) should return \"MyClass\".\n    capitalize_first_letter(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) should return \"MyClass\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8i5p_ccr.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8i5p_ccr.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpym1u1qb8.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpym1u1qb8.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpym1u1qb8.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        else\n\
    \            strength = sm\n        end\n        \n    end\n    \n    return class_name\
    \ * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes the name of a class (a string) and a list of\
    \ extensions (a vector) and returns the name of the class with the strongest extension.\n\
    Example: \nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n\
    Hint: Use Strongest_Extension defined above.\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6r_7z5id.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6r_7z5id.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpop5a7jgf.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpop5a7jgf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpop5a7jgf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe5vh8kbt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe5vh8kbt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe5vh8kbt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = Dict{String, Int}()\n    \n    for extension\
    \ in extensions_sorted\n        \n        extension_uppercase_letters = length(extension)\
    \ - length(replace(extension, uppercase(extension), ''))\n        extension_lowercase_letters\
    \ = length(extension) - length(replace(extension, lowercase(extension), ''))\n\
    \        \n        strength_of_extensions[extension] = extension_uppercase_letters\
    \ - extension_lowercase_letters\n    end\n    \n    strength_of_extensions = sort(strength_of_extensions,\
    \ by = x -> -x)\n    \n    strength_of_extensions = strength_of_extensions[end]\n\
    \    \n    return class_name + '.' + extensions_sorted[end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.CC'\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ string and a list of strings and returns the string with the longest common\
    \ prefix. \nFor example, if the input string is \"abcde\" and a list of strings\
    \ is [\"ab\", \"cd\", \"e\"], the function should return \"ab\".\nIf the input\
    \ string is \"abcde\" and a list of strings is [\"ab\", \"cd\", \"ef\"], the function\
    \ should return \"abc\".\nIf the input string is \"abc\" and a list of strings\
    \ is [\"ab\", \"cd\", \"ef\"], the function should return \"abc\".\nIf the input\
    \ string is \"abc\" and a list of strings is [\"ab\", \"cd\", \"e\"], the function\
    \ should return \"ab\".\nIf the input string is \"abc\" and a list of strings\
    \ is [\"ab\", \"cd\", \"e\"], the function should return \"ab\".\nIf the input\
    \ string is \"abc\" and a list of strings is [\"ab\", \"cd\", \"e\"], the function\
    \ should return \"ab\".\nIf the input string is \"abc\" and a list of strings\
    \ is [\"ab\", \"cd\", \"e\"], the function should return \"ab\".\nIf the input\
    \ string is \"abc\" and a list of strings is [\"ab\", \"cd\", \"e\"], the function\
    \ should return \"ab\".\nIf the input string is \"abc\" and a list of strings\
    \ is [\"ab\", \"cd\", \"e\"], the function should return \"ab\".\nIf the input\
    \ string is \"abc\" and a list of strings is [\"ab\", \"cd\", \"e\"], the function\
    \ should return \"ab\".\nIf the input string is \"abc\" and a list of strings\
    \ is [\"ab\", \"cd\", \"e\"], the function should return \"ab\".\nIf the input\
    \ string is \"abc\" and a list of strings is [\"ab\", \"cd\", \"e\"], the function\
    \ should return \"ab\".\nIf the input string is \"abc\" and a list of \nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp01tjbgac.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp01tjbgac.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpumtq1ukj.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpumtq1ukj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpumtq1ukj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = length(extensions_sorted)\n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1psshtm_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1psshtm_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1psshtm_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    return\
    \ class_name .+ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a list of strings\
    \ as arguments and returns a string with the first letter of each string in the\
    \ list repeated n times. \nFor example, \n    repeated_letters(\"my_string\",\
    \ [\"A\", \"B\", \"C\"]) returns \"my_stringAmy_stringBmy_stringC\"\n    repeated_letters(\"\
    my_string\", [\"A\", \"B\", \"C\", \"D\"]) returns \"my_stringAmy_stringBmy_stringCmy_stringD\"\
    \n    repeated_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\"]) returns\
    \ \"my_stringAmy_stringBmy_stringCmy_stringDmy_stringE\"\n    repeated_letters(\"\
    my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"]) returns \"my_stringAmy_stringBmy_stringCmy_stringDmy_stringEmy_stringF\"\
    \n    repeated_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\"]) returns \"my_stringAmy_stringBmy_stringCmy_stringDmy_stringEmy_stringFmy_stringG\"\
    \n    repeated_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\"]) returns \"my_stringAmy_stringBmy_stringCmy_stringDmy_stringEmy_stringFmy_stringGmy_stringH\"\
    \n    repeated_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\"]) returns \"my_stringAmy_stringBmy_stringCmy_stringDmy_stringEmy_stringFmy_stringGmy_stringHmy_stringI\"\
    \n    repeated_letters(\"my_string\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"\
    , \"G\", \"H\", \"I\", \"J\"]) returns \"my_stringAmy_stringBmy_stringCmy_stringDmy_stringEmy_stringFmy_stringGmy_stringHmy_stringImy_stringJ\"\
    \n    repeated_letter\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgivzlyrf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgivzlyrf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdt4jlfjk.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdt4jlfjk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdt4jlfjk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4e4tf1rt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4e4tf1rt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4e4tf1rt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns the number of uppercase letters\
    \ in it. \nExample: \n    count_upper(\"hello\") should return 4\n    count_upper(\"\
    HELLO\") should return 5\n    count_upper(\"HellO\") should return 5\n    count_upper(\"\
    HellO!\") should return 5\n    count_upper(\"HellO!?\") should return 5\n    count_upper(\"\
    HellO!?!\") should return 5\n    count_upper(\"HellO!?!?!\") should return 5\n\
    \    count_upper(\"HellO!?!?!?!\") should return 5\n    count_upper(\"HellO!?!?!?!?!?!\"\
    ) should return 5\n    count_upper(\"HellO!?!?!?!?!?!?!?!\") should return 5\n\
    \    count_upper(\"HellO!?!?!?!?!?!?!?!?!?!\") should return 5\n    count_upper(\"\
    HellO!?!?!?!?!?!?!?!?!?!?!?!\") should return 5\n    count_upper(\"HellO!?!?!?!?!?!?!?!?!?!?!?!?!?!\"\
    ) should return 5\n    count_upper(\"HellO!?!?!?!?!?!?!?!?!?!?!?!?!?!?!\") should\
    \ return 5\n    count_upper(\"HellO!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!\") should return\
    \ 5\n    count_upper(\"HellO!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?!\") should return\
    \ 5\n    count_upper(\"HellO!?!?!?!?!?!?!?!?!?!?!?!?!?!?!?\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx0wst5cy.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx0wst5cy.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(keys(extension_strength)),\
    \ by=x -> -extension_strength[x])\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp70uco5rh.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70uco5rh.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkq3lvd_0.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkq3lvd_0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkq3lvd_0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for e in extensions_sorted\n\
    \        \n        cap = length(e)\n        sm = length(e) - cap\n        \n \
    \       if cap > sm\n            strength = cap - sm\n        else\n         \
    \   strength = sm\n        end\n        \n        if strength > 0\n          \
    \  break\n        end\n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns a string that\
    \ is the concatenation of the strings in the list separated by spaces.\nFor example,\
    \ if the list is [\"a\", \"b\", \"c\"] and the string is \"abc def\" then you\
    \ should return \"a b c def\".\nIf the list is empty or the string is empty then\
    \ you should return an empty string.\nHint: Use a for loop to iterate through\
    \ the list.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3ki_3kw.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq3ki_3kw.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper())\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower())\n            \n        end\n        \n    end\n\
    \    \n    if strength > 0\n        \n        return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted[findlast(x -> x == strength)], extensions_sorted)]\n\
    \        \n    else\n        \n        return class_name\n        \n    end\n\
    end\n</cell>\n<text>\nExercise 4\nWrite a function that takes a string and returns\
    \ a string where all occurrences of \nthe letter \"a\" have been replaced by \"\
    e\".\nExample:\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns\
    \ \"ebebe\"\n    replace(\"abca\", \"a\", \"e\") returns \"ebebe\"\n    replace(\"\
    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgry8jxgv.jl:47\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgry8jxgv.jl:47\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strengths = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strengths[extension]\
    \ = count_letters(extension) - count_letters(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strengths.values))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(sorted_extensions)\n\
    \    \n    sorted_extensions = reverse(sorted_extensions)\n    \n    sorted_extensions\
    \ = collect(sorted_extensions)\n    \n    sorted_extensions = reverse(sorted_extensions)\n\
    \    \n    sorted_extensions = collect(sorted_extensions)\n    \n    sorted_extensions\
    \ = reverse(sorted_extensions)\n    \n    sorted_extensions = collect(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiq5yh2gm.jl:107\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiq5yh2gm.jl:107\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength += 1\n\
    \            \n        elseif islower(extension)\n            \n            strength\
    \ += 2\n            \n        else\n            \n            error(\"The extension's\
    \ name should only contain uppercase and lowercase letters\")\n            \n\
    \        end\n        \n    end\n    \n    return class_name * \".\" .* extensions_sorted[end]\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the first letter of each\
    \ word capitalized. \nFor example, if the string is \"Hello World\" and you pass\
    \ in [\"Hello\", \"World\"] as arguments, then you should return \"Hello World\"\
    .\nHint: You may want to use the function split(), which splits a string into\
    \ a vector of strings by a delimiter. \nHint: You may want to use the function\
    \ map(), which applies a function to every element of a vector. \nHint: You may\
    \ want to use the function join(), which joins a vector of strings into a string.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn1q8ysgd.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn1q8ysgd.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcf6fe02j.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcf6fe02j.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcf6fe02j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpcb63gt4r.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpcb63gt4r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpcb63gt4r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    return class_name * sorted_extensions[1]\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and a list of strings and returns a string that is the concatenation\
    \ of the strings in the list separated by spaces.\nExample: \n    my_function([\"\
    a\", \"b\", \"c\"], [\"d\", \"e\", \"f\"]) should return \"a b c d e f\"\nHint:\
    \ use join.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpbfqswoih.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbfqswoih.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4tkyg4he.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4tkyg4he.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4tkyg4he.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm9ckok_h.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm9ckok_h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm9ckok_h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -2\n    \n    for extension in extensions\n        \n  \
    \      extension = extension.substring(1,length(extension))\n        \n      \
    \  if length(extension) == length(class_name)\n            \n            strength\
    \ = strength + length(extension) - length(class_name)\n            \n        elseif\
    \ length(extension) > length(class_name)\n            \n            strength =\
    \ strength + length(extension) - length(class_name)\n            \n        elseif\
    \ length(extension) < length(class_name)\n            \n            strength =\
    \ strength + length(class_name)\n            \n        end\n    end\n    \n  \
    \  if strength == -2\n        \n        error(\"The class name does not match\
    \ the extensions\")\n        \n    end\n    \n    return class_name * \".\" .*\
    \ extensions[findfirst(x -> x == extensions[strength], extensions)]\nend\n</cell>\n\
    <code language=julia-1.4>\n@test Strongest_Extension(\"Slices\", [\"SErviNGSliCes\"\
    , \"Cheese\", \"StuFfed\"]) == \"Slices.SErviNGSliCes\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and a dictionary as input, and returns\
    \ the string with the first letter of each word capitalized.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp65xa5i2_.jl:50\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp65xa5i2_.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = count_upper(extension) - count_lower(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values), by=x->x)\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\n    \n   \
    \ sorted_extensions = reverse(collect(sorted_extensions))\n    \n    sorted_extensions\
    \ = reverse(collect(sorted_extensions))\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    sorted_extensions = reverse(collect(sorted_extensions))\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkryneoas.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkryneoas.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkryneoas.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppkzm4012.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppkzm4012.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppkzm4012.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions_sorted\n\
    \        \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n        \n        if strength > 0\n            break\n   \
    \     end\n    end\n    \n    return class_name * \".\" . extensions_sorted[findfirst(x\
    \ -> x == extensions_sorted[findfirst(x -> x == extensions_sorted)][1], extensions_sorted)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of characters in a string. \nExample: \nFor StringLength(\"\
    Hello World\") the function should return 11.\nFor StringLength(\"Hello\") the\
    \ function should return 5.\nFor StringLength(\"HelloWorld\") the function should\
    \ return 10.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"\".\" .\"\
    \ at /tmp/tmpla3h8jjj.jl:41\nStacktrace:\n [1] top-level scope at /tmp/tmpla3h8jjj.jl:41\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpla3h8jjj.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppb4cvl7k.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppb4cvl7k.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppb4cvl7k.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2o917f5e.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2o917f5e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2o917f5e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpok1qzwbe.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpok1qzwbe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpok1qzwbe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,Int}()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(replace(extension, uppercase(extension), ''))\n    end\n    \n    sorted_extensions\
    \ = sort(collect(keys(extension_strength)), by=x -> -extension_strength[x])\n\
    \    \n    sorted_extensions[1]\nend\n</cell>\n<code language=julia-1.5>\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of extensions and returns the string with the extensions replaced by the extensions\
    \ strength.\nExample: \nfor Replacement_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"]) == \"my_class.AABBCC\"\nHint: use Replacement_Extension function.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3vjx2qcw.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3vjx2qcw.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength), by=x->x[1])\n\
    \    \n    Strongest_Extension = sorted_extensions[1][1]\n    \n    return class_name\
    \ * Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpph9y_wbz.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpph9y_wbz.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpthqhd48d.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpthqhd48d.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpthqhd48d.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(Int,\
    \ length(extensions))\n    for i = 1:length(extensions)\n        extension_strength[i]\
    \ = length(extensions[i]) - length(replace(extensions[i], uppercase(extensions[i]),\
    \ ''))\n    end\n    \n    idx = findfirst(extension_strength == maximum(extension_strength))\n\
    \    \n    if idx == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions[idx]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and a list of strings\
    \ as arguments and returns a string with the first letter of each string in the\
    \ list repeated as many times as the length of the string. \nExample: \n    repeat(\"\
    A\", [\"A\", \"B\", \"C\"]) returns \"AABBCC\".\n    repeat(\"A\", [\"A\", \"\
    B\"]) returns \"AAB\".\n    repeat(\"A\", [\"A\"]) returns \"A\".\n    repeat(\"\
    A\", []) returns \"A\".\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\"]) returns\
    \ \"AABBCCD\".\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\", \"E\"]) returns\
    \ \"AABBCCDE\".\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\"])\
    \ returns \"AABBCCDEF\".\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\", \"E\"\
    , \"F\", \"G\"]) returns \"AABBCCDEFG\".\n    repeat(\"A\", [\"A\", \"B\", \"\
    C\", \"D\", \"E\", \"F\", \"G\", \"H\"]) returns \"AABBCCDEFGH\".\n    repeat(\"\
    A\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\"]) returns\
    \ \"AABBCCDEFGHI\".\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\", \"E\", \"\
    F\", \"G\", \"H\", \"I\", \"J\"]) returns \"AABBCCDEFGHIJ\".\n    repeat(\"A\"\
    , [\"A\", \"B\", \"C\", \"D\", \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\"\
    ]) returns \"AABBCCDEFGHIJK\".\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\"\
    , \"E\", \"F\", \"G\", \"H\", \"I\", \"J\", \"K\", \"L\"]) returns \"AABBCCDEFGHIJKL\"\
    .\n    repeat(\"A\", [\"A\", \"B\", \"C\", \"D\", \"E\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmptwzd7ucj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptwzd7ucj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp9gzdi9s.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp9gzdi9s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp9gzdi9s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (extension_upper\
    \ - extension_lower)\n    end\n    \n    if strength == -1\n        error(\"No\
    \ extensions found\")\n    end\n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxnisumxn.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxnisumxn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxnisumxn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        extension_upper = upper(extension)\n        extension_lower = lower(extension)\n\
    \        \n        if extension_upper == extension_lower\n            \n     \
    \       strength = strength + 1\n            \n        elseif extension_upper\
    \ == extension_lower[1]\n            \n            strength = strength + 2\n \
    \           \n        elseif extension_upper == extension_lower[2]\n         \
    \   \n            strength = strength + 3\n            \n        elseif extension_upper\
    \ == extension_lower[3]\n            \n            strength = strength + 4\n \
    \           \n        elseif extension_upper == extension_lower[4]\n         \
    \   \n            strength = strength + 5\n            \n        elseif extension_upper\
    \ == extension_lower[5]\n            \n            strength = strength + 6\n \
    \           \n        elseif extension_upper == extension_lower[6]\n         \
    \   \n            strength = strength + 7\n            \n        elseif extension_upper\
    \ == extension_lower[7]\n            \n            strength = strength + 8\n \
    \           \n        elseif extension_upper == extension_lower[8]\n         \
    \   \n            strength = strength + 9\n            \n        elseif extension_upper\
    \ == extension_lower[9]\n            \n            strength = strength + 10\n\
    \            \n        elseif extension_upper == extension_lower[10]\n       \
    \     \n            strength = strength + 11\n            \n        elseif extension_upper\
    \ == extension_lower[11]\n            \n            strength = strength + 12\n\
    \            \n        elseif extension_upper == extension_lower[12]\n       \
    \     \n            strength = strength + 13\n            \n        elseif extension_upper\
    \ == extension_lower[13]\n            \n            strength = strength + 14\n\
    \            \n        elseif extension_upper == extension_lower[14]\n       \
    \     \n            strength = strength + 15\n            \n        elseif extension_upper\
    \ == extension_lower[15]\n            \n            strength = strength + 16\n\
    \            \n        elseif extension_upper == extension_lower[16]\n       \
    \     \n            strength = strength + 17\n            \n        elseif extension_upper\
    \ == extension_lower[17]\n            \n            strength = strength + 18\n\
    \            \n        elseif extension_upper == extension_lower[18]\n       \
    \     \n            strength = strength + 19\n            \n        elseif extension_upper\
    \ == extension_lower[19]\n            \n            strength = strength + 20\n\
    \            \n        elseif extension\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp94aa4pbo.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp94aa4pbo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprqz0d4lr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprqz0d4lr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprqz0d4lr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[strength]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpab4rf4t8.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpab4rf4t8.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[0]\n    \n    if\
    \ strength == 0\n        return class_name\n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq20jwgd5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq20jwgd5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions\n\
    \        \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        strength = strength + (cap - sm)\n    end\n    \n    return\
    \ class_name * \".\" . extensions[findfirst(x -> strength == -1, extensions)]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and returns a string with the first letter\
    \ capitalized.\nExample: capitalize(\"hello\") should return \"Hello\".\nHint:\
    \ use the uppercase() function\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"\".\" .\"\
    \ at /tmp/tmpomanqwfz.jl:31\nStacktrace:\n [1] top-level scope at /tmp/tmpomanqwfz.jl:31\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpomanqwfz.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension)\
    \ - length(extension_upper) - length(extension_lower))\n    end\n    \n    if\
    \ strength == -1\n        error(\"No extensions found\")\n    end\n    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    strength_extension = extensions_sorted[end]\n\
    \    \n    return class_name * \".\" .* strength_extension\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and a list of strings and returns the string with the longest\
    \ extension.\nExample: \nfor Longest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\"]) == \"my_class.Be\"\nHint: Use a for loop to iterate over the list of\
    \ strings and compare the length of the current string with the length of the\
    \ longest string so far.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnjl4kk_n.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnjl4kk_n.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    strength_extension = sorted_extensions[1]\n    \n    return\
    \ class_name * strength_extension\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD']) == 'my_class.Be'\n\
    @assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE']) == 'my_class.CC'\n\
    @assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF'])\
    \ == 'my_class.DD'\n@assert Strongest_Extension('my_class', ['AA', 'Be', 'CC',\
    \ 'DD', 'EE', 'FF', 'GG']) == 'my_class.EE'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']) == 'my_class.FF'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH',\
    \ 'II']) == 'my_class.GG'\n@assert Strongest_Extension('my_class', ['AA', 'Be',\
    \ 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ']) == 'my_class.HH'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK']) == 'my_class.II'\n\
    @assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG',\
    \ 'HH', 'II', 'JJ', 'KK', 'LL']) == 'my_class.JJ'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'])\
    \ == 'my_class.KK'\n@assert Strongest_Extension('my_class', ['AA', 'Be', 'CC',\
    \ 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN']) == 'my_class.LL'\n\
    @assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', '\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa039gxfi.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa039gxfi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0gy3gpxc.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0gy3gpxc.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvlq05s7i.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvlq05s7i.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    extensions_count_sorted = sort(extensions_count)\n    \n    extensions_count_sorted_index\
    \ = findfirst(extensions_count_sorted .== extensions_count)\n    \n    extensions_count_sorted_index\n\
    \    \n    extensions_count_sorted_index + 1\n    \n    extensions_count_sorted_index\
    \ - 1\n    \n    extensions_count_sorted_index - 2\n    \n    extensions_count_sorted_index\
    \ - 3\n    \n    extensions_count_sorted_index - 4\n    \n    extensions_count_sorted_index\
    \ - 5\n    \n    extensions_count_sorted_index - 6\n    \n    extensions_count_sorted_index\
    \ - 7\n    \n    extensions_count_sorted_index - 8\n    \n    extensions_count_sorted_index\
    \ - 9\n    \n    extensions_count_sorted_index - 10\n    \n    extensions_count_sorted_index\
    \ - 11\n    \n    extensions_count_sorted_index - 12\n    \n    extensions_count_sorted_index\
    \ - 13\n    \n    extensions_count_sorted_index - 14\n    \n    extensions_count_sorted_index\
    \ - 15\n    \n    extensions_count_sorted_index - 16\n    \n    extensions_count_sorted_index\
    \ - 17\n    \n    extensions_count_sorted_index - 18\n    \n    extensions_count_sorted_index\
    \ - 19\n    \n    extensions_count_sorted_index - 20\n    \n    extensions_count_sorted_index\
    \ - 21\n    \n    extensions_count_sorted_index - 22\n    \n    extensions_count_sorted_index\
    \ - 23\n    \n    extensions_count_sorted_index - 24\n    \n    extensions_count_sorted_index\
    \ - 25\n    \n    extensions_count_sorted_index - 26\n    \n    extensions_count_sorted_index\
    \ - 27\n    \n    extensions_count_sorted_index - 28\n    \n    extensions_count_sorted_index\
    \ - 29\n    \n    extensions_count_sorted_index - 30\n    \n    extensions_count_sorted_index\
    \ - 31\n    \n    extensions_count_sorted_index - 32\n    \n    extensions_count_sorted_index\
    \ - 33\n    \n    extensions_count_sorted_index - 34\n    \n    extensions_count_sorted_index\
    \ - 35\n    \n    extensions_count_sorted_index - 36\n    \n    extensions_count_sorted_index\
    \ - 37\n    \n    extensions_count_sorted_index - 38\n    \n    extensions_count_sorted_index\
    \ - 39\n    \n    extensions_count_sorted_index - 40\n    \n    extensions_count_sorted_index\
    \ - 41\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnexfksp1.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnexfksp1.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnexfksp1.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk7h_z6qq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk7h_z6qq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk7h_z6qq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp89ljxhmq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp89ljxhmq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp89ljxhmq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = cap - sm\n        end\n    end\n    \n    return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == strength, extensions_sorted)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptl_eabnw.jl:39\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptl_eabnw.jl:39\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf9lb7a29.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf9lb7a29.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf9lb7a29.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == \"\"\n            continue\n        \n        extension_upper\
    \ = uppercase(extension)\n        extension_lower = lowercase(extension)\n   \
    \     \n        if strength == -1 || strength > extension_upper - extension_lower\n\
    \            strength = extension_upper - extension_lower\n        end\n    end\n\
    \    \n    return class_name * \".\" .* extensions_sorted[end]\nend\n</cell>\n\
    <code language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]);\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a list of strings as arguments and returns the string with the longest common\
    \ prefix. \nFor example, if the input string is \"ABC\" and a list of strings\
    \ is [\"ABC\", \"BCD\", \"CDE\", \"DEF\", \"EFG\", \"FGH\"] then your function\
    \ should return \"ABC\".\nIf the input string is \"ABC\" and a list of strings\
    \ is [\"ABC\", \"BCD\", \"CDE\", \"DEF\", \"EFG\", \"FGH\", \"HIJ\"] then your\
    \ function should return \"ABC\".\nIf the input string is \"ABC\" and a list of\
    \ strings is [\"ABC\", \"BCD\", \"CDE\", \"DEF\", \"EFG\", \"FGH\", \"HIJ\", \"\
    JKL\"] then your function should return \"ABC\".\nIf the input string is \"ABC\"\
    \ and a list of strings is [\"ABC\", \"BCD\", \"CDE\", \"DEF\", \"EFG\", \"FGH\"\
    , \"HIJ\", \"JKL\", \"MNO\", \"PQR\", \"STU\"] then your function should return\
    \ \"ABC\".\nIf the input string is \"ABC\" and a list of strings is [\"ABC\",\
    \ \"BCD\", \"CDE\", \"DEF\", \"EFG\", \"FGH\", \"HIJ\", \"JKL\", \"MNO\", \"PQR\"\
    , \"STU\", \"VWX\"] then your function should return \"ABC\".\nIf the input string\
    \ is \"ABC\" and a list of strings is [\"ABC\", \"BCD\", \"CDE\", \"DEF\", \"\
    EFG\", \"FGH\", \"HIJ\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\"]\
    \ then your function should return \"ABC\".\nIf the input string is \"ABC\" and\
    \ a list of strings is [\"ABC\", \"BCD\", \"CDE\", \"DEF\", \"EFG\", \"FGH\",\
    \ \"HIJ\", \"JKL\", \"MNO\", \"PQR\", \"STU\", \"VWX\", \"YZ\", \"123\"] then\
    \ your function should return \"ABC\".\nIf the input string is \"ABC\" and a list\
    \ of strings is [\"ABC\", \"BCD\", \"C\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqsenet55.jl:38\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqsenet55.jl:38\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        \n        extensions_sorted\
    \ = sort(extensions)\n        \n        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \        \n        if strength == -1\n            return class_name\n        else\n\
    \            \n            extensions_sorted = sort(extensions)\n            \n\
    \            strength = extensions_sorted[1] - extensions_sorted[2]\n        \
    \    \n            if strength == -1\n                return class_name\n    \
    \        else\n                \n                extensions_sorted = sort(extensions)\n\
    \                \n                strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                \n                if strength == -1\n                    return\
    \ class_name\n                else\n                    \n                   \
    \ extensions_sorted = sort(extensions)\n                    \n               \
    \     strength = extensions_sorted[1] - extensions_sorted[2]\n               \
    \     \n                    if strength == -1\n                        return\
    \ class_name\n                    else\n                        \n           \
    \             extensions_sorted = sort(extensions)\n                        \n\
    \                        strength = extensions_sorted[1] - extensions_sorted[2]\n\
    \                        \n                        if strength == -1\n       \
    \                     return class_name\n                        else\n      \
    \                      \n                            extensions_sorted = sort(extensions)\n\
    \                            \n                            strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                            \n                     \
    \       if strength == -1\n                                return class_name\n\
    \                            else\n                                \n        \
    \                        extensions_sorted = sort(extensions)\n              \
    \                  \n                                strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                \n                 \
    \               if strength == -1\n                                    return\
    \ class_name\n                                else\n                         \
    \           \n                                    extensions_sorted = sort(extensions)\n\
    \                                    \n                                    strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \        \n                                    if strength == -1\n           \
    \                             return class_name\n                            \
    \        else\n                                        \n                    \
    \                    extensions_sorted = sort(extensions)\n                  \
    \                      \n                                        strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                        \n         \
    \                               if strength == -1\n                          \
    \                  return class_name\n                                       \
    \ else\n                                            \n                       \
    \                     extensions_sorted = sort(extensions)\n                 \
    \                           \n                                            strength\
    \ = extensions_sorted[1] - extensions_sorted[2]\n                            \
    \                \n                                            if strength ==\
    \ -1\n                                                return class_name\n    \
    \                                        else\n                              \
    \                  \n                                                extensions_sorted\
    \ = sort(extensions)\n                                                \n     \
    \                                           strength = extensions_sorted[1] -\
    \ extensions_sorted[2]\n                                                \n   \
    \                                             if strength == -1\n            \
    \                                        return class_name\n                 \
    \                               else\n                                       \
    \             \n                                                    extensions_sorted\
    \ = sort(extensions)\n                                                    \n \
    \                                                   strength = extensions_sorted[1]\
    \ - extensions_sorted[2]\n                                                   \
    \ \n                                                    if strength == -1\n  \
    \                                                      return class_name\n   \
    \                                                 else\n                     \
    \                                   \n                                       \
    \                 extensions_sorted = sort(\nusing Test\n\n@testset begin\n\n\
    candidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph1_rt2pj.jl:126\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph1_rt2pj.jl:126\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted \n   \
    \     \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension)\
    \ - length(extension_upper) - length(extension_lower))\n    end\n    \n    if\
    \ strength == -1\n        error(\"No extensions found\")\n    end\n    \n    extensions_sorted\
    \ = sort(extensions)\n    \n    extensions_sorted = extensions_sorted[1 : length(extensions_sorted)]\n\
    \    \n    extensions_sorted = [extensions_sorted[length(extensions_sorted)],\
    \ extensions_sorted[length(extensions_sorted) - 1]]\n    \n    extensions_sorted\
    \ = [extensions_sorted[1], extensions_sorted[length(extensions_sorted)]]\n   \
    \ \n    extensions_sorted = [extensions_sorted[1], extensions_sorted[length(extensions_sorted)\
    \ - 1]]\n    \n    extensions_sorted = [extensions_sorted[length(extensions_sorted)\
    \ - 1], extensions_sorted[1]]\n    \n    extensions_sorted = [extensions_sorted[1],\
    \ extensions_sorted[length(extensions_sorted) - 1]]\n    \n    extensions_sorted\
    \ = [extensions_sorted[length(extensions_sorted) - 1], extensions_sorted[1]]\n\
    \    \n    extensions_sorted = [extensions_sorted[1], extensions_sorted[length(extensions_sorted)\
    \ - 1]]\n    \n    extensions_sorted = [extensions_sorted[length(extensions_sorted)\
    \ - 1], extensions_sorted[1]]\n    \n    extensions_sorted = [extensions_sorted[1],\
    \ extensions_sorted[length(extensions_sorted) - 1]]\n    \n    extensions_sorted\
    \ = [extensions_sorted[length(extensions_sorted) - 1], extensions_sorted[1]]\n\
    \    \n    extensions_sorted = [extensions_sorted[1], extensions_sorted[length(extensions_sorted)\
    \ - 1]]\n    \n    extensions_sorted = [extensions_sorted[length(extensions_sorted)\
    \ - 1], extensions_sorted[1]]\n    \n    extensions_sorted = [extensions_sorted[1],\
    \ extensions_sorted[length(extensions_sorted) - 1]]\n    \n    extensions_sorted\
    \ = [extensions_sorted[length(extensions_sorted) - 1], extensions_sorted[1]]\n\
    \    \n    extensions_sorted = [extensions_sorted[1], extensions_sorted[length(extensions_sorted)\
    \ - 1]]\n    \n    extensions_sorted = [extensions_sorted[length(extensions_sorted)\
    \ - 1], extensions_sorted[1]]\n    \n    extensions_sorted = [extensions_sorted[1],\
    \ \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing separator in array expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpic5fmawr.jl:74\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpic5fmawr.jl:74\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted \n   \
    \     \n        if extension == \"\" \n            continue\n        \n      \
    \  extension_upper = uppercase(extension)\n        extension_lower = lowercase(extension)\n\
    \        \n        strength = strength + (length(extension) - length(extension_lower)\
    \ - length(extension_upper))\n        \n    end\n    \n    if strength == -1 \n\
    \        error(\"No extensions found\")\n    end\n    \n    return class_name\
    \ * \".\" .* extensions_sorted[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ where all vowels are replaced by \"o\" and the rest are replaced by \"u\". \n\
    Example: \n    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"\
    hello\") should return \"hOllO\"\n    vowel_case(\"hello\") should return \"hOllO\"\
    \n    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"hello\"\
    ) should return \"hOllO\"\n    vowel_case(\"hello\") should return \"hOllO\"\n\
    \    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"hello\")\
    \ should return \"hOllO\"\n    vowel_case(\"hello\") should return \"hOllO\"\n\
    \    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"hello\")\
    \ should return \"hOllO\"\n    vowel_case(\"hello\") should return \"hOllO\"\n\
    \    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"hello\")\
    \ should return \"hOllO\"\n    vowel_case(\"hello\") should return \"hOllO\"\n\
    \    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"hello\")\
    \ should return \"hOllO\"\n    vowel_case(\"hello\") should return \"hOllO\"\n\
    \    vowel_case(\"hello\") should return \"hOllO\"\n    vowel_case(\"hello\")\
    \ should return \"hOllO\"\n    vowel_case(\"hello\") should \nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfp9oc8fs.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfp9oc8fs.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        if extension_upper == extension_lower\n\
    \            \n            strength += 1\n            \n        elseif strength\
    \ > 0\n            \n            break\n            \n        else\n         \
    \   \n            strength = 0\n        end\n    end\n    \n    return class_name\
    \ * \".\" .* extensions_sorted[strength]\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Example: \n    count_chars(\"Hello World\") -> 10\n    count_chars(\"Hello World!\"\
    ) -> 11\n    count_chars(\"Hello World!!\") -> 12\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello World!!!\") -> 13\n    count_chars(\"Hello World!!!\"\
    ) -> 13\n    count_chars(\"Hello \nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8q39ldn7.jl:44\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8q39ldn7.jl:44\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpudwtewzu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpudwtewzu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpudwtewzu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.Be\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcbnk3e8d.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcbnk3e8d.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgre8bp49.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgre8bp49.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgre8bp49.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strengths = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strengths[extension]\
    \ = length(extension) - length(lowercase(extension))\n    end\n    \n    sorted_extension_strengths\
    \ = sort(collect(values(extension_strengths)), by=x->x)\n    \n    Strongest_Extension\
    \ = sorted_extension_strengths[1][1]\n    \nend\n</cell>\n<code language=julia-1.3>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns a string that is the concatenation of all\
    \ the strings in the list separated by a space.\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp07waxsrz.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp07waxsrz.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions[1]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"K\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj28lzrsh.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj28lzrsh.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns the string with the first letter of each\
    \ word capitalized.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiq1wdg1i.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiq1wdg1i.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_sum = 0\n    for extension in extensions_sorted\n        strength_sum\
    \ += length(extension) - length(extension.lowercase)\n    end\n    \n    strength_sum\
    \ == 0 ? return class_name : \n        extensions_sorted[findfirst(x -> strength_sum\
    \ == length(extensions_sorted) - 1 - length(x.lowercase), extensions_sorted)]\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns a string that is the concatenation of all\
    \ the strings in the list separated by spaces.\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa93z4n2j.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa93z4n2j.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        if strcmp(extension, class_name) == 0 \n            \n        \
    \    strength = -1 \n            \n        elseif strcmp(extension, class_name)\
    \ == 1 \n            \n            strength = 2 \n            \n        elseif\
    \ strcmp(extension, class_name) == 2 \n            \n            strength = 1\
    \ \n            \n        elseif strcmp(extension, class_name) == 3 \n       \
    \     \n            strength = 0 \n            \n        elseif strcmp(extension,\
    \ class_name) == 4 \n            \n            strength = -1 \n            \n\
    \        elseif strcmp(extension, class_name) == 5 \n            \n          \
    \  strength = 2 \n            \n        elseif strcmp(extension, class_name) ==\
    \ 6 \n            \n            strength = 1 \n            \n        elseif strcmp(extension,\
    \ class_name) == 7 \n            \n            strength = 0 \n            \n \
    \       elseif strcmp(extension, class_name) == 8 \n            \n           \
    \ strength = -1 \n            \n        elseif strcmp(extension, class_name) ==\
    \ 9 \n            \n            strength = 2 \n            \n        elseif strcmp(extension,\
    \ class_name) == 10 \n            \n            strength = 1 \n            \n\
    \        elseif strcmp(extension, class_name) == 11 \n            \n         \
    \   strength = 0 \n            \n        elseif strcmp(extension, class_name)\
    \ == 12 \n            \n            strength = -1 \n            \n        elseif\
    \ strcmp(extension, class_name) == 13 \n            \n            strength = 2\
    \ \n            \n        elseif strcmp(extension, class_name) == 14 \n      \
    \      \n            strength = 1 \n            \n        elseif strcmp(extension,\
    \ class_name) == 15 \n            \n            strength = 0 \n            \n\
    \        elseif strcmp(extension, class_name) == 16 \n            \n         \
    \   strength = -1 \n            \n        elseif strcmp(extension, class_name)\
    \ == 17 \n            \n            strength = 2 \n            \n        elseif\
    \ strcmp(extension, class_name) == 18 \n            \n            strength = 1\
    \ \n            \n        elseif strcmp(extension, class_name) == 19 \n      \
    \      \n            strength = 0 \n            \n        elseif strcmp(extension,\
    \ class_name) == 20 \n            \n            strength = -1 \n            \n\
    \        elseif strcmp(extension, class_name) == 21 \n            \n         \
    \   strength = 2 \n            \n        elseif strcmp(extension, class_name)\
    \ == 22 \n            \n            strength = 1 \n            \n        elseif\
    \ strcmp(extension, class_name) == 23 \n            \n            strength = 0\
    \ \n            \n        elseif strcmp(extension, class_name) == 24 \n      \
    \      \n            strength = \nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx78tgbt0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx78tgbt0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp7bl8h2i.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp7bl8h2i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp7bl8h2i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6cp9o47r.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6cp9o47r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6cp9o47r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_sum = 0\n    for extension in extensions_sorted\n        strength_sum\
    \ += length(extension) - length(extension.lowercase)\n    end\n    \n    strength_sum\
    \ == 0 ? return class_name : \n        extensions_sorted[findfirst(x -> strength_sum\
    \ == length(extensions_sorted) - length(x.lowercase), extensions_sorted)]\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\",\
    \ [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoh4e7s87.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoh4e7s87.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp10zkkgro.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp10zkkgro.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp10zkkgro.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = round(extensions_count / 2)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    if extensions_count == 0\n        return class_name\n\
    \    end\n    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[end]\n    \n    extensions_count = round(extensions_count\
    \ / 2)\n    \n    extensions_count = extensions_count[1]\n    \n    if extensions_count\
    \ == 0\n        return class_name\n    end\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[end]\n    \n    extensions_count\
    \ = round(extensions_count / 2)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = round(extensions_count / 2)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    if extensions_count == 0\n        return class_name\n\
    \    end\n    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[end]\n    \n    extensions_count = round(extensions_count\
    \ / 2)\n    \n    extensions_count = extensions_count[1]\n    \n    if extensions_count\
    \ == 0\n        return class_name\n    end\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[end]\n    \n    extensions_count\
    \ = round(extensions_count / 2)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = round(extensions_count / 2)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    if extensions_count == 0\n        return class_name\n\
    \    end\n    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[end]\n    \n    extensions_count = round(extensions_count\
    \ / 2)\n    \n    extensions_count = extensions_count[1]\n    \n    if extensions_count\
    \ == 0\n        return class_name\n    end\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[end]\n    \n    \nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp7m6odbg.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp7m6odbg.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp7m6odbg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    sorted_extensions[end]\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns a string\
    \ that is the concatenation of all the strings in the list separated by a single\
    \ space.\nExample: \n    Concatenate_Strings('my_class', ['AA', 'Be', 'CC']) ==\
    \ 'my_class AA Be CC'\nHint: Use a for loop to iterate over the list of strings.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4xwbosfs.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4xwbosfs.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted \n   \
    \     \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ ''))\n        sm = length(replace(extension, lowercase(extension), ''))\n  \
    \      \n        if cap > sm \n            strength = cap - sm\n            break\n\
    \        end\n    end\n    \n    return class_name * \".\" .* extensions_sorted[findfirst(x\
    \ -> x == strength, extensions_sorted)]\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]);\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of characters in\
    \ a string. \nFor example \"abc\" has 3 characters. \nFor a string with multiple\
    \ characters, return the number of characters in the first one.\nFor an empty\
    \ string return 0.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm1ur1wzl.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1ur1wzl.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgkg53d2r.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgkg53d2r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgkg53d2r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = 0.0\n    \n    for extension in extensions_sorted\n\
    \        strength_of_extensions += length(extension) - length(lowercase(extension))\n\
    \    end\n    \n    strength_of_extensions = strength_of_extensions / length(extensions)\n\
    \    \n    \n    if strength_of_extensions == 0.0\n        return class_name\n\
    \    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpabw49zbv.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpabw49zbv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpabw49zbv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n\
    \    \nend\n</cell>\n<code language=julia-1.0>\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes as input a class name and a vector of extensions,\
    \ and returns the name of the class with the strongest extension.\nFor example,\
    \ if you are given \"my_class\" as the class and a list of the\nextensions: ['AA',\
    \ 'Be', 'CC'] then you should\nreturn 'my_class.AA' since 'AA' is the strongest\
    \ extension (its strength is 1).\nHint: Use Strongest_Extension defined above.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpy35m08kb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy35m08kb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extensions = 0.0\n    \n    for extension in extensions_sorted\n\
    \        \n        strength_of_extensions += length(extension) - length(translate(extension,\
    \ upper(extension), lower))\n        \n    end\n    \n    strength_of_extensions\
    \ /= length(extensions)\n    \n    \n    if strength_of_extensions == 0.0\n  \
    \      return class_name\n    end\n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxaid0_wb.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxaid0_wb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxaid0_wb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd2nixvt9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd2nixvt9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd2nixvt9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0tt68j_8.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0tt68j_8.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7pqop9tf.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7pqop9tf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7pqop9tf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ + \".\" + extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@assert\
    \ Str\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe__d3dzc.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe__d3dzc.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default value\n    \n    for extension in extensions_sorted\n\
    \        \n        cap = length(extension) - length(replace(extension, uppercase(extension),\
    \ \"\"))\n        sm = length(replace(extension, lowercase(extension), \"\"))\n\
    \        \n        if cap > sm\n            strength = cap - sm\n        elseif\
    \ sm > cap\n            strength = sm - cap\n        else\n            strength\
    \ = 0\n        end\n        \n        if strength > 0\n            break\n   \
    \     end\n    end\n    \n    return class_name * \".\" . extensions_sorted[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and returns the string with all its letters capitalized. \nExample:\
    \ \n    capitalize(\"my_string\") returns \"MyString\"\n    capitalize(\"my_string\"\
    , true) returns \"MyString\"\n    capitalize(\"my_string\", false) returns \"\
    my_string\"\nHint: Use replace! and uppercase!\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: space before \".\" not allowed in \"\".\" .\"\
    \ at /tmp/tmps57gcprn.jl:41\nStacktrace:\n [1] top-level scope at /tmp/tmps57gcprn.jl:41\n\
    \ [2] include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps57gcprn.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_dtnj4ve.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_dtnj4ve.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_dtnj4ve.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp14s58dvz.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp14s58dvz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp14s58dvz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpk1istk41.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpk1istk41.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpk1istk41.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp214doh7z.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp214doh7z.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp214doh7z.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp21nj9g7_.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp21nj9g7_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp21nj9g7_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 # default strength\n    \n    for extension in extensions_sorted\n\
    \        \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        strength = strength + (length(extension)\
    \ - length(extension_upper) - length(extension_lower))\n    end\n    \n    if\
    \ strength > 0\n        \n        Strongest_Extension = class_name * \".\" \n\
    \        \n        for extension in extensions_sorted\n            \n        \
    \    extension_upper = uppercase(extension)\n            extension_lower = lowercase(extension)\n\
    \            \n            Strongest_Extension = Strongest_Extension \n      \
    \          * extension_upper\n                * extension_lower\n            \n\
    \        end\n        \n        return Strongest_Extension\n    end\n    \n  \
    \  return class_name\nend\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"*\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddh8fyso.jl:41\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpddh8fyso.jl:41\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    \n    if strength_of_extension == 0 \n        return class_name\n \
    \   else\n        \n        \n        \n        \n        \n        \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpzri_7hn5.jl:24\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzri_7hn5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzri_7hn5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3j3mn3cx.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3j3mn3cx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3j3mn3cx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgaf0ogj3.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgaf0ogj3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgaf0ogj3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvjm10jmy.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvjm10jmy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvjm10jmy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn9uhsuum.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn9uhsuum.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn9uhsuum.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphmj3fmsr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphmj3fmsr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphmj3fmsr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    sorted_extensions[end]\
    \ <= 0 ? \n        error(\"There are no extensions with the same strength\") :\
    \ \n        Strongest_Extension(class_name, sorted_extensions)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes as input a class name and a vector\
    \ of extensions and returns the name of the class with the strongest extension.\n\
    For example, if you are given \"Slices\" as the class and a list of the\nextensions:\
    \ ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\nreturn 'Slices.SErviNGSliCes'\
    \ since 'SErviNGSliCes' is the strongest extension \n(its strength is -1).\nHint:\
    \ Use a dictionary to store the extensions and their strengths.\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyg970ppl.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyg970ppl.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp07nidii4.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp07nidii4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp07nidii4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp3_hzxnvr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp3_hzxnvr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp3_hzxnvr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpz1e63o7e.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpz1e63o7e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpz1e63o7e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdva_2exr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdva_2exr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdva_2exr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == \"\"\n            continue\n        \n        extension_upper\
    \ = uppercase(extension)\n        extension_lower = lowercase(extension)\n   \
    \     \n        if extension_upper == extension_lower\n            strength +=\
    \ 1\n        else\n            strength = extension_upper - extension_lower\n\
    \        end\n    end\n    \n    if strength == -1\n        error(\"No extensions\
    \ found\")\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"for\" at /tmp/tmp9gmrm36i.jl:23\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9gmrm36i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9gmrm36i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[end]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(extensions_count)\n\
    \    \n    extensions_count = extensions_count[1]\n    \n    extensions_count\
    \ = sort(extensions_count)\n    \n    extensions_count = extensions_count[1]\n\
    \    \n    extensions_count = sort(extensions_count)\n    \n    extensions_count\
    \ = extensions_count[1]\n    \n    extensions_count = sort(\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi22hz9on.jl:119\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi22hz9on.jl:119\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe_24rnfe.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe_24rnfe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe_24rnfe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and a list of strings as arguments and returns\
    \ the string with the longest common prefix. \nFor example, if the input string\
    \ is \"abcde\" and a list of strings is [\"ab\", \"bc\", \"cd\", \"de\"], then\
    \ your function should return \"ab\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyv614n2f.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyv614n2f.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = zeros(Int,\
    \ length(extensions))\n    for e in extensions\n        extension_strength[findall(e\
    \ == class_name)[1]] = length(findall(e == class_name)) - length(findall(e ==\
    \ class_name)[1])\n    end\n    \n    extension_strength = sort(extension_strength)\n\
    \    \n    Strongest_Extension = extensions[extension_strength[1]]\n    \n   \
    \ for i = 2:length(extension_strength)\n        if extension_strength[i] > extension_strength[i-1]\n\
    \            Strongest_Extension = extensions[extension_strength[i]]\n       \
    \     break\n        end\n    end\n    \n    return Strongest_Extension\nend\n\
    </cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and a list of strings as arguments and returns the string with the\
    \ first letter of each string replaced by the first letter of the string in the\
    \ list with the same index. \nExample: \nFor Str_Replace(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\"]) == \"my_class.AA\"\nFor Str_Replace(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\"]) == \"my_class.AA\"\nFor Str_Replace(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.AA\"\nFor Str_Replace(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.AA\"\
    \nFor Str_Replace(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"\
    , \"GG\"]) == \"my_class.AA\"\nFor Str_Replace(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.AA\"\nFor Str_Replace(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\"]) == \"my_class.AA\"\nFor Str_Replace(\"my_class\", [\"AA\", \"Be\", \"CC\"\
    , \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.AA\"\n\
    For Str_Replace(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"\
    , \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.AA\"\nFor Str_Replace(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.AA\"\nFor Str_Replace(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpddbtbaqe.jl:37\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpddbtbaqe.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension.lower())\n    end\n    \n    sorted_extensions = sort(collect(extension_strength),\
    \ by=x->-x)\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\
    \n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2uwaqhll.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2uwaqhll.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2uwaqhll.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkwwxt8xr.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkwwxt8xr.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkwwxt8xr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0_b9a7ri.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0_b9a7ri.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0_b9a7ri.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        cap = length(extension) - length(extension.lowercase)\n       \
    \ sm = length(extension.lowercase) - length(extension)\n        \n        if cap\
    \ > sm\n            strength = cap - sm\n        elseif sm > cap\n           \
    \ strength = sm - cap\n        else\n            strength = 0\n        end\n \
    \       \n        if strength > 0\n            break\n        end\n    end\n \
    \   \n    return class_name * \".\" .* extensions_sorted[strength]\nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a string and a list of strings as arguments and returns a string\
    \ that is the concatenation of all the strings in the list separated by a space.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvxkba_5d.jl:43\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvxkba_5d.jl:43\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp260d2n_l.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp260d2n_l.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp260d2n_l.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @time Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]);\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes as input a class name and a vector\
    \ of extensions and returns the name of the class with the strongest extension.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaoc59w87.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaoc59w87.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpe3kg0fg6.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpe3kg0fg6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpe3kg0fg6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension)\n            \n        elseif islower(extension)\n\
    \            \n            strength = strength + length(extension) - length(extension)\n\
    \            \n        else\n            \n            error(\"The extension is\
    \ not an uppercase or lowercase letter\")\n            \n        end\n    end\n\
    \    \n    if strength > 0\n        \n        return class_name * \".\" .* extensions_sorted[end]\n\
    \        \n    else\n        \n        error(\"There are no extensions with the\
    \ same strength\")\n        \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a string and returns the number of uppercase letters in\
    \ the string.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1hzon49r.jl:50\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1hzon49r.jl:50\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for ext in extensions \n        \n      \
    \  cap = length(ext) - length(replace(ext, upper(ext), \"\"))\n        sm = length(replace(ext,\
    \ lowerCase(ext), \"\"))\n        \n        if cap > sm \n            strength\
    \ = cap - sm \n            break\n        end\n    end\n    \n    return class_name\
    \ * \".\" .* extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t\
    @test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnide_l55.jl:36\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnide_l55.jl:36\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if isupper(extension)\n            \n            strength = strength\
    \ + length(extension) - length(extension.upper)\n            \n        elseif\
    \ islower(extension)\n            \n            strength = strength + length(extension)\
    \ - length(extension.lower)\n            \n        end\n        \n    end\n  \
    \  \n    if strength == -1\n        \n        error(\"No extension has the strongest\
    \ strength.\")\n        \n    elseif strength > 0\n        \n        return class_name\
    \ * \".\" .* extensions_sorted[end]\n        \n    else\n        \n        return\
    \ class_name * \".\" .* extensions_sorted[1]\n        \n    end\n    \nend\n</cell>\n\
    <code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpimuncs9q.jl:52\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpimuncs9q.jl:52\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6vgmtatv.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6vgmtatv.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp74aym6rd.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp74aym6rd.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp74aym6rd.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    sorted_extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns the string with\
    \ the longest extension.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbe4i5fcp.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbe4i5fcp.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp0s5mse4t.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp0s5mse4t.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp0s5mse4t.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        \n        strength_of_extension\
    \ = extensions_sorted[1] - extensions_sorted[0]\n        \n    end\n    \n   \
    \ return class_name + \".\" + extensions_sorted[strength_of_extension]\nend\n\
    </cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and a list of strings as arguments and returns\
    \ a string that is the concatenation of all the strings in the list separated\
    \ by spaces.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojx4lnc5.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpojx4lnc5.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu3a7clsq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu3a7clsq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu3a7clsq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn62b6wz0.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn62b6wz0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn62b6wz0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8pss7f9i.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8pss7f9i.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8pss7f9i.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxw552p3s.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxw552p3s.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxw552p3s.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_060ula5.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_060ula5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_060ula5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprrqcf9kl.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprrqcf9kl.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprrqcf9kl.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpr94blgbw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpr94blgbw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpr94blgbw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9_xhgtl7.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9_xhgtl7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9_xhgtl7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjj7v74bu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjj7v74bu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjj7v74bu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmphzql7d8u.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmphzql7d8u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmphzql7d8u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2ieglt8h.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2ieglt8h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2ieglt8h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of characters in a string. \nExample:\
    \ \n    count_characters('Hello World') should return 13\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello World!') should return 10\n    count_characters('Hello\
    \ World!') should return 10\n    count_characters('Hello World!') should return\
    \ 10\n    count_characters('Hello \nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_42886m8.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_42886m8.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6rc8kopt.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6rc8kopt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6rc8kopt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = class_name \n    for extension in sorted_extensions\
    \ \n        if extension_strength[Strongest_Extension] == 0 \n            break\n\
    \        else \n            Strongest_Extension = Strongest_Extension .. \".\"\
    \ .. extension \n        end\n    end\n    \n    return Strongest_Extension\n\
    end\n</cell>\n<code language=julia-1.0>\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"])\
    \ == \"my_class.FF\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"\
    , \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"..\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpn4hcv1ih.jl:31\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4hcv1ih.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfn97_mol.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfn97_mol.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfn97_mol.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values),\
    \ by=x->x)\n    \n    sorted_extensions = reverse(collect(sorted_extensions))\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1iodqrcq.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1iodqrcq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1iodqrcq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions_sorted\n    \
    \    \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        if extension_upper == extension_lower\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[1:end-1]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[2:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[3:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[4:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[5:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[6:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[7:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[8:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[9:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[10:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[11:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[12:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[13:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[14:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[15:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[16:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[17:end]\n            \n            strength\
    \ = strength + 1 \n            \n        elseif extension_upper == extension_lower[18:end]\n\
    \            \n            strength = strength + 1 \n            \n        elseif\
    \ extension_upper == extension_lower[\nusing Test\n\n@testset begin\n\ncandidate\
    \ = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_56g7u4.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_56g7u4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpkujvvg28.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpkujvvg28.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpkujvvg28.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpqxz_hf6q.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpqxz_hf6q.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpqxz_hf6q.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp82_b53mb.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp82_b53mb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp82_b53mb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdstftrmw.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdstftrmw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdstftrmw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfgigjmd9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfgigjmd9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfgigjmd9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgftxulai.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgftxulai.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgftxulai.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp2sutsb30.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp2sutsb30.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp2sutsb30.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(extension_strength.values))\n\
    \    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n    \n    return\
    \ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD']) == 'my_class.Be'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE']) == 'my_class.CC'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF']) == 'my_class.DD'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG']) == 'my_class.EE'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH']) == 'my_class.FF'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH',\
    \ 'II']) == 'my_class.GG'\n@assert Strongest_Extension('my_class', ['AA', 'Be',\
    \ 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ']) == 'my_class.HH'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK']) == 'my_class.II'\n\
    @assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG',\
    \ 'HH', 'II', 'JJ', 'KK', 'LL']) == 'my_class.JJ'\n@assert Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC', 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM'])\
    \ == 'my_class.KK'\n@assert Strongest_Extension('my_class', ['AA', 'Be', 'CC',\
    \ 'DD', 'EE', 'FF', 'GG', 'HH', 'II', 'JJ', 'KK', 'LL', 'MM', 'NN']) == 'my_class.LL'\n\
    @assert Strongest_Extension('my_class', ['AA', 'Be', 'CC', 'DD\nusing Test\n\n\
    @testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\"\
    , [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgvk669k9.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgvk669k9.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp510xyla9.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp510xyla9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp510xyla9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_count = length(extensions)\n\
    \    \n    if extensions_count == 0\n        return class_name\n    end\n    \n\
    \    extensions_count = sort(extensions_count)\n    \n    strength = extensions_count[1]\n\
    \    \n    for extension in extensions[2:end]\n        \n        extension_strength\
    \ = length(extension) - length(extension.lowercase)\n        \n        if extension_strength\
    \ > strength\n            strength = extension_strength\n        end\n    end\n\
    \    \n    return class_name + \".\" + extensions[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and a list\
    \ of strings as arguments and returns a string that is the concatenation of all\
    \ the strings in the list separated by spaces.\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0m8cjg_l.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0m8cjg_l.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lowercase)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    sorted_extensions[end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@time Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]);\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a dictionary as arguments and returns the string with the\
    \ first letter of each word capitalized. \nExample: \n    capitalize_first_letter(\"\
    my_class\", {\"AA\", \"Be\", \"CC\"}) == \"MyClass\"\nHint: Use split! and capitalize!\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpshasbv3k.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpshasbv3k.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = count_upper(extension) - count_lower(extension)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    strength_extension = sorted_extensions[1]\n\
    \    \n    return class_name + \".\" + strength_extension\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a string and a list of strings as arguments and returns a string that\
    \ is the concatenation of all the strings in the list separated by spaces.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp81iczk45.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp81iczk45.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_sum = 0\n    \n    for extension in extensions_sorted\n  \
    \      strength_sum += length(extension) - length(extension.lowercase)\n    end\n\
    \    \n    strength_sum == 0 ? return class_name : \n        length(class_name)\
    \ - length(class_name.lowercase) + strength_sum\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the number of characters in the given string.\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqtolurxk.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqtolurxk.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = count_letters(extension) - count_letters(class_name)\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength), by=x->x[1])\n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppbngo0cp.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppbngo0cp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppbngo0cp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpscsdf_st.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpscsdf_st.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpscsdf_st.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        if extension == class_name\n            \n            strength =\
    \ length(extension)\n            \n            break\n        end\n    end\n \
    \   \n    if strength == -1\n        \n        error(\"The class name is not in\
    \ the list of extensions.\")\n    end\n    \n    return class_name * \".\" .*\
    \ extensions_sorted[end]\nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function called Sort that takes as input a vector of strings and\
    \ returns a sorted vector of strings.\nThe function should sort the strings in\
    \ alphabetical order and return a sorted vector of strings.\nThe function should\
    \ raise an error if the input vector is empty.\nExample: \n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([]) == []\n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"\
    a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\
    \    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"\
    a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\
    \    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"\
    a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\
    \    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"\
    a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\
    \    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"\
    a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n\
    \    sort([\"a\", \"b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"\
    b\", \"c\"]) == [\"a\", \"b\", \"c\"]\n    sort([\"a\", \"b\", \"c\"]) == [\"\
    a\", \"b\", \"c\"]\n    sort([\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcjor_52r.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcjor_52r.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprg_e0ncz.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprg_e0ncz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprg_e0ncz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp09n6joxk.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp09n6joxk.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp09n6joxk.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpx0yvs5dz.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpx0yvs5dz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpx0yvs5dz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = extensions_sorted[1] - extensions_sorted[2]\n    \n    if\
    \ strength == -1\n        return class_name\n    else\n        return class_name\
    \ .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"])\
    \ == \"my_class.Be\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@assert Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@assert Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\", \"OO\"]) == \"my_class.MM\"\n@\n\
    using Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"\
    Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb8c_sret.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb8c_sret.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength = -1\n    \n    for extension in extensions_sorted\n     \
    \   \n        extension_upper = uppercase(extension)\n        extension_lower\
    \ = lowercase(extension)\n        \n        if strength == -1\n            strength\
    \ = extension_upper - extension_lower\n        else\n            strength = strength\
    \ - extension_upper - extension_lower\n        end\n    end\n    \n    return\
    \ class_name * \".\" .* extensions_sorted[end]\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) ==\
    \ \"my_class.Be\"\n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"\
    CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\"]) == \"my_class.DD\"\n@test\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\"]) == \"my_class.EE\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\
    \n@test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\"]) == \"my_class.GG\"\n@test Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"\
    II\", \"JJ\"]) == \"my_class.HH\"\n@test Strongest_Extension(\"my_class\", [\"\
    AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\",\
    \ \"KK\"]) == \"my_class.II\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\"]) == \"my_class.JJ\"\n@test Strongest_Extension(\"my_class\", [\"AA\"\
    , \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"\
    , \"LL\", \"MM\"]) == \"my_class.KK\"\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"\
    JJ\", \"KK\", \"LL\", \"MM\", \"NN\"]) == \"my_class.LL\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy_hrabl3.jl:37\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy_hrabl3.jl:37\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(extension.lower())\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    sorted_extensions[end]\
    \ \nend\n</cell>\n<code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw53u0zw_.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw53u0zw_.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbd5cugwn.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbd5cugwn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbd5cugwn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps9ng4dfc.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps9ng4dfc.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps9ng4dfc.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict()\n\
    \    for extension in extensions\n        extension_strength[extension] = length(extension)\
    \ - length(extension.lowercase)\n    end\n    \n    sorted_extensions = sort(collect(extension_strength),\
    \ by=x->-x)\n    \n    Strongest_Extension = sorted_extensions[1]\n    \n    return\
    \ class_name .+ Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 2\nWrite a function that returns the number of times\
    \ a substring appears in a string.\nFor example, if the string is \"abcabcbb\"\
    , the function should return 3.\nIf the string is \"abcabcbb\", the function should\
    \ return 0.\nIf the string is \"abcabcbb\", the function should return 1.\nIf\
    \ the string is \"abcabcbb\", the function should return 2.\nIf the string is\
    \ \"abcabcbb\", the function should return 3.\nIf the string is \"abcabcbb\",\
    \ the function should return 4.\nIf the string is \"abcabcbb\", the function should\
    \ return 5.\nIf the string is \"abcabcbb\", the function should return 6.\nIf\
    \ the string is \"abcabcbb\", the function should return 7.\nIf the string is\
    \ \"abcabcbb\", the function should return 8.\nIf the string is \"abcabcbb\",\
    \ the function should return 9.\nIf the string is \"abcabcbb\", the function should\
    \ return 10.\nIf the string is \"abcabcbb\", the function should return 11.\n\
    If the string is \"abcabcbb\", the function should return 12.\nIf the string is\
    \ \"abcabcbb\", the function should return 13.\nIf the string is \"abcabcbb\"\
    , the function should return 14.\nIf the string is \"abcabcbb\", the function\
    \ should return 15.\nIf the string is \"abcabcbb\", the function should return\
    \ 16.\nIf the string is \"abcabcbb\", the function should return 17.\nIf the string\
    \ is \"abcabcbb\", the function should return 18.\nIf the string is \"abcabcbb\"\
    , the function should return 19.\nIf the string is \"abcabcbb\", the function\
    \ should return 20.\nIf the string is \"abcabcbb\", the function should return\
    \ 21.\nIf the string is \"abcabcbb\", the function should return 22.\nIf the string\
    \ is \"abcabcbb\", the function should return 23.\nIf the string is \"abcabcbb\"\
    , the function should return 24.\nIf the string is \"abcabcbb\", the function\
    \ should return 25.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4xwpkjbt.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4xwpkjbt.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa4v7ku3z.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa4v7ku3z.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = extensions.length\n    \n    \n    for e in extensions\n\
    \        if e == extensions[end]\n            strength = strength - 1\n      \
    \  else\n            strength = strength + 1\n        end\n    end\n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"\
    tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"\
    Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp43k1pf11.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp43k1pf11.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp43k1pf11.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpzn76sok0.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpzn76sok0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpzn76sok0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions = sort(extensions)\n\
    \    \n    strength = -1 \n    \n    for extension in extensions \n        \n\
    \        if extension.uppercase == class_name.uppercase \n            \n     \
    \       strength = strength + 1 \n            \n        else \n            \n\
    \            strength = strength - 1 \n            \n            break\n     \
    \       \n    end\n    \n    if strength == 0 \n        \n        return class_name\n\
    \        \n    else \n        \n        return class_name.uppercase * strength\
    \ + extensions[end]\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.Be'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.CC'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.CC'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.Be'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.CC'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.Be'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.CC'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.Be'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.CC'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.Be'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.AA'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.CC'\n@assert\
    \ Strongest_Extension('my_class', ['AA', 'Be', 'CC']) == 'my_class.Be'\n@assert\
    \ Stron\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\t\
    @test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt_pixhmm.jl:46\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt_pixhmm.jl:46\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmps4sybnuu.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmps4sybnuu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmps4sybnuu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    \n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(extension.lower())\n    end\n    \n    sorted_extensions\
    \ = sort(collect(extension_strength.values))\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp94n_7h3m.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp94n_7h3m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp94n_7h3m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjo64r8jb.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjo64r8jb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjo64r8jb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_of_extension = extensions_sorted[1] - extensions_sorted[2]\n\
    \    \n    if strength_of_extension == -1\n        return class_name\n    else\n\
    \        return class_name .. \".\" .. extensions_sorted[1]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\"]) == \"my_class.AA\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\"]) == \"my_class.Be\"\n@assert Strongest_Extension(\"\
    my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\"]) == \"my_class.CC\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\"]) == \"my_class.DD\"\n@assert Strongest_Extension(\"my_class\", [\"AA\",\
    \ \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\"]) == \"my_class.EE\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\"]) == \"my_class.FF\"\n@assert Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\"]) ==\
    \ \"my_class.GG\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\",\
    \ \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\"]) == \"my_class.HH\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\"]) == \"my_class.II\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"]) == \"my_class.JJ\"\n@assert\
    \ Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"EE\", \"\
    FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\"]) == \"my_class.KK\"\
    \n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\", \"DD\", \"\
    EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\", \"MM\", \"NN\"])\
    \ == \"my_class.LL\"\n@assert Strongest_Extension(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\", \"DD\", \"EE\", \"FF\", \"GG\", \"HH\", \"II\", \"JJ\", \"KK\", \"LL\"\
    , \"MM\", \"NN\", \"OO\"]) == \"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"\
    eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\", [\"nani\"\
    , \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"\
    __YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"\
    ]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\"\
    , \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\",\
    \ \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"\
    HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\"\
    )\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) ==\
    \ \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\"\
    )\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaof3x8kt.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaof3x8kt.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions \n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), ''))\n\
    \    end\n    \n    sorted_extensions = sort(collect(keys(extension_strength)),\
    \ by=x -> -extension_strength[x])\n    \n    Strongest_Extension = extensions[sorted_extensions[1]]\n\
    \    \n    return Strongest_Extension\nend\n</cell>\n<code language=julia-1.5>\n\
    @test Strongest_Extension(\"my_class\", [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes as input a class name\
    \ and a list of the extensions, and returns the name of the class with the strongest\
    \ extension.\nExample: \nfor Strongest_Extension('my_class', ['AA', 'Be', 'CC'])\
    \ == 'my_class.AA'\nHint: use Strongest_Extension\nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: invalid character literal\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpax9e12sd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpax9e12sd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extension_strength = Dict{String,\
    \ Int}()\n    for extension in extensions\n        extension_strength[extension]\
    \ = length(extension) - length(replace(extension, uppercase(extension), \"\"))\n\
    \    end\n    \n    sorted_extensions = sort(collect(keys(extension_strength)),\
    \ by=x -> extension_strength[x])\n    \n    Strongest_Extension = sorted_extensions[1]\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\n@test Strongest_Extension(\"my_class\"\
    , [\"AA\", \"Be\", \"CC\"]) == \"my_class.AA\"\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a string and a list of strings as arguments and returns\
    \ a string that is the concatenation of all the strings in the list separated\
    \ by spaces.\nExample: \n    Concatenate_Strings(\"my_class\", [\"AA\", \"Be\"\
    , \"CC\"]) should return \"my_class AA Be CC\"\nHint: Use a for loop to iterate\
    \ over the list.\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpon2w0pcu.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpon2w0pcu.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpf5wyaak3.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpf5wyaak3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpf5wyaak3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1gmgt8a0.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1gmgt8a0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1gmgt8a0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    extensions_sorted = sort(extensions)\n\
    \    \n    strength_sum = 0\n    for extension in extensions_sorted\n        strength_sum\
    \ += length(extension) - length(extension.upper)\n    end\n    \n    strength_sum\
    \ == 0 ? return class_name : \n        extensions_sorted[findfirst(x -> strength_sum\
    \ == length(extensions_sorted) - length(x.upper), extensions_sorted)]\nend\n</cell>\n\
    <code language=julia-1.5>\n@time Strongest_Extension(\"my_class\", [\"AA\", \"\
    Be\", \"CC\"]);\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and a list of strings as arguments and returns a string with the first letter\
    \ of each string in the list concatenated with the first letter of the strings\
    \ in the list concatenated with the second letter of the strings in the list concatenated\
    \ with the third letter of the strings in the list concatenated with the fourth\
    \ letter of the strings in the list concatenated with the fifth letter of the\
    \ strings in the list concatenated with the sixth letter of the strings in the\
    \ list concatenated with the seventh letter of the strings in the list concatenated\
    \ with the eighth letter of the strings in the list concatenated with the ninth\
    \ letter of the strings in the list concatenated with the tenth letter of the\
    \ strings in the list concatenated with the eleventh letter of the strings in\
    \ the list concatenated with the twelfth letter of the strings in the list concatenated\
    \ with the thirteenth letter of the strings in the list concatenated with the\
    \ fourteenth letter of the strings in the list concatenated with the fifteenth\
    \ letter of the strings in the list concatenated with the sixteenth letter of\
    \ the strings in the list concatenated with the seventeenth letter of the strings\
    \ in the list concatenated with the eighteenth letter of the strings in the list\
    \ concatenated with the nineteenth letter of the strings in the list concatenated\
    \ with the twentieth letter of the strings in the list concatenated with the thirtieth\
    \ letter of the strings in the list concatenated with the fourtieth letter of\
    \ the strings in the list concatenated with the fiftieth letter of the strings\
    \ in the list concatenated with the sixtieth letter of the strings in the list\
    \ concatenated with the seventieth letter of the strings in the list concatenated\
    \ with the eightieth letter of the strings in the list concatenated with the ninetieth\
    \ letter of the strings in the list concatenated with the twentyfirst letter of\
    \ the strings in the list concatenated with the twentysecond letter of the strings\
    \ in the list concatenated with the twentythird letter of the strings in the list\
    \ concatenated with the twentyfourth letter of the strings in the list concatenated\
    \ with the twentyfifth letter of the strings in the list concatenated with the\
    \ twentysixth letter of the strings in the list \nusing Test\n\n@testset begin\n\
    \ncandidate = Strongest_Extension;\n\t@test(candidate(\"Watashi\", [\"tEN\", \"\
    niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\")\n\t@test(candidate(\"Boku123\"\
    , [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"]) == \"Boku123.YEs.WeCaNe\"\
    )\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\", \"nothing\", \"zeR00\"\
    , \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\")\n\t@test(candidate(\"\
    K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\")\n\t@test(candidate(\"\
    __HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"__HAHA.123\")\n\t@test(candidate(\"\
    YameRore\", [\"HhAas\", \"okIWILL123\", \"WorkOut\", \"Fails\", \"-_-\"]) == \"\
    YameRore.okIWILL123\")\n\t@test(candidate(\"finNNalLLly\", [\"Die\", \"NowW\"\
    , \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\t@test(candidate(\"_\", [\"Bb\"\
    , \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"Sp\", [\"671235\", \"Bb\"]) ==\
    \ \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: line break in \":\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4n_120l8.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4n_120l8.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You will be given the name of a class (a string) and a list of extensions.\n\
    \    The extensions are to be used to load additional classes to the class. The\n\
    \    strength of the extension is as follows: Let CAP be the number of the uppercase\n\
    \    letters in the extension's name, and let SM be the number of lowercase letters\
    \ \n    in the extension's name, the strength is given by the fraction CAP - SM.\
    \ \n    You should find the strongest extension and return a string in this \n\
    \    format: ClassName.StrongestExtensionName.\n    If there are two or more extensions\
    \ with the same strength, you should\n    choose the one that comes first in the\
    \ list.\n    For example, if you are given \"Slices\" as the class and a list\
    \ of the\n    extensions: ['SErviNGSliCes', 'Cheese', 'StuFfed'] then you should\n\
    \    return 'Slices.SErviNGSliCes' since 'SErviNGSliCes' is the strongest extension\
    \ \n    (its strength is -1).\n    Example:\n    for Strongest_Extension('my_class',\
    \ ['AA', 'Be', 'CC']) == 'my_class.AA'\n    \"\"\"\nfunction Strongest_Extension(class_name::String,\
    \ extensions::Vector{String})::String \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = Strongest_Extension;\n\
    \t@test(candidate(\"Watashi\", [\"tEN\", \"niNE\", \"eIGHt8OKe\"]) == \"Watashi.eIGHt8OKe\"\
    )\n\t@test(candidate(\"Boku123\", [\"nani\", \"NazeDa\", \"YEs.WeCaNe\", \"32145tggg\"\
    ]) == \"Boku123.YEs.WeCaNe\")\n\t@test(candidate(\"__YESIMHERE\", [\"t\", \"eMptY\"\
    , \"nothing\", \"zeR00\", \"NuLl__\", \"123NoooneB321\"]) == \"__YESIMHERE.NuLl__\"\
    )\n\t@test(candidate(\"K\", [\"Ta\", \"TAR\", \"t234An\", \"cosSo\"]) == \"K.TAR\"\
    )\n\t@test(candidate(\"__HAHA\", [\"Tab\", \"123\", \"781345\", \"-_-\"]) == \"\
    __HAHA.123\")\n\t@test(candidate(\"YameRore\", [\"HhAas\", \"okIWILL123\", \"\
    WorkOut\", \"Fails\", \"-_-\"]) == \"YameRore.okIWILL123\")\n\t@test(candidate(\"\
    finNNalLLly\", [\"Die\", \"NowW\", \"Wow\", \"WoW\"]) == \"finNNalLLly.WoW\")\n\
    \t@test(candidate(\"_\", [\"Bb\", \"91245\"]) == \"_.Bb\")\n\t@test(candidate(\"\
    Sp\", [\"671235\", \"Bb\"]) == \"Sp.671235\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5k23av8c.jl:17\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5k23av8c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5k23av8c.jl:1\n"
  exit_code: 1
  status: Exception
