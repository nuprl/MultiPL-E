name: HumanEval_84_solve
language: julia
prompt: "\"\"\"Given a positive integer N, return the total sum of its digits in binary.\n\
  \    \n    Example\n        For N = 1000, the sum of digits will be 1 the output\
  \ should be \"1\".\n        For N = 150, the sum of digits will be 6 the output\
  \ should be \"110\".\n        For N = 147, the sum of digits will be 12 the output\
  \ should be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints:\
  \ 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n  \
  \  \"\"\"\nfunction solve(N::Int64)::String \n"
tests: "using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(1000)\
  \ == \"1\")\n\t@test(candidate(150) == \"110\")\n\t@test(candidate(147) == \"1100\"\
  )\n\t@test(candidate(333) == \"1001\")\n\t@test(candidate(963) == \"10010\")\nend\n"
completions: ["    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 2\n\
    \        N = N / 2\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"0\"\n@assert solve(2) == \"1\"\n@assert solve(3) == \"11\"\
    \n@assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) ==\
    \ \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11000\"\n@assert solve(25) == \"11001\"\n@assert solve(26)\
    \ == \"11010\"\n@assert solve(27) == \"11011\"\n@assert solve(28) == \"11100\"\
    \n@assert solve(29) == \"11101\"\n@assert solve(30) == \"11110\"\n@assert solve(31)\
    \ == \"11111\"\n@assert solve(32) == \"10000\"\n@assert solve(33) == \"10001\"\
    \n@assert solve(34) == \"10010\"\n@assert solve(35) == \"10011\"\n@assert solve(36)\
    \ == \"10100\"\n@assert solve(37) == \"10501\"\n@assert solve(38) == \"10110\"\
    \n@assert solve(39) == \"10111\"\n@assert solve(40) == \"11000\"\n@assert solve(41)\
    \ == \"11001\"\n@assert solve(42) == \"11010\"\n@assert solve(43) == \"11011\"\
    \n@assert solve(44) == \"11100\"\n@assert solve(45) == \"11101\"\n@assert solve(46)\
    \ == \"11110\"\n@assert solve(47) == \"11111\"\n@assert solve(48) == \"10000\"\
    \n@assert solve(49) == \"10001\"\n@assert solve(50) == \"10010\"\n@assert solve(51)\
    \ == \"10011\"\n@assert solve(52) == \"10100\"\n@assert solve(53) == \"10", " \
    \   if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n\
    \    for i = 1:N\n        digits[i] = N % 2\n        N = N / 2\n    end\n    \n\
    \    sum = 0\n    for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n\
    \    return string(digits, digits[end], sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nWrite a Julia function called sumDigits\
    \ that takes in an integer N and returns the sum of its digits in binary.", " \
    \   if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\
    \n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n     \
    \   N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(15", "    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n \
    \   \n    if N < 10\n        return digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = digits[0..digits.length-1]\n    \n    digits = digits[0..digits.length-1]\n\
    \    \n    digits = ", "    if N < 0\n        return \"-1\"\n    \n    digits\
    \ = zeros(Int, 10)\n    \n    for i in 1:N\n        digits[i] = N % 10\n     \
    \   N = N / 10\n    end\n    \n    sum = 0\n    for i in 1:length(digits)\n  \
    \      sum = sum + digits[i]\n    end\n    \n    return string(digits, digits[end],\
    \ sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=",
  "    \n    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n  \
    \  if digits == 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N\
    \ > 0\n        sum = sum + digit\n        N = N / 10\n    \n    return sum.to_s\n\
    end", "    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n       \
    \ return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits =\
    \ N % 10\n    \n    binary_digits = solve(floor(N / 10))\n    \n    binary_digits\
    \ = binary_digits + digits_to_binary(digits)\n    \n    return binary_digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(N)\n</cell>\n<text>\nProblem 3\n\
    A palindromic number reads the same both ways. The largest palindrome made from\
    \ the product of two 2-digit numbers is 9009 = 91 \xD7 99.", "    if N < 0\n \
    \       return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n    while\
    \ N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n   \
    \ end\n    \n    return string(digits, digits)\nend", "    \n    if N < 0\n  \
    \      return \"0\"\n    \n    if N == 0 \n        return \"0\"\n    \n    if\
    \ N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n    sum = 0\n\
    \    \n    while N > 0\n        sum += digits\n        N /= 10\n    \n    return\
    \ sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\nsolve(N)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function called sumDigits(N) that takes an integer N\
    \ and returns the sum of its digits in binary. For example, sumDigits(1000) should\
    \ return 1 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0\
    \ + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + 0 + ", "    if N < 0\n        return \"\
    -1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0\n       \
    \ return \"0\"\n    \n    digits = digits + solve(N)\n    \n    return digits\n\
    end", "    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits = String[]\n\
    \    \n    digits = digits[0..N-1]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum += i\n    \n    return sum.to_s\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form by considering the digits\
    \ from right to left.", "    \n    sum = 0\n    \n    for i in N:\n        sum\
    \ += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1010\"\n@assert solve(5) == \"10111\"\n@assert solve(6)\
    \ == \"11110\"\n@assert solve(7) == \"11111\"\n@assert solve(8) == \"111111\"\n\
    @assert solve(9) == \"1111111\"\n@assert solve(10) == \"11111110\"\n@assert solve(11)\
    \ == \"111111110\"\n@assert solve(12) == \"1111111101\"\n@assert solve(13) ==\
    \ \"11111111010\"\n@assert solve(14) == \"111111110100\"\n@assert solve(15) ==\
    \ \"1111111101000\"\n@assert solve(16) == \"11111111010000\"\n@assert solve(17)\
    \ == \"111111110100000\"\n@assert solve(18) == \"1111111101000000\"\n@assert solve(19)\
    \ == \"11111111010000000\"\n@assert solve(20) == \"111111110100000000\"\n@assert\
    \ solve(21) == \"1111111101000000000\"\n@assert solve(22) == \"11111111010000000000\"\
    \n@assert solve(23) == \"111111110100000000000\"\n@assert solve(24) == \"1111111101000000000000\"\
    \n@assert solve(25) == \"11111111010000000000000\"\n@assert solve(26) == \"111111110100000000000000\"\
    \n@assert solve(27) == \"1111111101000000000000000\"\n@assert solve(28) == \"\
    11111111010000000000000000\"\n@assert solve(29) == \"1111111101000000000000000000\"\
    \n@assert solve(30) == \"11111111010000000000000000000\"\n@assert solve(31) ==\
    \ \"111111110100000000000000000000\"\n@assert solve(32) == \"1111111101000000000000000000000\"\
    \n@assert solve(33) == \"11111111010000000000000000000000\"\n@assert solve(34)\
    \ == \"111111110100000000000000000000000\"\n@assert solve(35) == \"1111111101000000000000000000000000\"\
    \n@assert solve(36) == \"11111111010000000000000000000000000\"\n@assert solve(37)\
    \ == \"111111110100000000000000000000000000\"\n@assert solve(38) == \"1111111101000000000000000000000000000\"\
    \n@assert solve(39) == \"11111111010000000000000000000000000000\"\n@assert solve(40)\
    \ == \"111111110100000000000000000000000000000\"\n@assert solve(41) == \"1111111101000000000000000000000000000000\"\
    \n@assert solve(42) == \"11111111010000000000000000000000000000000", "    if N\
    \ < 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if digits ==\
    \ 0 \n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0 \n      \
    \  sum += digits\n        N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(140)\n</cell>\n<code language=julia-1.5>\nsolve(130)\n</cell>\n<code language=julia-1.5>\n\
    solve(120)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(9)\n</cell>\n<code language=julia-1.5>\n\
    solve(8)\n</cell>\n<code language=julia-1.5>\nsolve(7)\n</cell>\n<code language=julia-1.5>\n\
    solve(6)\n</cell>\n<code language=julia-1.5>\nsolve(5)\n</cell>\n<code language=julia-1.5>\n\
    solve(4)\n</cell>\n<code language=julia-1.5>\nsolve(3)\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(0) \n</cell>\n<code language=julia-1.5>\nsolve(-1) # should return \"0\"\
    \n</cell>\n<code language=julia-1.5>\nsolve(101) # should return \"111\"\n</cell>\n\
    <code language=julia-1.5>\nsolve(1001) # should return \"1001\"\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000) # should return \"1000\"\n</cell>\n<code language=julia-1.5>\n\
    solve(10000) # should return \"10000\"\n</cell>\n<code language=julia-1.5>\nsolve(100000)\
    \ # should return \"100000\"\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\
    \ # should return \"1000000\"\n</cell>\n<code language=julia-1.5>\nsolve(100000000)\
    \ # should return \"100000000\"\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\
    \ # should return \"1000000000000\"\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000)\
    \ # should return \"1000000000000000\"\n</cell>\n<code language=julia-1.5>\nsolve(100",
  "    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n\
    \    \n    if N == 1\n        return \"1\"\n    \n    digits = zeros(Int, 10)\n\
    \    \n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ + digits[i-2]\n    end\n    \n    return string(digits)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a Julia function called sumDigits that takes in an integer N and returns the\
    \ sum of the digits of N in binary.", "    if N < 0 \n        return \"0\"\n \
    \   \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n    digits =\
    \ sum.to_bin()\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<text>\n\
    Problem 3\nGiven a positive integer N, return the sum of its digits in binary\
    \ using only addition and multiplication operators.\n    \n    Example\n     \
    \   For N = 1000, the sum of digits will be 1 the output should be \"1\".\n  \
    \      For N = 150, the sum of digits will be 6 the output should be \"110\".\n\
    \        For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264\
    \ N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"",
  "    if N < 0\n        return \"0\"\n    if N < 10\n        return tostring(N)\n\
    \    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    digits[2] = 1\n   \
    \ digits[3] = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n   \
    \ digits[7] = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n   \
    \ \n    for i = 2 to N\n        digits[i] = digits[i-1] * 2\n        sum += digits[i]\n\
    \    end\n    \n    return tostring(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1400)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n", "  \
    \  if N < 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n\
    \        sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 8: Find the sum of all numbers between 1\
    \ and N that are divisible by 3\nThe sum of all numbers between 1 and N that are\
    \ divisible by 3 is given by N * (N + 1) / 2. For example, with N = 10, the sum\
    \ is 10 * 9 / 2 = 55.", "    if N < 0\n        return \"-1\"\n    \n    if N ==\
    \ 0\n        return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n \
    \   sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n        N = N\
    \ / 10\n    \n    return to_string(sum)\nend", "    \n    if N < 0\n        return\
    \ \"Invalid input\"\n    \n    digits = N % 10\n    \n    if digits == 0\n   \
    \     return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        digit =\
    \ N % 10\n        sum += digit\n        N = N / 10\n    \n    return sum.to_s(2)\n\
    end", "    if N < 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i\
    \ in N:\n        sum += i\n    \n    return bin(sum)[2:]\nend", "    if N < 0\n\
    \        throw(ArgumentError(\"N must be positive\"))\n    \n    sum = 0\n   \
    \ while N > 0\n        sum += N % 2\n        N /= 2\n    \n    sumStr = \"\"\n\
    \    while sum > 0\n        sumStr += str(sum % 2)\n        sum /= 2\n    \n \
    \   return sumStr\nend", "    if N < 0 \n        return \"-1\"\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = N % 10\n       \
    \ N = N / 10\n    end\n    \n    sum = 0\n    for i = 1:N\n        sum = sum +\
    \ digits[i]\n    end\n    \n    return string(digits, digits[end], sum)\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert\
    \ solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\
    \n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n\
    @assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20)\
    \ == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\
    \n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25)\
    \ == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\
    \n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30)\
    \ == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\
    \n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35)\
    \ == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\
    \n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40)\
    \ == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\
    \n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45)\
    \ == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\
    \n@assert solve(48) == \"100021\"\n@assert solve(49) == \"100022\"\n@assert solve(50)\
    \ == \"100023\"\n@", "    if N < 0\n        return \"0\"\n    \n    sum = 0\n\
    \    \n    while N > 0\n        sum += N % 10\n        N /= 10\n    \n    return\
    \ sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"\
    1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\
    \n@assert solve(30) == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32)\
    \ == \"100100\"\n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\
    \n@assert solve(35) == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37)\
    \ == \"101001\"\n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\
    \n@assert solve(40) == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42)\
    \ == \"101110\"\n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\
    \n@assert solve(45) == \"111001\"\n@assert solve(46) == \"111010\"\n@assert solve(47)\
    \ == \"111011\"\n@assert solve(48) == \"111100\"\n@assert solve(49) == \"111101\"\
    \n@assert solve(50) == \"111110\"\n@assert solve(51) == \"111111\"\n@assert solve(52)\
    \ == \"1000000\"\n@assert solve(53) == \"1000001\"\n@assert solve(54) == \"1000010\"",
  "    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n \
    \   for i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n\
    \    end\n    \n    binary = \"\"\n    \n    for i = 1:N\n        binary = string(digits[i],\
    \ binary)\n    end\n    \n    return binary\nend", "    if N < 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n  \
    \  return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6) == \"11100\"\n\
    @assert solve(7) == \"1110101\"\n@assert solve(8) == \"11110100\"\n@assert solve(9)\
    \ == \"1111010101\"\n@assert solve(10) == \"11110110100\"\n@assert solve(11) ==\
    \ \"1111011010101\"\n@assert solve(12) == \"11110110110100\"\n@assert solve(13)\
    \ == \"1111011011010101\"\n@assert solve(14) == \"11110110110110100\"\n@assert\
    \ solve(15) == \"1111011011011010101\"\n@assert solve(16) == \"11110110110110110100\"\
    \n@assert solve(17) == \"1111011011011011010101\"\n@assert solve(18) == \"11110110110110110110100\"\
    \n@assert solve(19) == \"1111011011011011011010101\"\n@assert solve(20) == \"\
    11110110110110110110110100\"\n@assert solve(21) == \"11110110110110110110110101010\"\
    \n@assert solve(22) == \"111101101101101101101101010100\"\n@assert solve(23) ==\
    \ \"1111011011011011011011010101010\"\n@assert solve(24) == \"111101101101101101101101010100100\"\
    \n@assert solve(25) == \"11110110110110110110101010010010\"\n@assert solve(26)\
    \ == \"111101101101101101010100100100100\"\n@assert solve(27) == \"111101101101101010100100100100100\"\
    \n@assert solve(28) == \"111101101101010100100100100100100\"\n@assert solve(29)\
    \ == \"111101101101010100100100100100100100\"\n@assert solve(30) == \"111101101101010100100100100100100100100\"\
    \n@assert solve(31) == \"111101101101010100100100100100100100100100\"\n@assert\
    \ solve(32) == \"111101101101010100100100100100100100100100100\"\n@assert solve(33)\
    \ == \"111101101101010100100100100100100100100100100", "    if N < 0\n       \
    \ return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum +\
    \ N % 10\n        N = N / 10\n    \n    return String(sum)\nend", "    if N <\
    \ 0\n        return \"-1\"\n    \n    sum = 0\n    digits = N % 10\n    \n   \
    \ while N > 0\n        sum += digits\n        N /= 10\n        digits = N % 10\n\
    \    end\n    \n    return string(digits, digits)\nend", "    \n    digits = N\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"\n    \n    digits = digits\
    \ % 10\n    \n    if digits == 0\n        return \"0\"", "    if N < 0\n     \
    \   return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n    while digits\
    \ > 0\n        sum = sum + digits\n        N = N / 10\n        digits = N % 10\n\
    \    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called sumDigits\
    \ that takes in an integer N and returns the sum of the digits of N in binary.",
  "    \n    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N\
    \ > 0\n        sum = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\n\
    end", "    \n    if N < 0\n        return \"0\"\n    \n    if N == 0\n       \
    \ return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    sum = 0\n\
    \    \n    for i in 1..N\n        sum = sum + digits(N % i)\n    \n    return\
    \ sum.to_s\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7: Digit Factorization\nGiven a positive integer N, return\
    \ the factors of N. \n    \n    Example\n        For N = 12, the factors of N\
    \ will be 1, 2, and 3.\n        For N = 14, the factors of N will be 1, 2, 3,\
    \ and 4.\n        For N = 100, the factors of N will be 1, 2, 3, 5, and 8.\n \
    \       For N = 1000, the factors of N will be 1, 2, 3, 5, 8, 13, and 17.\n  \
    \  \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N\
    \ \u2264 10000.\n    Output:\n         a vector of integers\n    \"\"\"", "  \
    \  if N == 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n\
    \        sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.", "    if N < 0\n  \
    \      return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum +=\
    \ N % 10\n        N /= 10\n    end\n    \n    return string(sum)\nend", "    if\
    \ N == 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n  \
    \      sum += i\n    \n    sumStr = String(sum)\n    \n    if sumStr == \"0\"\n\
    \        return \"0\"\n    \n    if sumStr == \"1\"\n        return \"1\"\n  \
    \  \n    sumStr = sumStr.substring(0,sumStr.length-1)\n    \n    return sumStr\
    \ + solve(N-1)\nend", "    if N < 0 \n        return \"Invalid input\"\n    \n\
    \    digits = zeros(Int, N)\n    \n    for digit in digits\n        digits[digit]\
    \ = digits[digit] + 1\n    end\n    \n    digits = digits[digits]\n    \n    if\
    \ digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n\
    \    \n    if digits == 0\n        return \"0\"\n    end\n    \n    digits = digits[digits]\n",
  "    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return \"0\"\n\
    \    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n    for i = 2 to\
    \ N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    return\
    \ string(digits)\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) ==\
    \ \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1001\"\n@assert solve(5) == \"1011\"\n@assert solve(6) == \"1101\"\n@assert\
    \ solve(7) == \"1110\"\n@assert solve(8) == \"11110\"\n@assert solve(9) == \"\
    11111\"\n@assert solve(10) == \"111111\"\n@assert solve(11) == \"1111111\"\n@assert\
    \ solve(12) == \"11111110\"\n@assert solve(13) == \"111111110\"\n@assert solve(14)\
    \ == \"1111111101\"\n@assert solve(15) == \"11111111010\"\n@assert solve(16) ==\
    \ \"111111110100\"\n@assert solve(17) == \"1111111101000\"\n@assert solve(18)\
    \ == \"11111111010000\"\n@assert solve(19) == \"111111110100000\"\n@assert solve(20)\
    \ == \"1111111101000000\"\n@assert solve(21) == \"11111111010000000\"\n@assert\
    \ solve(22) == \"111111110100000000\"\n@assert solve(23) == \"1111111101000000000\"\
    \n@assert solve(24) == \"11111111010000000000\"\n@assert solve(25) == \"111111110100000000000\"\
    \n@assert solve(26) == \"1111111101000000000000\"\n@assert solve(27) == \"11111111010000000000000\"\
    \n@assert solve(28) == \"111111110100000000000000\"\n@assert solve(29) == \"1111111101000000000000000\"\
    \n@assert solve(30) == \"11111111010000000000000000\"\n@assert solve(31) == \"\
    1111111101000000000000000000\"\n@assert solve(32) == \"11111111010000000000000000000\"\
    \n@assert solve(33) == \"111111110100000000000000000000\"\n@assert solve(34) ==\
    \ \"1111111101000000000000000000000\"\n@assert solve(35) == \"11111111010000000000000000000000\"\
    \n@assert solve(36) == \"111111110100000000000000000000000\"\n@assert solve(37)\
    \ == \"1111111101000000000000000000000000\"\n@assert solve(38) == \"11111111010000000000000000000000000\"\
    \n@assert solve(39) == \"111111110100000000000000000000000000\"\n@assert solve(40)\
    \ == \"1111111101000000000000000000000000000\"\n@", "    \n    if N < 0\n    \
    \    return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum\
    \ + N % 10\n        N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1010\"\n@assert solve(5)\
    \ == \"1011\"\n@assert solve(6) == \"1100\"\n@assert solve(7) == \"1101\"\n@assert\
    \ solve(8) == \"1110\"\n@assert solve(9) == \"1111\"\n@assert solve(10) == \"\
    1001\"\n@assert solve(11) == \"10101\"\n@assert solve(12) == \"101111\"\n@assert\
    \ solve(13) == \"110011\"\n@assert solve(14) == \"110010\"\n@assert solve(15)\
    \ == \"1100111\"\n@assert solve(16) == \"1100110\"\n@assert solve(17) == \"11001100\"\
    \n@assert solve(18) == \"11001101\"\n@assert solve(19) == \"11001011\"\n@assert\
    \ solve(20) == \"11001110\"\n@assert solve(21) == \"11001111\"\n@assert solve(22)\
    \ == \"11010001\"\n@assert solve(23) == \"11010010\"\n@assert solve(24) == \"\
    11010011\"\n@assert solve(25) == \"11010100\"\n@assert solve(26) == \"11010101\"\
    ;\n</cell>\n<text>\nProblem 3\nWrite a Julia function named sum_digits(N) that\
    \ returns the sum of its digits in binary.", "    if N < 0\n        return \"\
    -1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"1\"\
    \n    if N == 2\n        return \"10\"\n    if N == 3\n        return \"11\"\n\
    \    if N == 4\n        return \"100\"\n    if N == 5\n        return \"101\"\n\
    \    if N == 6\n        return \"110\"\n    if N == 7\n        return \"111\"\n\
    \    if N == 8\n        return \"1000\"\n    if N == 9\n        return \"1001\"\
    \n    if N == 10\n        return \"1010\"\n    if N == 11\n        return \"1011\"\
    \n    if N == 12\n        return \"1100\"\n    if N == 13\n        return \"1101\"\
    \n    if N == 14\n        return \"1110\"\n    if N == 15\n        return \"1111\"\
    \n    return \"-1\"\nend\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000010)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000011)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000100)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000101)\n</cell>\n", "    if\
    \ N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n   \
    \ \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n   \
    \ sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        N = N / 10\n        digits = N % 10\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</", "    if N <\
    \ 0 \n        return \"-1\"\n    \n    digits = String[1..N]\n    \n    sum =\
    \ 0\n    for i in digits\n        sum += Int(i)\n    \n    binary = String[sum..N]\n\
    \    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 9: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal and return the decimal number.",
  "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1]\
    \ = 1\n    \n    for i in 2..N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    \n    return digits[N]\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nThe binary number represented\
    \ as a string can represent a number between 0 and 2,147,483,647. Write a Julia\
    \ function that converts a binary number represented as a string to its decimal\
    \ equivalent.", "    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ N % 10\n    \n    if N < 10\n        return digits\n    \n    digits = solve(N\
    \ / 10)\n    \n    return digits + digits\nend", "    \n    if N < 0\n       \
    \ return \"0\"\n    \n    digits = N % 10\n    \n    if digits == 0\n        return\
    \ \"0\"\n    \n    sum = \"\"\n    \n    while N > 0\n        digit = N % 10\n\
    \        \n        if digit == 0\n            sum += \"0\"\n            \n   \
    \     else\n            sum += \"1\"\n            \n        N = N / 10\n    \n\
    \    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1) ==\
    \ \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47)\
    \ == \"100020\"\n@assert solve(48) == \"100021\"\n@assert solve(49) == \"100022\"\
    \n", "    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n       \
    \ return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    digits =\
    \ N % 10\n    \n    sum = 0\n    \n    while N > 0\n        \n        N = N /\
    \ 10\n        \n        sum = sum + digits\n        \n    return sum.to_s(2)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 4\nWrite a Julia function called sumDigits which takes a positive integer\
    \ N and returns the sum of its digits in binary.", "    if N < 0 \n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n  \
    \  return bin(sum)[2:]\nend", "    if N < 0\n        return \"0\"\n    \n    if\
    \ N == 0 \n        return \"0\"\n    \n    if N == 1 \n        return \"1\"\n\
    \    \n    digits = String[1..N]\n    \n    sum = 0\n    for i in digits\n   \
    \     sum += Int(i)\n    \n    binary = String[sum..N]\n    \n    return binary\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n",
  "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n\
    \        sum += i\n    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form by considering the digits\
    \ from right to left and stopping when the string is empty.", "    if N < 0\n\
    \        error(\"N must be positive\")\n    end\n    if N == 0\n        return\
    \ \"0\"\n    end\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n\
    \    for i = 2:N\n        digits[i] = digits[i-1] * 10 + digits[i-2]\n    end\n\
    \    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum\
    \ of digits will be 1 the output should be \"1\".\n        For N = 150, the sum\
    \ of digits will be 6 the output should be \"110\".\n        For N = 147, the\
    \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"", "    \n    if N < 0\n      \
    \  return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N ==\
    \ 1\n        return \"1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ = sum + N % 10\n        N = N / 10\n    \n    return sum.to_s\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>", "    \n    if N < 0\n        return \"0\"\n    \n    sum\
    \ = 0\n    \n    while N > 0\n        sum = sum + N % 10\n        N = N / 10\n\
    \    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n\
    @assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) ==\
    \ \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10111\"\n\
    @assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\n@assert solve(26)\
    \ == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28) == \"100000\"\
    \n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\n@assert solve(31)\
    \ == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33) == \"100101\"\
    \n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\n@assert solve(36)\
    \ == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38) == \"101010\"\
    \n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\n@assert solve(41)\
    \ == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43) == \"101111\"\
    \n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\n@assert solve(46)\
    \ == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48) == \"111100\"\
    \n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\n@assert solve(51)\
    \ == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert solve(53) == \"10000001\"\
    \n@assert solve(", "    if N == 0 \n        return \"0\"\n    \n    digits = digits(N)\n\
    \    \n    sum = 0\n    for i in digits\n        sum += i\n    \n    return bin(sum)[2:]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert\
    \ solve(5) == \"1011\"\n@assert solve(6) == \"11001\"\n@assert solve(7) == \"\
    11010\"\n@assert solve(8) == \"111001\"\n@assert solve(9) == \"111011\"\n@assert\
    \ solve(10) == \"111101\"\n@assert solve(11) == \"111100\"\n@assert solve(12)\
    \ == \"1111010\"\n@assert solve(13) == \"11111001\"\n@assert solve(14) == \"11111011\"\
    \n@assert solve(15) == \"11111101\"\n@assert solve(16) == \"11111100\"\n@assert\
    \ solve(17) == \"111111010\"\n@assert solve(18) == \"1111111001\"\n@assert solve(19)\
    \ == \"1111111011\"\n@assert solve(20) == \"1111111101\"\n@assert solve(21) ==\
    \ \"1111111100\"\n@assert solve(22) == \"11111111010\"\n@assert solve(23) == \"\
    111111111001\"\n@assert solve(24) == \"111111111011\"\n@assert solve(25) == \"\
    111111111101\"\n@assert solve(26) == \"1111111100\"\n@assert solve(27) == \"11111111101\"\
    \n@assert solve(28) == \"11111111110\"\n@assert solve(29) == \"11111111111\"\n\
    @assert solve(30) == \"111111111101\"\n@assert solve(31) == \"111111111110\"\n\
    @assert solve(32) == \"111111111111\"\n@assert solve(33) == \"1111111111110\"\n\
    @assert solve(34) == \"1111111111111\"\n@assert solve(35) == \"11111111111110\"\
    \n@assert solve(36) == \"11111111111111\"\n@assert solve(37) == \"111111111111110\"\
    \n@assert solve(38) == \"111111111111111\"\n@assert solve(39) == \"1111111111111101\"\
    \n@assert solve(40) == \"1111111111111110\"\n@assert solve(41) == \"1111111111111111\"\
    \n@assert solve(42) == \"11111111111111110\"\n@assert solve(43) == \"11111111111111111\"\
    \n@assert solve(44) == \"111111111111111101\"\n@assert solve(45) == \"1111111111111111010\"\
    \n@assert solve(46) == \"111111111111111111100\"\n@assert solve(47) == \"1111111111111110001\"\
    \n@assert solve(48) == \"1111111111111110010\"\n", "    if N < 0\n        return\
    \ \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n    \
    \    return \"1\"\n    \n    if N > 1\n        digits = digits(N)\n        \n\
    \        sum = 0\n        for i in digits\n            sum += i\n        \n  \
    \      return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called digits(N)\
    \ that returns the number of digits in N in binary.", "    if N == 0 \n      \
    \  return \"0\"\n    \n    digits = String[]\n    \n    if N < 10 \n        digits\
    \ = [N]\n    else \n        digits = digits(N / 10)\n        \n        digits.append(N\
    \ % 10)\n        \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.4>\n\
    solve(2)\n</cell>\n<code language=julia-1.4>\nsolve(10)\n</cell>\n<code language=julia-1.4>\n\
    solve(100)\n</cell>\n<code language=julia-1.4>\nsolve(1000)\n</cell>\n<code language=julia-1.4>\n\
    solve(150)\n</cell>\n<code language=julia-1.4>\nsolve(147)\n</cell>\n<code language=julia-1.4>\n\
    solve(148)\n</cell>\n<code language=julia-1.4>\nsolve(149)\n</cell>\n<code language=julia-1.4>\n\
    solve(151)\n</cell>\n<code language=julia-1.4>\nsolve(152)\n</cell>\n<code language=julia-1.4>\n\
    solve(153)\n</cell>\n<code language=julia-1.4>\nsolve(154)\n</cell>\n<code language=julia-1.4>\n\
    solve(155)\n</cell>\n<code language=julia-1.4>\nsolve(156)\n</cell>\n<code language=julia-1.4>\n\
    solve(157)\n</cell>\n<code language=julia-1.4>\nsolve(158)\n</cell>\n<code language=julia-1.4>\n\
    solve(159)\n</cell>\n<code language=julia-1.4>\nsolve(160)\n</cell>\n<code language=julia-1.4>\n\
    solve(161)\n</cell>\n<code language=julia-1.4>\nsolve(162)\n</cell>\n<code language=julia-1.4>\n\
    solve(163)\n</cell>\n<code language=julia-1.4>\nsolve(164)\n</cell>\n<code language=julia-1.4>\n\
    solve(165)\n</cell>\n<code language=julia-1.4>\nsolve(166)\n</cell>\n<code language=julia-1.4>\n\
    solve(167)\n</cell>\n<code language=julia-1.4>\nsolve(168)\n</cell>\n<code language=julia-1.4>\n\
    solve(169)\n</cell>\n<code language=julia-1.4>\nsolve(170)\n</cell>\n<code language=julia-1.4>\n\
    solve(171)\n</cell>\n<code language=julia-1.4>\nsolve(172)\n</cell>\n<code language=julia-1.4>\n\
    solve(173)\n</cell>\n<code language=julia-1.4>\nsolve(174)\n</cell>\n<code language=julia-1.",
  "    \n    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    \n  \
    \  if N < 10\n        return digits::String\n    \n    digits = solve(N / 10)\n\
    \    \n    return digits + digits\nend", "    if N < 0\n        return \"0\"\n\
    \    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n    return\
    \ str(sum)\nend", "    \n    if N < 0\n        return \"0\"\n    \n    digits\
    \ = String[]\n    \n    sum = 0\n    \n    while N > 0\n        digits.append(tostring(N\
    \ % 2))\n        N = N / 2\n    \n    for digit in digits\n        sum = sum +\
    \ digit\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(4) == \"1001\"\n@assert solve(5) == \"10101\"\n@assert solve(6)\
    \ == \"101111\"\n@assert solve(7) == \"1100111\"\n@assert solve(8) == \"11010011\"\
    \n@assert solve(9) == \"1101010101\"\n@assert solve(10) == \"11010101111\"\n@assert\
    \ solve(11) == \"110101100111\"\n@assert solve(12) == \"1101110010011\"\n@assert\
    \ solve(13) == \"110111001010101\"\n@assert solve(14) == \"1101110010101111\"\n\
    @assert solve(15) == \"11011100101100111\"\n@assert solve(16) == \"110111010010011\"\
    \n@assert solve(17) == \"11011101001010101\"\n@assert solve(18) == \"110111010010101111\"\
    \n@assert solve(19) == \"1101110100101100111\"\n@assert solve(20) == \"11011101110010011\"\
    \n@assert solve(21) == \"1101110111001010101\"\n@assert solve(22) == \"11011101110010101111\"\
    \n@assert solve(23) == \"110111011100101100111\"\n@assert solve(24) == \"110111110010010011\"\
    \n@assert solve(25) == \"11011111001001010101\"\n@assert solve(26) == \"110111110010010101111\"\
    \n@assert solve(27) == \"1101111100100101100111\"\n@assert solve(28) == \"1101111100101010011\"\
    \n@assert solve(29) == \"110111110010101010101\"\n@assert solve(30) == \"1101111100101010101111\"\
    \n@assert solve(31) == \"11011111001010101100111\"\n@assert solve(32) == \"110111110010101110011\"\
    \n@assert solve(33) == \"11011111001010111010101\"\n@assert solve(34) == \"110111110010101110101111\"\
    \n@assert solve(35) == \"1101111100101011101100111\"\n@assert solve(36) == \"\
    1101111", "    if N == 0 \n        return \"0\"\n    \n    if N < 0 \n       \
    \ return \"0\"\n    \n    sum = 0\n    \n    for i in 0..N-1 \n        sum +=\
    \ N % 2\n        N = N / 2\n    \n    return show(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal form. \nThe binary number consists\
    \ of an even number of digits. \nThe decimal number should be the sum of its digits.\
    \ \nThe binary number may contain leading zeros. \nIf the binary number is 0,\
    \ the decimal number should be 0.\nIf the binary number has only one digit, the\
    \ decimal number should be that digit.\nIf the binary number has two digits, the\
    \ decimal number should be the sum of its digits.\nIf the binary number has more\
    \ than two digits, the decimal number should be the sum of the first two digits\
    \ plus the sum of the last two digits.\nFor example, if the binary number is \"\
    10\", the decimal number should be 1 + 0 = 1.\nIf the binary number is \"11\"\
    , the decimal number should be 1 + 1 = 2.\nIf the binary number is \"1010\", the\
    \ decimal number should be 10 + 1 = 11.\nIf the binary number is \"0\", the decimal\
    \ number should be 0.\nIf the binary number is \"1\", the decimal number should\
    \ be 1.\nIf the binary number is \"111\", the decimal number should be 11 + 1\
    \ = 12.\nIf the binary number is \"1111\", the decimal number should be 11 + 1\
    \ + 1 = 13.\nIf the binary number is \"11111\", the decimal number should be 11\
    \ + 1 + 1 + 1 = 14.\nIf the binary number is \"111111\", the decimal number should\
    \ be 11 + 1 + 1 + 1 + 1 = 15.\nIf the binary number is \"11111111\", the decimal\
    \ number should be 11 + 1 + 1 + 1 + 1 + 1 = 16.\nIf the binary number is \"111111111\"\
    , the decimal number should be 11 + 1 + 1 + 1 + 1 + 1 + 1 = 17.\nIf the binary\
    \ number is \"1111111111\", the decimal number should be 11 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 = 18.\nIf the binary number is \"11111111111\", the decimal number\
    \ should be 11 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 19.\nIf the binary number is\
    \ \"111111111111\", the decimal number should be 11 + 1 + 1 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 = 20.\nIf the binary number is \"1111111111111\", the decimal number\
    \ should be 11 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 + 1 = 21.\nIf the binary number\
    \ is \"11111111111111\", the decimal number should be 11 + 1 + 1 + 1 + 1 + 1 +\
    \ 1 + 1 + 1 + 1 + 1 + 1 = 22.\nIf the binary ", "    if N < 0 \n        return\
    \ \"-1\"\n    \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    digits = N / 10\n    \n    sum = 0\n    \n    while digits > 0\n  \
    \      sum += digits%2\n        digits = digits / 2\n    \n    return sum::String\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7: Binary to Decimal\nGiven a binary number represented as a string, convert\
    \ it to decimal form. \nThe binary number represented as a string may contain\
    \ leading zeros. \nThe decimal number represented as a string should contain exactly\
    \ one leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string may contain leading\
    \ zeros. \nThe decimal number represented as a string should contain exactly one\
    \ leading zero.\nThe decimal number represented as a string ", "    \n    if N\
    \ < 0\n        return \"-1\"\n    \n    digits = digits(N)\n    \n    if digits\
    \ == 0\n        return \"0\"\n    \n    sum = 0\n    for i in digits\n       \
    \ sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find the sum of all numbers between 1\
    \ and N that are divisible by 3\nInput:\n    N integer\nOutput:\n    sum of all\
    \ numbers between 1 and N that are divisible by 3\nConstraints:\n    1 \u2264\
    \ N \u2264 10^5\nExample:\n    N = 12\n    Output: 12\n    N = 13\n    Output:\
    \ 13\n    N = 14\n    Output: 14\n    N = 15\n    Output: 15\n    N = 16\n   \
    \ Output: 16\n    N = 17\n    Output: 17\n    N = 18\n    Output: 18\n    N =\
    \ 19\n    Output: 19\n    N = 20\n    Output: 20\n    N = 21\n    Output: 21\n\
    \    N = 22\n    Output: 22\n    N = 23\n    Output: 23\n    N = 24\n    Output:\
    \ 24\n    N = 25\n    Output: 25\n    N = 26\n    Output: 26\n    N = 27\n   \
    \ Output: 27\n    N = 28\n    Output: 28\n    N = 29\n    Output: 29\n    N =\
    \ 30\n    Output: 30\n    N = 31\n    Output: 31\n    N = 32\n    Output: 32\n\
    \    N = 33\n    Output: 33\n    N = 34\n    Output: 34\n    N = 35\n    Output:\
    \ 35\n    N = 36\n    Output: 36\n    N = 37\n    Output: 37\n    N = 38\n   \
    \ Output: 38\n    N = 39\n    Output: 39\n    N = 40\n    Output: 40\n    N =\
    \ 41\n    Output: 41\n    N = 42\n    Output: 42\n    N = 43\n    Output: 43\n\
    \    N = 44\n    Output: 44\n    N = 45\n    Output: 45\n    N = 46\n    Output:\
    \ 46\n    N = 47\n    Output: 47\n    N = 48\n    Output: 48\n    N = 49\n   \
    \ Output: 49\n    N = 50\n    Output: 50", "    if N < 0\n        return \"0\"\
    \n    \n    digits = N % 10\n    \n    if N < 10\n        return digits\n    \n\
    \    digits = solve(N / 10)\n    \n    return digits + digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(123)\n</cell>\n<code language=julia-1.5>\nsolve(129)\n</cell>\n<code language=julia-1.5>\n\
    solve(130)\n</cell>\n<code language=julia-1.5>\nsolve(131)\n</cell>\n<code language=julia-1.5>\n\
    solve(132)\n</cell>\n<code language=julia-1.5>\nsolve(133)\n</cell>\n<code language=julia-1.5>\n\
    solve(134)\n</cell>\n<code language=julia-1.5>\nsolve(135)\n</cell>\n<code language=julia-1.5>\n\
    solve(136)\n</cell>\n<code language=julia-1.5>\nsolve(137)\n</cell>\n<code language=julia-1.5>\n\
    solve(138)\n</cell>\n<code language=julia-1.5>\nsolve(139)\n</cell>\n<code language=julia-1.5>\n\
    solve(140)\n</cell>\n<code language=julia-1.5>\nsolve(141)\n</cell>\n<code language=julia-1.5>\n\
    solve(142)\n</cell>\n<code language=julia-1.5>\nsolve(143)\n</cell>\n<code language=julia-1.5>\n\
    solve(144)\n</cell>\n<code language=julia-1.5>\nsolve(145)\n</cell>\n<code language=julia-1.5>\n\
    solve(146)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=",
  "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    digits[1]\
    \ = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    end\n    \n    return string(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</", "    if N < 0\n        return \"-1\"\n    \n    if N == 0\n \
    \       return \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    sum\
    \ = 0\n    \n    while N > 0\n        sum = sum + N % 10\n        N = N / 10\n\
    \    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\nsolve(N)\n\
    </cell>\n<text>\nProblem 3\nGiven a positive integer N, return the sum of its\
    \ digits in binary using only bit operations.\n    \n    Example\n        For\
    \ N = 1000, the sum of digits will be 1 the output should be \"1\".\n        For\
    \ N = 150, the sum of digits will be 6 the output should be \"110\".\n       \
    \ For N = 147, the sum of digits will be 12 the output should be \"1100\".\n \
    \   \n    Variables:\n        @N integer\n             Constraints: 0 \u2264 N\
    \ \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"",
  "    if N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, N)\n    \n \
    \   for i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N / 10\n\
    \    end\n    \n    return join(digits, \"\")\nend", "    if N < 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    for i in 0..N\n        sum += N % 2\n  \
    \      N /= 2\n    \n    return String(sum)\nend", "    if N < 0\n        return\
    \ \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"\
    1\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n    for i = 2\
    \ to N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n    sum\
    \ = 0\n    for i = 2 to N\n        sum = sum + digits[i]\n    end\n    \n    return\
    \ string(digits, sum)\nend", "    if N < 0\n        return \"0\"\n    \n    sum\
    \ = 0\n    \n    for i in 0..N\n        sum += N % 2\n        N /= 2\n    \n \
    \   return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4)\
    \ == \"1010\"\n@assert solve(5) == \"10111\"\n@assert solve(6) == \"111010\"\n\
    @assert solve(7) == \"1110111\"\n@assert solve(8) == \"1111010\"\n@assert solve(9)\
    \ == \"11110110\"\n@assert solve(10) == \"11110011\"\n@assert solve(11) == \"\
    111100100\"\n@assert solve(12) == \"1111001010\"\n@assert solve(13) == \"11110010111\"\
    \n@assert solve(14) == \"11110011110\"\n@assert solve(15) == \"111100111110\"\n\
    @assert solve(16) == \"1111001111111\"\n@assert solve(17) == \"1111001111100\"\
    \n@assert solve(18) == \"11110011111010\"\n@assert solve(19) == \"111100111110111\"\
    \n@assert solve(20) == \"11110011110110\"\n@assert solve(21) == \"111100111101110\"\
    \n@assert solve(22) == \"111100111101111\"\n@assert solve(23) == \"111100111111100\"\
    \n@assert solve(24) == \"1111001111111010\"\n@assert solve(25) == \"11110011111110111\"\
    \n@assert solve(26) == \"1111001111011010\"\n@assert solve(27) == \"1111001111011011\"\
    \n@assert solve(28) == \"11110011110110101\"\n@assert solve(29) == \"11110011110110110\"\
    \n@assert solve(30) == \"111100111101101011\"\n@assert solve(31) == \"111100111101101101\"\
    \n@assert solve(32) == \"1111001111011011010\"\n@assert solve(33) == \"11110011110110110100\"\
    \n@assert solve(34) == \"111100111101101101010\"\n@assert solve(35) == \"1111001111011011010111\"\
    \n@assert solve(36) == \"111100111101101101100\"\n@assert solve(37) == \"1111001111011011011000\"\
    \n@assert solve(38) == \"11110011110110110110010\"\n@assert solve(39) == \"111100111101101101100100\"\
    \n@assert solve(40) == \"1111001111011011011001010\"\n@assert solve(41) == \"\
    11110011110110110110010111\"\n", "    \n    digits = N % 10\n    \n    if N <\
    \ 10\n        return digits::String\n    \n    digits = solve(N / 10)\n    \n\
    \    return digits + digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(N)\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called sumdigits(N) that takes\
    \ in a positive integer N and returns the sum of its digits in binary.", "   \
    \ \n    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N >\
    \ 0\n        sum = sum + N % 10\n        N = N / 10\n    \n    return sum.to_s\n\
    end", "    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"\
    0\", N)\n    \n    digits = string(\"0\", N)\n    \n    for i = N - 1, j = 0,\
    \ k = 1\n        while i >= k\n            digits[j] += digits[i%k]\n        \
    \    i /= k\n            j += 1\n            k += 1\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=juli",
  "    \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n  \
    \  \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N\
    \ / 10\n    end\n    \n    digits[N] = digits[N]\n    \n    return join(digits,\
    \ \"\")\nend", "    if N < 0\n        return \"-1\"\n    \n    sum = 0\n    digits\
    \ = N % 10\n    \n    while N > 0\n        sum += digits\n        N /= 10\n  \
    \      digits = N % 10\n    \n    return String(sum)\nend", "    \n    if N <\
    \ 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n \
    \   if N == 1\n        return \"1\"\n    \n    if N == 2\n        return \"10\"\
    \n    \n    if N == 3\n        return \"11\"\n    \n    if N == 4\n        return\
    \ \"100\"\n    \n    if N == 5\n        return \"101\"\n    \n    if N == 6\n\
    \        return \"110\"\n    \n    if N == 7\n        return \"111\"\n    \n \
    \   if N == 8\n        return \"1000\"\n    \n    if N == 9\n        return \"\
    1001\"\n    \n    if N == 10\n        return \"1010\"\n    \n    if N == 11\n\
    \        return \"1011\"\n    \n    if N == 12\n        return \"1100\"\n    \n\
    \    if N == 13\n        return \"1101\"\n    \n    if N == 14\n        return\
    \ \"1110\"\n    \n    if N == 15\n        return \"1111\"\n    \n    if N == 16\n\
    \        return \"10000\"\n    \n    if N == 17\n        return \"10001\"\n  \
    \  \n    if N == 18\n        return \"10010\"\n    \n    if N == 19\n        return\
    \ \"10011\"\n    \n    if N == 20\n        return \"10100\"\n    \n    if N ==\
    \ 21\n        return \"10101\"\n    \n    if N == 22\n        return \"10102\"\
    \n    \n    if N == 23\n        return \"10110\"\n    \n    if N == 24\n     \
    \   return \"10111\"\n    \n    if N == 25\n        return \"11000\"\n    \n \
    \   if N == 26\n        return \"11001\"\n    \n    if N == 27\n        return\
    \ \"11010\"\n    \n    if N == 28\n        return \"11011\"\n    \n    if N ==\
    \ 29\n        return \"11100\"\n    \n    if N == 30\n        return \"11101\"\
    \n    \n    if N == 31\n        return \"11110\"\n    \n    if N == 32\n     \
    \   return \"11111\"\n    \n    if N == 33\n        return \"10000\"\n    \n \
    \   if N == 34\n        return \"10001\"\n    \n    if N == 35\n        return\
    \ \"10010\"\n    \n    if N == 36\n        return \"10011\"\n    \n    if N ==\
    \ 37\n        return \"10100\"\n    \n    if N == 38\n        return \"10101\"\
    \n    \n    if N == 39\n        return \"10102\"\n    \n    if N == 40\n     \
    \   return \"10110\"\n    \n    if N == 41\n        return \"10111\"\n    \n \
    \   if N == 42\n        return \"11000\"\n    \n    if N == 43\n        return\
    \ \"11001\"\n    \n    if N == 44\n        return \"11010\"\n    \n    if N ==\
    \ 45", "    if N < 0\n        return \"-1\"\n    if N == 0\n        return \"\
    0\"\n    if N == 1\n        return \"1\"\n    if N == 2\n        return \"10\"\
    \n    if N == 3\n        return \"11\"\n    if N == 4\n        return \"100\"\n\
    \    if N == 5\n        return \"101\"\n    if N == 6\n        return \"110\"\n\
    \    if N == 7\n        return \"111\"\n    if N == 8\n        return \"1000\"\
    \n    if N == 9\n        return \"1001\"\n    if N == 10\n        return \"1010\"\
    \n    if N == 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\
    \n    if N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\
    \n    if N == 15\n        return \"1111\"\n    return \"-1\"\nend", "    if N\
    \ < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend\n</cell>\n<code language=julia-1.4>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.4>\nsolve(150)\n</cell>\n<code language=julia-1.4>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called digitsum that takes\
    \ a positive integer N and returns the sum of its digits in binary.\n    \n  \
    \  Example\n        For N = 1000, the sum of digits will be 1 the output should\
    \ be \"1\".\n        For N = 150, the sum of digits will be 6 the output should\
    \ be \"110\".\n        For N = 147, the sum of digits will be 12 the output should\
    \ be \"1100\".\n    \n    Variables:\n        @N integer\n             Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary number\n\
    \    \"\"\"", "    \n    if N < 0\n        return \"-1\"\n    \n    sum = 0\n\
    \    \n    while N > 0\n        sum = sum + N % 10\n        N = N / 10\n    \n\
    \    return String(sum)\nend", "    if N < 0\n        return \"0\"\n    \n   \
    \ if N < 10\n        return tostring(N)\n    \n    digits = zeros(Int, 10)\n \
    \   \n    digits[1] = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1]\
    \ * 2\n    \n    return tostring(digits)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7", "    \n    if N < 0\n        return \"\
    -1\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n       \
    \ return \"1\"\n    \n    digits = N % 10\n    \n    sum = \"\"\n    \n    while\
    \ N > 0\n        \n        sum += digits_to_binary(digits)\n        \n       \
    \ N = N / 10\n        \n        digits = N % 10\n    \n    return sum\nend", " \
    \   if N == 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for i in N:\n\
    \        sum += i\n    \n    return bin(sum)[2:]\nend", "    if N < 0\n      \
    \  return \"0\"\n    \n    if N < 10\n        return string(\"0\", N)\n    \n\
    \    sum = 0\n    \n    for n in N\n        sum += n%2\n        n /= 2\n    \n\
    \    return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n\
    @assert solve(4) == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) ==\
    \ \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert\
    \ solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert solve(11) == \"\
    1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"1101\"\n@assert\
    \ solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert solve(16) == \"\
    10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) == \"10010\"\n@assert\
    \ solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n@assert solve(21) ==\
    \ \"10501\"\n@assert solve(22) == \"10110\"\n@assert solve(23) == \"10110\"\n\
    @assert solve(24) == \"10111\"\n@assert solve(25) == \"11000\"\n@assert solve(26)\
    \ == \"11001\"\n@assert solve(27) == \"11010\"\n@assert solve(28) == \"11010\"\
    \n@assert solve(29) == \"11011\"\n@assert solve(30) == \"11100\"\n@assert solve(31)\
    \ == \"11100\"\n@assert solve(32) == \"11101\"\n@assert solve(33) == \"11110\"\
    \n@assert solve(34) == \"11110\"\n@assert solve(35) == \"11111\"\n@assert solve(36)\
    \ == \"10000\"\n@assert solve(37) == \"10001\"\n@assert solve(38) == \"10010\"\
    \n@assert solve(39) == \"10011\"\n@assert solve(40) == \"10100\"\n@assert solve(41)\
    \ == \"10501\"\n@assert solve(42) == \"10110\"\n@assert solve(43) == \"10110\"\
    \n@assert solve(44) == \"10111\"\n@assert solve(45) == \"11000\"\n@assert solve(46)\
    \ == \"11001\"\n@assert solve(47) == \"11010\"\n@assert solve(48) == \"11010\"\
    \n@assert solve(49) == \"11011\"\n@assert solve(50) == \"11100\"\n@assert solve(51)\
    \ == \"11100\"\n@assert solve(52) == \"11101\"\n", "    if N < 0 \n        return\
    \ \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n    digits = zeros(Int,\
    \ N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 2\n       \
    \ N = N / 2\n    end\n    \n    sum = 0\n    for i = 1:N\n        sum = sum +\
    \ digits[i]\n    end\n    \n    return string(digits, digits[N], sum)\nend\n</cell>\n\
    <code language=julia-1.3>\nsolve(1000)\n</cell>\n<code language=julia-1.3>\nsolve(150)\n\
    </cell>\n<code language=julia-1.3>\nsolve(147)\n</cell>\n<text>\nProblem 7\nGiven\
    \ a positive integer N, return the number of trailing zeroes in N's binary representation.",
  "    \n    if N < 0 \n        return \"-1\"\n    \n    sum = 0\n    \n    while\
    \ N > 0\n        sum = sum + N % 10\n        N = N / 10\n    \n    return String(sum)\n\
    end", "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i\
    \ in 0..N-1\n        sum += N % 2\n        N = N / 2\n    \n    return String(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert\
    \ solve(5) == \"1011\"\n@assert solve(6) == \"1101\"\n@assert solve(7) == \"1110\"\
    \n@assert solve(8) == \"11110\"\n@assert solve(9) == \"11111\"\n@assert solve(10)\
    \ == \"111111\"\n@assert solve(11) == \"1111111\"\n@assert solve(12) == \"11111110\"\
    \n@assert solve(13) == \"111111110\"\n@assert solve(14) == \"1111111101\"\n@assert\
    \ solve(15) == \"11111111011\"\n@assert solve(16) == \"111111110111\"\n@assert\
    \ solve(17) == \"1111111101111\"\n@assert solve(18) == \"11111111011111\"\n@assert\
    \ solve(19) == \"111111110111111\"\n@assert solve(20) == \"1111111101111111\"\n\
    @assert solve(21) == \"11111111011111111\"\n@assert solve(22) == \"111111110111111111\"\
    \n@assert solve(23) == \"1111111101111111110\"\n@assert solve(24) == \"11111111011111111110\"\
    \n@assert solve(25) == \"111111110111111111101\"\n@assert solve(26) == \"1111111101111111111011\"\
    \n@assert solve(27) == \"11111111011111111110111\"\n@assert solve(28) == \"111111110111111111101111\"\
    \n@assert solve(29) == \"1111111101111111111011111\"\n@assert solve(30) == \"\
    11111111011111111110111111\"\n@assert solve(31) == \"111111110111111111101111111\"\
    \n@assert solve(32) == \"1111111101111111111011111111\"\n@assert solve(33) ==\
    \ \"11111111011111111110111111111\"\n@assert solve(34) == \"111111110111111111101111111110\"\
    \n@assert solve(35) == \"1111111101111111111011111111110\"\n@assert solve(36)\
    \ == \"11111111011111111110111111111101\"\n@assert solve(37) == \"111111110111111111101111111111011\"\
    \n@assert solve(38) == \"1111111101111111111011111111110111\"\n@assert solve(39)\
    \ == \"11111111011111111110111111111101111\"\n@assert ", "    if N < 0\n     \
    \   return \"-1\"\n    if N == 0\n        return \"0\"\n    if N == 1\n      \
    \  return \"1\"\n    if N == 2\n        return \"10\"\n    if N == 3\n       \
    \ return \"11\"\n    if N == 4\n        return \"100\"\n    if N == 5\n      \
    \  return \"101\"\n    if N == 6\n        return \"110\"\n    if N == 7\n    \
    \    return \"111\"\n    if N == 8\n        return \"1000\"\n    if N == 9\n \
    \       return \"1001\"\n    if N == 10\n        return \"1010\"\n    if N ==\
    \ 11\n        return \"1011\"\n    if N == 12\n        return \"1100\"\n    if\
    \ N == 13\n        return \"1101\"\n    if N == 14\n        return \"1110\"\n\
    \    if N == 15\n        return \"1111\"\n    if N == 16\n        return \"10000\"\
    \n    if N == 17\n        return \"10001\"\n    if N == 18\n        return \"\
    10010\"\n    if N == 19\n        return \"10011\"\n    if N == 20\n        return\
    \ \"10100\"\n    if N == 21\n        return \"10101\"\n    if N == 22\n      \
    \  return \"10102\"\n    if N == 23\n        return \"10103\"\n    if N == 24\n\
    \        return \"10104\"\n    if N == 25\n        return \"10105\"\n    if N\
    \ == 26\n        return \"10106\"\n    if N == 27\n        return \"10107\"\n\
    \    if N == 28\n        return \"10108\"\n    if N == 29\n        return \"10109\"\
    \n    if N == 30\n        return \"10110\"\n    if N == 31\n        return \"\
    10111\"\n    if N == 32\n        return \"11000\"\n    if N == 33\n        return\
    \ \"11001\"\n    if N == 34\n        return \"11002\"\n    if N == 35\n      \
    \  return \"11003\"\n    if N == 36\n        return \"11004\"\n    if N == 37\n\
    \        return \"11005\"\n    if N == 38\n        return \"11006\"\n    if N\
    \ == 39\n        return \"11007\"\n    if N == 40\n        return \"11008\"\n\
    \    if N == 41\n        return \"11009\"\n    if N == 42\n        return \"11010\"\
    \n    if N == 43\n        return \"11011\"\n    if N == 44\n        return \"\
    11012\"\n    if N == 45\n        return \"11013\"\n    if N == 46\n        return\
    \ \"11014\"\n    if N == 47\n        return \"11015\"\n    if N == 48\n      \
    \  return \"11016\"\n    if N == 49\n        return \"11017\"\n    if N == 50\n\
    \        return \"11018\"\n    if N == 51\n        return \"11019\"\n    if N\
    \ == 52\n        return \"11020\"\n    if N == 53\n        return \"11021\"\n\
    \    if N == 54\n        return \"110", "    \n    if N < 0\n        return \"\
    -1\"\n    \n    digits = String[1..N]\n    \n    sum = 0\n    for i in digits\n\
    \        sum += i\n    \n    return sum.to_s\nend", "    if N < 0\n        return\
    \ \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n\
    \        N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 3\nGiven\
    \ a positive integer N, return the sum of its digits in binary using only bit\
    \ operations.\n    \n    Example\n        For N = 1000, the sum of digits will\
    \ be 1 the output should be \"1\".\n        For N = 150, the sum of digits will\
    \ be 6 the output should be \"110\".\n        For N = 147, the sum of digits will\
    \ be 12 the output should be \"1100\".\n    \n    Variables:\n        @N integer\n\
    \             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string\
    \ of binary number\n    \"\"\"", "    if N < 0\n        return \"0\"\n    \n \
    \   digits = zeros(Int, N)\n    \n    for d in digits\n        digits[d] = digits[d]\
    \ + 1\n    end\n    \n    digits = digits[digits[end] == 1]\n    \n    if length(digits)\
    \ < 2\n        return \"0\"\n    end\n    \n    digits = digits[2:end]\n    \n\
    \    sum = 0\n    for d in digits\n        sum = sum + d\n    end\n    \n    return\
    \ string(digits, digits[end])\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 4\nGiven a positive integer N, return the sum of its digits in binary.\n\
    \    \n    Example\n        For N = 1000, the sum of digits will be 1 the output\
    \ should be \"1\".\n        For N = 150, the sum of digits will be 6 the output\
    \ should be \"110\".\n        For N = 147, the sum of digits will be 12 the output\
    \ should be \"1100\".\n    \n    Variables:\n        @N integer\n            \
    \ Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n         a string of binary\
    \ number\n    \"\"\"", "    if N < 0\n        return \"-1\"\n    \n    digits\
    \ = N % 10\n    N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n\
    \    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    \n    return sum\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(N = 1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(N = 150)\n</cell>\n<code language=julia-1.5>\nsolve(N = 147)\n</cell>\n\
    <text>\nProblem 7: Binary to Decimal\nGiven a binary number represented as a string,\
    \ convert it to decimal form by adding up the individual digits in the right order.\n\
    \    \n    Variables:\n        @N string\n             Constraints: 0 \u2264 N\
    \ \u2264 10000.\n    Output:\n         an integer\n    \"\"\"", "    \n    if\
    \ N < 0\n        return \"-1\"\n    \n    digits = zeros(Int, 10)\n    \n    for\
    \ digit in digits:\n        digits[digit] = N % 2\n        N = N / 2\n    \n \
    \   sum = 0\n    for digit in digits:\n        sum = sum + digit\n    \n    return\
    \ String(sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 8\nWrite a Julia function called sumDigits(N) that takes\
    \ in an integer N and returns the sum of the digits of N in binary.", "    if\
    \ N < 0\n        return \"0\"\n    \n    sum = 0\n    digits = N % 10\n    \n\
    \    while N > 0\n        sum += digits\n        N /= 10\n        digits = N %\
    \ 10\n    \n    return sum.to_s(2)\nend", "    if N < 0\n        return \"0\"\n\
    \    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n    return\
    \ bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7: Find all prime factors\nGiven a positive integer N,\
    \ find all prime factors of N.", "    if N < 0\n        return \"0\"\n    \n \
    \   sum = 0\n    digits = \"\"\n    \n    for i in N:\n        sum += i\n    \
    \    digits = digits*i\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called sumdigits\
    \ which takes in an integer N and returns the sum of the digits of N in binary.",
  "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n\
    \        sum += N % 10\n        N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 4\nWrite\
    \ a Julia function called sum_to_ten(N) that takes an integer N and returns the\
    \ sum of its digits in binary.", "    if N < 0\n        return \"0\"\n    \n \
    \   digits = String[1..N]\n    \n    sum = 0\n    for i in digits\n        sum\
    \ += i\n    \n    return sum.to_s\nend", "    if N < 0\n        return \"-1\"\n\
    \    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n      \
    \  return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n  \
    \  \n    if N < 10\n        return digits::String\n    \n    N = N / 10\n    \n\
    \    digits = N % 10\n    \n    if N < 10\n        return digits::String\n   \
    \ \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if\
    \ N < 10\n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n      \
    \  return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n  \
    \  \n    if N < 10\n        return digits::String\n    \n    N = N / 10\n    \n\
    \    digits = N % 10\n    \n    if N < 10\n        return digits::String\n   \
    \ \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if\
    \ N < 10\n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10\n      \
    \  return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n  \
    \  \n    if N < 10\n        return digits::String\n    \n    N = N / 10\n    \n\
    \    digits = N % 10\n    ", "    if N < 0\n        return \"Invalid input\"\n\
    \    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    digits = solve(N)\n    \n    return digits + digits\nend",
  "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    \n  \
    \  for digit in digits\n        digits[digit] = digits[digit] + 1\n    \n    digits\
    \ = digits[digits]\n    \n    sum = 0\n    \n    for digit in digits\n       \
    \ sum = sum + digit\n    \n    return String(sum)\nend", "    \n    if N < 0\n\
    \        return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum\
    \ = sum + N % 10\n        N = N / 10\n    \n    if sum == 0\n        return \"\
    0\"\n    \n    sumstr = String(sum)\n    \n    if sumstr == \"0\"\n        return\
    \ \"0\"\n    \n    sumstr = sumstr.reverse\n    \n    if sumstr == \"0\"\n   \
    \     return \"0\"\n    \n    return sumstr\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)", "    if N < 0\n\
    \        return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n    if\
    \ N == 1\n        return \"1\"\n    \n    if N == 2\n        return \"10\"\n \
    \   \n    if N == 3\n        return \"11\"\n    \n    if N == 4\n        return\
    \ \"100\"\n    \n    if N == 5\n        return \"101\"\n    \n    if N == 6\n\
    \        return \"110\"\n    \n    if N == 7\n        return \"111\"\n    \n \
    \   if N == 8\n        return \"1000\"\n    \n    if N == 9\n        return \"\
    1001\"\n    \n    if N == 10\n        return \"1010\"\n    \n    if N == 11\n\
    \        return \"1011\"\n    \n    if N == 12\n        return \"1100\"\n    \n\
    \    if N == 13\n        return \"1101\"\n    \n    if N == 14\n        return\
    \ \"1110\"\n    \n    if N == 15\n        return \"1111\"\n    \n    return \"\
    0\"\nend\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(10)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000010)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000011)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000100)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000101)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001010)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000001011)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000001100)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000001101)\n\
    </cell>", "    if N < 0\n        return \"0\"\n    if N == 0\n        return \"\
    0\"\n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N\
    \ / 10\n    \n    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        N = N / 10\n        digits = N % 10\n        N = N / 10\n    end\n  \
    \  \n    return sum\nend", "    if N < 0\n        return \"0\"\n    \n    digits\
    \ = String[]\n    \n    sum = 0\n    \n    while N > 0\n        digit = N % 10\n\
    \        sum += digit\n        N /= 10\n        \n        push!(digits, digit)\n\
    \    end\n    \n    sum = \"\".join(digits)\n    \n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nGiven\
    \ a positive integer N, return the number of trailing zeroes in N's binary representation.",
  "    if N < 0\n        return \"0\"\n    \n    if N < 10\n        return tostring(N)\n\
    \    \n    sum = 0\n    \n    while N > 0\n        sum += N % 10\n        N /=\
    \ 10\n    \n    return tostring(sum)\nend", "    if N < 0 \n        return \"\
    Invalid input\"\n    \n    digits = N % 10\n    \n    if N < 10 \n        return\
    \ digits::String\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n \
    \   \n    return digits::String\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in base 10. \n    \n    Example\n        For N = 1000, the\
    \ sum of digits will be 1 the output should be \"1\".\n        For N = 150, the\
    \ sum of digits will be 6 the output should be \"110\".\n        For N = 147,\
    \ the sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of digits base 10\n    \"\"\"", "    if N < 0\n        return\
    \ \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    if N == 0\n   \
    \     return \"0\"\n    \n    digits = digits + solve(N)\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.3>\nsolve(1000)\n</cell>\n<code language=julia-1.3>\n\
    solve(150)\n</cell>\n<code language=julia-1.3>\nsolve(147)\n</cell>\n<code language=julia-1.3>\n\
    solve(148)\n</cell>\n<code language=julia-1.3>\nsolve(149)\n</cell>\n<code language=julia-1.3>\n\
    solve(151)\n</cell>\n<code language=julia-1.3>\nsolve(152)\n</cell>\n<code language=julia-1.3>\n\
    solve(153)\n</cell>\n<code language=julia-1.3>\nsolve(154)\n</cell>\n<code language=julia-1.3>\n\
    solve(155)\n</cell>\n<code language=julia-1.3>\nsolve(156)\n</cell>\n<code language=julia-1.3>\n\
    solve(157)\n</cell>\n<code language=julia-1.3>\nsolve(158)\n</cell>\n<code language=julia-1.3>\n\
    solve(159)\n</cell>\n<code language=julia-1.3>\nsolve(160)\n</cell>\n<code language=julia-1.3>\n\
    solve(161)\n</cell>\n<code language=julia-1.3>\nsolve(162)\n</cell>\n<code language=julia-1.3>\n\
    solve(163)\n</cell>\n<code language=julia-1.3>\nsolve(164)\n</cell>\n<code language=julia-1.3>\n\
    solve(165)\n</cell>\n<code language=julia-1.3>\nsolve(166)\n</cell>\n<code language=julia-1.3>\n\
    solve(167)\n</cell>\n<code language=julia-1.3>\nsolve(168)\n</cell>\n<code language=julia-1.3>\n\
    solve(169)\n</cell>\n<code language=julia-1.3>\nsolve(170)\n</cell>\n<code language=julia-1.3>\n\
    solve(171)\n</cell>\n<code language=julia-1.3>\nsolve(172)\n</cell>\n<code language=julia-1.3>\n\
    solve(173)\n</cell>\n<code language=julia-1.3>\nsolve(174)\n</cell>\n<code language=julia-1.3>\n\
    solve(175)\n</cell>\n<code language=julia-1.3>\nsolve(176)\n</cell>\n<code language=julia-1.3>\n\
    solve(177)\n</cell>\n<code language=julia-1.3>\nsolve(178)\n", "    if N < 0\n\
    \        return \"0\"\n    \n    digits = \"\"\n    \n    while N > 0\n      \
    \  digits = digits + str((N % 10).digits)\n        N = N / 10\n    end\n    \n\
    \    return digits\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100000\"\n@assert solve(29) == \"100001\"\
    \n@assert solve(30) == \"100010\"\n@assert solve(31) == \"100011\"\n@assert solve(32)\
    \ == \"100100\"\n@assert solve(33) == \"100101\"\n@assert solve(34) == \"100110\"\
    \n@assert solve(35) == \"100111\"\n@assert solve(36) == \"101000\"\n@assert solve(37)\
    \ == \"101001\"\n@assert solve(38) == \"101010\"\n@assert solve(39) == \"101011\"\
    \n@assert solve(40) == \"101100\"\n@assert solve(41) == \"101101\"\n@assert solve(42)\
    \ == \"101110\"\n@assert solve(43) == \"101111\"\n@assert solve(44) == \"111000\"\
    \n@assert solve(45) == \"111001\"\n@assert solve(46) == \"111010\"\n@assert solve(47)\
    \ == \"111011\"\n@assert solve(48) == \"111100\"\n@assert solve(49) == \"111101\"\
    \n@assert solve(50) == \"111110\"\n@assert solve(51) == \"111111\"\n@assert solve(52)\
    \ == \"10000000\"\n@assert solve(53) == \"1000000", "    if N < 0\n        return\
    \ \"0\"\n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"\
    1\"\n    \n    digits = zeros(Int, N)\n    digits[1] = 1\n    \n    for i in 2:N\n\
    \        digits[i] = digits[i-1] * 2\n    \n    sum = \"\"\n    for i in digits\n\
    \        sum = sum + i\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\n\
    solve(1000)\n</cell>\n<code language=julia-1.4>\nsolve(150)\n</cell>\n<code language=julia-1.4>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.", "    if N < 0\n  \
    \      return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = digits::String\n    \n    digits = digits::String\n    \n\
    \    digits = digits::String\n    \n    digits = digits::String\n    \n    digits\
    \ = digits::String\n    \n    digits = digits::String\n    \n    digits = digits::String\n\
    \    \n    digits = ", "    if N < 0 \n        return \"-1\"\n    \n    digits\
    \ = N % 10\n    \n    if N < 10 \n        return digits::String\n    \n    digits\
    \ = solve(N / 10)\n    \n    return digits + digits\nend", "    \n    digits =\
    \ zeros(Int, 10)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N %\
    \ 2\n        N = N / 2\n    end\n    \n    return join(digits)\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"111\"\n@assert solve(4) == \"1001\"\n@assert solve(5)\
    \ == \"10010\"\n@assert solve(6) == \"100110\"\n@assert solve(7) == \"1001110\"\
    \n@assert solve(8) == \"10011110\"\n@assert solve(9) == \"10011111\"\n@assert\
    \ solve(10) == \"100111111\"\n@assert solve(11) == \"1001111111\"\n@assert solve(12)\
    \ == \"10011111110\"\n@assert solve(13) == \"100111111110\"\n@assert solve(14)\
    \ == \"1001111111101\"\n@assert solve(15) == \"10011111111010\"\n@assert solve(16)\
    \ == \"100111111110110\"\n@assert solve(17) == \"1001111111101101\"\n@assert solve(18)\
    \ == \"10011111111011010\"\n@assert solve(19) == \"10011111111011011\"\n@assert\
    \ solve(20) == \"100111111110110110\"\n@assert solve(21) == \"1001111111101101101\"\
    \n@assert solve(22) == \"10011111111011011010\"\n@assert solve(23) == \"1001111111101101100\"\
    \n@assert solve(24) == \"10011111111011011001\"\n@assert solve(25) == \"100111111110110110010\"\
    \n@assert solve(26) == \"100111111110110110011\"\n@assert solve(27) == \"1001111111101101100110\"\
    \n@assert solve(28) == \"10011111111011011001101\"\n@assert solve(29) == \"100111111110110110011010\"\
    \n@assert solve(30) == \"100111111110110110011011\"\n@assert solve(31) == \"1001111111101101100110110\"\
    \n@assert solve(32) == \"10011111111011011001101101\"\n@assert solve(33) == \"\
    100111111110110110011011010\"\n@assert solve(34) == \"10011111111011011001101100\"\
    \n@assert solve(35) == \"100111111110110110011011001\"\n@assert solve(36) == \"\
    1001111111101101100110110010\"\n@assert solve(37) == \"100", "    if N < 0\n \
    \       return \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n    digits\
    \ = N % 10\n    \n    if N < 10\n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = digits + N % 10\n    \n    return digits::String\n\
    end", "    if N == 0 \n        return \"0\"\n    \n    sum = 0\n    \n    for\
    \ i in N:\n        sum += i\n    \n    return sum.to_s(2)\nend", "    if N < 0\n\
    \        return \"-1\"\n    \n    if N < 10\n        return string(\"0\", N)\n\
    \    \n    sum = 0\n    \n    for digit in N\n        sum += digit\n    \n   \
    \ return string(\"1\", sum)\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>", "    if N < 0\n        return \"0\"\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum +=\
    \ N % 10\n        N = N / 10\n    \n    return sum.to_s(2)\nend\n</cell>\n<code\
    \ language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n\
    @assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) == \"\
    101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert\
    \ solve(53) == \"", "    if N == 0 \n        return \"0\"\n    \n    digits =\
    \ N % 10\n    N = N / 10\n    \n    sum = \"\"\n    \n    while N > 0 \n     \
    \   sum = sum + digits_to_binary(digits)\n        digits = digits * 2\n      \
    \  N = N / 10\n    \n    return sum\nend", "    if N < 0\n        return \"0\"\
    \n    \n    digits = zeros(Int, N)\n    \n    digits[1] = 1\n    \n    for i in\
    \ 2..N\n        digits[i] = digits[i-1] + digits[i-2]\n    \n    return string(digits)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(N)\n</cell>\n<text>\nProblem 8\n\
    Write a Julia function called sumDigits which takes in a positive integer N and\
    \ returns the sum of its digits in binary. \nThe function should work for all\
    \ positive integers N. \nThe function should work for N = 0 and negative integers\
    \ N.\nThe function should work for N = 10000.", "    if N < 0 \n        return\
    \ \"-1\"\n    \n    sum = 0\n    \n    while N > 0 \n        sum += N % 2\n  \
    \      N /= 2\n    \n    return show(sum)\nend", "    if N < 0 \n        return\
    \ \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n    if N == 1 \n \
    \       return \"1\"\n    \n    digits = String[1..N]\n    \n    sum = 0\n   \
    \ for i in digits\n        sum += i\n    \n    return String(sum)\nend", "   \
    \ if N < 0 \n        return \"-1\"\n    \n    digits = N % 10\n    \n    if N\
    \ < 10 \n        return digits::String\n    \n    N = N / 10\n    \n    digits\
    \ = N % 10\n    \n    if N < 10 \n        return digits::String\n    \n    N =\
    \ N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    \n    if N < 10 \n        return digits::String\n\
    \    \n    N = N / 10\n    \n    digits = N % 10\n    \n    if N < 10 \n     \
    \   return digits::String\n    \n    N = N / 10\n    \n    digits = N % 10\n \
    \   \n    if N < 10 \n        return digits::String\n    \n    N = N / 10\n  \
    \  \n    digits = N % 10\n    ", "    if N < 0 \n        return \"0\"\n    \n\
    \    digits = N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\
    \n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n  \
    \      return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n   \
    \ N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n   \
    \     return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n   \
    \ N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n\
    \    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0 \n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0 \n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0 \n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if ", "    if N < 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum += N % 10\n   \
    \     N /= 10\n    \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 4\nWrite a Julia function named \"solve\"\
    \ that takes in two integers N and M and returns the sum of the digits of N in\
    \ binary and M in decimal.", "    if N < 0 \n        return \"0\"\n    \n    digits\
    \ = N % 10\n    \n    if N < 10 \n        return digits::String\n    \n    digits\
    \ = solve(N / 10)\n    \n    return digits + digits\nend", "    if N < 0\n   \
    \     return \"-1\"\n    \n    sum = 0\n    \n    for i in N:\n        sum +=\
    \ i\n    \n    return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nWrite a Julia function called count_digits(N)\
    \ that takes an integer N and returns the number of digits in N in binary.", " \
    \   if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"0\"\
    , N)\n    if N < 100\n        return string(\"1\", N - 10)\n    if N < 1000\n\
    \        return string(\"10\", N - 100)\n    if N < 10000\n        return string(\"\
    11\", N - 1000)\n    if N < 100000\n        return string(\"100\", N - 10000)\n\
    \    if N < 1000000\n        return string(\"101\", N - 100000)\n    if N < 10000000\n\
    \        return string(\"110\", N - 1000000)\n    if N < 100000000\n        return\
    \ string(\"111\", N - 10000000)\n    if N < 1000000000\n        return string(\"\
    1000\", N - 10000000)\n    if N < 10000000000\n        return string(\"1001\"\
    , N - 100000000)\n    if N < 100000000000\n        return string(\"1010\", N -\
    \ 1000000000)\n    if N < 1000000000000\n        return string(\"1011\", N - 10000000000)\n\
    \    if N < 10000000000000\n        return string(\"1100\", N - 100000000000)\n\
    \    if N < 100000000000000\n        return string(\"1101\", N - 1000000000000)\n\
    \    if N < 1000000000000000\n        return string(\"1110\", N - 10000000000000)\n\
    \    if N < 10000000000000000\n        return string(\"1111\", N - 100000000000000)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    binary_to_decimal(binary_string::String)\n\
    \    \n    Convert binary string to decimal integer.\n    \n    Variables:\n \
    \       @binary_string string\n             Constraints: Binary string contains\
    \ only 0s and 1s.\n    Output:\n         an integer in decimal system.\n\"\"\"",
  "    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\n    if\
    \ N == 1\n        return \"1\"\n    \n    digits = N % 10\n    N = N / 10\n  \
    \  \n    digits = digits + solve(N)\n    \n    return digits\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 3\nGiven\
    \ a positive integer N, return the number of trailing zeroes in N's binary representation.",
  "    if N == 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N\
    \ < 10 \n        return digits::String\n    \n    digits = solve(N / 10)\n   \
    \ \n    digits = digits + digits::String\n    \n    return digits\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>", "    \n    if N < 0 \n     \
    \   error(\"N must be positive\")\n    \n    if N == 0 \n        return \"0\"\n\
    \    \n    if N == 1 \n        return \"1\"\n    \n    digits = String[]\n   \
    \ \n    digits = digits[1:N]\n    \n    sum = 0\n    \n    for i in digits\n \
    \       sum += Int(i)\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=juli", "    if N < 0 \n        return \"\
    0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n    binary\
    \ = \"\"\n    \n    while sum > 0:\n        binary = str(sum % 2) + binary\n \
    \       sum = int(sum / 2)\n    \n    return binary\nend", "    if N < 0 \n  \
    \      return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n       \
    \ return digits::String\n    \n    N = N / 10\n    \n    digits = digits + N %\
    \ 10\n    \n    return digits::String\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(", "    if N < 0\n        return \"0\"\n    if N == 0\n        return \"\
    0\"\n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n  \
    \  sum = \"\"\n    \n    while N > 0\n        N = N / 10\n        sum = sum +\
    \ digits_to_binary(digits)\n        digits = digits % 10\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000)\n</cell>\n<code language=julia-1.5>\nsolve(100000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(10000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(100000000000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000000000000000000000000000)\n</cell>\n", "    \n\
    \    if N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\
    \n    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n\
    \    binary = \"\"\n    \n    while N > 0\n        \n        N = N / 10\n    \
    \    \n        binary = binary + digits_to_binary(digits)\n        \n        digits\
    \ = N % 10\n    \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(N = 1000)\n</cell>\n<code language=julia-1.5>\nsolve(N = 150)\n</cell>\n\
    <code language=julia-1.5>\nsolve(N = 147)\n</cell>\n<text>\nProblem 7: Sum of\
    \ Digits", "    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n \
    \       return \"0\"\n    \n    digits = N % 10\n    \n    if digits == 0\n  \
    \      return solve(N/10)\n    \n    digits = solve(N/10)\n    \n    return digits\
    \ + digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</cell>\n", "    if\
    \ N < 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for n in N\n    \
    \    sum += n%2\n        \n    return sum.to_s(2)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary.\n    \n    Example\n        For N = 1000, the sum\
    \ of digits will be 1 the output should be \"1\".\n        For N = 150, the sum\
    \ of digits will be 6 the output should be \"110\".\n        For N = 147, the\
    \ sum of digits will be 12 the output should be \"1100\".\n    \n    Variables:\n\
    \        @N integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n\
    \         a string of binary number\n    \"\"\"", "    if N < 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n  \
    \  return bin(sum)[2:]\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.", "    if N < 0 \n \
    \       return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n      \
    \  return digits::String\n    \n    N = N / 10\n    \n    digits = digits + N\
    \ % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n    N\
    \ = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n \
    \   digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n    \n    digits = digits + N % 10\n    \n \
    \   N = N / 10\n    \n    digits = digits + N % 10\n    \n    N = N / 10\n   \
    \ \n    digits = digits + N % 10\n    \n    N = N / 10\n    \n    digits = digits\
    \ + N % 10\n    \n    N = N / 10\n", "    if N < 0\n        return \"-1\"\n  \
    \  if N == 0\n        return \"0\"\n    if N == 1\n        return \"1\"\n    \n\
    \    digits = N % 10\n    N = N / 10\n    \n    sum = \"\"\n    while N > 0\n\
    \        sum = sum + digits_to_binary(digits)\n        digits = digits * 2\n \
    \       N = N / 10\n    \n    return sum\nend", "    if N < 0\n        return\
    \ \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n    \
    \    return \"1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum\
    \ + N % 10\n        N = N / 10\n    end\n    \n    return string(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1400)\n</cell>\n<code language=julia-1.5>\n\
    solve(1450)\n</cell>\n<code language=julia-1.5>\nsolve(1460)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</", "    if N < 0\n        return \"0\"\n    \n    if N < 10\n \
    \       return string(\"0\", N)\n    \n    digits = string(\"0\", N)\n    \n \
    \   for i in 1:N\n        digits = digits[2:end-1] + digits[1:end-2] + digits[2:end]\n\
    \    end\n    \n    return digits\nend", "    if N < 0\n        error(\"N must\
    \ be positive\")\n    end\n    \n    if N == 0\n        return \"0\"\n    end\n\
    \    \n    digits = zeros(Int, N)\n    \n    for d in digits[digits[1:end-1]]\n\
    \        digits[d] = digits[d] + 1\n    end\n    \n    digits[digits[end-1]] +=\
    \ 1\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called sumdigits(N)\
    \ that returns the sum of its digits in binary.", "    if N < 0\n        return\
    \ \"0\"\n    \n    digits = zeros(Int, N+1)\n    digits[1] = 1\n    \n    for\
    \ i in 2..N\n        digits[i] = digits[i-1] + digits[i-2]\n    end\n    \n  \
    \  return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n@assert\
    \ solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"111\"\n\
    @assert solve(4) == \"1001\"\n@assert solve(5) == \"10010\"\n@assert solve(6)\
    \ == \"100110\"\n@assert solve(7) == \"1001110\"\n@assert solve(8) == \"10011110\"\
    \n@assert solve(9) == \"10011111\"\n@assert solve(10) == \"100111111\"\n@assert\
    \ solve(11) == \"1001111111\"\n@assert solve(12) == \"10011111110\"\n@assert solve(13)\
    \ == \"100111111110\"\n@assert solve(14) == \"1001111111101\"\n@assert solve(15)\
    \ == \"10011111111010\"\n@assert solve(16) == \"100111111110110\"\n@assert solve(17)\
    \ == \"1001111111101011\"\n@assert solve(18) == \"10011111111010110\"\n@assert\
    \ solve(19) == \"100111111110101011\"\n@assert solve(20) == \"1001111111101010100\"\
    \n@assert solve(21) == \"10011111111010101010\"\n@assert solve(22) == \"100111111110101010111\"\
    \n@assert solve(23) == \"1001111111101010101111\"\n@assert solve(24) == \"100111111110101010111111\"\
    \n@assert solve(25) == \"1001111111101010101111111\"\n@assert solve(26) == \"\
    10011111111010101011111111\"\n@assert solve(27) == \"100111111110101010111111111\"\
    \n@assert solve(28) == \"1001111111101010101111111110\"\n@assert solve(29) ==\
    \ \"10011111111010101011111111110\"\n@assert solve(30) == \"100111111110101010111111111101\"\
    \n@assert solve(31) == \"1001111111101010101111111111010\"\n@assert solve(32)\
    \ == \"10011111111010101011111111110110\"\n@assert solve(33) == \"100111111110101010111111111101011\"\
    \n@assert solve(34) == \"1001111111101010101111111111010110\"\n@assert solve(35)\
    \ == \"10011111111010101011111111110101011\"\n@assert solve(36) == \"100111111110",
  "    \n    if N < 0\n        return \"-1\"\n    \n    if N == 0\n        return\
    \ \"0\"\n    \n    if N == 1\n        return \"1\"\n    \n    sum = 0\n    \n\
    \    while N > 0\n        sum = sum + N % 2\n        N = N / 2\n    \n    return\
    \ String(sum)\nend", "    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int,\
    \ N+1)\n    digits[1] = 1\n    \n    for i in 2:N\n        digits[i] = digits[i-1]\
    \ * 2\n    \n    sum = 0\n    for i in digits[N]..digits[1]\n        sum += i\n\
    \    \n    return String(sum)\nend", "    if N < 0\n        return \"0\"\n   \
    \ \n    digits = N % 10\n    N = N / 10\n    \n    sum = \"\"\n    while N > 0\n\
    \        sum = sum + digits_to_binary(digits)\n        digits = digits % 10\n\
    \        N = N / 10\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(N = 1000)\n</cell>\n<code language=julia-1.5>\nsolve(N = 150)\n</cell>\n\
    <code language=julia-1.5>\nsolve(N = 147)\n</cell>\n<text>\nProblem 7\nGiven a\
    \ positive integer N, return the sum of its digits in base 10. Do not convert\
    \ the integer to a string and summing its digits directly. For example, given\
    \ N = 123, return 10.", "    if N == 0 \n        return \"0\"\n    \n    sum =\
    \ 0\n    \n    for i in N:\n        sum += i\n    \n    return bin(sum)[2:]\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(0) == \"0\"\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10501\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100010\"\
    \n@assert solve(30) == \"100011\"\n@assert solve(31) == \"100100\"\n@assert solve(32)\
    \ == \"100101\"\n@assert solve(33) == \"100110\"\n@assert solve(34) == \"100111\"\
    \n@assert solve(35) == \"101000\"\n@assert solve(36) == \"101001\"\n@assert solve(37)\
    \ == \"101010\"\n@assert solve(38) == \"101011\"\n@assert solve(39) == \"101100\"\
    \n@assert solve(40) == \"101101\"\n@assert solve(41) == \"101110\"\n@assert solve(42)\
    \ == \"101111\"\n@assert solve(43) == \"111000\"\n@assert solve(44) == \"111001\"\
    \n@assert solve(45) == \"111010\"\n@assert solve(46) == \"111011\"\n@assert solve(47)\
    \ == \"111100\"\n@assert solve(48) == \"1111011\"\n@assert solve(49) == \"111110\"\
    \n@assert solve(50) == \"111111\"\n@assert solve(51) == \"1000001\"\n@assert solve(52)\
    \ == \"1000010\"\n@assert solve(53) == \"1000011\"\n@assert solve(", "    if N\
    \ < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n\
    \    if N > 0\n        return solve(N) + digits\n    \n    return digits\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=julia-1.5>\nsolve(177)\n</cell>\n<code language=julia-1.5>\n\
    solve(178)\n</cell>\n<code language=julia-1.5>\nsolve(179)\n</cell>\n<code language=julia-1.5>",
  "    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    digits = digits + solve(N)\n\
    \    \n    return digits\nend", "    if N < 0\n        return \"0\"\n    \n  \
    \  sum = 0\n    \n    for i in 0..N\n        sum += digits(i)\n    \n    return\
    \ string(sum)\nend", "    \n    digits = N % 10\n    N = N / 10\n    \n    if\
    \ N < 10\n        return digits::String\n    \n    digits = solve(N)\n    \n \
    \   return digits::String + digits\nend", "    \n    if N < 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n\
    \        N = N / 10\n    \n    return sum.to_s\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=juli", "    \n    if N < 0\n        return\
    \ \"0\"\n    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n    \
    \    return \"1\"\n    \n    digits = N % 10\n    \n    if digits == 0\n     \
    \   return solve(N / 10)\n    \n    return solve(N / 10) + digits::String\nend",
  "    if N < 0\n        return \"-1\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    \n    return sum\nend",
  "    if N < 0\n        return \"0\"\n    \n    digits = String[]\n    \n    digits\
    \ = digits[0..(N-1)]\n    \n    sum = 0\n    for i in digits\n        sum += i\n\
    \    \n    sumStr = String(sum)\n    \n    return sumStr\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7: Find\
    \ all prime factors of a given number", "    if N == 0 \n        return \"0\"\n\
    \    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n    return\
    \ sum.to_s(2)\nend", "    if N < 0\n        return \"-1\"\n    \n    if N == 0\n\
    \        return \"0\"\n    \n    if N < 10\n        return String(N)\n    \n \
    \   sum = 0\n    \n    for i in N\n        sum += i\n    \n    return String(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert\
    \ solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\
    \n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n\
    @assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20)\
    \ == \"10100\"\n@assert solve(21) == \"10501\"\n@assert solve(22) == \"10110\"\
    \n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25)\
    \ == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\
    \n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100010\"\n@assert solve(30)\
    \ == \"100011\"\n@assert solve(31) == \"100100\"\n@assert solve(32) == \"100101\"\
    \n@assert solve(33) == \"100110\"\n@assert solve(34) == \"100111\"\n@assert solve(35)\
    \ == \"101000\"\n@assert solve(36) == \"101001\"\n@assert solve(37) == \"101010\"\
    \n@assert solve(38) == \"101011\"\n@assert solve(39) == \"101100\"\n@assert solve(40)\
    \ == \"101101\"\n@assert solve(41) == \"101110\"\n@assert solve(42) == \"101111\"\
    \n@assert solve(43) == \"111000\"\n@assert solve(44) == \"111001\"\n@assert solve(45)\
    \ == \"111010\"\n@assert solve(46) == \"111011\"\n@assert solve(47) == \"111100\"\
    \n@assert solve(48) == \"111101\"\n@assert solve(49) == \"111110\"\n@assert solve(50)\
    \ == \"111111\"\n@assert solve(51) == \"1000000\"\n@assert solve(52) == \"1000001\"\
    \n@assert solve(53", "    \n    if N < 0\n        return \"0\"\n    \n    digits\
    \ = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i] = digits[i-1] + N\
    \ % 10\n        N = N / 10\n    end\n    \n    return join(digits, \"\")\nend",
  "    if N < 0\n        return \"0\"\n    if N < 10\n        return string(\"1\"\
    ,N)\n    \n    digits = string(\"0\",N)\n    \n    digits = digits[2:end]\n  \
    \  \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n  \
    \  digits = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits\
    \ = digits[2:end]\n    \n    digits = digits[2:end]\n    \n    digits = digits[2:end]\n\
    \    \n    ", "    if N < 0\n        return \"-1\"\n    \n    digits = digits(N)\n\
    \    \n    if length(digits) == 0\n        return \"0\"\n    \n    sum = 0\n \
    \   for i in digits\n        sum += i\n    \n    return bin(sum)[2:]\nend\n</cell>\n\
    <code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\
    \n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert solve(5) ==\
    \ \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\n@assert solve(8)\
    \ == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10) == \"1010\"\n@assert\
    \ solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n@assert solve(13) == \"\
    1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15) == \"1111\"\n@assert\
    \ solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n@assert solve(18) ==\
    \ \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20) == \"10100\"\n\
    @assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\n@assert solve(23)\
    \ == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25) == \"11101\"\
    \n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\n@assert solve(28)\
    \ == \"100000\"\n@assert solve(29) == \"100001\"\n@assert solve(30) == \"100010\"\
    \n@assert solve(31) == \"100011\"\n@assert solve(32) == \"100100\"\n@assert solve(33)\
    \ == \"100101\"\n@assert solve(34) == \"100110\"\n@assert solve(35) == \"100111\"\
    \n@assert solve(36) == \"101000\"\n@assert solve(37) == \"101001\"\n@assert solve(38)\
    \ == \"101010\"\n@assert solve(39) == \"101011\"\n@assert solve(40) == \"101100\"\
    \n@assert solve(41) == \"101101\"\n@assert solve(42) == \"101110\"\n@assert solve(43)\
    \ == \"101111\"\n@assert solve(44) == \"111000\"\n@assert solve(45) == \"111001\"\
    \n@assert solve(46) == \"111010\"\n@assert solve(47) == \"111011\"\n@assert solve(48)\
    \ == \"111100\"\n@assert solve(49) == \"111101\"\n@assert solve(50) == \"111110\"\
    \n@assert solve(51) == \"111111\"\n@assert solve(52) == \"10000000\"\n@assert\
    \ solve(", "    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n  \
    \  N = N / 10\n    \n    if N == 0\n        return \"0\"\n    \n    digits = digits\
    \ + solve(N)\n    \n    return digits\nend", "    if N == 0 \n        return \"\
    0\"\n    if N < 0 \n        return \"0\"\n    \n    sum = 0\n    \n    while N\
    \ > 0 \n        sum += N % 2\n        N /= 2\n    \n    return String(sum)\nend\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 4\nWrite a Julia function named count_digits that takes an integer N and\
    \ returns the number of digits in N in binary.", "    if N < 0\n        return\
    \ \"Invalid input\"\n    if N == 0\n        return \"0\"\n    if N == 1\n    \
    \    return \"1\"\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n    \n\
    \    digits[2] = 1\n    \n    digits[3] = 1\n    \n    digits[4] = 1\n    \n \
    \   digits[5] = 1\n    \n    digits[6] = 1\n    \n    digits[7] = 1\n    \n  \
    \  digits[8] = 1\n    \n    digits[9] = 1\n    \n    digits = digits[N]\n    \n\
    \    sum = 0\n    \n    for i in digits\n        sum += i\n    \n    return show(sum)\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 7\nGiven a positive integer N, return the number of trailing zeroes in\
    \ N's binary representation.", "    if N < 0\n        return \"0\"\n    \n   \
    \ sum = 0\n    \n    for i in N:\n        sum += i\n    \n    binary = \"\"\n\
    \    \n    while sum > 0:\n        binary = binary + str(sum % 2)\n        sum\
    \ = int(sum / 2)\n    \n    return binary\nend", "    if N < 0 \n        return\
    \ \"-1\"\n    if N == 0 \n        return \"0\"\n    if N == 1 \n        return\
    \ \"1\"\n    \n    digits = N % 10\n    N = N / 10\n    \n    sum = \"\"\n   \
    \ while N > 0 \n        sum = sum + digits_to_binary(digits)\n        digits =\
    \ digits * 2\n        N = N / 2\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</", "    if N < 0\n        return \"0\"\n    \n    sum = 0\n   \
    \ \n    for i in N:\n        sum += i\n    \n    return sum.to_s(2)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>\n\
    solve(175)\n</cell>\n<code language=julia-1.5>\nsolve(176)\n</cell>\n<code language=julia-1.5>\n\
    solve(177)\n</cell>\n<code language=juli", "    if N < 0\n        return \"-1\"\
    \n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"1\"\n \
    \   \n    digits = zeros(Int, N)\n    digits[1] = 1\n    digits[2] = 1\n    digits[3]\
    \ = 1\n    digits[4] = 1\n    digits[5] = 1\n    digits[6] = 1\n    digits[7]\
    \ = 1\n    digits[8] = 1\n    digits[9] = 1\n    \n    sum = 0\n    for i in digits\n\
    \        sum += i\n    \n    return show(sum)\nend", "    \n    if N < 0 \n  \
    \      return \"-1\"\n    \n    if N == 0 \n        return \"0\"\n    \n    if\
    \ N == 1 \n        return \"1\"\n    \n    digits = N % 10\n    \n    binary =\
    \ \"\"\n    \n    while N > 0 \n        \n        binary = digits_to_binary(digits,\
    \ binary)\n        \n        N = N / 10\n        \n        digits = N % 10\n \
    \   \n    return binary\nend\n</cell>\n<code language=julia-1.5>\n@assert solve(1)\
    \ == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4)\
    \ == \"100\"\n@assert solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert\
    \ solve(7) == \"111\"\n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\
    \n@assert solve(10) == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12)\
    \ == \"1100\"\n@assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n\
    @assert solve(15) == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17)\
    \ == \"10001\"\n@assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\
    \n@assert solve(20) == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22)\
    \ == \"10110\"\n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\
    \n@assert solve(25) == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27)\
    \ == \"11111\"\n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\
    \n@assert solve(30) == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32)\
    \ == \"100005\"\n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\
    \n@assert solve(35) == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37)\
    \ == \"100010\"\n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\
    \n@assert solve(40) == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42)\
    \ == \"100015\"\n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\
    \n@assert solve(45) == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47)\
    \ == \"100020\"\n@assert solve(48) == \"100021\"\n@assert solve(", "    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n  \
    \      return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend", "    if N < 0\n        return \"0\"\n    if N < 10\n\
    \        return string(\"1\",N)\n    if N < 100\n        return string(\"10\"\
    ,N)\n    if N < 1000\n        return string(\"11\",N)\n    if N < 10000\n    \
    \    return string(\"100\",N)\n    if N < 100000\n        return string(\"1000\"\
    ,N)\n    if N < 1000000\n        return string(\"10000\",N)\n    if N < 10000000\n\
    \        return string(\"100000\",N)\n    if N < 100000000\n        return string(\"\
    1000000\",N)\n    if N < 1000000000\n        return string(\"10000000\",N)\n \
    \   if N < 10000000000\n        return string(\"100000000\",N)\n    if N < 100000000000\n\
    \        return string(\"1000000000\",N)\n    if N < 1000000000000\n        return\
    \ string(\"10000000000\",N)\n    if N < 10000000000000\n        return string(\"\
    100000000000\",N)\n    if N < 100000000000000\n        return string(\"1000000000000\"\
    ,N)\n    if N < 1000000000000000\n        return string(\"10000000000000\",N)\n\
    \    if N < 10000000000000000\n        return string(\"100000000000000\",N)\n\
    \    if N < 100000000000000000\n        return string(\"1000000000000000\",N)\n\
    \    if N < 1000000000000000000\n        return string(\"10000000000000000\",N)\n\
    \    if N < 10000000000000000000\n        return string(\"100000000000000000\"\
    ,N)\n    if N < 100000000000000000000\n        return string(\"1000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000\n        return string(\"10000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000\n        return string(\"100000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000\n        return string(\"1000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000\n        return string(\"10000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000\n        return string(\"100000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000\n        return string(\"1000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000\n        return string(\"10000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000\n        return string(\"100000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000\n        return string(\"1000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000\n        return string(\"10000000000000000000000000000\"\
    ,N)\n    if N < 10000000000000000000000000000000\n        return string(\"100000000000000000000000000000\"\
    ,N)\n    if N < 100000000000000000000000000000000\n        return string(\"1000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\n        return string(\"10000000000000000000000000000000\"\
    ,N)\n    if N < 1000000000000000000000000000000000\n        return string", " \
    \   if N < 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for i in N:\n\
    \        sum += i\n    \n    return bin(sum)[2:]\nend", "    if N < 0\n      \
    \  throw(DomainError(string(\"N must be positive\")))\n    \n    if N == 0\n \
    \       return \"0\"\n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n\
    \        digits[i] = N % 2\n        N = N / 2\n    end\n    \n    sum = 0\n  \
    \  for i = 1:N\n        sum = sum + digits[i]\n    end\n    \n    return string(digits,\
    \ sum)\nend", "    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits =\
    \ digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n\
    \    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n    \
    \    return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n\
    \    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N\
    \ = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n    digits = digits\
    \ + N % 10\n    N = N / 10\n    \n    if N < 0\n        return \"0\"\n    \n \
    \   digits = digits + N % 10\n    N = N / 10\n    \n    if N < 0\n        return\
    \ \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n    \n    if N <\
    \ 0\n        return \"0\"\n    \n    digits = digits + N % 10\n    N = N / 10\n\
    \    \n    if N < 0\n        return \"0\"\n    \n    digits = digits + N % 10\n\
    \    N = N / 10\n    \n    if ", "    if N < 0 \n        return \"-1\"\n    \n\
    \    if N == 0 \n        return \"0\"\n    \n    if N == 1 \n        return \"\
    1\"\n    \n    digits = N % 10\n    \n    sumDigits = solve(N//10)\n    \n   \
    \ return sumDigits + digits\nend\n</cell>\n<code language=julia-1.5>\nsolve(1)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n</cell>\n<code language=julia-1.5>\nsolve(174)\n</cell>\n<code language=julia-1.5>",
  "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    digits = \"\"\n    while\
    \ N > 0\n        digits = digits + str((N % 10).digits)\n        N = N / 10\n\
    \        sum = sum + N % 10\n    end\n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ number of trailing zeroes in N's binary representation.\n    \n    Example\n\
    \        For N = 1000, the trailing zeroes will be \"10\".\n        For N = 147,\
    \ the trailing zeroes will be \"11\".\n        For N = 15, the trailing zeroes\
    \ will be \"1\".\n    \n    Variables:\n        @N integer\n             Constraints:\
    \ 0 \u2264 N \u2264 10000.\n    Output:\n         an integer\n    \"\"\"", " \
    \   \n    if N < 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n \
    \   \n    for i = 1:N\n        digits[i] = digits[i-1] + N % 10\n        N = N\
    \ / 10\n    end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<text>\nProblem 7: Binary to Decimal\nGiven a binary number\
    \ represented as a string, convert it to decimal and return the decimal number.",
  "    \n    if N < 0 \n        return \"0\"\n    \n    if N == 0 \n        return\
    \ \"0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    digits = \"\"\n\
    \    \n    while N > 0 \n        digits = digits + string(N % 2)\n        N =\
    \ floor(N / 2)\n    \n    return digits\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called sumdigits(N)\
    \ that takes an integer N and returns the sum of its digits in binary.", "   \
    \ if N < 0\n        return \"0\"\n    \n    if N == 0\n        return \"0\"\n\
    \    \n    if N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n\
    \    sum = 0\n    \n    while N > 0\n        sum += digits\n        N /= 10\n\
    \        \n    return sum.to_s(2)\nend", "    if N < 0\n        return \"0\"\n\
    \    \n    if N == 0\n        return \"0\"\n    \n    if N == 1\n        return\
    \ \"1\"\n    \n    digits = zeros(Int, N)\n    \n    for i = 1:N\n        digits[i]\
    \ = N % 2\n        N = N / 2\n    end\n    \n    sum = 0\n    for i = 1:N\n  \
    \      sum = sum + digits[i]\n    end\n    \n    return string(digits, sum)\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"11\"\n@assert solve(4) == \"100\"\n@assert\
    \ solve(5) == \"101\"\n@assert solve(6) == \"110\"\n@assert solve(7) == \"111\"\
    \n@assert solve(8) == \"1000\"\n@assert solve(9) == \"1001\"\n@assert solve(10)\
    \ == \"1010\"\n@assert solve(11) == \"1011\"\n@assert solve(12) == \"1100\"\n\
    @assert solve(13) == \"1101\"\n@assert solve(14) == \"1110\"\n@assert solve(15)\
    \ == \"1111\"\n@assert solve(16) == \"10000\"\n@assert solve(17) == \"10001\"\n\
    @assert solve(18) == \"10010\"\n@assert solve(19) == \"10011\"\n@assert solve(20)\
    \ == \"10100\"\n@assert solve(21) == \"10101\"\n@assert solve(22) == \"10110\"\
    \n@assert solve(23) == \"10111\"\n@assert solve(24) == \"11100\"\n@assert solve(25)\
    \ == \"11101\"\n@assert solve(26) == \"11110\"\n@assert solve(27) == \"11111\"\
    \n@assert solve(28) == \"100001\"\n@assert solve(29) == \"100002\"\n@assert solve(30)\
    \ == \"100003\"\n@assert solve(31) == \"100004\"\n@assert solve(32) == \"100005\"\
    \n@assert solve(33) == \"100006\"\n@assert solve(34) == \"100007\"\n@assert solve(35)\
    \ == \"100008\"\n@assert solve(36) == \"100009\"\n@assert solve(37) == \"100010\"\
    \n@assert solve(38) == \"100011\"\n@assert solve(39) == \"100012\"\n@assert solve(40)\
    \ == \"100013\"\n@assert solve(41) == \"100014\"\n@assert solve(42) == \"100015\"\
    \n@assert solve(43) == \"100016\"\n@assert solve(44) == \"100017\"\n@assert solve(45)\
    \ == \"100018\"\n@assert solve(46) == \"100019\"\n@assert solve(47) == \"100020\"\
    \n@assert solve(48) == \"100021\"\n@assert solve(49) == \"", "    if N < 0\n \
    \       return \"-1\"\n    \n    if N == 0\n        return \"0\"\n    \n    if\
    \ N == 1\n        return \"1\"\n    \n    digits = N % 10\n    \n    binary =\
    \ \"\"\n    \n    while N > 0\n        N = N / 10\n        binary = binary + digits_to_binary(digits)\n\
    \        digits = N % 10\n    \n    return binary\nend", "    if N < 0\n     \
    \   return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n        return\
    \ digits\n    \n    digits = solve(N / 10)\n    \n    return digits + digits\n\
    end", "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    for i\
    \ in N\n        sum = sum + i\n    \n    sumstr = String(sum)\n    \n    return\
    \ sumstr\nend", "    if N < 0\n        return \"0\"\n    \n    if N == 0\n   \
    \     return \"0\"\n    \n    if N < 10\n        return tostring(N)\n    \n  \
    \  digits = tostring(N)\n    \n    sum = 0\n    \n    for i in digits\n      \
    \  sum += tointeger(i)\n    \n    return tostring(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert solve(1) == \"1\"\n@assert solve(2) == \"10\"\n@assert solve(3) == \"\
    111\"\n@assert solve(4) == \"1001\"\n@assert solve(5) == \"10010\"\n@assert solve(6)\
    \ == \"100110\"\n@assert solve(7) == \"1001110\"\n@assert solve(8) == \"10011110\"\
    \n@assert solve(9) == \"10011111\"\n@assert solve(10) == \"10101\"\n@assert solve(11)\
    \ == \"101010\"\n@assert solve(12) == \"1010111\"\n@assert solve(13) == \"10101110\"\
    \n@assert solve(14) == \"10101101\"\n@assert solve(15) == \"10101010\"\n@assert\
    \ solve(16) == \"101010111\"\n@assert solve(17) == \"1010101110\"\n@assert solve(18)\
    \ == \"1010111101\"\n@assert solve(19) == \"1010111110\"\n@assert solve(20) ==\
    \ \"10101111110\"\n@assert solve(21) == \"10101111111\"\n@assert solve(22) ==\
    \ \"10101101101\"\n@assert solve(23) == \"10101101011\"\n@assert solve(24) ==\
    \ \"101011011010\"\n@assert solve(25) == \"1010110110110\"\n@assert solve(26)\
    \ == \"1010110110111\"\n@assert solve(27) == \"10101101101101\"\n@assert solve(28)\
    \ == \"10101101101110\"\n@assert solve(29) == \"101011011011111\"\n@assert solve(30)\
    \ == \"101011011011010\"\n@assert solve(31) == \"1010110110110110\"\n@assert solve(32)\
    \ == \"1010110110111101\"\n@assert solve(33) == \"1010110110111110\"\n@assert\
    \ solve(34) == \"10101101101111110\"\n@assert solve(35) == \"10101101101111111\"\
    \n@assert solve(36) == \"10101101101101101\"\n@assert solve(37) == \"10101101101101011\"\
    \n@assert solve(38) == \"101011011011011010\"\n@assert solve(39) == \"1010110110110110110\"\
    \n@assert solve(40) == \"1010110110111111010\"\n@assert solve(41) == \"10101101101111110110\"\
    \n@assert solve(", "    if N < 0\n        return \"0\"\n    \n    digits = N %\
    \ 10\n    \n    if N < 10\n        return digits::String\n    \n    digits = solve(N\
    \ / 10)\n    \n    digits = digits + digits::String\n    \n    return digits\n\
    end", "    if N < 0\n        return \"0\"\n    if N == 0\n        return \"0\"\
    \n    if N == 1\n        return \"1\"\n    \n    digits = zeros(Int, 10)\n   \
    \ digits[1] = 1\n    digits[2] = 1\n    digits[3] = 1\n    digits[4] = 1\n   \
    \ digits[5] = 1\n    digits[6] = 1\n    digits[7] = 1\n    digits[8] = 1\n   \
    \ digits[9] = 1\n    \n    sum = 0\n    \n    for i in digits[N]\n        sum\
    \ += i\n    \n    return string(digits[N]) + string(sum)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-", "    if N < 0\n        return \"\
    -1\"\n    \n    digits = N % 10\n    \n    if N < 10\n        return digits::String\n\
    \    \n    digits = solve(N / 10)\n    \n    return digits + digits::String\n\
    end", "    if N < 0 \n        return \"0\"\n    \n    sum = 0\n    digits = N\
    \ % 10\n    \n    while N > 0\n        sum += digits\n        N = N / 10\n   \
    \     digits = N % 10\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nGiven a positive integer N, return the\
    \ sum of its digits in binary using only bit operations.\n    \n    Example\n\
    \        For N = 1000, the sum of digits will be 1 the output should be \"1\"\
    .\n        For N = 150, the sum of digits will be 6 the output should be \"110\"\
    .\n        For N = 147, the sum of digits will be 12 the output should be \"1100\"\
    .\n    \n    Variables:\n        @N integer\n             Constraints: 0 \u2264\
    \ N \u2264 10000.\n    Output:\n         a string of binary number\n    \"\"\"",
  "    if N < 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n\
    \    \n    sum = \"\"\n    \n    while N > 0\n        sum = sum + digits_to_binary(digits)\n\
    \        digits = digits % 10\n        N = N / 10\n    end\n    \n    return sum\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\n\
    Problem 3\nWrite a Julia function named digits_to_binary that takes an integer\
    \ N and returns the binary representation of N in string format.", "    if N <\
    \ 0 \n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10 \n\
    \        return digits::String\n    \n    digits = solve(N / 10)\n    \n    return\
    \ digits + digits\nend", "    if N < 0\n        return \"0\"\n    \n    sum =\
    \ 0\n    digits = N % 10\n    \n    while N > 0\n        sum += digits\n     \
    \   N /= 10\n        digits = N % 10\n    \n    return to_string(sum)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n\
    </cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<text>\nProblem 7\nWrite\
    \ a Julia function called sum_to_n_digits(N) that returns the sum of its digits\
    \ in binary.", "    if N < 0\n        return \"-1\"\n    if N == 0\n        return\
    \ \"0\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum + N % 10\n\
    \        N = N / 10\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1500)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell", "    \n    if N < 0\n        return \"-1\"\n    \n    if\
    \ N == 0\n        return \"0\"\n    \n    if N == 1\n        return \"1\"\n  \
    \  \n    digits = String[1..N]\n    \n    sum = 0\n    \n    for i in digits\n\
    \        sum += i\n    \n    return String(sum)\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1500)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>\n<code language=julia-1.5>\n\
    solve(1480)\n</cell>\n<code language=julia-1.5>\nsolve(1480)\n</cell>", "    \n\
    \    if N < 0 \n        return \"-1\"\n    \n    if N == 0 \n        return \"\
    0\"\n    \n    if N == 1 \n        return \"1\"\n    \n    if N == 2 \n      \
    \  return \"10\"\n    \n    if N % 2 == 0 \n        return solve(N / 2::Int64)\
    \ + solve(N / 2::Int64) + \"0\"\n    \n    return solve(N / 2::Int64) + solve(N\
    \ / 2::Int64) + \"1\"\nend\n</cell>\n<code language=julia-1.5>\nsolve(N::Int64)\n\
    </cell>\n<text>\nProblem 3\nGiven a positive integer N, return the sum of its\
    \ digits in binary.\n    \n    Example\n        For N = 1000, the sum of digits\
    \ will be 1 the output should be \"1\".\n        For N = 150, the sum of digits\
    \ will be 6 the output should be \"110\".\n        For N = 147, the sum of digits\
    \ will be 12 the output should be \"1100\".\n    \n    Variables:\n        @N\
    \ integer\n             Constraints: 0 \u2264 N \u2264 10000.\n    Output:\n \
    \        a string of binary number\n    \"\"\"", "    \n    digits = \"\"\n  \
    \  \n    for i in N:\n        digits = digits + bin(i)[2:]\n    \n    return digits\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(2)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 7: Find the sum of all odd numbers from 1\
    \ to 100", "    if N < 0\n        throw(DomainError(\"N must be positive\"))\n\
    \    if N == 0\n        return \"0\"\n    \n    digits = zeros(Int, N)\n    digits[1]\
    \ = 1\n    \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n\
    \    end\n    \n    return string(digits)\nend", "    \n    if N < 0\n       \
    \ return \"-1\"\n    \n    sum = 0\n    \n    while N > 0\n        sum = sum +\
    \ N % 10\n        N = N / 10\n    \n    return string(sum)\nend", "    if N <\
    \ 0\n        return \"0\"\n    \n    digits = N % 10\n    N = N / 10\n    \n \
    \   if N == 0\n        return \"0\"\n    \n    sum = \"\"\n    \n    while N >\
    \ 0\n        sum = sum + digits_to_binary(digits)\n        digits = digits * 2\n\
    \        N = N / 2\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(10000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(10000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(100000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(1000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(10000000000000000000)\n</cell>\n<code\
    \ language=julia-1.5>\nsolve(100000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(10000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100000000000000000000000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(1000000000000000000000000)\n</cell>\n<code language=julia-1.5>\n\
    solve(10000000000000000000000000)\n</cell>\n<code language=julia-1.5>\nsolve(100000000000000000000000000)\n\
    </cell>\n<code language=julia-1.5>\nsolve(1000000000000000000000000000)\n</",
  "    \n    sum = 0\n    \n    for i in N:\n        sum += i\n    \n    return sum.to_binary(digits=N)\n\
    end", "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    digits = \"\"\
    \n    \n    while N > 0\n        digits = digits + str((N % 10).digits)\n    \
    \    N = N / 10\n        sum = sum + N % 10\n    \n    return digits + sum.to_s\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(1) == \"1\"\n@assert solve(2)\
    \ == \"10\"\n@assert solve(3) == \"111\"\n@assert solve(4) == \"1010\"\n@assert\
    \ solve(5) == \"1011\"\n@assert solve(6) == \"11001\"\n@assert solve(7) == \"\
    110011\"\n@assert solve(8) == \"1100011\"\n@assert solve(9) == \"11000011\"\n\
    @assert solve(10) == \"110000011\"\n@assert solve(11) == \"1100000011\"\n@assert\
    \ solve(12) == \"11000000011\"\n@assert solve(13) == \"110000000011\"\n@assert\
    \ solve(14) == \"1100000000011\"\n@assert solve(15) == \"110000000000101\"\n@assert\
    \ solve(16) == \"110000000000010011\"\n@assert solve(17) == \"1100000000000010011\"\
    \n@assert solve(18) == \"11000000000000010011\"\n@assert solve(19) == \"110000000000000010011\"\
    \n@assert solve(20) == \"1100000000000000010011\"\n@assert solve(21) == \"110000000000000001010011\"\
    \n@assert solve(22) == \"1100000000000000010100101\"\n@assert solve(23) == \"\
    110000000000000001010010011\"\n@assert solve(24) == \"1100000000000000010100100011\"\
    \n@assert solve(25) == \"11000000000000000101001000011\"\n@assert solve(26) ==\
    \ \"110000000000000001010010000011\"\n@assert solve(27) == \"110000000000000001010000000011\"\
    \n@assert solve(28) == \"1100000000000000010100000000011\"\n@assert solve(29)\
    \ == \"11000000000000000101000000000011\"\n@assert solve(30) == \"11000000000000000101000000000001\"\
    \n@assert solve(31) == \"11000000000000000101000000000000\"\n@assert solve(32)\
    \ == \"110000000000000001010000000000000\"\n@assert solve(33) == \"1100000000000000010100000000000000\"\
    \n@assert solve(34) == \"11000000000000000101000000000000000\"\n@assert solve(35)\
    \ == \"110000000000000001010000000000000000\"\n@assert solve(36) == \"1100000000000000010100000000000000000\"\
    \n@assert solve(37) == \"11000000000000000101000000000000000000\"\n@assert solve(38)\
    \ == \"", "    if N < 0\n        return \"0\"\n    \n    sum = 0\n    \n    for\
    \ i in N\n        sum += i\n    \n    return sum.to_binary(2)\nend\n</cell>\n\
    <code language=julia-1.5>\nsolve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n\
    </cell>\n<code language=julia-1.5>\nsolve(100)\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<code language=julia-1.5>\nsolve(148)\n</cell>\n<code language=julia-1.5>\n\
    solve(149)\n</cell>\n<code language=julia-1.5>\nsolve(151)\n</cell>\n<code language=julia-1.5>\n\
    solve(152)\n</cell>\n<code language=julia-1.5>\nsolve(153)\n</cell>\n<code language=julia-1.5>\n\
    solve(154)\n</cell>\n<code language=julia-1.5>\nsolve(155)\n</cell>\n<code language=julia-1.5>\n\
    solve(156)\n</cell>\n<code language=julia-1.5>\nsolve(157)\n</cell>\n<code language=julia-1.5>\n\
    solve(158)\n</cell>\n<code language=julia-1.5>\nsolve(159)\n</cell>\n<code language=julia-1.5>\n\
    solve(160)\n</cell>\n<code language=julia-1.5>\nsolve(161)\n</cell>\n<code language=julia-1.5>\n\
    solve(162)\n</cell>\n<code language=julia-1.5>\nsolve(163)\n</cell>\n<code language=julia-1.5>\n\
    solve(164)\n</cell>\n<code language=julia-1.5>\nsolve(165)\n</cell>\n<code language=julia-1.5>\n\
    solve(166)\n</cell>\n<code language=julia-1.5>\nsolve(167)\n</cell>\n<code language=julia-1.5>\n\
    solve(168)\n</cell>\n<code language=julia-1.5>\nsolve(169)\n</cell>\n<code language=julia-1.5>\n\
    solve(170)\n</cell>\n<code language=julia-1.5>\nsolve(171)\n</cell>\n<code language=julia-1.5>\n\
    solve(172)\n</cell>\n<code language=julia-1.5>\nsolve(173)\n</cell>\n<code language=julia-1.5>\n\
    solve(174)\n</cell>\n<code language=julia-1.5>\nsolve(175)\n</cell>\n<code language=julia-1.5>\n\
    solve(176)\n</cell>\n<code language=juli", "    if N < 0\n        return \"-1\"\
    \n    if N == 0\n        return \"0\"\n    if N == 1\n        return \"1\"\n \
    \   \n    digits = N % 10\n    N = N / 10\n    \n    sum = \"\"\n    while N >\
    \ 0\n        sum = sum + digits_to_binary(digits)\n        digits = digits * 2\n\
    \        N = N / 2\n    end\n    \n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1)\n</cell>\n<code language=julia-1.5>\nsolve(10)\n</cell>\n<code language=julia-1.5>\n\
    solve(100)\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n<code language=julia-1.5>\n\
    solve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n</cell>\n<code language=julia-1.5>\n\
    solve(148)\n</cell>\n<code language=julia-1.5>\nsolve(149)\n</cell>\n<code language=julia-1.5>\n\
    solve(151)\n</cell>\n<code language=julia-1.5>\nsolve(152)\n</cell>\n<code language=julia-1.5>\n\
    solve(153)\n</cell>\n<code language=julia-1.5>\nsolve(154)\n</cell>\n<code language=julia-1.5>\n\
    solve(155)\n</cell>\n<code language=julia-1.5>\nsolve(156)\n</cell>\n<code language=julia-1.5>\n\
    solve(157)\n</cell>\n<code language=julia-1.5>\nsolve(158)\n</cell>\n<code language=julia-1.5>\n\
    solve(159)\n</cell>\n<code language=julia-1.5>\nsolve(160)\n</cell>\n<code language=julia-1.5>\n\
    solve(161)\n</cell>\n<code language=julia-1.5>\nsolve(162)\n</cell>\n<code language=julia-1.5>\n\
    solve(163)\n</cell>\n<code language=julia-1.5>\nsolve(164)\n</cell>\n<code language=julia-1.5>\n\
    solve(165)\n</cell>\n<code language=julia-1.5>\nsolve(166)\n</cell>\n<code language=julia-1.5>\n\
    solve(167)\n</cell>\n<code language=julia-1.5>\nsolve(168)\n</cell>\n<code language=julia-1.5>\n\
    solve(169)\n</cell>\n<code language=julia-1.5>\nsolve(170)\n</cell>\n<code language=julia-1.5>\n\
    solve(171)\n</cell>\n<code language=julia-1.5>\nsolve(172)\n</cell>\n<code language=julia-1.5>\n\
    solve(173)\n", "    if N < 0\n        return \"0\"\n    \n    digits = String[]\n\
    \    \n    push!(digits, 0)\n    \n    while N > 0\n        push!(digits, N %\
    \ 2)\n        N /= 2\n    end\n    \n    digits = reverse(digits)\n    \n    return\
    \ join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\nsolve(1000)\n</cell>\n\
    <code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\nsolve(147)\n\
    </cell>\n<text>\nProblem 7\nWrite a Julia function called sumdigits(N) that takes\
    \ an integer N and returns the sum of its digits in binary.", "    if N < 0\n\
    \        return \"0\"\n    \n    digits = zeros(Int, 10)\n    digits[1] = 1\n\
    \    \n    for i = 2 to N\n        digits[i] = digits[i-1] + digits[i-2]\n   \
    \ end\n    \n    return join(digits, \"\")\nend\n</cell>\n<code language=julia-1.5>\n\
    solve(1000)\n</cell>\n<code language=julia-1.5>\nsolve(150)\n</cell>\n<code language=julia-1.5>\n\
    solve(147)\n</cell>\n<text>\nProblem 3\nWrite a Julia function called digitsum\
    \ that takes a positive integer N and returns the sum of its digits in binary.",
  "    if N < 0\n        return \"-1\"\n    \n    sum = 0\n    \n    for i in N\n\
    \        sum += i\n        \n    return sum.to_binary(2)\nend", "    \n    if\
    \ N < 0\n        return \"0\"\n    \n    digits = N % 10\n    \n    if N < 10\n\
    \        return digits\n    \n    digits = digits + solve(N / 10)\n    \n    return\
    \ digits\nend"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
