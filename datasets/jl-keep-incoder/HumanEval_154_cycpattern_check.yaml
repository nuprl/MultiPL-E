name: HumanEval_154_cycpattern_check
language: julia
prompt: "\"\"\"You are given 2 words. You need to return True if the second word or\
  \ any of its rotations is a substring in the first word\n    cycpattern_check(\"\
  abcd\",\"abd\") => False\n    cycpattern_check(\"hello\",\"ell\") => True\n    cycpattern_check(\"\
  whassup\",\"psus\") => False\n    cycpattern_check(\"abab\",\"baa\") => True\n \
  \   cycpattern_check(\"efef\",\"eeff\") => False\n    cycpattern_check(\"himenss\"\
  ,\"simen\") => True\n\n    \"\"\"\nfunction cycpattern_check(a::String, b::String)::Bool\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = cycpattern_check;\n\t@test(candidate(\"\
  xyzw\", \"xyw\") == false)\n\t@test(candidate(\"yello\", \"ell\") == true)\n\t@test(candidate(\"\
  whattup\", \"ptut\") == false)\n\t@test(candidate(\"efef\", \"fee\") == true)\n\t\
  @test(candidate(\"abab\", \"aabb\") == false)\n\t@test(candidate(\"winemtt\", \"\
  tinem\") == true)\nend\n"
completions: ["    \n    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    end\n    \n    \n    if length(a) == 1 \n        return b == a\n\
    \    end\n    \n    \n    if length(b) == 1 \n        return b == a\n    end\n\
    \    \n    \n    if length(a) == length(b) \n        return b == a\n    end\n\
    \    \n    \n    if length(a) > length(b) \n        return false\n    end\n  \
    \  \n    \n    if length(a) < length(b) \n        return false\n    end\n    \n\
    \    \n    if length(a) == 1 \n        return b == a\n    end\n    \n    \n  \
    \  if length(b) == 1 \n        return b == a\n    end\n    \n    \n    if length(a)\
    \ == length(b) \n        return b == a\n    end\n    \n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    \n    if length(a) <\
    \ length(b) \n        return false\n    end\n    \n    \n    if length(a) == 1\
    \ \n        return b == a\n    end\n    \n    \n    if length(b) == 1 \n     \
    \   return b == a\n    end\n    \n    \n    if length(a) == length(b) \n     \
    \   return b == a\n    end\n    \n    \n    if length(a) > length(b) \n      \
    \  return false\n    end\n    \n    \n    if length(a) < length(b) \n        return\
    \ false\n    end\n    \n    \n    if length(a) == 1 \n        return b == a\n\
    \    end\n    \n    \n    if length(b) == 1 \n        return b == a\n    end\n\
    \    \n    \n    if length(a) == length(b) \n        return b == a\n    end\n\
    \    \n    \n    if length(a) > length(b) \n        return false\n    end\n  \
    \  \n    \n    if length(a) < length(b) \n        return false\n    end\n    \n\
    \    \n    if length(a) == 1 \n        return b == a\n    end\n    \n    \n  \
    \  if length(b) == 1 \n        return b == a\n    end\n    \n    \n    if length(a)\
    \ == length(b) \n        return b == a\n    end\n    \n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    \n    if length(a) <\
    \ length(b) \n        return false\n    end\n    \n    \n    if length(a) == 1\
    \ \n        return b == a\n    end\n    \n    \n    if length(b) == 1 \n     \
    \   return b == a\n    end\n    \n    \n    if length(a) == length(b) \n     \
    \   return b == a\n    end\n    \n    \n    if ", "    \n    if length(a) == 0\
    \ || length(b) == 0 \n        return false\n    else \n        \n        if b\
    \ == a \n            return true\n        else \n            \n            if\
    \ length(a) > length(b) \n                \n                let (left,right) =\
    \ split_string(a)\n                let (left,right) = split_string(b)\n      \
    \          \n                let (left,right) = split_string(right)\n        \
    \        let (left,right) = split_string(left)\n                \n           \
    \     if left == right \n                    return true\n                else\
    \ \n                    return false\n            else \n                \n  \
    \              let (left,right) = split_string(a)\n                let (left,right)\
    \ = split_string(b)\n                \n                let (left,right) = split_string(right)\n\
    \                let (left,right) = split_string(left)\n                \n   \
    \             if left == right \n                    return true\n           \
    \     else \n                    return false\n        end\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that checks if a word is a palindrome. Palindromes\
    \ are words that read the same backward as forward.", "    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n \
    \   \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 0 \n\
    \        return false\n    \n    if length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 0 \n\
    \        return false\n    \n    if length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 0 \n\
    \        return false\n    \n    if length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 0 \n\
    \        return false\n    \n    if length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 0 \n\
    \        return false\n    \n    if length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 0 \n\
    \        return false\n    \n    if length(b) == 0 \n", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false", "    \n    if length(a) == 0 || length(b) == 0 \n\
    \        return false\n    \n    if length(a) == 1 \n        return true\n   \
    \ \n    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 ", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if a[1] == b[1] \n \
    \       return true\n    \n    if a[1] == b[2] \n        return true\n    \n \
    \   if a[2] == b[1] \n        return true\n    \n    if a[2] == b[2] \n      \
    \  return true\n    \n    if a[0] == b[0] \n        return true\n    \n    if\
    \ a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n        return\
    \ true\n    \n    if a[1] == b[0] \n        return true\n    \n    if a[1] ==\
    \ b[1] \n        return true\n    \n    if a[1] == b[2] \n        return true\n\
    \    \n    if a[2] == b[0] \n        return true\n    \n    if a[2] == b[1] \n\
    \        return true\n    \n    if a[2] == b[2] \n        return true\n    \n\
    \    if a[1] == b[0] || a[2] == b[0] || a[0] == b[1] || a[2] == b[1] || a[0] ==\
    \ b[2] || a[1] == b[2] || a[2] == b[2] \n        return true\n    \n    if a[1]\
    \ == b[0] || a[2] == b[0] || a[0] == b[1] || a[2] == b[1] || a[0] == b[2] || a[1]\
    \ == b[2] || a[2] == b[2] \n        return true\n    \n    if a[0] == b[0] ||\
    \ a[1] == b[0] || a[2] == b[0] || a[0] == b[1] || a[1] == b[1] || a[2] == b[1]\
    \ || a[0] == b[2] || a[1] == b[2] || a[2] == b[2] \n        return true\n    \n\
    \    if a[0] == b[0] || a[1] == b[0] || a[2] == b[0] || a[0] == b[1] || a[1] ==\
    \ b[1] || a[2] == b[1] || a[0] == b[2] || a[1] == b[2] || a[2] == b[2] \n    \
    \    return true\n    \n    if a[0] == b[0] || a[1] == b[0] || a[2] == b[0] ||\
    \ a[0] == b[1] || a[1] == b[1] || a[2] == b[1] || a[0] == b[2] || a[1] == b[2]\
    \ || a[2] == b[2] \n        return true\n    \n    if a[0] == b[0] || a[1] ==\
    \ b[0] || a[2] == b[0] || a[0] == b[1] || a[1] == b[1] || a[2] == b[1] || a[0]\
    \ == b", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    end\n    \n    if length(a) == 1 \n        return b == a\n    end\n\
    \    \n    if length(b) == 1 \n        return b == a\n    end\n    \n    if length(a)\
    \ == length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        a, b = b, a\n    end\n    \n    if length(a) == 0 \n        return\
    \ false\n    end\n    \n    if length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        a, b = b, a\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == length(b) \n        return\
    \ true\n    end\n    \n    if length(a) > length(b) \n        a, b = b, a\n  \
    \  end\n    \n    if length(a) == 0 \n        return false\n    end\n    \n  \
    \  if length(b) == 0 \n        return false\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        a, b = b, a\n    end\n    \n    if length(a) == 0 \n        return\
    \ false\n    end\n    \n    if length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        a, b = b, a\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == length(b) \n        return\
    \ true\n    end\n    \n    if length(a) > length(b) \n        a, b = b, a\n  \
    \  end\n    \n    if length(a) == 0 \n        return false\n    end\n    \n  \
    \  if length(b) == 0 \n        return false\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        a, b = b, a\n    end\n    \n    if length(a) == 0 \n        return\
    \ false\n    end\n    \n    if length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        a, b = b, a\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b", "    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false \n    else \n      \
    \  return (cycpattern_check_recursive(a,b,0,0))\n    end\nend", "    \n    \n\
    \    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n   \
    \ \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) == 0 \n        return false\n    end\n\
    \    \n    if length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) == 0 \n        return false\n    end\n    \n    if length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        return false\n    end\n    \n   \
    \ if length(a) == 0 \n        return false\n    end\n    \n    if length(b) ==\
    \ 0 \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == 1 \n        return true\n \
    \   end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n  \
    \  if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) == 0 \n\
    \        return false\n    end\n    \n    if length(b) == 0 \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(b) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 0 \n        return\
    \ false\n    end\n    \n    if length(b) == 0 \n        return false\n    end\n\
    \    ", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        \n        if length(a) == 1 \n            return b == a\
    \ \n        else \n            \n            if length(b) == 1 \n            \
    \    return b == a || b == reverse(a) \n            else \n                \n\
    \                if b == reverse(a) || b == reverse(reverse(a)) \n           \
    \         return true \n                else \n                    return false\
    \ \n            end \n        end \n    end \nend \n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"hello\",\"ell\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"whassup\",\"psus\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"abab\",\"baa\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"himenss\",\"simen\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a word is a palindrome. \nA palindrome is a word that\
    \ reads the same backward as forward.", "    \n    if length(a) == 0 \n      \
    \  true\n    elseif length(b) == 0 \n        false\n    elseif length(a) == length(b)\
    \ \n        if a == b \n            true\n        elseif contains(a,b) \n    \
    \        true\n        else\n            false\n    else\n        if contains(a,b)\
    \ \n            true\n        else\n            false\nend", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        return (a[end-1]\
    \ == b[1] || b[1] == a[end-1]) && cycpattern_check(a[1:end-1], b)\nend", "   \
    \ \n    if length(a) == 0 \n        true\n    elseif length(b) == 0 \n       \
    \ false\n    elseif length(a) == length(b) \n        true\n    elseif length(a)\
    \ > length(b) \n        false\n    elseif length(a) < length(b) \n        false\n\
    \    elseif b == \"\"\n        true\n    elseif b == \"*\"\n        true\n   \
    \ elseif b == \"?\"\n        true\n    elseif b == \"!\"\n        true\n    elseif\
    \ b == \"^\"\n        true\n    elseif b == \"$\"\n        true\n    elseif b\
    \ == \"&\"\n        true\n    elseif b == \"|\"\n        true\n    elseif b ==\
    \ \"*\"\n        true\n    elseif b == \"?\"\n        true\n    elseif b == \"\
    !\"\n        true\n    elseif b == \"^\"\n        true\n    elseif b == \"$\"\n\
    \        true\n    elseif b == \"&\"\n        true\n    elseif b == \"|\"\n  \
    \      true\n    elseif b == \"*\"\n        true\n    elseif b == \"?\"\n    \
    \    true\n    elseif b == \"!\"\n        true\n    elseif b == \"^\"\n      \
    \  true\n    elseif b == \"$\"\n        true\n    elseif b == \"&\"\n        true\n\
    \    elseif b == \"|\"\n        true\n    elseif b == \"*\"\n        true\n  \
    \  elseif b == \"?\"\n        true\n    elseif b == \"!\"\n        true\n    elseif\
    \ b == \"^\"\n        true\n    elseif b == \"$\"\n        true\n    elseif b\
    \ == \"&\"\n        true\n    elseif b == \"|\"\n        true\n    elseif b ==\
    \ \"*\"\n        true\n    elseif b == \"?\"\n        true\n    elseif b == \"\
    !\"\n        true\n    elseif b == \"^\"\n        true\n    elseif b == \"$\"\n\
    \        true\n    elseif b == \"&\"\n        true\n    elseif b == \"|\"\n  \
    \      true\n    elseif b == \"*\"\n        true\n    elseif b == \"?\"\n    \
    \    true\n    elseif b == \"!\"\n        true\n    elseif b == \"^\"\n      \
    \  true\n    elseif b == \"$\"\n        true\n    elseif b == \"&\"\n        true\n\
    \    elseif b == \"|\"\n        true\n    elseif b == \"*\"\n        true\n  \
    \  elseif b == \"?\"\n        true\n    elseif b == \"!\"\n        true\n    elseif\
    \ b == \"^\"\n        true\n    elseif b == \"$\"\n        true\n    elseif b\
    \ == \"", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        for i in 1:length(a) \n            if a[i]\
    \ != b[i] \n                return false \n            end \n        end \n  \
    \      \n        return true \n    else \n        return false \n    end \nend\
    \ \n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"abcd\",\"abd\")\n</cell>\n\
    <code language=julia-1.0>\ncycpattern_check(\"hello\",\"ell\")\n</cell>\n<code\
    \ language=julia-1.0>\ncycpattern_check(\"whassup\",\"psus\")\n</cell>\n<code\
    \ language=julia-1.0>\ncycpattern_check(\"abab\",\"baa\")\n</cell>\n<code language=julia-1.0>\n\
    cycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"\
    himenss\",\"simen\")\n</cell>\n<text>\nExercise 2", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        \n        if length(a)\
    \ == 1 \n            return b == a \n        else \n            if length(b) ==\
    \ 1 \n                return b == a || b == b[1:end-1] \n            else \n \
    \               return b == a || b == b[1:end-1] || cycpattern_check(a[1:end-1],\
    \ b) || cycpattern_check(a[1:end-1], b[1:end-1])\n        end\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    else \n        if a[1] ==\
    \ b[1] \n            return cycpattern_check(a[2:end-1], b)\n        else \n \
    \           return cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[2:end])\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>", "   \
    \ \n    if length(a) == 0 \n        true\n    else if length(b) == 0 \n      \
    \  true\n    else if length(a) == length(b) \n        true\n    else \n      \
    \  false\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    end", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if a[1] == b[1] \n        return true\n    end\n    \n    if a[1] == b[2] \n\
    \        return true\n    end\n    \n    if a[1] == b[3] \n        return true\n\
    \    end\n    \n    if a[1] == b[4] \n        return true\n    end\n    \n   \
    \ if a[1] == b[5] \n        return true\n    end\n    \n    if a[1] == b[6] \n\
    \        return true\n    end\n    \n    if a[1] == b[7] \n        return true\n\
    \    end\n    \n    if a[1] == b[8] \n        return true\n    end\n    \n   \
    \ if a[1] == b[9] \n        return true\n    end\n    \n    if a[1] == b[10] \n\
    \        return true\n    end\n    \n    if a[1] == b[11] \n        return true\n\
    \    end\n    \n    if a[1] == b[12] \n        return true\n    end\n    \n  \
    \  if a[1] == b[13] \n        return true\n    end\n    \n    if a[1] == b[14]\
    \ \n        return true\n    end\n    \n    if a[1] == b[15] \n        return\
    \ true\n    end\n    \n    if a[1] == b[16] \n        return true\n    end\n \
    \   \n    if a[1] == b[17] \n        return true\n    end\n    \n    if a[1] ==\
    \ b[18] \n        return true\n    end\n    \n    if a[1] == b[19] \n        return\
    \ true\n    end\n    \n    if a[1] == b[20] \n        return true\n    end\n \
    \   \n    if a[1] == b[21] \n        return true\n    end\n    \n    if a[1] ==\
    \ b[22] \n        return true\n    end\n    \n    if a[1] == b[23] \n        return\
    \ true\n    end\n    \n    if a[1] == b[24] \n        return true\n    end\n \
    \   \n    if a[1] == b[25] \n        return true\n    end\n    \n    if a[1] ==\
    \ b[26] \n        return true\n    end\n    \n    if a[1] == b[27] \n        return\
    \ true\n    end\n    \n    if a[1] == b[28] \n        return true\n    end\n \
    \   \n    if a[1] == b[29] \n        return true\n    end\n    \n    if a", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false \n    else \n \
    \       if length(a) == 1 \n            return b == a \n        else \n      \
    \      if length(b) == 1 \n                return a == b \n            else \n\
    \                let c = b[1:length(b)-1] \n                let d = a[1:length(a)-1]\
    \ \n                if c == d \n                    then cycpattern_check(a[1:length(a)-1],\
    \ b) \n                    else cycpattern_check(a, c) \n                end \n\
    \            end \n        end \n    end \nend \n</code>\n<|/ a tags=recursion,string,julia\
    \ |>\n<| c |>\nThis does not work for `cycpattern_check(\"abcd\",\"abd\") => false`\n\
    <|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out\n<|/ c |>\n<| a\
    \ tags=recursion,string,julia |>\n<code>", "    \n    \n    if length(a) == length(b)\
    \ \n        \n        if a == b \n            return true\n        \n        else\
    \ \n            return false\n    \n    else \n        \n        if length(a)\
    \ > length(b) \n            \n            if contains(a,b) == true \n        \
    \        return true\n            \n            else \n                return\
    \ false\n        \n        else \n            \n            if contains(b,a) ==\
    \ true \n                return true\n            \n            else \n      \
    \          return false\n    \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    ,\"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\"\
    psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels contained in the string.", "    \n    if length(a) == 0\
    \ || length(b) == 0 \n        return false \n    else \n        return issubstring(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cy", "    \n    \n\
    \    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n   \
    \ \n    if length(a) == 1 \n        return b == a\n    end\n    \n    if length(b)\
    \ == 1 \n        return b == a\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        a,b\
    \ = b,a\n    end\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  \n    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 0 \n        return false\n    end\n    \n\
    \    if length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 0 \n        return false\n    end\n    \n    if length(b) ==\
    \ 0 \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ < length(b) \n        return false\n    end\n    \n    if length(a) == 0 \n\
    \        return false\n    end\n    \n    if length(b) == 0 \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(b) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 0 \n        return false\n\
    \    end\n    \n    if length(b) == 0 \n        return false\n    end\n    \n\
    \    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 0 \n        return false\n    end\n    \n\
    \    if length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) == 0 \n        return false\n    \n    if length(b) == 0 \n      \
    \  return false\n    \n    if length(a) == 1 \n        return true\n    \n   \
    \ if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == 0 \n        return false\n    \n \
    \   if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a",
  "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n  \
    \  \n    \n    \n    if length(a) == 1 \n        return true\n    \n    \n   \
    \ if length(b) == 1 \n        return true\n    \n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    \n    if length(a) > length(b) \n        return\
    \ false\n    \n    \n    if length(a) == 0 \n        return false\n    \n    \n\
    \    if length(b) == 0 \n        return false\n    \n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    \n    if length(b) == 1 \n        return\
    \ true\n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    \n    if\
    \ length(a) == 0 \n        return false\n    \n    \n    if length(b) == 0 \n\
    \        return false\n    \n    \n    if length(a) == 1 \n        return true\n\
    \    \n    \n    if length(b) == 1 \n        return true\n    \n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    \n    if length(a) == 0 \n        return false\n\
    \    \n    \n    if length(b) == 0 \n        return false\n    \n    \n    if\
    \ length(a) == 1 \n        return true\n    \n    \n    if length(b) == 1 \n \
    \       return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) > length(b) \n        return false\n    \n\
    \    \n    if length(a) == 0 \n        return false\n    \n    \n    if length(b)\
    \ == 0 \n        return false\n    \n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    \n    if length(b) == 1 \n        return true\n    \n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    \n    if length(a) == 0 \n   \
    \     return false\n    \n    \n    if length(b) == 0 \n        return false\n\
    \    \n    \n    if length(a) == 1 \n        return true\n    \n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    \n    if length(a) == length(b) \n   \
    \     return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) == 0 \n        return false\n    \n    \n    if\
    \ length(b) == 0 \n        return false\n    ", "    \n    \n    if length(a)\
    \ == length(b) \n        \n        for i in 0..(length(a) - 1) \n            if\
    \ a[i] == b[i] \n                continue \n            end \n            if a[i]\
    \ != b[i] \n                return false \n            end \n        end \n  \
    \      return true \n    else \n        return false \n    end \nend \n</cell>\n\
    <text>\nCyclic Patterns\nCyclic patterns are patterns that repeat a given number\
    \ of times. For example, a pattern \"aba\" would repeat twice \"a\" while \"aab\"\
    \ would repeat three times. Write a function that checks if a pattern has this\
    \ property.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n \
    \   end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 1 \n        return true\n\
    \    end\n    \n    if length(a) == length(b) \n        return true\n    end\n\
    \    \n    if length(a) > length(b) \n        return false\n    end\n    \n  \
    \  if length(a) < length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 1 \n        return true\n    end\n    \n    if ", "    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 \n\
    \        return false \n    else if length(b) == 0 \n        return false \n \
    \   else if length(a) == length(b) \n        return true \n    else \n       \
    \ return (cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end])) && cycpattern_check(a[1:end], b[1:end])\nend\n</code>\n<|/ a |>\n\
    <| a |>\n<code>", "    \n    \n    if length(a) == length(b) \n        \n    \
    \    for i in 1:length(a) \n            if a[i] != b[i] \n                return\
    \ false \n            end \n        end \n        return true \n    else \n  \
    \      return false \n    end \nend \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\",\"abd\") \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    ,\"ell\") \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\"\
    psus\") \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\"\
    ) \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\") \n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\") \n\
    </cell>\n<text>\nExercise 2\nWrite a function that checks if a word is a palindrome.\
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        \n      \
    \  if length(a) == 1 \n            return b == a \n        else \n           \
    \ \n            if length(b) == 1 \n                return b == a || b == reverse(a)\
    \ \n            else \n                \n                if b == reverse(a) ||\
    \ b == reverse(a) \n                    return true \n                else \n\
    \                    \n                    if b == reverse(a) || b == a \n   \
    \                     return true \n                    else \n              \
    \          \n                        if b == reverse(a) || b == reverse(a) ||\
    \ b == a \n                            return true \n                        else\
    \ \n                            \n                            if b == reverse(a)\
    \ || b == reverse(a) || b == reverse(a) || b == a \n                         \
    \       return true \n                            else \n                    \
    \            \n                                if b == reverse(a) || b == a ||\
    \ b == reverse(a) || b == a \n                                    return true\
    \ \n                                else \n                                  \
    \  return false \n                        \n                    \n           \
    \     \n                \n                \n                \n               \
    \ \n                \n                \n                \n                \n \
    \               \n                \n                \n                \n     \
    \           \n                \n                \n                \n         \
    \       \n                \n                \n                \n             \
    \   \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                ", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        return (cycpattern_check_recursive(a,b,0,0)\
    \ == true) \n    end\nend", "    \n    if length(a) == 0 || length(b) == 0 \n\
    \        return false \n    else \n        if b == a \n            return true\
    \ \n        else \n            if b[length(b)-1] == a[length(a)-1] \n        \
    \        return cycpattern_check(a[1:length(a)-1], b) \n            else \n  \
    \              return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1]) \n\
    \        end\n    end\nend", "    \n    if length(a) == 0 || length(b) == 0 \n\
    \        return false\n    \n    if length(a) == 1 \n        return true\n   \
    \ \n    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if a[1]\
    \ == b[1] \n        return true\n    \n    if a[1] == b[2] \n        return true\n\
    \    \n    if a[2] == b[1] \n        return true\n    \n    if a[2] == b[2] \n\
    \        return true\n    \n    if a[1] == b[1] || a[2] == b[2] || a[1] == b[2]\
    \ || a[2] == b[1] \n        return true\n    \n    if a[1] == b[2] || a[2] ==\
    \ b[1] || a[2] == b[2] || a[1] == b[1] \n        return true\n    \n    if a[2]\
    \ == b[1] || a[1] == b[2] || a[1] == b[1] || a[2] == b[2] \n        return true\n\
    \    \n    if a[1] == b[2] || a[2] == b[1] || a[2] == b[2] || a[1] == b[2] \n\
    \        return true\n    \n    if a[2] == b[2] || a[1] == b[1] || a[1] == b[2]\
    \ || a[2] == b[1] \n        return true\n    \n    if a[1] == b[1] || a[2] ==\
    \ b[2] || a[1] == b[2] || a[2] == b[1] \n        return true\n    \n    if a[2]\
    \ == b[2] || a[1] == b[1] || a[1] == b[2] || a[2] == b[2] \n        return true\n\
    \    \n    if a[1] == b[1] || a[2] == b[2] || a[1] == b[2] || a[2] == b[1] \n\
    \        return true\n    \n    if a[2] == b[2] || a[1] == b[1] || a[1] == b[2]\
    \ || a[2] == b[2] \n        return true\n    \n    if a[1] == b[1] || a[2] ==\
    \ b[2] || a[1] == b[2] || a[2] == b[1] \n        return true\n    \n    if a[2]\
    \ == b[2] || a[1] == b[1] || a[1] == b[2] || a[2] == b[2] \n        return true\n\
    \    \n    if a[1] == b[1] || a[2] == b[2] || a[1] == b[2] || a[2] == b[1] \n\
    \        return true\n    \n    if a[2] == b[2] || a[1] == b[1] || a[1] == b[2]\
    \ || a[2] == b[2] \n        return true\n    \n    if a[1] == b[1] || a[2] ==\
    \ b[2] || a[1] == b[2] || a[2] == b[1] \n        return ", "    \n    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      if b == a \n            return true \n        else \n            if b[length(b)-1]\
    \ == a[length(a)-1] \n                return cycpattern_check(a[1:length(a)-1],\
    \ b) \n            else \n                return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1]) \nend \n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,string,julia\
    \ |>\n<code>", "    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if a[1] == b[1] \n        return\
    \ true\n    \n    if a[1] == b[2] \n        return true\n    \n    if a[2] ==\
    \ b[1] \n        return true\n    \n    if a[2] == b[2] \n        return true\n\
    \    \n    if a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n\
    \        return true\n    \n    if a[2] == b[0] \n        return true\n    \n\
    \    if a[2] == b[1] \n        return true\n    \n    if a[0] == b[0] \n     \
    \   return true\n    \n    if a[1] == b[0] \n        return true\n    \n    if\
    \ a[1] == b[2] \n        return true\n    \n    if a[2] == b[0] \n        return\
    \ true\n    \n    if a[2] == b[1] \n        return true\n    \n    if a[0] ==\
    \ b[2] \n        return true\n    \n    if a[0] == b[1] \n        return true\n\
    \    \n    if a[1] == b[2] \n        return true\n    \n    if a[1] == b[0] \n\
    \        return true\n    \n    if a[2] == b[2] \n        return true\n    \n\
    \    if a[2] == b[1] \n        return true\n    \n    if a[0] == b[0] \n     \
    \   return true\n    \n    if a[0] == b[1] \n        return true\n    \n    if\
    \ a[1] == b[1] \n        return true\n    \n    if a[1] == b[2] \n        return\
    \ true\n    \n    if a[2] == b[2] \n        return true\n    \n    if a[2] ==\
    \ b[0] \n        return true\n    \n    if a[0] == b[2] \n        return true\n\
    \    \n    if a[0] == b[1] \n        return true\n    \n    if a[1] == b[1] \n\
    \        return true\n    \n    if a[1] == b[2] \n        return true\n    \n\
    \    if a[2] == b[2] \n        return true\n    \n    if a[2] == b[0] \n     \
    \   return true\n    \n    if a[0] == b[0] \n        return true\n    \n    if\
    \ a[0] == b[1] \n        return true\n    \n    if a[1] == b[1] \n        return\
    \ true\n", "    \n    \n    if length(a) == length(b) \n        \n        if a\
    \ == b \n            return true\n        \n        else \n            return\
    \ false\n    \n    else \n        return false\n    \nend\n</cell>\n<code language=julia-1.5>",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      if length(a) == length(b) \n            return true\n        else \n  \
    \          if length(a) > length(b) \n                return cycpattern_check(b,\
    \ a)\n            else \n                return cycpattern_check(a, b) \nend \n\
    </code>\n<|/ a tags=string,julia,pattern-matching |>\n<| a dscore=2 |>\nI wrote\
    \ a package that does this in Julia. \nhttps://github.com/jmhobbs/SubstringMatch\n\
    <code>\njulia> using SubstringMatch", "    \n    \n    \n    if length(a) == length(b)\
    \ \n        \n        for i in 0..(length(a) - 1) \n            \n           \
    \ if a[i] == b[i] \n                \n                return true\n          \
    \  \n            else \n                \n                if a[i] != b[i] \n \
    \                   \n                    let x = a[i..(length(a) - 1)]\n    \
    \                let y = b[i..(length(b) - 1)]\n                    \n       \
    \             let z = x ++ y\n                    \n                    if cycpattern_check(z,\
    \ a) == true \n                        \n                        return true\n\
    \                    \n                    else \n                        \n \
    \                       return false\n                \n                else \n\
    \                    \n                    return false\n            \n      \
    \  else \n            \n            return false\n    \n    else \n        \n\
    \        return false\n    \nend", "    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        a, b = b, a\n    end\n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if length(a) ==\
    \ length(b) \n        \n        for i in 1:length(a) \n            \n        \
    \    if a[i] != b[i] \n                \n                if a[i] < b[i] \n   \
    \                 \n                    a = a[1:i-1] + a[i+1::]\n            \
    \        \n                elseif a[i] > b[i] \n                    \n       \
    \             a = a[i+1::] + a[1:i-1]\n                    \n                else\n\
    \                    \n                    return false\n                    \n\
    \            end\n            \n        end\n        \n        return true\n \
    \       \n    else\n        \n        return false\n        \n    end\n    \n\
    end", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    \n    if length(a) == 1 \n        return b == a\n    \n    if length(b) ==\
    \ 1 \n        return a == b\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return cycpattern_check(b,\
    \ a)\n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    if length(a) == length(b) == 1 \n        return true\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        \n      \
    \  if a[1] == b[1] \n            return cycpattern_check(a[2:end-1], b) \n   \
    \     else \n            return cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[2:end-1]) \n    end\nend\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"\
    abcd\",\"abd\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"hello\"\
    ,\"ell\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"whassup\",\"\
    psus\")\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"abab\",\"baa\"\
    )\n</cell>\n<code language=julia-1.0>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n\
    <code language=julia-1.0>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <text>\nExercise 3\nWrite a function that checks if a word is a palindrome. \n\
    The word is a palindrome if it reads the same backward as forward.", "    \n \
    \   \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n \
    \   if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n  \
    \      return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == length(b) \n \
    \       return true\n    \n    if length(a", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    else \n        if b == a \n            return\
    \ true\n        else \n            if b[length(b)-1] == a[length(a)-1] \n    \
    \            return cycpattern_check(a[1:length(a)-1], b)\n            else \n\
    \                return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n\
    \        end\n    end\nend\n</code>\n<|/ a dscore=1 |>\n<| c |>\nThis doesn't\
    \ work if `a = \"ab\"` and `b = \"c\"`.\n<|/ c |>\n<| c |>\nI see what you mean.\
    \ Thanks for pointing that out. I edited my answer to fix it.\n<|/ c |>\n<| a\
    \ tags=string,julia,substring,recursion |>\n<code>", "    \n    \n    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false \n    else \n      \
    \  if length(a) == length(b) \n            return true\n        else \n      \
    \      if length(a) > length(b) \n                return cycpattern_check(b,a)\
    \ \n            else \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            \n                \n                \n                \n        \
    \        \n                \n                \n                \n            \
    \    \n                \n                \n                \n                \n\
    \                \n                \n                \n                \n    \
    \            ", "    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    else if length(a) == 1 \n        return b == a \n    else if length(b) ==\
    \ 1 \n        return a == b\n    else \n        return b == substring(a,1,length(b)-1)\
    \ || substring(a,1,length(b)-1) == b\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\n\
    This doesn't work. Try it with `cycpattern_check(\"abcd\",\"abd\")`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works fine. Can you give an example where it doesn't\
    \ work?\n<|/ c |>\n<| c |>\nIt doesn't work for `cycpattern_check(\"abcd\",\"\
    abd\")`.\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can you give an example\
    \ where it doesn't work?\n<|/ c |>\n<| c |>\nI tested it and it works fine. Can\
    \ you give an example where it doesn't work?\n<|/ c |>\n<| a dscore=0 |>\n<code>",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n  \
    \  if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n   \
    \     return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == 0 \n        return false\n    \n    if length(b) == 0 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) == 0 \n        return false\n    \n    if length(b) == 0 \n      \
    \  return false\n    \n    if length(a) == 1 \n        return true\n    \n   \
    \ if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == 0 \n        return false\n    \n \
    \   if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 ", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    end\n    \n    if length(a) == length(b) \n        return true\n\
    \    end\n    \n    if length(a) > length(b) \n        a,b = b,a\n    end\n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false \n    else \n      \
    \  \n        if b == a \n            return true \n        else \n           \
    \ \n            if b[length(b)-1] == a[length(a)-1] \n                return cycpattern_check(a[1:length(a)-1],\
    \ b) \n            else \n                return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1]) \n        end\n    end\nend", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false \n    else \n        if b == a \n            return\
    \ true \n        else \n            if length(a) == 1 \n                return\
    \ cycpattern_check(b, substring(a,1,end(a))) \n            else \n           \
    \     if length(b) == 1 \n                    return cycpattern_check(substring(a,1,end(a)),b)\
    \ \n                else \n                    if substring(a,1,end(a)) in b ||\
    \ substring(a,1,end(a)) in substring(b,1,end(b)) \n                        return\
    \ true \n                    else \n                        return cycpattern_check(substring(a,1,end(a)),substring(b,1,end(b)))\
    \ \n        end\n    end\nend\n</code>\n<|/ a tags=string,julia,substring |>\n\
    <| c |>\nThis doesn't seem to work. `cycpattern_check(\"abcd\",\"abd\")` returns\
    \ `false` but `cycpattern_check(\"hello\",\"ell\")` returns `true`.\n<|/ c |>\n\
    <| c |>\nI tested it and it works. I edited my answer to include the full code\
    \ I used.\n<|/ c |>\n<| c |>\nI tested it and it works. I edited my answer to\
    \ include the full code I used.\n<|/ c |>\n<| c |>\nI tested it and it works.\
    \ I edited my answer to include the full code I used.\n<|/ c |>\n<| c |>\nI tested\
    \ it and it works. I edited my answer to include the full code I used.\n<|/ c\
    \ |>\n<| a tags=string,julia,substring |>\nI wrote a package for Julia called\
    \ Substring that does just this. It has many other useful functions as well. \n\
    <code>\njulia> using Substring", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return false\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      return issubstring(a,b) || issubstring(b,a) || cycpattern_check(a[1:],b[1:])\
    \ || cycpattern_check(b[1:],a[1:])\n    end\nend\n</code>\n<|/ a tags=string,julia,substring\
    \ |>\n<| c |>\nThis solution works well for small strings, but for large strings\
    \ it takes too long to compute.\n<|/ c |>\n<| c |>\nI added a version that uses\
    \ `issubstring` instead of `findfirst`\n<|/ c |>\n<| c |>\nI added a version that\
    \ uses `issubstring` instead of `findfirst`\n<|/ c |>\n<| a dscore=2 |>\n<code>",
  "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return false \n \
    \   else \n        \n        if length(a) == length(b) \n            return true\
    \ \n        else \n            \n            if length(a) > length(b) \n     \
    \           \n                let a = substring(a,1,length(a))\n             \
    \   let b = substring(b,1,length(b))\n                \n                return\
    \ cycpattern_check(a,b) || cycpattern_check(b,a) \n            else \n       \
    \         \n                let a = substring(a,1,length(a))\n               \
    \ let b = substring(b,1,length(b))\n                \n                return cycpattern_check(a,b)\
    \ && cycpattern_check(b,a) \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    hello\",\"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\"\
    ,\"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not letters.", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        return (a==b) ||\
    \ cycpattern_check(a[1:length(a)-1], b[1:length(b)-1]) || cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1]) || cycpattern_check(a[1:length(a)-1], b[1:length(b)-1]) ||\
    \ cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\n    end\nend\n</code>\n\
    <|/ a |>\n<| a dscore=0 |>\n<code>", "    if length(a) == 0 || length(b) == 0\
    \ \n        return false \n    else \n        \n        if b == a \n         \
    \   return true \n        else \n            \n            \n            \n  \
    \          \n            \n            \n            \n            \n        \
    \    \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n", "    \n    \n    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false\n    end\n    \n    if length(a) == 1\
    \ \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if a[1] == b[1] \n        return true\n    end\n    \n    if a[1] == b[2] \n\
    \        return true\n    end\n    \n    if a[1] == b[3] \n        return true\n\
    \    end\n    \n    if a[1] == b[4] \n        return true\n    end\n    \n   \
    \ if a[1] == b[5] \n        return true\n    end\n    \n    if a[1] == b[6] \n\
    \        return true\n    end\n    \n    if a[1] == b[7] \n        return true\n\
    \    end\n    \n    if a[1] == b[8] \n        return true\n    end\n    \n   \
    \ if a[1] == b[9] \n        return true\n    end\n    \n    if a[1] == b[10] \n\
    \        return true\n    end\n    \n    if a[1] == b[11] \n        return true\n\
    \    end\n    \n    if a[1] == b[12] \n        return true\n    end\n    \n  \
    \  if a[1] == b[13] \n        return true\n    end\n    \n    if a[1] == b[14]\
    \ \n        return true\n    end\n    \n    if a[1] == b[15] \n        return\
    \ true\n    end\n    \n    if a[1] == b[16] \n        return true\n    end\n \
    \   \n    if a[1] == b[17] \n        return true\n    end\n    \n    if a[1] ==\
    \ b[18] \n        return true\n    end\n    \n    if a[1] == b[19] \n        return\
    \ true\n    end\n    \n    if a[1] == b[20] \n        return true\n    end\n \
    \   \n    if a[1] == b[21] \n        return true\n    end\n    \n    if a[1] ==\
    \ b[22] \n        return true\n    end\n    \n    if a[1] == b[23] \n        return\
    \ true\n    end\n    \n    if a[1] == b[24] \n        return true\n    end\n \
    \   \n    if a[1] == b[25] \n        return true\n    end\n    \n    if a[1] ==\
    \ b[26] \n        return true\n    end\n    \n    if a[1] == b[27] \n        return\
    \ true\n    end\n    \n    if a[1] == b[28] \n        return true\n    end\n \
    \   \n    if a[1] == b[29] \n        return true\n    end\n    \n", "    \n  \
    \  \n    if length(a) == length(b) \n        \n        for i in 1:length(a)\n\
    \            \n            if a[i] != b[i]\n                \n               \
    \ if a[i] > b[i]\n                    \n                    a[i] = a[i] - 1\n\
    \                    \n                    b[i] = b[i] + 1\n                 \
    \   \n                else\n                    \n                    b[i] = b[i]\
    \ - 1\n                    \n                    a[i] = a[i] + 1\n           \
    \         \n                end\n                \n            end\n         \
    \   \n        end\n        \n        return true\n        \n    else\n       \
    \ \n        return false\n        \n    end\n    \nend\n</cell>\n<code language=julia-1.4>\n\
    cycpattern_check(\"abcd\",\"abd\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"\
    hello\",\"ell\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"whassup\"\
    ,\"psus\")\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"abab\",\"baa\"\
    )\n</cell>\n<code language=julia-1.4>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <code language=julia-1.4>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>",
  "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 0 \n        return true\n    \n\
    \    if length(b) == 0 \n        return true\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if a[0] == b[0] \n        return cycpattern_check(a[1:], b[1:])\n    \n \
    \   if a[0] == b[1] \n        return cycpattern_check(a[1:], b[2:])\n    \n  \
    \  if a[0] == b[2] \n        return cycpattern_check(a[1:], b[3:])\n    \n   \
    \ if a[0] == b[3] \n        return cycpattern_check(a[1:], b[4:])\n    \n    if\
    \ a[0] == b[4] \n        return cycpattern_check(a[1:], b[5:])\n    \n    if a[0]\
    \ == b[5] \n        return cycpattern_check(a[1:], b[6:])\n    \n    if a[0] ==\
    \ b[6] \n        return cycpattern_check(a[1:], b[7:])\n    \n    if a[0] == b[7]\
    \ \n        return cycpattern_check(a[1:], b[8:])\n    \n    if a[0] == b[8] \n\
    \        return cycpattern_check(a[1:], b[9:])\n    \n    if a[0] == b[9] \n \
    \       return cycpattern_check(a[1:], b[10:])\n    \n    if a[0] == b[10] \n\
    \        return cycpattern_check(a[1:], b[11:])\n    \n    if a[0] == b[11] \n\
    \        return cycpattern_check(a[1:], b[12:])\n    \n    if a[0] == b[12] \n\
    \        return cycpattern_check(a[1:], b[13:])\n    \n    if a[0] == b[13] \n\
    \        return cycpattern_check(a[1:], b[14:])\n    \n    if a[0] == b[14] \n\
    \        return cycpattern_check(a[1:], b[15:])\n    \n    if a[0] == b[15] \n\
    \        return cycpattern_check(a[1:], b[16:])\n    \n    if a[0] == b[16] \n\
    \        return cycpattern_check(a[1:], b[17:])\n    \n    if a[0] == b[17] \n\
    \        return cycpattern_check(a[1:], b[18:])\n    \n    if a[0] == b[18] \n\
    \        return cycpattern_check(a[1:], b[19:])\n    ", "    \n    \n    if length(a)\
    \ == 0 \n        true\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        if a == b \n            true\n        elseif issubstring(a)\
    \ == issubstring(b) \n            true\n        else\n            false\n    end\n\
    end", "    \n    \n    if length(a) == 0 \n        true\n    elseif length(b)\
    \ == 0 \n        true\n    elseif length(a) == length(b) \n        true\n    elseif\
    \ length(a) > length(b) \n        false\n    elseif length(a) < length(b) \n \
    \       false\n    elseif length(a) == 1 \n        if (a[1] == b) \n         \
    \   true\n        else\n            false\n    elseif length(a) == 2 \n      \
    \  if (a[1] == b[1]) \n            true\n        else\n            false\n   \
    \ elseif length(a) == 3 \n        if (a[1] == b[1] && a[2] == b[2]) \n       \
    \     true\n        else\n            false\n    elseif length(a) == 4 \n    \
    \    if (a[1] == b[1] && a[2] == b[2] && a[3] == b[3]) \n            true\n  \
    \      else\n            false\n    elseif length(a) == 5 \n        if (a[1] ==\
    \ b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4]) \n            true\n \
    \       else\n            false\n    elseif length(a) == 6 \n        if (a[1]\
    \ == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5] == b[5]) \n\
    \            true\n        else\n            false\n    elseif length(a) == 7\
    \ \n        if (a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] &&\
    \ a[5] == b[5] && a[6] == b[6]) \n            true\n        else\n           \
    \ false\n    elseif length(a) == 8 \n        if (a[1] == b[1] && a[2] == b[2]\
    \ && a[3] == b[3] && a[4] == b[4] && a[5] == b[5] && a[6] == b[6] && a[7] == b[7])\
    \ \n            true\n        else\n            false\n    elseif length(a) ==\
    \ 9 \n        if (a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4]\
    \ && a[5] == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8]) \n        \
    \    true\n        else\n            false\n    elseif length(a) == 10 \n    \
    \    if (a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] && a[5]\
    \ == b[5] && a[6] == b[6] && a[7] == b[7] && a[8] == b[8] && a[9] == b[9]) \n\
    \            true\n        else\n            false\n    elseif length(a) == 11\
    \ \n        if (a[1] == b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] &&\
    \ a[5] == b[5] && a[6] == ", "    \n    if length(a) == 0 || length(b) == 0 \n\
    \        return false\n    end\n    \n    if length(a) == 1 \n        return true\n\
    \    end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n \
    \   if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if b[end] == a[1] \n        return\
    \ true\n    end\n    \n    if b[end] == a[2] \n        return true\n    end\n\
    \    \n    if b[end] == a[3] \n        return true\n    end\n    \n    if b[end]\
    \ == a[4] \n        return true\n    end\n    \n    if b[end] == a[5] \n     \
    \   return true\n    end\n    \n    if b[end] == a[6] \n        return true\n\
    \    end\n    \n    if b[end] == a[7] \n        return true\n    end\n    \n \
    \   if b[end] == a[8] \n        return true\n    end\n    \n    if b[end] == a[9]\
    \ \n        return true\n    end\n    \n    if b[end] == a[10] \n        return\
    \ true\n    end\n    \n    if b[end] == a[11] \n        return true\n    end\n\
    \    \n    if b[end] == a[12] \n        return true\n    end\n    \n    if b[end]\
    \ == a[13] \n        return true\n    end\n    \n    if b[end] == a[14] \n   \
    \     return true\n    end\n    \n    if b[end] == a[15] \n        return true\n\
    \    end\n    \n    if b[end] == a[16] \n        return true\n    end\n    \n\
    \    if b[end] == a[17] \n        return true\n    end\n    \n    if b[end] ==\
    \ a[18] \n        return true\n    end\n    \n    if b[end] == a[19] \n      \
    \  return true\n    end\n    \n    if b[end] == a[20] \n        return true\n\
    \    end\n    \n    if b[end] == a[21] \n        return true\n    end\n    \n\
    \    if b[end] == a[22] \n        return true\n    end\n    \n    if b[end] ==\
    \ a[23] \n        return true\n    end\n    \n    if b[end] == a[24] \n      \
    \  return true\n    end\n    \n    if b[end] == a[25] \n        return true\n\
    \    end\n    \n    if b[end] == a[26] \n        return true\n    end\n    \n\
    \    if b[end] == a[27] \n", "    if length(a) == 0 || length(b) == 0 \n     \
    \   return false \n    else \n        local a1 = a:sub(1,length(a)-1) \n     \
    \   local b1 = b:sub(1,length(b)-1) \n        if a1 == b1 \n            return\
    \ true \n        else \n            return cycpattern_check(a1,b1) \n        end\
    \ \n    end \nend \n</code>\n<|/ a tags=string,recursion,pattern-matching,haskell\
    \ |>\n<| a tags=string,recursion,pattern-matching,haskell |>\n<code>\nimport Data.List",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n  \
    \  if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n   \
    \     return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if a[1] == b[1] \n        return\
    \ true\n    \n    if a[1] == b[2] \n        return true\n    \n    if a[2] ==\
    \ b[1] \n        return true\n    \n    if a[2] == b[2] \n        return true\n\
    \    \n    if a[1] == b[1] && a[2] == b[2] \n        return true\n    \n    if\
    \ a[1] == b[2] && a[2] == b[1] \n        return true\n    \n    if a[2] == b[1]\
    \ && a[1] == b[2] \n        return true\n    \n    if a[2] == b[2] && a[1] ==\
    \ b[1] \n        return true\n    \n    if a[1] == b[1] && a[2] == b[2] && a[3]\
    \ == b[3] \n        return true\n    \n    if a[1] == b[2] && a[2] == b[1] &&\
    \ a[3] == b[3] \n        return true\n    \n    if a[2] == b[1] && a[1] == b[2]\
    \ && a[3] == b[3] \n        return true\n    \n    if a[2] == b[2] && a[1] ==\
    \ b[1] && a[3] == b[3] \n        return true\n    \n    if a[3] == b[1] && a[1]\
    \ == b[2] && a[2] == b[3] \n        return true\n    \n    if a[3] == b[2] &&\
    \ a[1] == b[1] && a[2] == b[3] \n        return true\n    \n    if a[3] == b[3]\
    \ && a[1] == b[2] && a[2] == b[3] \n        return true\n    \n    if a[1] ==\
    \ b[1] && a[2] == b[2] && a[3] == b[3] && a[4] == b[4] \n        return true\n\
    \    \n    if a[1] == b[2] && a[2] == b[1] && a[3] == b[3] && a[4] == b[4] \n\
    \        return true\n    \n    if a[2] == b[1] && a[1] == b[2] && a[3] == b[3]\
    \ && a[4] == b[4] \n        return true\n    \n    if a[2] == b[2] && a[1] ==\
    \ b[1] && a[3] == b[3] && a[4] == b[4] \n        return true\n    \n    if a[3]\
    \ == b[1] && a[1] == b[2] && a[2] == b[3] && a[4] == b[4] \n        return true\n\
    \    \n    if a[3] == b[2] && a[1] == b[1] && a[2] == b[3] && a[4] == b[4] \n\
    \        return true\n    \n    if a[3] == b[3] && a[1] == b[2] && a[2] == b[3] ",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n  \
    \  if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n   \
    \     return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false", "    \n    \n    if length(a)\
    \ == 0 \n        return true\n    else if length(b) == 0 \n        return true\n\
    \    else if length(a) == length(b) \n        return true\n    else \n       \
    \ return false\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    ", "    \n    \n    if length(a) == 0 || length(b) == 0\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ < length(b) \n        return false\n    end\n    \n    if b[end-1] == a[end-1]\
    \ \n        return true\n    end\n    \n    if b[end-1] == a[end-2] \n       \
    \ return true\n    end\n    \n    if b[end-2] == a[end-1] \n        return true\n\
    \    end\n    \n    if b[end-2] == a[end-2] \n        return true\n    end\n \
    \   \n    if b[end-1] == a[end-3] \n        return true\n    end\n    \n    if\
    \ b[end-3] == a[end-1] \n        return true\n    end\n    \n    if b[end-3] ==\
    \ a[end-2] \n        return true\n    end\n    \n    if b[end-1] == a[end-4] \n\
    \        return true\n    end\n    \n    if b[end-4] == a[end-1] \n        return\
    \ true\n    end\n    \n    if b[end-4] == a[end-2] \n        return true\n   \
    \ end\n    \n    if b[end-2] == a[end-3] \n        return true\n    end\n    \n\
    \    if b[end-3] == a[end-4] \n        return true\n    end\n    \n    if b[end-1]\
    \ == a[end-5] \n        return true\n    end\n    \n    if b[end-5] == a[end-1]\
    \ \n        return true\n    end\n    \n    if b[end-5] == a[end-2] \n       \
    \ return true\n    end\n    \n    if b[end-1] == a[end-6] \n        return true\n\
    \    end\n    \n    if b[end-6] == a[end-1] \n        return true\n    end\n \
    \   \n    if b[end-6] == a[end-2] \n        return true\n    end\n    \n    if\
    \ b[end-1] == a[end-7] \n        return true\n    end\n    \n    if b[end-7] ==\
    \ a[end-1] \n        return true\n    end\n    \n    if b[end-7] == a[end-2] \n\
    \        return true\n    end\n    \n    if b[end-1] == a[end-8] \n        return\
    \ true\n    end\n    \n    if b[end-8] == a[end-1] \n        return true\n   \
    \ end\n    \n    if b[end-8] == ", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n", "    if length(a) == 0 || length(b) == 0 \n        return false \n  \
    \  else \n        if length(a) == length(b) \n            if a == b \n       \
    \         return true \n            else \n                return false \n   \
    \     else \n            if b == substring(a,1,length(a)) \n                return\
    \ cycpattern_check(substring(a,2,length(a)),b) \n            else \n         \
    \       return cycpattern_check(substring(a,1,length(a)),substring(a,length(a),length(a)))\
    \ \nend \n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false\n    else \n       \
    \ \n        if b == a \n            return true\n        else \n            \n\
    \            if length(a) > length(b) \n                \n                let\
    \ n = length(a)\n                let m = length(b)\n                \n       \
    \         let i = n - 1\n                let j = m - 1\n                \n   \
    \             while i >= 0 && j >= 0 \n                    \n                \
    \    if a[i] == b[j] \n                        i -= 1\n                      \
    \  j -= 1\n                    else \n                        \n             \
    \           if i == 0 \n                            i -= 1\n                 \
    \       else \n                            \n                            if j\
    \ == 0 \n                                j -= 1\n                            else\
    \ \n                                \n                                if a[i-1]\
    \ == b[j-1] \n                                    i -= 1\n                   \
    \                 j -= 1\n                                else \n            \
    \                        return false\n            \n            else \n     \
    \           \n                let n = length(b)\n                let m = length(a)\n\
    \                \n                let i = n - 1\n                let j = m -\
    \ 1\n                \n                while i >= 0 && j >= 0 \n             \
    \       \n                    if a[i] == b[j] \n                        i -= 1\n\
    \                        j -= 1\n                    else \n                 \
    \       \n                        if i == 0 \n                            i -=\
    \ 1\n                        else \n                            \n           \
    \                 if j == 0 \n                                j -= 1\n       \
    \                     else \n                                \n              \
    \                  if a[i-1] == b[j-1] \n                                    i\
    \ -= 1\n                                    j -= 1\n                         \
    \       else \n                                    return false\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.4>", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        if b == a \n    \
    \        return true \n        else \n            if b[length(b)-1] == a[length(a)-1]\
    \ \n                return cycpattern_check(a[1:length(a)-1], b) \n          \
    \  else \n                return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\
    \ \nend \n</code>\n<|/ a |>\n<| a tags=recursion,string,julia |>\nI came up with\
    \ a solution that is more efficient than others proposed so far:\n<code>", " \
    \   if length(a) == 0 || length(b) == 0 \n        return false\n    end", "  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    if length(a)\
    \ == 0 \n        true\n    else if length(b) == 0 \n        true\n    else if\
    \ length(a) == length(b) \n        true\n    else \n        false\n    end\nend\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.", "    \n\
    \    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n\
    \    if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n \
    \       return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return false\n    \n    if length(a) < length(b)\
    \ \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n", "    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false \n    else \n        \n        if b == a \n            return true \n\
    \        else \n            \n            if b[length(b)-1] == a[length(a)-1]\
    \ \n                return cycpattern_check(a[1:length(a)-1], b) \n          \
    \  else \n                return cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\
    \ \n        end\n    end\nend\n</cell>\n<code language=julia-1.5>\n@time cycpattern_check(\"\
    abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\n@time cycpattern_check(\"\
    hello\",\"ell\")\n</cell>\n<code language=julia-1.5>\n@time cycpattern_check(\"\
    whassup\",\"psus\")\n</cell>\n<code language=julia-1.5>\n@time cycpattern_check(\"\
    abab\",\"baa\")\n</cell>\n<code language=julia-1.5>\n@time cycpattern_check(\"\
    efef\",\"eeff\")\n</cell>\n<code language=julia-1.5>\n@time cycpattern_check(\"\
    himenss\",\"simen\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times each character appears in the string.\
    \ \nFor example, \n    count_chars(\"abca\") => Dict(\"a\"=>2, \"b\"=>2, \"c\"\
    =>3)", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    end", "    if length(a) == 0 || length(b) == 0 \n        return false \n\
    \    else \n        if b[1..length(b)-1] in a[1:length(a)-1] \n            return\
    \ true \n        else \n            return cycpattern_check(a[1:length(a)-1],\
    \ b) \nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work if `a` is longer\
    \ than `b`.\n<|/ c |>\n<| c |>\nIt does work if `a` is longer than `b`.  It returns\
    \ false if either `a` or `b` is empty.\n<|/ c |>\n<| c |>\nIt doesn't work if\
    \ `a` is longer than `b`.  It returns false if either `a` or `b` is empty.\n<|/\
    \ c |>\n<| c |>\nIt doesn't work if `a` is longer than `b`. It returns false if\
    \ either `a` or `b` is empty.\n<|/ c |>\n<| c |>\nIt doesn't work if `a` is longer\
    \ than `b`. It returns false if either `a` or `b` is empty.\n<|/ c |>\n<| a tags=string,julia,substring\
    \ |>\n<code>", "    \n    \n    if length(a) == 0 || length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == 1 \n        return true\n \
    \   end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n  \
    \  if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 0 \n        return\
    \ true\n    end\n    \n    if length(b) == 0 \n        return true\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 0 \n        return true\n    end\n    \n \
    \   if length(b) == 0 \n        return true\n    end\n    \n    if length(a) ==\
    \ 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 0 \n        return true\n    end\n    \n    if length(b) ==\
    \ 0 \n        return true\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ < length(b) \n        return false\n    end\n    \n    if length(a) == 0 \n\
    \        return true\n    end\n    \n    if length(b) == 0 \n        return true\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(b) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 0 \n        return true\n\
    \    end\n    \n    if length(b) == 0 \n        return true\n    end\n    \n \
    \   if length(a) == 1 \n", "    \n    \n    if length(a) == length(b) \n     \
    \   \n        for i in 1:length(a) \n            \n            if a[i] != b[i]\
    \ \n                \n                if a[i] > b[i] \n                    \n\
    \                    a = a[1:i-1] + a[i+1::length(a)]\n                    \n\
    \                elseif a[i] < b[i] \n                    \n                 \
    \   a = a[1:i] + a[i+1::length(a)]\n                    \n                else\n\
    \                    \n                    a = a[1:i] + a[i+1::length(a)]\n  \
    \                  \n                end\n                \n            end\n\
    \            \n        end\n        \n        return true\n        \n    else\n\
    \        return false\n    end\n    \nend\n</cell>\n<code language=julia-1.5>",
  "    \n    if length(a) == length(b) \n        \n        if a == b \n          \
    \  return true\n        \n        else \n            \n            for i in a\
    \ \n                \n                if i == b[(i+1):length(b)]\n           \
    \         \n                    return true\n                \n              \
    \  else\n                    \n                    return false\n            \n\
    \        end\n        \n    else\n        \n        return false\n    end\n  \
    \  \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\",\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\",\"ell\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"whassup\",\"psus\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    himenss\",\"simen\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times a substring appears in the string.",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n  \
    \  if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n   \
    \     return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return false\n    \n    if length(a) < length(b)\
    \ \n        return false\n    \n    if a[1] == b[1] \n        return true\n  \
    \  \n    if a[1] == b[2] \n        return true\n    \n    if a[2] == b[1] \n \
    \       return true\n    \n    if a[2] == b[2] \n        return true\n    \n \
    \   if a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n      \
    \  return true\n    \n    if a[2] == b[0] \n        return true\n    \n    if\
    \ a[2] == b[1] \n        return true\n    \n    if a[0] == b[0] \n        return\
    \ true\n    \n    if a[1] == b[0] \n        return true\n    \n    if a[1] ==\
    \ b[2] \n        return true\n    \n    if a[2] == b[0] \n        return true\n\
    \    \n    if a[2] == b[1] \n        return true\n    \n    if a[0] == b[0] \n\
    \        return true\n    \n    if a[0] == b[1] \n        return true\n    \n\
    \    if a[0] == b[2] \n        return true\n    \n    if a[1] == b[0] \n     \
    \   return true\n    \n    if a[1] == b[1] \n        return true\n    \n    if\
    \ a[1] == b[2] \n        return true\n    \n    if a[2] == b[0] \n        return\
    \ true\n    \n    if a[2] == b[1] \n        return true\n    \n    if a[2] ==\
    \ b[2] \n        return true\n    \n    if a[0] == b[0] \n        return true\n\
    \    \n    if a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n\
    \        return true\n    \n    if a[1] == b[0] \n        return true\n    \n\
    \    if a[1] == b[1] \n        return true\n    \n    if a[1] == b[2] \n     \
    \   return true\n    \n    if a[2] == b[0] \n        return true\n    \n    if\
    \ a[2] == b[1] \n        return true\n    \n    if a[2] == b[2] \n        return\
    \ true\n    \n    if a[0] == b[0] \n        return true\n    \n    if a[0] ==\
    \ b[1] \n        return true\n    \n    if a[0] == b[2] \n        return true\n",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        if length(a) == length(b) \n            return true\n        else\
    \ \n            if length(a) > length(b) \n                return cycpattern_check(b,a)\n\
    \            else \n                let i = length(a) - length(b) \n         \
    \       let j = length(b) - length(a) \n                let k = length(a) - i\
    \ \n                let l = length(b) - j \n                let m = length(a)\
    \ - k \n                let n = length(b) - l \n                let o = length(a)\
    \ - m \n                let p = length(b) - m \n                let q = length(a)\
    \ - n \n                let r = length(b) - n \n                let s = length(a)\
    \ - o \n                let t = length(b) - o \n                let u = length(a)\
    \ - p \n                let v = length(b) - p \n                let w = length(a)\
    \ - q \n                let x = length(b) - q \n                let y = length(a)\
    \ - r \n                let z = length(b) - r \n                let A = length(a)\
    \ - s \n                let B = length(b) - s \n                let C = length(a)\
    \ - t \n                let D = length(b) - t \n                let E = length(a)\
    \ - u \n                let F = length(b) - u \n                let G = length(a)\
    \ - v \n                let H = length(b) - v \n                let I = length(a)\
    \ - w \n                let J = length(b) - w \n                let K = length(a)\
    \ - x \n                let L = length(b) - x \n                let M = length(a)\
    \ - y \n                let N = length(b) - y \n                let O = length(a)\
    \ - z \n                let P = length(b) - z \n                let Q = length(a)\
    \ - A \n                let R = length(b) - A \n                let S = length(a)\
    \ - B \n                let T = length(b) - B \n                let U = length(a)\
    \ - C \n                let V = length(b) - C \n                let W = length(a)\
    \ - D \n                let X = length(b) - D \n                let Y = length(a)\
    \ - E \n                let Z = length(b) - E \n                let AA = length(a)\
    \ - F \n                let AB = length(b) - F \n                let AC = length(a)\
    \ - G \n                let AD = length(b) - G \n                let AE = length(a)\
    \ - H \n                let AF = length(b) - H \n                let AG = length(a)\
    \ - I \n                let AH = length(b) - I \n                let AI = length(a)\
    \ - J \n                let AJ = length(b) - J \n                let AK = length(a",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        return (cycpattern_check_recursive(a,b,0,0)) \n    end \nend ", " \
    \   \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n \
    \   if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n  \
    \      return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ == 0 \n        return false\n    \n    if length(b) == 0 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) == 0 \n        return false\n    \n    if length(b) == 0 \n      \
    \  return false\n    \n    if length(a) == 1 \n        return true\n    \n   \
    \ if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == 0 \n        return false\n    \n \
    \   if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 ", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        if length(a) == 1 \n            return b == a \n      \
    \  else \n            if length(b) == 1 \n                return b == a || b ==\
    \ reverse(a) \n            else \n                let c = b[1:length(b)]\n   \
    \             let d = a[1:length(a)]\n                let e = reverse(c)\n   \
    \             let f = reverse(d) \n                let g = c + e + f\n       \
    \         return g == a || g == reverse(a) || g == reverse(b) \n            end\
    \ \n        end \n    end \nend \n</cell>\n<text>\nCyclic Patterns\nCyclic patterns\
    \ are patterns that repeat themselves over and over again. For example, in the\
    \ string \"abba\", the pattern \"aba\" appears twice (once in each of the two\
    \ positions). Write a function that checks if a pattern appears in a string.",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        if a[1] == b[1] \n            return cycpattern_check(a[2:end-1],\
    \ b) \n        else \n            return cycpattern_check(a[1:end-1], b[1:end-1])\
    \ || cycpattern_check(a[1:end-1], b[2:end]) \n    end\nend", "    \n    \n   \
    \ if length(a) == 0 || length(b) == 0 \n        return false\n    end", "    \n\
    \    if length(a) == 0 || length(b) == 0 \n        return false\n    else if length(a)\
    \ == 1 \n        return true\n    else if length(b) == 1 \n        return true\n\
    \    else \n        return (cycpattern_check(a[1:length(a)-1], b[1:length(b)-1])\
    \ || cycpattern_check(a[1:length(a)-1], b[1:length(b)-2]) || cycpattern_check(a[1:length(a)-2],\
    \ b[1:length(b)-1]) || cycpattern_check(a[1:length(a)-2], b[1:length(b)-2]))\n\
    end", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) == 0 \n        return true\n    \n    if length(b) == 0 \n       \
    \ return true\n    \n    if length(a) == 1 \n        return true\n    \n    if\
    \ length(b) == 1 \n        return true\n    \n    if length(a) == length(b) \n\
    \        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return true\n    \n    if length(b) ==\
    \ 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == 0 \n        return true\n    \n  \
    \  if length(b) == 0 \n        return true\n    \n    if length(a) == 1 \n   \
    \     return true\n    \n    if length(b) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ true\n    \n    if length(b) == 0 \n        return true\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ true\n    \n    if length(b) == 0 \n        return true\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ true\n    \n    if length(b) == 0 \n        return true\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ true\n    \n    if length(b) == 0 \n        return true\n    \n    if length(a)\
    \ == 1 ", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    end\n    \n    if length(a) == 1 \n        return true\n    end\n\
    \    \n    if length(b) == 1 \n        return true\n    end\n    \n    if length(a)\
    \ == length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if b == \"\" \n        return true\n    end\n\
    \    \n    if a == \"\" \n        return false\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == 1 \n        return true\n \
    \   end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n  \
    \  if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if b == \"\" \n        return true\n\
    \    end\n    \n    if a == \"\" \n        return false\n    end\n    \n    if\
    \ length(a) == 0 \n        return false\n    end\n    \n    if length(b) == 0\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ < length(b) \n        return false\n    end\n    \n    if b == \"\" \n     \
    \   return true\n    end\n    \n    if a == \"\" \n        return false\n    end\n\
    \    \n    if length(a) == 0 \n        return false\n    end\n    \n    if length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        return false\n    end\n    \n   \
    \ if length(a) < length(b) \n        return false\n    end\n    \n    if b ==\
    \ \"\" \n        return true\n    end\n    \n    if a == \"\" \n        return\
    \ false\n    end\n    \n    if length(a) == 0 \n        return false\n    end\n\
    \    \n    if length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false \n    else if length(a) == 1 \n        return b == a \n    else if length(b)\
    \ == 1 \n        return a == b \n    else \n        return cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end-1])\nend\n</code>\n<|/ a\
    \ tags=string,julia,pattern-matching |>\n<| a dscore=2 |>\nI wrote a package for\
    \ Julia called StringMatch that does this kind of pattern matching.\n<code>\n\
    julia> using StringMatch", "    \n    if length(a) == 0 || length(b) == 0 \n \
    \       return false\n    end", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else \n        return issubstring(a,b) ||\
    \ issubstring(b,a)\n    end\nend", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return b\
    \ == a\n    \n    if length(b) == 1 \n        return a == b\n    \n    if length(a)\
    \ == length(b) \n        return true\n    \n    if length(a) > length(b) \n  \
    \      return cycpattern_check(b, a)\n    \n    if length(b) > length(a) \n  \
    \      return cycpattern_check(a, b) \n    \n    if length(a) == length(b) ==\
    \ 1 \n        return a == b\n    \n    if length(a) == length(b) == 2 \n     \
    \   return cycpattern_check(a[1:], b[1:])\n    \n    if length(a) == length(b)\
    \ == 3 \n        return cycpattern_check(a[1:], b[1:])\n    \n    if length(a)\
    \ == length(b) == 4 \n        return cycpattern_check(a[1:], b[1:])\n    \n  \
    \  if length(a) == length(b) == 5 \n        return cycpattern_check(a[1:], b[1:])\n\
    \    \n    if length(a) == length(b) == 6 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 7 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 8 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 9 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 10 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 11 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 12 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 13 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 14 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 15 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 16 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 17 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 18 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == 19 \n        return cycpattern_check(a[1:],\
    \ b[1:])\n    \n    if length(a) == length(b) == ", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        if length(a) == 1\
    \ \n            return b == a \n        else \n            if length(b) == 1 \n\
    \                return a == b \n            else \n                let a1 = substring(a,1,length(a))\n\
    \                let b1 = substring(b,1,length(b))\n                let a2 = substring(a,2,length(a))\n\
    \                let b2 = substring(b,2,length(b))\n                let a3 = substring(a,3,length(a))\n\
    \                let b3 = substring(b,3,length(b))\n                let a4 = substring(a,4,length(a))\n\
    \                let b4 = substring(b,4,length(b))\n                let a5 = substring(a,5,length(a))\n\
    \                let b5 = substring(b,5,length(b))\n                let a6 = substring(a,6,length(a))\n\
    \                let b6 = substring(b,6,length(b))\n                let a7 = substring(a,7,length(a))\n\
    \                let b7 = substring(b,7,length(b))\n                let a8 = substring(a,8,length(a))\n\
    \                let b8 = substring(b,8,length(b))\n                let a9 = substring(a,9,length(a))\n\
    \                let b9 = substring(b,9,length(b))\n                let a10 =\
    \ substring(a,10,length(a))\n                let b10 = substring(b,10,length(b))\n\
    \                let a11 = substring(a,11,length(a))\n                let b11\
    \ = substring(b,11,length(b))\n                let a12 = substring(a,12,length(a))\n\
    \                let b12 = substring(b,12,length(b))\n                let a13\
    \ = substring(a,13,length(a))\n                let b13 = substring(b,13,length(b))\n\
    \                let a14 = substring(a,14,length(a))\n                let b14\
    \ = substring(b,14,length(b))\n                let a15 = substring(a,15,length(a))\n\
    \                let b15 = substring(b,15,length(b))\n                let a16\
    \ = substring(a,16,length(a))\n                let b16 = substring(b,16,length(b))\n\
    \                let a17 = substring(a,17,length(a))\n                let b17\
    \ = substring(b,17,length(b))\n                let a18 = substring(a,18,length(a))\n\
    \                let b18 = substring(b,18,length(b))\n                let a19\
    \ = substring(a,19,length(a))\n                let b19 = substring(b,19,length(b))\n\
    \                let a20 = substring(a,20,length(a))\n                let b20\
    \ = substring(b,20,length(b))\n                let a21 = substring(a,21,length(a))\n\
    \                let b21 = ", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == 0 \n        return false\n    \n \
    \   if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if issubstring(a,b) \n        return true\n    end\n    \n\
    \    if issubstring(b,a) \n        return true\n    end\n    \n    if issubstring(a,b)\
    \ || issubstring(b,a) \n        return true\n    end\n    \n    if issubstring(a,b)\
    \ || issubstring(b,a) || issubstring(a,a) || issubstring(b,b) \n        return\
    \ true\n    end\n    \n    if issubstring(a,b) || issubstring(b,a) || issubstring(a,a)\
    \ || issubstring(b,b) || issubstring(b,b) \n        return true\n    end\n   \
    \ \n    if issubstring(a,b) || issubstring(b,a) || issubstring(a,a) || issubstring(b,b)\
    \ || issubstring(b,b) || issubstring(a,a) \n        return true\n    end\n   \
    \ \n    if issubstring(a,b) || issubstring(b,a) || issubstring(a,a) || issubstring(b,b)\
    \ || issubstring(b,b) || issubstring(a,a) || issubstring(b,b) || issubstring(b,b)\
    \ || issubstring(a,a) || issubstring(b,b) || issubstring(b,b) || issubstring(a,a)\
    \ || issubstring(b,b) || issubstring(b,b) || issubstring(a,a) || issubstring(b,b)\
    \ || issubstring(b,b) || issubstring(a,a) || issubstring(b,b) || issubstring(b,b)\
    \ || issubstring(a,a) || issubstring(b,b) || issubstring(b,b) || issubstring(a,a)\
    \ || issubstring(b,b) || issubstring(b,b) || issubstring(a,a) || issubstring(b,b)\
    \ || issubstring(b,b) || issubstring(a,a) || issubstring(b,b) || issubstring(b,b)\
    \ || issubstring(a,a) || issubstring(b,b) || issubstring(b,b) || issubstring(a,a)\
    \ || issubstring(b,b) || issubstring(b,b) || issubstring(a,a) || issubstring(b,b)\
    \ || issubstring(b,b) || issubstring(a,a) || issubstring(b,b) || issubstring(b,b)\
    \ || issubstring(a,a) || issubstring(b,b) || issubstring", "    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false \n    else \n        \n        if\
    \ b == a \n            return true \n        else \n            \n           \
    \ \n            if b[length(b)-1] == a[length(a)-1] \n                return cycpattern_check(a[1:length(a)-1],\
    \ b) \n            else \n                return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1]) \n        end\n    end\nend", "    \n    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 1 \n        return true\n\
    \    end\n    \n    if length(a) == length(b) \n        return true\n    end\n\
    \    \n    if length(a) > length(b) \n        return false\n    end\n    \n  \
    \  if length(a) < length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 1 \n        return true\n\
    \    end\n    \n    if length(a) == length(b) \n        return true\n    end\n\
    \    \n    if length(a) > length(b) \n        return false\n    end\n    \n  \
    \  if length(a) < length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if ", "    if length(a) == 0\
    \ || length(b) == 0 \n        return false\n    else if length(a) == length(b)\
    \ \n        return true\n    else \n        return (cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b[1:end])) && cycpattern_check(a[1:end],\
    \ b[1:end])\nend\n</code>\n<|/ a |>\n<| a dscore=0 |>\n<code>", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        return b\
    \ == substring(a,0,length(b)) || substring(a,0,length(b))==b || substring(a,length(b),length(b))==b\
    \ || substring(a,length(b),length(b))==substring(a,0,length(b))\n    end\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,substring |>\nI wrote a function\
    \ that checks if a substring is a substring of another string. \n<code>", "  \
    \  \n    \n    if length(a) == 0 \n        true\n    else if length(b) == 0 \n\
    \        true\n    else if length(a) == length(b) \n        true\n    else \n\
    \        if a[0..length(a)] == b\n            true\n        else\n           \
    \ false\n    end\nend\n</cell>\n<code language=julia-1.5>", "    \n    if length(a)\
    \ == 0 \n        true\n    elseif length(b) == 0 \n        true\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif b == a \n      \
    \  true\n    elseif b == reverse(tail(a)) \n        true\n    elseif b == reverse(tail(b))\
    \ \n        true\n    elseif b == reverse(tail(tail(a))) \n        true\n    elseif\
    \ b == reverse(tail(tail(b))) \n        true\n    elseif b == reverse(tail(tail(tail(a))))\
    \ \n        true\n    elseif b == reverse(tail(tail(tail(b)))) \n        true\n\
    \    elseif b == reverse(tail(tail(tail(tail(a)))))\n        true\n    elseif\
    \ b == reverse(tail(tail(tail(tail(b))))) \n        true\n    elseif b == reverse(tail(tail(tail(tail(tail(a))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(b))))))\n    \
    \    true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(a)))))))\n  \
    \      true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(b)))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(a))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(b))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(b))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(b))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(a))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(tail(tail(b))))))))\n\
    \        true\n    elseif b == reverse(tail(tail(tail(tail(tail(tail(tail(tail",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n  \
    \  if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n   \
    \     return true\n    \n    if a[1] == b[1] \n        return cycpattern_check(a[2:],\
    \ b[2:])\n    \n    if a[1] == b[2] \n        return cycpattern_check(a[2:], b[:2])\n\
    \    \n    if a[1] == b[3] \n        return cycpattern_check(a[2:], b[:3])\n \
    \   \n    if a[1] == b[4] \n        return cycpattern_check(a[2:], b[:4])\n  \
    \  \n    if a[1] == b[5] \n        return cycpattern_check(a[2:], b[:5])\n   \
    \ \n    if a[1] == b[6] \n        return cycpattern_check(a[2:], b[:6])\n    \n\
    \    if a[1] == b[7] \n        return cycpattern_check(a[2:], b[:7])\n    \n \
    \   if a[1] == b[8] \n        return cycpattern_check(a[2:], b[:8])\n    \n  \
    \  if a[1] == b[9] \n        return cycpattern_check(a[2:], b[:9])\n    \n   \
    \ if a[1] == b[10] \n        return cycpattern_check(a[2:], b[:10])\n    \n  \
    \  if a[1] == b[11] \n        return cycpattern_check(a[2:], b[:11])\n    \n \
    \   if a[1] == b[12] \n        return cycpattern_check(a[2:], b[:12])\n    \n\
    \    if a[1] == b[13] \n        return cycpattern_check(a[2:], b[:13])\n    \n\
    \    if a[1] == b[14] \n        return cycpattern_check(a[2:], b[:14])\n    \n\
    \    if a[1] == b[15] \n        return cycpattern_check(a[2:], b[:15])\n    \n\
    \    if a[1] == b[16] \n        return cycpattern_check(a[2:], b[:16])\n    \n\
    \    if a[1] == b[17] \n        return cycpattern_check(a[2:], b[:17])\n    \n\
    \    if a[1] == b[18] \n        return cycpattern_check(a[2:], b[:18])\n    \n\
    \    if a[1] == b[19] \n        return cycpattern_check(a[2:], b[:19])\n    \n\
    \    if a[1] == b[20] \n        return cycpattern_check(a[2:], b[:20])\n    \n\
    \    if a[1] == b[21] \n        return cycpattern_check(a[2:], b[:21])\n    \n\
    \    if a[1] == b[22] \n        return cycpattern_check", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        \n      \
    \  if a[1] == b[1] \n            return cycpattern_check(a[2:end-1], b) \n   \
    \     else \n            return cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[2:end]) \n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=recursion,string,julia\
    \ |>\nI wrote a recursive function which can solve your problem in O(n) time complexity:\n\
    <code>", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    end", "    if length(a) == 0 || length(b) == 0 \n        return false \n\
    \    else \n        return b in a\n    end\nend", "    \n    \n    if length(a)\
    \ == 0 \n        true\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == 0 \n\
    \        false\n    elseif length(b) == 0 \n        false\n    elseif length(a)\
    \ == length(b) \n        true\n    elseif length(a) > length(b) \n        false\n\
    \    elseif length(a) < length(b) \n        false\n    elseif length(a) == ",
  "    if length(a) == 0 || length(b) == 0 \n        return false\n    else \n   \
    \     if length(a) == length(b) \n            return true\n        else \n   \
    \         if length(a) > length(b) \n                return cycpattern_check(b,a)\n\
    \            else \n                return cycpattern_check(a,b)\n        end\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| a dscore=1 |>\n<code>", "    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false \n    else \n        local a1 = a:sub(1,length(a)-1)\
    \ \n        local b1 = b:sub(1,length(b)-1) \n        if a1 == b1 \n         \
    \   return true \n        else \n            return cycpattern_check(a1,b1) \n\
    \        end \n    end \nend \n</code>\n<|/ a tags=recursion,string,julia |>\n\
    <| c |>\nThis solution does not work for \"himenss\" vs \"simen\" as it will return\
    \ true for both.\n<|/ c |>\n<| c |>\nYes, I noticed that and fixed it now. Thanks.\n\
    <|/ c |>\n<| a dscore=2 |>\nHere's a solution using recursion:\n<code>", "   \
    \ if length(a) == 0 || length(b) == 0 \n        return false \n    else \n   \
    \     local a1 = a:sub(1,length(a)-1) \n        local b1 = b:sub(1,length(b)-1)\
    \ \n        if a1 == b1 \n            return true \n        else \n          \
    \  return cycpattern_check(a1,b1) \n        end \n    end \nend \n</code>\n<|/\
    \ a dscore=0 |>\n<| a dscore=0 |>\n<code>", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    end", "    \n    \n    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n      \
    \  return true\n    \n    if length(b) == 1 \n        return true\n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    if length(a) < length(b) \n        return\
    \ false\n    \n    if length(a) == 0 \n        return true\n    \n    if length(b)\
    \ == 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return true\n    \n    if length(b) ==\
    \ 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return true\n    \n    if length(b) ==\
    \ 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return true\n    \n    if length(b) ==\
    \ 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return true\n    \n    if length(b) ==\
    \ 0 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return true\n    \n    if length(b) ==\
    \ 0 \n", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        \n        if b == a \n            return true \n      \
    \  else \n            \n            \n            \n            \n           \
    \ \n            \n            \n            \n            \n            \n   \
    \         \n            \n            \n            \n            \n         \
    \   \n            \n            \n            \n            \n            \n \
    \           \n            \n            \n            \n            \n       \
    \     \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n\
    \            \n            \n            \n            \n            \n      \
    \      \n            \n            \n            \n            \n            \n",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      if b == a \n            return true \n        else \n            if b[length(b)-1]\
    \ == a[length(a)-1] \n                return cycpattern_check(a[1:length(a)-1],\
    \ b) \n            else \n                return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1]) \n        end\n    end\nend\n</code>\n<|/ a tags=string,julia,substring\
    \ |>\n<| a |>\n<code>", "    \n    if length(a) == 0 || length(b) == 0 \n    \
    \    return false \n    else \n        if length(a) == 1 \n            return\
    \ b == a \n        else \n            if length(b) == 1 \n                return\
    \ b == a || b == reverse(a) \n            else \n                return b == a\
    \ || b == reverse(a) || b == reverse(b) \n        end\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"abcd\",\"abd\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"hello\",\"ell\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"whassup\",\"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abab\",\"baa\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\"\
    ,\"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"himenss\",\"\
    simen\")\n</cell>\n<code language=julia-1.5>", "    \n    \n    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false\n    \n    \n    if length(a) ==\
    \ 1 \n        return b == a\n    \n    \n    if length(b) == 1 \n        return\
    \ a == b\n    \n    \n    if length(a) == length(b) \n        return true\n  \
    \  \n    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) \n        return cycpattern_check(b, a)\n\
    \    \n    \n    if length(b) > length(a) \n        return cycpattern_check(a,\
    \ b) \n    \n    \n    if length(a) == length(b) \n        return true\n    \n\
    \    \n    if length(a) > length(b) ", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        return false\n    end\n    \n   \
    \ if length(a) == 0 \n        return false\n    end\n    \n    if length(b) ==\
    \ 0 \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == 1 \n        return true\n \
    \   end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n  \
    \  if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) == 0 \n\
    \        return false\n    end\n    \n    if length(b) == 0 \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(b) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 0 \n        return\
    \ false\n    end\n    \n    if length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) == 0 \n        return false\n    end\n\
    \    \n    if length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) == 0 \n        return false\n    end\n    \n    if length(b)\
    \ == 0 \n        return false\n    end\n    \n    if ", "    \n    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    end\n    \n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    \n    if length(b) == 1 \n  \
    \      return true\n    end\n    \n    \n    if length(a) == length(b) \n    \
    \    return true\n    end\n    \n    \n    if length(a) > length(b) \n       \
    \ return false\n    end\n    \n    \n    if length(a) < length(b) \n        return\
    \ false\n    end\n    \n    \n    if length(a) == 1 \n        return true\n  \
    \  end\n    \n    \n    if length(b) == 1 \n        return true\n    end\n   \
    \ \n    \n    if length(a) == length(b) \n        return true\n    end\n    \n\
    \    \n    if length(a) > length(b) \n        return false\n    end\n    \n  \
    \  \n    if length(a) < length(b) \n        return false\n    end\n    \n    \n\
    \    if length(a) == 1 \n        return true\n    end\n    \n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    \n    if length(a) == length(b)\
    \ \n        return true\n    end\n    \n    \n    if length(a) > length(b) \n\
    \        return false\n    end\n    \n    \n    if length(a) < length(b) \n  \
    \      return false\n    end\n    \n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    \n    if length(b) == 1 \n        return true\n   \
    \ end\n    \n    \n    if length(a) == length(b) \n        return true\n    end\n\
    \    \n    \n    if length(a) > length(b) \n        return false\n    end\n  \
    \  \n    \n    if length(a) < length(b) \n        return false\n    end\n    \n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    \n    if\
    \ length(b) == 1 \n        return true\n    end\n    \n    \n    if length(a)\
    \ == length(b) \n        return true\n    end\n    \n    \n    if length(a) >\
    \ length(b) \n        return false\n    end\n    \n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    \n    if length(a) == 1 \n      \
    \  return true\n    end\n    \n    \n    if length(b) == 1 \n        return true\n\
    \    end\n    \n    \n    if length(a) == length(b) \n        return true\n  \
    \  end\n    \n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    \n    if length(a) < length(b) \n        return false\n    end\n  \
    \  \n    \n    if length(a", "    \n    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    end", "    \n    \n    if length(a) == 0 \n        true\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == 0 \n        false\n    elseif length(b)\
    \ == 0 \n        false\n    elseif length(a) == length(b) \n        true\n   \
    \ elseif length(a) > length(b) \n        false\n    elseif length(a) < length(b)\
    \ \n        false\n    elseif length(a) == ", "    \n    if length(a) == 0 ||\
    \ length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n      \
    \  return true\n    \n    if length(b) == 1 \n        return true\n    \n    if\
    \ length(a) == length(b) \n        return true\n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    if length(a) < length(b) \n        return\
    \ false\n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return ", "    \n    if length(a) == 0 || length(b) == 0 \n \
    \       return false\n    \n    if length(a) == 1 \n        return b == a\n  \
    \  \n    if length(b) == 1 \n        return a == b\n    \n    if length(a) > length(b)\
    \ \n        return false\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > 1 \n        \n        if length(a) == length(b)\
    \ \n            \n            for i in 1:length(a) \n                if a[i] !=\
    \ b[i] \n                    return false\n            \n            return true\n\
    \        \n        else \n            \n            for i in 1:length(b) \n  \
    \              if a[i] != b[i] \n                    return false\n          \
    \  \n            return true\n    \n    else \n        \n        if length(b)\
    \ == 1 \n            return true\n        \n        else \n            \n    \
    \        for i in 1:length(a) \n                if a[i] != b[i] \n           \
    \         return false\n            \n            return true\n    \nend", " \
    \   \n    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n\
    \    \n    a_chars = split(a, \"\")\n    b_chars = split(b, \"\")\n    \n    a_chars\
    \ = map(x->replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(replace(",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        return (a==b) || (a==reverse(b))\n    end\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=string,julia,pattern-matching |>\nI wrote a package called Matching\
    \ which does this in Julia. Here is an example:\n<code>\njulia> using Matching",
  "    \n    \n    if length(a) == length(b) \n        return true\n    else \n  \
    \      return false\n    end\nend", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 0 \n        return false\n    \n    if length(b) ==\
    \ 0 \n        return false", "    \n    if length(a) == 0 || length(b) == 0 \n\
    \        return false\n    end", "    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == 0 \n        return false\n    \n \
    \   if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) == 0 \n        return\
    \ false\n    \n    if length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 ", "    \n    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        \n        if length(a) == 1 \n            return b == a\
    \ \n        else \n            \n            if length(b) == 1 \n            \
    \    return b == a || a == b \n            else \n                \n         \
    \       let a = a[1:end-1] \n                let b = b[1:end-1] \n           \
    \     \n                if b == a || a == b \n                    then cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) \n                else \n                    cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) || cycpattern_check(a[1:end-1], b)\n            end\n        end\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\",\"\
    abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\",\"ell\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\"psus\")\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n<text>\n\
    Exercise 2", "    \n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    else \n        return false\n    end\nend", "    \n    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) == 0 \n        return false\n    end\n    \n    if length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        return false\n    end\n    \n   \
    \ if length(a) == 0 \n        return false\n    end\n    \n    if length(b) ==\
    \ 0 \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == 1 \n        return true\n \
    \   end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n  \
    \  if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) == 0 \n\
    \        return false\n    end\n    \n    if length(b) == 0 \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(b) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 0 \n        return\
    \ false\n    end\n    \n    if length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) == 0 \n        return false\n    end\n\
    \    \n    if length(b) == 0 \n        return false\n    end\n    ", "    \n \
    \   if length(a) == 0 || length(b) == 0 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false", "    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    if length(a) == 0 || length(b) == 0 \n        return\
    \ false \n    else \n        return (a[1] == b) || (cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) && a[end] == b[end])\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if a[1] == b[1]\
    \ \n        return cycpattern_check(a[2:], b[2:])\n    \n    if a[1] == b[2] \n\
    \        return cycpattern_check(a[2:], b[:2])\n    \n    if a[1] == b[3] \n \
    \       return cycpattern_check(a[2:], b[:3])\n    \n    if a[2] == b[2] \n  \
    \      return cycpattern_check(a[:2], b[:2])\n    \n    if a[2] == b[3] \n   \
    \     return cycpattern_check(a[:2], b[:3])\n    \n    if a[3] == b[3] \n    \
    \    return cycpattern_check(a[:3], b[:3])\n    \n    if a[3] == b[1] \n     \
    \   return cycpattern_check(a[:3], b[2:])\n    \n    if a[3] == b[2] \n      \
    \  return cycpattern_check(a[:3], b[:2])\n    \n    if a[3] == b[3] \n       \
    \ return cycpattern_check(a[:3], b[:3])\n    \n    if a[1] == b[3] \n        return\
    \ cycpattern_check(a[2:], b[:3])\n    \n    if a[2] == b[3] \n        return cycpattern_check(a[:2],\
    \ b[:3])\n    \n    if a[3] == b[3] \n        return cycpattern_check(a[:3], b[:3])\n\
    \    \n    if a[1] == b[2] \n        return cycpattern_check(a[2:], b[:2])\n \
    \   \n    if a[2] == b[2] \n        return cycpattern_check(a[:2], b[:2])\n  \
    \  \n    if a[3] == b[2] \n        return cycpattern_check(a[:3], b[:2])\n   \
    \ \n    if a[1] == b[1] \n        return cycpattern_check(a[2:], b[2:])\n    \n\
    \    if a[2] == b[1] \n        return cycpattern_check(a[:2], b[2:])\n    \n \
    \   if a[3] == b[1] \n        return cycpattern_check(a[:3], b[2:])\n    \n  \
    \  if a[1] == b[3] \n        return cycpattern_check(a[2:], b[:3])\n    \n   \
    \ if a[2] == b[3] \n        return cycpattern_check(a[:2], b[:3])\n    \n    if\
    \ a[3] == b[3] \n        return cycpattern_check(a[:3], b[:3])\n    \n    if a[1]\
    \ == b[2] \n        return cycpattern_check(a[2:], b[:2])\n    \n    if a[2] ==\
    \ b[2] \n        return cycpattern_check(a[:2], b[:2])\n", "    \n    \n    if\
    \ length(a) == length(b) \n        \n        if a == b \n            return true\n\
    \        \n        else \n            return false\n        \n    else \n    \
    \    \n        if length(a) > length(b) \n            return cycpattern_check(b,\
    \ a)\n        \n        else \n            return cycpattern_check(a, b) \n  \
    \  \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\",\"abd\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\",\"ell\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"whassup\",\"psus\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\")\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    himenss\",\"simen\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a string and returns the number of times the substring appears in the string.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    \n    if\
    \ length(a) == 0 || length(b) == 0 \n        return false\n    \n    \n    if\
    \ length(a) == 1 \n        return true\n    \n    \n    if length(b) == 1 \n \
    \       return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) > length(b) \n        return false\n    \n\
    \    \n    if length(a) == 0 \n        return false\n    \n    \n    if length(b)\
    \ == 0 \n        return false\n    \n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    \n    if length(b) == 1 \n        return true\n    \n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    \n    if length(a) == 0 \n   \
    \     return false\n    \n    \n    if length(b) == 0 \n        return false\n\
    \    \n    \n    if length(a) == 1 \n        return true\n    \n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    \n    if length(a) == length(b) \n   \
    \     return true\n    \n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    \n    if length(a) == 0 \n        return false\n    \n    \n    if\
    \ length(b) == 0 \n        return false\n    \n    \n    if length(a) == 1 \n\
    \        return true\n    \n    \n    if length(b) == 1 \n        return true\n\
    \    \n    \n    if length(a) == length(b) \n        return true\n    \n    \n\
    \    if length(a) > length(b) \n        return false\n    \n    \n    if length(a)\
    \ == 0 \n        return false\n    \n    \n    if length(b) == 0 \n        return\
    \ false\n    \n    \n    if length(a) == 1 \n        return true\n    \n    \n\
    \    if length(b) == 1 \n        return true\n    \n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    \n    if length(a) > length(b) \n\
    \        return false\n    \n    \n    if length(a) == 0 \n        return false\n\
    \    \n    \n    if length(b) == 0 \n        return false\n    \n    \n    if\
    \ length(a) == 1 \n        return true\n    \n    \n    if length(b) == 1 \n \
    \       return true\n    \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    if length(a) > length(b) \n        return false\n    \n\
    \    \n    if length(a) == 0 \n        return false\n    \n    \n    if length(b)\
    \ == 0 \n        return false\n    \n    ", "    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else \n        if length(a) == 1 \n      \
    \      return b == a \n        else \n            if length(b) == 1 \n       \
    \         return b == a || b == reverse(a) \n            else \n             \
    \   return b == a || b == reverse(a) || b == reverse(b) \nend \n</code>\n<|/ a\
    \ tags=string,pattern-matching,julia |>\n<| c |>\nThis doesn't work for \"aba\"\
    \ vs \"baa\" but does work for \"aba\" vs \"abb\".\n<|/ c |>\n<| c |>\nI fixed\
    \ the bug, thanks for pointing it out!\n<|/ c |>\n<| a dscore=2 |>\nI came up\
    \ with a solution that is quite fast and easy to understand:\n<code>", "    \n\
    \    \n    if length(a) == 0 \n        true\n    else if length(b) == 0 \n   \
    \     true\n    else if length(a) == length(b) \n        true\n    else \n   \
    \     if contains(a,b) \n            true\n        else \n            if contains(b,a)\
    \ \n                true\n            else \n                if contains(a,substring(b))\
    \ \n                    true\n                else \n                    if contains(substring(b),a)\
    \ \n                        true\n                    else \n                \
    \        false\n    end\nend", "    if length(a) == 0 || length(b) == 0 \n   \
    \     return false\n    else \n        if b[length(b)-1] == a[length(a)-1] \n\
    \            return cycpattern_check(a[1:length(a)-1], b)\n        else \n   \
    \         return cycpattern_check(a,b[1:length(b)-1])\nend\n</code>\n<|/ a tags=recursion,string,julia\
    \ |>\n<| a dscore=0 |>\n<code>", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else \n        if length(a) == length(b) \n\
    \            return true \n        else \n            if length(a) > length(b)\
    \ \n                return cycpattern_check(b,a) \n            else \n       \
    \         let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,b)) \n              \
    \  let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,b)) \n              \
    \  let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,b)) \n              \
    \  let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,b)) \n              \
    \  let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,b)) \n              \
    \  let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,b)) \n              \
    \  let (first,last) = span(isPrefixOf(b,a)) \n                let (first,last)\
    \ = span(isPrefixOf(a,b)) \n                let (first,last) = span(isPrefixOf(b,a))\
    \ \n                let (first,last) = span(isPrefixOf(a,", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    \n    if length(a) == 1\
    \ \n        return b == a \n    \n    if length(b) == 1 \n        return a ==\
    \ b \n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return cycpattern_check(b, a)\n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      if b[length(b)-1] == a[1] \n            return cycpattern_check(a[2:end-1],\
    \ b) \n        else \n            return cycpattern_check(a[1:end-1], b) \n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\",\"\
    abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\",\"ell\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\"psus\")\n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of characters\
    \ in the string. \nWrite a function that takes a string and returns the number\
    \ of words in the string. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not letters. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are not letters. \nWrite a function that takes a string and returns the\
    \ number of sentences in the string that are not letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ letters. \nWrite a function that takes a string and returns the number of words\
    \ in the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of sentences in the string that are not letters. \nWrite\
    \ a function that takes a string and returns the number of characters in the string\
    \ that are not letters. \nWrite a function that takes a string and returns the\
    \ number of words in the string that are not letters. \nWrite a function that\
    \ takes a string and returns the number of sentences in the string that are not\
    \ letters. \nWrite a function that takes a string and returns the number of characters\
    \ in the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of words in the string that are not letters. \nWrite a function\
    \ that takes a string and returns the number of sentences in the string that are\
    \ not letters. \nWrite a function that takes a string and returns the number of\
    \ characters in the string that are not letters. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are not letters.\
    \ \nWrite a function that takes a string and returns the number of sentences in\
    \ the string that are not letters. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not letters. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that are not letters. \nWrite a function that ", "    \n    if length(a) ==\
    \ 0 || length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n \
    \       return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(b) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 0 \n        return false\n    \n\
    \    if length(b) == 0 \n        return false", "    \n    \n    if length(a)\
    \ == length(b) \n        return true\n    else \n        return false\n    end\n\
    \    \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abcd\",\"abd\"\
    ) \n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\",\"ell\") \n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\"psus\") \n\
    </cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\") \n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\") \n</cell>\n<code\
    \ language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\") \n</cell>\n<code\
    \ language=julia-1.5>", "    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    if length(a) == 0 || length(b) == 0 \n        return false \n    else \n  \
    \      return b == cycpattern_check_recursive(a[1:length(a)], b[1:length(b)])\
    \ \n    end\nend", "    \n    \n    if length(a) == 0 || length(b) == 0 \n   \
    \     return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(b) == 1 \n        return true\n    \n    if length(a) == length(b)\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) < length(b) \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if length(a) == 1 \n\
    \        return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    if length(a) == length(b) \n        return true\n    \n    if\
    \ length(a) > length(b) \n        return false\n    \n    if length(a) < length(b)\
    \ \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > length(b) \n        return false\n    \n    if length(a) < length(b) \n  \
    \      return false\n    \n    if length(a) == 1 \n        return true\n    \n\
    \    if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n        return false\n    \n    if length(a) < length(b) \n    \
    \    return false\n    \n    if length(a) == 1 \n        return true\n    \n \
    \   if length(a) == length(b) \n        return true\n    \n    if length(a) >\
    \ length(b) \n", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", " \
    \   \n    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        if b == a \n            return true \n        else \n            if\
    \ b[length(b)-1] == a[length(a)-1] \n                return cycpattern_check(a[1:length(a)-1],\
    \ b) \n            else \n                return cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-1]) \nend \n</code>\n<|/ a |>\n<| a tags=string,julia |>\n<code>",
  "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n  \
    \  \n    if length(a) == 1 \n        return true\n    \n    if length(b) == 1\
    \ \n        return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > 1 \n        return false\n    \n    if length(b) > 1 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > 1 \n        return false\n    \n    if length(b)\
    \ > 1 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > 1 \n        return\
    \ false\n    \n    if length(b) > 1 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > 1 \n        return false\n    \n    if length(b) > 1 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > 1 \n        return false\n    \n    if length(b)\
    \ > 1 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > 1 \n        return\
    \ false\n    \n    if length(b) > 1 \n        return false\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(b) == 1 \n        return true\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > 1 \n        return false\n    \n    if length(b) > 1 \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(b) ==\
    \ 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > 1 \n        return false\n    \n    if length(b)\
    \ > 1 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length", "  \
    \  \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n  \
    \  if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n   \
    \     return true\n    \n    if length(a) > length(b) \n        return false\n\
    \    \n    if length(a) == length(b) \n        return true\n    \n    if length(a)\
    \ > 1 \n        return false\n    \n    if length(b) > 1 \n        return false\n\
    \    \n    if b[length(b)-1] == a[length(a)-1] \n        return true\n    \n \
    \   if b[length(b)-1] == a[length(a)-2] \n        return true\n    \n    if b[length(b)-1]\
    \ == a[length(a)-3] \n        return true\n    \n    if b[length(b)-1] == a[length(a)-4]\
    \ \n        return true\n    \n    if b[length(b)-1] == a[length(a)-5] \n    \
    \    return true\n    \n    if b[length(b)-1] == a[length(a)-6] \n        return\
    \ true\n    \n    if b[length(b)-1] == a[length(a)-7] \n        return true\n\
    \    \n    if b[length(b)-1] == a[length(a)-8] \n        return true\n    \n \
    \   if b[length(b)-1] == a[length(a)-9] \n        return true\n    \n    if b[length(b)-1]\
    \ == a[length(a)-10] \n        return true\n    \n    if b[length(b)-1] == a[length(a)-11]\
    \ \n        return true\n    \n    if b[length(b)-1] == a[length(a)-12] \n   \
    \     return true\n    \n    if b[length(b)-1] == a[length(a)-13] \n        return\
    \ true\n    \n    if b[length(b)-1] == a[length(a)-14] \n        return true\n\
    \    \n    if b[length(b)-1] == a[length(a)-15] \n        return true\n    \n\
    \    if b[length(b)-1] == a[length(a)-16] \n        return true\n    \n    if\
    \ b[length(b)-1] == a[length(a)-17] \n        return true\n    \n    if b[length(b)-1]\
    \ == a[length(a)-18] \n        return true\n    \n    if b[length(b)-1] == a[length(a)-19]\
    \ \n        return true\n    \n    if b[length(b)-1] == a[length(a)-20] \n   \
    \     return true\n    \n    if b[length(b)-1] == a[length(a)-21] \n        return\
    \ true\n    \n    if b[length(b)-1] == a[length(a)-22] \n        return true\n\
    \    \n    if b[length(b)-1] == a[length(a)-23] \n        return true\n    \n\
    \    if b[length(b)-1] == a[length", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        return false\n    end\n    \n   \
    \ if length(a) == 1 \n        return true\n    end\n    \n    if length(b) ==\
    \ 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n   \
    \     return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) == 1 \n        return true\n    end\n\
    \    \n    if length(b) == 1 \n        return true\n    end\n    \n    if length(a)\
    \ == length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) == 1 \n        return true\n    end\n\
    \    \n    if length(b) == 1 \n        return true\n    end\n    \n    if length(a)\
    \ == length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > ", "    if length(a) == 0 then return False\
    \ \n    if length(b) == 0 then return False \n    if length(a) == length(b) then\
    \ return true \n    if length(a) > length(b) then return false \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if a[1] == b[1] \n        return cycpattern_check(a[2:end],\
    \ b[2:end]) || cycpattern_check(a[2:end], b[1:end-1])\n    end\n    \n    if a[1]\
    \ == b[2] \n        return cycpattern_check(a[2:end], b[2:end]) || cycpattern_check(a[2:end],\
    \ b[3:end-1])\n    end\n    \n    if a[1] == b[3] \n        return cycpattern_check(a[2:end],\
    \ b[2:end]) || cycpattern_check(a[2:end], b[4:end-1])\n    end\n    \n    if a[2]\
    \ == b[2] \n        return cycpattern_check(a[2:end], b[2:end]) || cycpattern_check(a[2:end],\
    \ b[3:end-1])\n    end\n    \n    if a[2] == b[3] \n        return cycpattern_check(a[2:end],\
    \ b[2:end]) || cycpattern_check(a[2:end], b[4:end-1])\n    end\n    \n    if a[3]\
    \ == b[3] \n        return cycpattern_check(a[2:end], b[2:end]) || cycpattern_check(a[2:end],\
    \ b[4:end-1])\n    end\n    \n    if a[3] == b[1] \n        return cycpattern_check(a[2:end],\
    \ b[2:end]) || cycpattern_check(a[2:end], b[3:end-1])\n    end\n    \n    if a[3]\
    \ == b[2] \n        return cycpattern_check(a[2:end], b[2:end]) || cycpattern_check(a[2:end],\
    \ b[3:end-1])\n    end\n    \n    if a[3] == b[4] \n        return cycpattern_check(a[2:end],\
    \ b[2:end]) || cycpattern_check(a[2:end], b[3:end-1])\n    end\n    \n    if a[4]\
    \ == b[4] \n        return cycpattern_check(a[2:end], b[2:end]) || cycpattern_check(a[2:end],\
    \ b[3:end-1])\n    end\n    \n    if a[4] == b[3] \n        return cycpattern_check(a[2:end],\
    \ b[2:end]) || cycpattern_check(a[2:end], b[3:end-1])\n    end\n    \n    if a[4]\
    \ == b[2] ", "    if length(a) == 0 || length(b) == 0 \n        return false \n\
    \    else \n        local a1 = a:sub(1,length(a)-1)\n        local b1 = b:sub(1,length(b)-1)\n\
    \        local a2 = a:sub(1,length(a)-1)\n        local b2 = b:sub(1,length(b)-1)\n\
    \        local a3 = a:sub(1,length(a)-1)\n        local b3 = b:sub(1,length(b)-1)\n\
    \        local a4 = a:sub(1,length(a)-1)\n        local b4 = b:sub(1,length(b)-1)\n\
    \        local a5 = a:sub(1,length(a)-1)\n        local b5 = b:sub(1,length(b)-1)\n\
    \        local a6 = a:sub(1,length(a)-1)\n        local b6 = b:sub(1,length(b)-1)\n\
    \        local a7 = a:sub(1,length(a)-1)\n        local b7 = b:sub(1,length(b)-1)\n\
    \        local a8 = a:sub(1,length(a)-1)\n        local b8 = b:sub(1,length(b)-1)\n\
    \        local a9 = a:sub(1,length(a)-1)\n        local b9 = b:sub(1,length(b)-1)\n\
    \        local a10 = a:sub(1,length(a)-1)\n        local b10 = b:sub(1,length(b)-1)\n\
    \        local a11 = a:sub(1,length(a)-1)\n        local b11 = b:sub(1,length(b)-1)\n\
    \        local a12 = a:sub(1,length(a)-1)\n        local b12 = b:sub(1,length(b)-1)\n\
    \        local a13 = a:sub(1,length(a)-1)\n        local b13 = b:sub(1,length(b)-1)\n\
    \        local a14 = a:sub(1,length(a)-1)\n        local b14 = b:sub(1,length(b)-1)\n\
    \        local a15 = a:sub(1,length(a)-1)\n        local b15 = b:sub(1,length(b)-1)\n\
    \        local a16 = a:sub(1,length(a)-1)\n        local b16 = b:sub(1,length(b)-1)\n\
    \        local a17 = a:sub(1,length(a)-1)\n        local b17 = b:sub(1,length(b)-1)\n\
    \        local a18 = a:sub(1,length(a)-1)\n        local b18 = b:sub(1,length(b)-1)\n\
    \        local a19 = a:sub(1,length(a)-1)\n        local b19 = b:sub(1,length(b)-1)\n\
    \        local a20 = a:sub(1,length(a)-1)\n        local b20 = b:sub(1,length(b)-1)\n\
    \        local a21 = a:sub(1,length(a)-1)\n        local b21 = b:sub(1,length(b)-1)\n\
    \        local a22 = a:sub(1,length(a)-1)\n        local b22", "    \n    \n \
    \   if length(a) == 0 || length(b) == 0 \n        return false\n    end\n    \n\
    \    if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        a, b = b, a\n    end\n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n", "    \n    \n    if length(a) == length(b) \n    \
    \    \n        if a == b \n            return true\n        \n        else \n\
    \            return false\n        \n    else \n        return false\n    \nend\n\
    </cell>\n<code language=julia-1.5>", "    \n    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        return false\n    end\n    \n   \
    \ if length(a) < length(b) \n        return false\n    end\n    \n    if b ==\
    \ \"\" \n        return true\n    end\n    \n    if a == \"\" \n        return\
    \ false\n    end\n    \n    if b == a \n        return true\n    end\n    \n \
    \   if b == reverse(split(a,\"\")) \n        return true\n    end\n    \n    if\
    \ b == reverse(split(reverse(split(a,\"\")),\"\")) \n        return true\n   \
    \ end\n    \n    if b == reverse(split(reverse(split(reverse(split(a,\"\")),\"\
    \")),\"\")) \n        return true\n    end\n    \n    if b == reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")) \n        return true\n    end\n    \n    if b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")) \n        return true\n    end\n    \n    if\
    \ b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")),\"\")) \n        return true\n    end\n    \n\
    \    if b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")) \n        return true\n    end\n\
    \    \n    if b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")) \n        return true\n\
    \    end\n    \n    if b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")) \n        return\
    \ true\n    end\n    \n    if b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")) \n        return\
    \ true\n    end\n    \n    if b == reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(reverse(split(a,\"\
    \")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")),\"\")) \n       \
    \ return true\n    end\n    \n    if b == ", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) == length(b) == 0 \n        return false\n\
    \    \n    if length(a) == length(b) == 1 \n        return true\n    \n    if\
    \ length(a) == length(b) == 2 \n        return true\n    \n    if length(a) ==\
    \ length(b) == 3 \n        return true\n    \n    if length(a) == length(b) ==\
    \ 4 \n        return true\n    \n    if length(a) == length(b) == 5 \n       \
    \ return true\n    \n    if length(a) == length(b) == 6 \n        return true\n\
    \    \n    if length(a) == length(b) == 7 \n        return true\n    \n    if\
    \ length(a) == length(b) == 8 \n        return true\n    \n    if length(a) ==\
    \ length(b) == 9 \n        return true\n    \n    if length(a) == length(b) ==\
    \ 10 \n        return true\n    \n    if length(a) == length(b) == 11 \n     \
    \   return true\n    \n    if length(a) == length(b) == 12 \n        return true\n\
    \    \n    if length(a) == length(b) == 13 \n        return true\n    \n    if\
    \ length(a) == length(b) == 14 \n        return true\n    \n    if length(a) ==\
    \ length(b) == 15 \n        return true\n    \n    if length(a) == length(b) ==\
    \ 16 \n        return true\n    \n    if length(a) == length(b) == 17 \n     \
    \   return true\n    \n    if length(a) == length(b) == 18 \n        return true\n\
    \    \n    if length(a) == length(b) == 19 \n        return true\n    \n    if\
    \ length(a) == length(b) == 20 \n        return true\n    \n    if length(a) ==\
    \ length(b) == 21 \n        return true\n    \n    if length(a) == length(b) ==\
    \ 22 \n        return true\n    \n    if length(a) == length(b) == 23 \n     \
    \   return true\n    \n    if length(a) == length(b) == 24 \n        return true\n\
    \    \n    if length(a) == length(b) == 25 \n        return true\n    \n    if\
    \ length(a) == length(b) == 26 \n        return true\n    \n    if length(a) ==\
    \ length(b) == 27 \n        return true\n    \n    if length(a) == length(b) ==\
    \ 28 \n        return true\n    \n    if length(a) == length(b) == 29 \n     \
    \   return true\n    \n    if length(a) == length(b) == 30 \n        return true\n\
    \    \n    if length(a) == length(b) == 31 \n        return true\n    ", "   \
    \ \n    if length(a) == 0 || length(b) == 0 \n        return false\n    \n   \
    \ if length(a) == 1 \n        return true\n    \n    if length(b) == 1 \n    \
    \    return true\n    \n    if length(a) == length(b) \n        return true\n\
    \    \n    if length(a) > length(b) \n        return false\n    \n    if length(a)\
    \ < length(b) \n        return false\n    \n    if length(a) == 1 \n        return\
    \ true\n    \n    if length(a) == 1 \n        return true\n    \n    if length(a)\
    \ == 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 ", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    end", "    \n    \n    if\
    \ length(a) == length(b) \n        \n        if a == b \n            return true\n\
    \        \n        else \n            return false\n        \n    else \n    \
    \    return false\n    \nend\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"hello\"\
    ,\"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\",\"\
    psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of characters in the string. \nWrite a function that takes a string and returns\
    \ the number of words in the string. \nWrite a function that takes a string and\
    \ returns the number of sentences in the string. \nWrite a function that takes\
    \ a string and returns the number of characters in the string that are not spaces.\
    \ \nWrite a function that takes a string and returns the number of words in the\
    \ string that are not spaces. \nWrite a function that takes a string and returns\
    \ the number of sentences in the string that are not spaces. \nWrite a function\
    \ that takes a string and returns the number of characters in the string that\
    \ are not spaces that are not letters. \nWrite a function that takes a string\
    \ and returns the number of words in the string that are not spaces that are not\
    \ letters. \nWrite a function that takes a string and returns the number of sentences\
    \ in the string that are not spaces that are not letters. \nWrite a function that\
    \ takes a string and returns the number of characters in the string that are not\
    \ spaces that are not letters that are not digits. \nWrite a function that takes\
    \ a string and returns the number of words in the string that are not spaces that\
    \ are not letters that are not digits. \nWrite a function that takes a string\
    \ and returns the number of sentences in the string that are not spaces that are\
    \ not letters that are not digits. \nWrite a function that takes a string and\
    \ returns the number of characters in the string that are not spaces that are\
    \ not letters that are not digits that are not punctuation. \nWrite a function\
    \ that takes a string and returns the number of words in the string that are not\
    \ spaces that are not letters that are not digits that are not punctuation. \n\
    Write a function that takes a string and returns the number of sentences in the\
    \ string that are not spaces that are not letters that are not digits that are\
    \ not punctuation. \nWrite a function that takes a string and returns the number\
    \ of characters in the string that are not spaces that are not letters that are\
    \ not digits that are not punctuation that are not in alphabetical order. \nWrite\
    \ a function that takes a string and returns the number of words in the string\
    \ that ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n\
    \    \n    if length(a) == 0 || length(b) == 0 \n        return false \n    else\
    \ \n        \n        if length(a) == 1 \n            return b == a \n       \
    \ else \n            \n            if length(b) == 1 \n                return\
    \ b == a || b == reverse(a) \n            else \n                \n          \
    \      if b == reverse(a) \n                    return cycpattern_check(a[1:end-1],\
    \ b[1:end-1]) \n                else \n                    \n                \
    \    if b == reverse(a[1:end-1]) \n                        return cycpattern_check(a[1:end-1],\
    \ b) \n                    else \n                        \n                 \
    \       if b == reverse(a[1:end-1]) || b == reverse(b[1:end-1]) \n           \
    \                 return cycpattern_check(a[1:end-1], b[1:end-1]) \n         \
    \               else \n                            \n                        \
    \    if b == reverse(a[1:end-1]) || b == reverse(b[1:end-1]) || b == reverse(b)\
    \ \n                                return cycpattern_check(a[1:end-1], b[1:end-1])\
    \ \n                            else \n                                return\
    \ false \n                        end \n                    end \n           \
    \     end \n            end \n        end \n    end \nend \n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't work. Try it with `cycpattern_check(\"abcd\",\"abd\"\
    )`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for pointing it out.\n<|/ c |>\n\
    <| a tags=recursion,string,julia |>\n<code>", "    \n    \n    if length(a) ==\
    \ length(b) \n        \n        if a == b \n            return true\n        \n\
    \        else \n            return false\n    \n    else \n        \n        if\
    \ length(a) < length(b) \n            return false\n        \n        else \n\
    \            return true\n    \nend\n</cell>\n<code language=julia-1.5>\n@time\
    \ cycpattern_check(\"abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\n@time\
    \ cycpattern_check(\"hello\",\"ell\")\n</cell>\n<code language=julia-1.5>\n@time\
    \ cycpattern_check(\"whassup\",\"psus\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"abab\",\"baa\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"efef\",\"eeff\")\n</cell>\n<code language=julia-1.5>\n\
    @time cycpattern_check(\"himenss\",\"simen\")\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that checks if a word is a palindrome. \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n  \
    \  \n    if length(a) == 0 || length(b) == 0 \n        return false \n    \n \
    \   if length(a) == 1 \n        return b == a \n    \n    if length(b) == 1 \n\
    \        return a == b \n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    \n    if length(a)\
    \ == 0 || length(b) == 0 \n        return false\n    else if length(a) == 1 \n\
    \        return true\n    else if length(b) == 1 \n        return true\n    else\
    \ \n        return (cycpattern_check(a[1:length(a)-1], b[1:length(b)-1]) || cycpattern_check(a[1:length(a)-1],\
    \ b[1:length(b)-2]))\nend", "    \n    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(b) == 1 \n        return true\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    \n    if length(a) > length(b) \n     \
    \   return false\n    \n    if length(a) < length(b) \n        return false\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a) == 1 \n        return true\n    \n    if length(a) ==\
    \ 1 \n        return true\n    \n    if length(a) == 1 \n        return true\n\
    \    \n    if length(a", "    \n    \n    if length(a) == length(b) \n       \
    \ return true\n    else \n        return false\n    end\nend", "    if length(a)\
    \ == 0 || length(b) == 0 \n        return false \n    else \n        return b\
    \ in a\n    end\nend\n</code>\n<|/ a tags=string,julia,substring |>\n<| a dscore=0\
    \ |>\nThe function cycpattern_check is already defined in the Julia standard library:\n\
    <code>\njulia> cycpattern_check(\"abcd\",\"abd\")\ntrue", "    \n    \n    \n\
    \    if length(a) == 0 || length(b) == 0 \n        return false\n    end\n   \
    \ \n    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    \n    if length(a) == length(b)\
    \ \n        return true\n    end\n    \n    \n    if length(a) > length(b) \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n", "    \n    \n    if length(a) == 0 || length(b) ==\
    \ 0 \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        return false\n    end\n    \n    if length(a)\
    \ < length(b) \n        return false\n    end\n    \n    if length(a) == 1 \n\
    \        return true\n    end\n    \n    if length(a) == length(b) \n        return\
    \ true\n    end\n    \n    if length(a) > length(b) \n        return false\n \
    \   end\n    \n    if length(a) < length(b) \n        return false\n    end\n\
    \    \n    if length(a) == 1 \n        return true\n    end\n    \n    if length(a)\
    \ == length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 1 \n        return true\n\
    \    end\n    \n    if length(a) == length(b) \n        return true\n    end\n\
    \    \n    if length(a) > length(b) \n        return false\n    end\n    \n  \
    \  if length(a) < length(b) \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        return\
    \ false\n    end\n    \n    if length(a) < length(b) \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        return false\n    end\n    \n    if length(a) < length(b)\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        return false\n    end\n\
    \    \n    if length(a) < length(b) \n        return false\n    end\n    \n  \
    \  if length(a) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        return false\n    end\n    \n    if length(a) < length(b) \n     \
    \   return false\n    end\n    \n    if length(a) == 1 \n        return true\n\
    \    end\n    \n    if ", "    \n    if length(a) == 0 \n        true\n    else\
    \ if length(b) == 0 \n        false\n    else if length(a) == length(b) \n   \
    \     true\n    else \n        cycpattern_check(a[1:end-1], b[1:end-1]) || cycpattern_check(a[1:end-1],\
    \ b[1:end])\n    end\nend\n</code>\n<|/ a tags=string,julia,pattern-matching |>\n\
    <| c |>\nThanks for your answer! I tried to run your code, but I got an error:\
    \ `ERROR: LoadError: UndefVarError: cycpattern_check not defined`. Do you know\
    \ what could be the problem?\n<|/ c |>\n<| c |>\nI edited the answer to include\
    \ the function definition. Try it now.\n<|/ c |>\n<| c |>\nThanks for your answer!\
    \ I tried to run your code, but I got an error: `ERROR: LoadError: UndefVarError:\
    \ cycpattern_check not defined`. Do you know what could be the problem?\n<|/ c\
    \ |>\n<| c |>\nI edited the answer to include the function definition. Try it\
    \ now.\n<|/ c |>\n<| c |>\nThanks for your answer! I tried to run your code, but\
    \ I got an error: `ERROR: LoadError: UndefVarError: cycpattern_check not defined`.\
    \ Do you know what could be the problem?\n<|/ c |>\n<| a tags=string,julia,pattern-matching\
    \ |>\nI wrote a package that does this in Julia. https://github.com/jpbarrette/StringMatch\n\
    <code>\njulia> using StringMatch", "    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n", "    \n    if length(a) == 0 || length(b) == 0 \n        return\
    \ false\n    \n    if length(a) == 1 \n        return true\n    \n    if length(b)\
    \ == 1 \n        return true\n    \n    if length(a) == length(b) \n        return\
    \ true\n    \n    if length(a) > length(b) \n        return false\n    \n    if\
    \ length(a) < length(b) \n        return false\n    \n    if a[1] == b[1] \n \
    \       return true\n    \n    if a[1] == b[2] \n        return true\n    \n \
    \   if a[2] == b[1] \n        return true\n    \n    if a[2] == b[2] \n      \
    \  return true\n    \n    if a[0] == b[0] \n        return true\n    \n    if\
    \ a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n        return\
    \ true\n    \n    if a[1] == b[0] \n        return true\n    \n    if a[1] ==\
    \ b[1] \n        return true\n    \n    if a[1] == b[2] \n        return true\n\
    \    \n    if a[2] == b[0] \n        return true\n    \n    if a[2] == b[1] \n\
    \        return true\n    \n    if a[2] == b[2] \n        return true\n    \n\
    \    if a[0] == b[1] \n        return true\n    \n    if a[0] == b[2] \n     \
    \   return true\n    \n    if a[1] == b[0] \n        return true\n    \n    if\
    \ a[1] == b[1] \n        return true\n    \n    if a[1] == b[2] \n        return\
    \ true\n    \n    if a[2] == b[0] \n        return true\n    \n    if a[2] ==\
    \ b[1] \n        return true\n    \n    if a[2] == b[2] \n        return true\n\
    \    \n    if a[0] == b[2] \n        return true\n    \n    if a[1] == b[0] \n\
    \        return true\n    \n    if a[1] == b[1] \n        return true\n    \n\
    \    if a[1] == b[2] \n        return true\n    \n    if a[2] == b[0] \n     \
    \   return true\n    \n    if a[2] == b[1] \n        return true\n    \n    if\
    \ a[2] == b[2] \n        return true\n    \n    if a[0] == b[1] \n        return\
    \ true\n    \n    if a[0] == b[2] \n        return true\n    \n    if a[1] ==\
    \ b[0] \n        return true\n    \n    if a[1] == b[1] \n        return true\n\
    \    \n    if a[1] == b[2] \n        return true\n    \n    if a[2] == b[0] \n\
    \        return true\n    \n    if a[2] == b[1] \n        return true\n    \n\
    \    if a[2] == b[2] \n        return true\n    \n    if a[0] == b[2] \n     \
    \   return true\n    \n    if a[1] == b[0] \n        return true\n    \n    if\
    \ a", "    \n    \n    if length(a) == 0 || length(b) == 0 \n        return false\n\
    \    end\n    \n    if length(a) == 1 \n        return true\n    end\n    \n \
    \   if length(b) == 1 \n        return true\n    end\n    \n    if length(a) ==\
    \ length(b) \n        return true\n    end\n    \n    if length(a) > length(b)\
    \ \n        a,b = b,a\n    end\n    \n    if length(a) == 0 \n        return false\n\
    \    end\n    \n    if length(b) == 0 \n        return false\n    end\n    \n\
    \    if length(a) == 1 \n        return true\n    end\n    \n    if length(b)\
    \ == 1 \n        return true\n    end\n    \n    if length(a) == length(b) \n\
    \        return true\n    end\n    \n    if length(a) > length(b) \n        a,b\
    \ = b,a\n    end\n    \n    if length(a) == 0 \n        return false\n    end\n\
    \    \n    if length(b) == 0 \n        return false\n    end\n    \n    if length(a)\
    \ == 1 \n        return true\n    end\n    \n    if length(b) == 1 \n        return\
    \ true\n    end\n    \n    if length(a) == length(b) \n        return true\n \
    \   end\n    \n    if length(a) > length(b) \n        a,b = b,a\n    end\n   \
    \ \n    if length(a) == 0 \n        return false\n    end\n    \n    if length(b)\
    \ == 0 \n        return false\n    end\n    \n    if length(a) == 1 \n       \
    \ return true\n    end\n    \n    if length(b) == 1 \n        return true\n  \
    \  end\n    \n    if length(a) == length(b) \n        return true\n    end\n \
    \   \n    if length(a) > length(b) \n        a,b = b,a\n    end\n    \n    if\
    \ length(a) == 0 \n        return false\n    end\n    \n    if length(b) == 0\
    \ \n        return false\n    end\n    \n    if length(a) == 1 \n        return\
    \ true\n    end\n    \n    if length(b) == 1 \n        return true\n    end\n\
    \    \n    if length(a) == length(b) \n        return true\n    end\n    \n  \
    \  if length(a) > length(b) \n        a,b = b,a\n    end\n    \n    if length(a)\
    \ == 0 \n        return false\n    end\n    \n    if length(b) == 0 \n       \
    \ return false\n    end\n    \n    if length(a) == 1 \n        return true\n \
    \   end\n    \n    if length(b) == 1 \n        return true\n    end\n    \n  \
    \  if length(a) == length(b) \n        return true\n    end\n    \n    if length(a)\
    \ > length(b) \n        a,b = b,a\n    end\n    \n    if length(a) == 0 \n   \
    \     return ", "    if length(a) == 0 || length(b) == 0 \n        return false\
    \ \n    else \n        return b in a\n    end\nend\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=string,julia |>\n<code>", "    \n    if length(a) == 0 || length(b)\
    \ == 0 \n        return false \n    else \n        if length(a) == 1 \n      \
    \      return b == a \n        else \n            if length(b) == 1 \n       \
    \         return b == a \n            else \n                let x = a \n    \
    \            let y = b \n                let z = x \n                let w = y\
    \ \n                let v = z \n                let r = w \n                let\
    \ l = x \n                let m = y \n                let n = z \n           \
    \     let k = w \n                let j = x \n                let i = y \n   \
    \             let h = z \n                let f = w \n                let g =\
    \ x \n                let e = y \n                let d = z \n               \
    \ let c = w \n                let b = x \n                let a = y \n       \
    \         let j = z \n                let i = w \n                let h = x \n\
    \                let f = y \n                let g = z \n                let e\
    \ = x \n                let d = y \n                let c = z \n             \
    \   let b = w \n                let a = x \n                let j = w \n     \
    \           let i = z \n                let h = y \n                let f = z\
    \ \n                let g = y \n                let e = w \n                let\
    \ d = z \n                let c = x \n                let b = y \n           \
    \     let a = z \n                let j = w \n                let i = x \n   \
    \             let h = y \n                let f = w \n                let g =\
    \ z \n                let e = y \n                let d = x \n               \
    \ let c = y \n                let b = z \n                let a = w \n       \
    \         let j = z \n                let i = w \n                let h = x \n\
    \                let f = y \n                let g = x \n                let e\
    \ = z \n                let d = y \n                let c = x \n             \
    \   let b = w \n                let a = y \n                let j = w \n     \
    \           let i = x \n                let h = z \n                let f = y\
    \ \n                let g = z \n                let e = x \n                let\
    \ d = z \n                let c = y \n                let b = x \n           \
    \     let a = z \n                let j = w \n                let i = y \n   \
    \             let h = w \n                let f = z \n                let g =\
    \ y \n                let e = y \n                let d = x \n               \
    \ let c = z \n                let b = y \n                let a = w \n       \
    \         let j = x \n                let i = y \n                let h = z \n\
    \                let f = w \n                let g = y \n                let e\
    \ = z \n                let d = z \n                let c = y \n             \
    \   let b = x \n                let a = z \n                let j = w \n     \
    \           let i = z \n                let h = y \n                let f = ",
  "    \n    \n    \n    if length(a) == length(b) \n        return true\n    else\
    \ \n        return false\n    end\n    \nend\n</cell>\n<code language=julia-1.5>\n\
    cycpattern_check(\"abcd\",\"abd\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"\
    hello\",\"ell\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"whassup\"\
    ,\"psus\")\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"abab\",\"baa\"\
    )\n</cell>\n<code language=julia-1.5>\ncycpattern_check(\"efef\",\"eeff\")\n</cell>\n\
    <code language=julia-1.5>\ncycpattern_check(\"himenss\",\"simen\")\n</cell>\n\
    <text>\nExercise 2"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
