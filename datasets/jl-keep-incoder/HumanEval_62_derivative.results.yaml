name: HumanEval_62_derivative
language: julia
results:
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbsq17mdm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbsq17mdm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial using Newton's\
    \ method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjeupx00u.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjeupx00u.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ an array of coefficients and returns the sum of the squares of the coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuhjrlvvu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuhjrlvvu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9158ouzj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9158ouzj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nNow let's use our derivative function to find the derivative of a polynomial\
    \ of degree 3\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg93e9xu9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg93e9xu9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes in a vector and returns the sum of the\
    \ squares of the elements in the vector. For example, [1, 2, 3] returns $1 + 2\
    \ + 3 = 6$.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7qghgs7q.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7qghgs7q.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    for i = 1:length(xs)\n        deriv[i]\
    \ = xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprjvgncu7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprjvgncu7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should\
    \ return 10. \nWrite a function that takes in a list of numbers and returns the\
    \ sum of the squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return\
    \ 10. \nWrite a function that takes in a list of numbers and returns the sum of\
    \ the squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10.\
    \ \nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return \nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeacjhwsq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeacjhwsq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu42w2gqu.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu42w2gqu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. Use a for loop to iterate through the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpigw89lfc.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpigw89lfc.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the integral of a polynomial from 0 to infinity.\
    \ \nThe function should take two arguments: \nthe polynomial coefficients xs and\
    \ the upper limit of the integral.\nThe function should return the integral of\
    \ the polynomial from 0 to infinity. \nThe function should return Inf if the polynomial\
    \ is zero or negative. \nThe function should return 0 if the polynomial is equal\
    \ to 1. \nThe function should return 1 if the polynomial is equal to 2. \nThe\
    \ function should return 2 if the polynomial is equal to 3. \nThe function should\
    \ return 3 if the polynomial is equal to 4. \nThe function should return 4 if\
    \ the polynomial is equal to 5. \nThe function should return 5 if the polynomial\
    \ is equal to 6. \nThe function should return 6 if the polynomial is equal to\
    \ 7. \nThe function should return 7 if the polynomial is equal to 8. \nThe function\
    \ should return 8 if the polynomial is equal to 9. \nThe function should return\
    \ 9 if the polynomial is equal to 10. \nThe function should return 10 if the polynomial\
    \ is equal to 11. \nThe function should return 11 if the polynomial is equal to\
    \ 12. \nThe function should return 12 if the polynomial is equal to 13. \nThe\
    \ function should return 13 if the polynomial is equal to 14. \nThe function should\
    \ return 14 if the polynomial is equal to 15. \nThe function should return 15\
    \ if the polynomial is equal to 16. \nThe function should return 16 if the polynomial\
    \ is equal to 17. \nThe function should return 17 if the polynomial is equal to\
    \ 18. \nThe function should return 18 if the polynomial is equal to 19. \nThe\
    \ function should return 19 if the polynomial is equal to 20. \nThe function should\
    \ return 20 if the polynomial is equal to 21. \nThe function should return 21\
    \ if the polynomial is equal to 22. \nThe function should return 22 if the polynomial\
    \ is equal to 23. \nThe function should return 23 if the polynomial is equal to\
    \ 24. \nThe function should return 24 if the polynomial is equal to 25. \nThe\
    \ function should return 25 if the polynomial is equal to 26. \nThe function should\
    \ return 26 if the polynomial is equal to 27. \nThe function should return 27\
    \ if the polynomial is equal to 28. \nThe function should return 28 if the polynomial\
    \ is equal to 29. \nThe function should return 29 if the polynomial is equal to\
    \ 30. \nThe function should return 30 if the polynomial is equal to 31. \nThe\
    \ function should return 31 if the polynomial is equal to 32. \nThe function should\
    \ return 32 if the polynomial is equal to 33. \nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8w1oqgq.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8w1oqgq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqttjwsb5.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpqttjwsb5.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqttjwsb5.jl:21\ntest set: Test Failed at /tmp/tmpqttjwsb5.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpqttjwsb5.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqttjwsb5.jl:21\ntest set: Test Failed at /tmp/tmpqttjwsb5.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpqttjwsb5.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqttjwsb5.jl:21\ntest set: Test Failed at /tmp/tmpqttjwsb5.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpqttjwsb5.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqttjwsb5.jl:21\ntest set: Test Failed at /tmp/tmpqttjwsb5.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpqttjwsb5.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqttjwsb5.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqttjwsb5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbwpfyko_.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpbwpfyko_.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbwpfyko_.jl:21\ntest set: Test Failed at /tmp/tmpbwpfyko_.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 3, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpbwpfyko_.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbwpfyko_.jl:21\ntest set: Test Failed at /tmp/tmpbwpfyko_.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpbwpfyko_.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbwpfyko_.jl:21\ntest set: Test Failed at /tmp/tmpbwpfyko_.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpbwpfyko_.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbwpfyko_.jl:21\ntest set: Test Failed at /tmp/tmpbwpfyko_.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpbwpfyko_.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbwpfyko_.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbwpfyko_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa33urddr.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpa33urddr.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa33urddr.jl:21\ntest set: Test Failed at /tmp/tmpa33urddr.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpa33urddr.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa33urddr.jl:21\ntest set: Test Failed at /tmp/tmpa33urddr.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpa33urddr.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa33urddr.jl:21\ntest set: Test Failed at /tmp/tmpa33urddr.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpa33urddr.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa33urddr.jl:21\ntest set: Test Failed at /tmp/tmpa33urddr.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa33urddr.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa33urddr.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa33urddr.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmvqyh0tf.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmvqyh0tf.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwip5rikj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwip5rikj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs)) \n    derivative[1] = xs[1]\n    for i\
    \ in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n    end\n\
    \    return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ given its coefficients.\nThe function should take in an array of coefficients\
    \ and return an array of derivatives.\nThe function should return an array of\
    \ length equal to the number of coefficients.\nThe function should return an array\
    \ of length equal to the number of coefficients.\nThe function should return an\
    \ array of length equal to the number of coefficients.\nThe function should return\
    \ an array of length equal to the number of coefficients.\nThe function should\
    \ return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe function\
    \ should return an array of length equal to the number of coefficients.\nThe \n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ezrk_t7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ezrk_t7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmude7626.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpmude7626.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmude7626.jl:23\ntest set: Test Failed at /tmp/tmpmude7626.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpmude7626.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmude7626.jl:23\ntest set: Test Failed at /tmp/tmpmude7626.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpmude7626.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmude7626.jl:23\ntest set: Test Failed at /tmp/tmpmude7626.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpmude7626.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmude7626.jl:23\ntest set: Test Failed at /tmp/tmpmude7626.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmude7626.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmude7626.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmude7626.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n    return derivative\n\
    end\n</cell>\n<code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the derivative of a polynomial\
    \ with n terms.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3x5kf3wl.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3x5kf3wl.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[2] \n \
    \   end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzuu_tgla.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzuu_tgla.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpygstz5x4.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpygstz5x4.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpygstz5x4.jl:21\ntest set: Test Failed at /tmp/tmpygstz5x4.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpygstz5x4.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpygstz5x4.jl:21\ntest set: Test Failed at /tmp/tmpygstz5x4.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpygstz5x4.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpygstz5x4.jl:21\ntest set: Test Failed at /tmp/tmpygstz5x4.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpygstz5x4.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpygstz5x4.jl:21\ntest set: Test Failed at /tmp/tmpygstz5x4.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpygstz5x4.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpygstz5x4.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpygstz5x4.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # initialize a vector to store the derivative\n    deriv = zeros(length(xs))\n\
    \    \n    # compute the derivative of the polynomial \n    # by taking difference\
    \ of consecutive terms \n    for i in 1:length(xs)-1\n        deriv[i] = xs[i+1]\
    \ - xs[i]\n    end\n    \n    return deriv\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwo67dl0l.jl:27\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [-2, 1, 2, 1, 0] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpwo67dl0l.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwo67dl0l.jl:26\ntest set: Test Failed at /tmp/tmpwo67dl0l.jl:28\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 0] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpwo67dl0l.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwo67dl0l.jl:26\ntest set: Test Failed at /tmp/tmpwo67dl0l.jl:29\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [-1, -1, 0] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpwo67dl0l.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwo67dl0l.jl:26\ntest set: Test Failed at /tmp/tmpwo67dl0l.jl:30\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [-1,\
    \ -1, -1, 4, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpwo67dl0l.jl:30\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwo67dl0l.jl:26\ntest set: Test Failed at /tmp/tmpwo67dl0l.jl:31\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [0] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwo67dl0l.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwo67dl0l.jl:26\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwo67dl0l.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpywuyfav0.jl:26\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpywuyfav0.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpywuyfav0.jl:25\ntest set: Test Failed at /tmp/tmpywuyfav0.jl:27\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 2] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpywuyfav0.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpywuyfav0.jl:25\ntest set: Test Failed at /tmp/tmpywuyfav0.jl:28\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpywuyfav0.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpywuyfav0.jl:25\ntest set: Test Failed at /tmp/tmpywuyfav0.jl:29\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpywuyfav0.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpywuyfav0.jl:25\ntest set: Test Failed at /tmp/tmpywuyfav0.jl:30\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpywuyfav0.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpywuyfav0.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpywuyfav0.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ in two vectors and returns the dot product of the two vectors.\nWrite a function\
    \ that takes in two vectors and returns the cross product of the two vectors.\n\
    Write a function that takes in two vectors and returns the Euclidean norm of the\
    \ vectors.\nWrite a function that takes in two vectors and returns the L1 norm\
    \ of the vectors.\nWrite a function that takes in two vectors and returns the\
    \ L2 norm of the vectors.\nWrite a function that takes in two vectors and returns\
    \ the Frobenius norm of the vectors.\nWrite a function that takes in two vectors\
    \ and returns the Linfty-norm of the vectors.\nWrite a function that takes in\
    \ two vectors and returns the Frobenius-norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the Linfty-norm of the vectors.\nWrite\
    \ a function that takes in two vectors and returns the Frobenius-norm of the vectors.\n\
    Write a function that takes in two vectors and returns the Linfty-norm of the\
    \ vectors.\nWrite a function that takes in two vectors and returns the Frobenius-norm\
    \ of the vectors.\nWrite a function that takes in two vectors and returns the\
    \ Linfty-norm of the vectors.\nWrite a function that takes in two vectors and\
    \ returns the Frobenius-norm of the vectors.\nWrite a function that takes in two\
    \ vectors and returns the Linfty-norm of the vectors.\nWrite a function that takes\
    \ in two vectors and returns the Frobenius-norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the Linfty-norm of the vectors.\nWrite\
    \ a function that takes in two vectors and returns the Frobenius-norm of the vectors.\n\
    Write a function that takes in two vectors and returns the Linfty-norm of the\
    \ vectors.\nWrite a function that takes in two vectors and returns the Frobenius-norm\
    \ of the vectors.\nWrite a function that takes in two vectors and returns the\
    \ Linfty-norm of the vectors.\nWrite a function that takes in two vectors and\
    \ returns the Frobenius-norm of the vectors.\nWrite a function that takes in two\
    \ vectors and returns the Linfty-norm of the vectors.\nWrite a function that takes\
    \ in two vectors and returns the Frobenius-norm of the vectors.\nWrite a function\
    \ that takes in two vectors and returns the Linfty-norm \nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprg1lx4yg.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprg1lx4yg.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpod6n8ot6.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpod6n8ot6.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes in a list of coefficients and returns\
    \ the polynomial evaluated at x.\nHint: Use a for loop to iterate through the\
    \ coefficients and multiply them by x.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qcpci11.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1qcpci11.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyfoiled_.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpyfoiled_.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyfoiled_.jl:21\ntest set: Test Failed at /tmp/tmpyfoiled_.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpyfoiled_.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyfoiled_.jl:21\ntest set: Test Failed at /tmp/tmpyfoiled_.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpyfoiled_.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyfoiled_.jl:21\ntest set: Test Failed at /tmp/tmpyfoiled_.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpyfoiled_.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyfoiled_.jl:21\ntest set: Test Failed at /tmp/tmpyfoiled_.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyfoiled_.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyfoiled_.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyfoiled_.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial function using Newton's method.\n$$\nf(x) = ax^2\
    \ + bx + c\n$$\n$$\nf'(x) = 2ax^2 + 2bx + c\n$$\n$$\nf''(x) = 2ax^2 + 2cx + d\n\
    $$\n$$\nf'''(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime}(x) = 2ax^2 + 2bx + c\n\
    $$\n$$\nf^{\\prime\\prime}(x) = 2ax^2 + 2cx + d\n$$\n$$\nf^{\\prime\\prime\\prime}(x)\
    \ = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx\
    \ + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n\
    $$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n\
    $$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx\
    \ + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime}(x)\
    \ = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\\
    prime\\prime}(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\\
    prime\\prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\\
    prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\prime}(x)\
    \ = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\prime\\prime\\prime\\prime\\prime\\prime\\\
    prime\\prime\\prime\\prime\\prime}(x) = 2ax^2 + 2dx + e\n$$\n$$\nf^{\\prime\\\
    prime\\prime\\prime\\prime\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa9bv49gz.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa9bv49gz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the derivative of a polynomial with\
    \ coefficients xs.\nThe function should take in a vector of coefficients and return\
    \ the derivative of the polynomial in the same form.\nThe function should return\
    \ an array of coefficients.\nThe function should return an error if the length\
    \ of the vector is not equal to 3.\nThe function should return an error if the\
    \ vector is not of Int64 type.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqqep_f_5.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqqep_f_5.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise: Write a function that takes in a list of coefficients and returns the\
    \ polynomial evaluated at x. \nHint: Use a for loop to evaluate the polynomial\
    \ at x.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo0qbeohn.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo0qbeohn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp39en3yc6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp39en3yc6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_1uzji38.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp_1uzji38.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1uzji38.jl:21\ntest set: Test Failed at /tmp/tmp_1uzji38.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmp_1uzji38.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1uzji38.jl:21\ntest set: Test Failed at /tmp/tmp_1uzji38.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmp_1uzji38.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1uzji38.jl:21\ntest set: Test Failed at /tmp/tmp_1uzji38.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmp_1uzji38.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1uzji38.jl:21\ntest set: Test Failed at /tmp/tmp_1uzji38.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp_1uzji38.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1uzji38.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1uzji38.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr5d2gi4v.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr5d2gi4v.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxs_ir_gm.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpxs_ir_gm.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxs_ir_gm.jl:21\ntest set: Test Failed at /tmp/tmpxs_ir_gm.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpxs_ir_gm.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxs_ir_gm.jl:21\ntest set: Test Failed at /tmp/tmpxs_ir_gm.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpxs_ir_gm.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxs_ir_gm.jl:21\ntest set: Test Failed at /tmp/tmpxs_ir_gm.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpxs_ir_gm.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxs_ir_gm.jl:21\ntest set: Test Failed at /tmp/tmpxs_ir_gm.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpxs_ir_gm.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxs_ir_gm.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxs_ir_gm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv4j63pul.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpv4j63pul.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv4j63pul.jl:21\ntest set: Test Failed at /tmp/tmpv4j63pul.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpv4j63pul.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv4j63pul.jl:21\ntest set: Test Failed at /tmp/tmpv4j63pul.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpv4j63pul.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv4j63pul.jl:21\ntest set: Test Failed at /tmp/tmpv4j63pul.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpv4j63pul.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv4j63pul.jl:21\ntest set: Test Failed at /tmp/tmpv4j63pul.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpv4j63pul.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv4j63pul.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv4j63pul.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo483huni.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo483huni.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnxv6an9.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmplnxv6an9.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnxv6an9.jl:23\ntest set: Test Failed at /tmp/tmplnxv6an9.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmplnxv6an9.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnxv6an9.jl:23\ntest set: Test Failed at /tmp/tmplnxv6an9.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmplnxv6an9.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnxv6an9.jl:23\ntest set: Test Failed at /tmp/tmplnxv6an9.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmplnxv6an9.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnxv6an9.jl:23\ntest set: Test Failed at /tmp/tmplnxv6an9.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmplnxv6an9.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnxv6an9.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnxv6an9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphvlusr6p.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmphvlusr6p.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphvlusr6p.jl:21\ntest set: Test Failed at /tmp/tmphvlusr6p.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmphvlusr6p.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphvlusr6p.jl:21\ntest set: Test Failed at /tmp/tmphvlusr6p.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmphvlusr6p.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphvlusr6p.jl:21\ntest set: Test Failed at /tmp/tmphvlusr6p.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmphvlusr6p.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphvlusr6p.jl:21\ntest set: Test Failed at /tmp/tmphvlusr6p.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphvlusr6p.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphvlusr6p.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphvlusr6p.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwnsqksxc.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpwnsqksxc.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnsqksxc.jl:21\ntest set: Test Failed at /tmp/tmpwnsqksxc.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpwnsqksxc.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnsqksxc.jl:21\ntest set: Test Failed at /tmp/tmpwnsqksxc.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpwnsqksxc.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnsqksxc.jl:21\ntest set: Test Failed at /tmp/tmpwnsqksxc.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpwnsqksxc.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnsqksxc.jl:21\ntest set: Test Failed at /tmp/tmpwnsqksxc.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpwnsqksxc.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwnsqksxc.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwnsqksxc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4qs9u4pr.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4qs9u4pr.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc2_q5dnf.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc2_q5dnf.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwfdwt31.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpzwfdwt31.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwfdwt31.jl:21\ntest set: Test Failed at /tmp/tmpzwfdwt31.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpzwfdwt31.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwfdwt31.jl:21\ntest set: Test Failed at /tmp/tmpzwfdwt31.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpzwfdwt31.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwfdwt31.jl:21\ntest set: Test Failed at /tmp/tmpzwfdwt31.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpzwfdwt31.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwfdwt31.jl:21\ntest set: Test Failed at /tmp/tmpzwfdwt31.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzwfdwt31.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwfdwt31.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwfdwt31.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv += xs[i] * deriv\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40i7smr7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp40i7smr7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the derivative of a polynomial\
    \ using central differences.\nThe function should take in an array of coefficients\
    \ and return the array of derivatives.\nThe function should also take in an array\
    \ of x values and return an array of y values.\nThe function should also take\
    \ in an array of x values and an array of y values and return the array of derivatives.\n\
    The function should also take in an array of x values and an array of y values\
    \ and an array of x values and an array of y values and return the array of derivatives.\n\
    The function should also take in an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and return the array of derivatives.\nThe function should\
    \ also take in an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and an array of x values and an array of y values and return the array of derivatives.\n\
    The function should also take in an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and an\
    \ array of x values and an array of y values and return the array of derivatives.\n\
    The function should also take in an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and an\
    \ array of x values and an array of y values and an array of x values and an array\
    \ of y values and return the array of derivatives.\nThe function should also take\
    \ in an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and an\
    \ array of x values and an array of y values and an array of x values and an array\
    \ of y values and an array of x values and an array of y values and an array of\
    \ x values and an array of y values and return the array of derivatives.\nThe\
    \ function should also take in an array of x values and an array of y values and\
    \ an array of x values and an array of y values and an array of x values and an\
    \ array of y values and an array of x values and an array of y values and an array\
    \ of x values and an array of y values and an array of x values and an array of\
    \ y values and an array of x values and an array of y values and an array of x\
    \ values and an array of y values and return the array of derivatives.\nThe function\
    \ should also take in an array of x values and an array of y values and an array\
    \ of x values and an array of y values and an array of x values and an array of\
    \ y values and an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and return the array of derivatives.\nThe function should\
    \ also take in an array of x values and an array of y values and an array of x\
    \ values and an array of y values and an array of x values and an array of y values\
    \ and an array of x values and an array of y values and an array of x values and\
    \ an array of y values and an array of x values and an array of y values and an\
    \ array of x \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj140z6ue.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj140z6ue.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in an input vector and returns the sum of the\
    \ squares of the elements in the vector. For example, sum([1, 2, 3, 4]) should\
    \ return 25. Make sure you use sum() and not sum([1, 2, 3, 4]). Do not use sum()\
    \ on arrays or matrices.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy20brzub.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy20brzub.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n    end\n    return derivative\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyo5e41qg.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 1, 2, 1] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpyo5e41qg.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyo5e41qg.jl:21\ntest set: Test Failed at /tmp/tmpyo5e41qg.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpyo5e41qg.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyo5e41qg.jl:21\ntest set: Test Failed at /tmp/tmpyo5e41qg.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, -1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpyo5e41qg.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyo5e41qg.jl:21\ntest set: Test Failed at /tmp/tmpyo5e41qg.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ -1, -1, -1, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpyo5e41qg.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyo5e41qg.jl:21\ntest set: Test Failed at /tmp/tmpyo5e41qg.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpyo5e41qg.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyo5e41qg.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyo5e41qg.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ 3, 4]) should return 10. \nWrite a function that takes in a list of numbers\
    \ and returns the sum of the squares of the numbers. \nFor example, sum([1, 2,\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2n2hmots.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2n2hmots.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uo2ghdq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4uo2ghdq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzrsrohub.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrsrohub.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrsrohub.jl:21\ntest set: Test Failed at /tmp/tmpzrsrohub.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrsrohub.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrsrohub.jl:21\ntest set: Test Failed at /tmp/tmpzrsrohub.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrsrohub.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrsrohub.jl:21\ntest set: Test Failed at /tmp/tmpzrsrohub.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpzrsrohub.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrsrohub.jl:21\ntest set: Test Failed at /tmp/tmpzrsrohub.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzrsrohub.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzrsrohub.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzrsrohub.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the derivative of a polynomial with\
    \ coefficients given as a vector. \nThe function should take as input a vector\
    \ of coefficients xs and output a vector of coefficients ds \nsuch that\nds[0]\
    \ + ds[1] * x + ds[2] * x^2 + ....\nReturn derivative of this polynomial in the\
    \ same form.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphq7x5k6r.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphq7x5k6r.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoalufzlo.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpoalufzlo.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoalufzlo.jl:21\ntest set: Test Failed at /tmp/tmpoalufzlo.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 2] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpoalufzlo.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoalufzlo.jl:21\ntest set: Test Failed at /tmp/tmpoalufzlo.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpoalufzlo.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoalufzlo.jl:21\ntest set: Test Failed at /tmp/tmpoalufzlo.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpoalufzlo.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoalufzlo.jl:21\ntest set: Test Failed at /tmp/tmpoalufzlo.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoalufzlo.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoalufzlo.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoalufzlo.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjsf1168b.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpjsf1168b.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsf1168b.jl:21\ntest set: Test Failed at /tmp/tmpjsf1168b.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpjsf1168b.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsf1168b.jl:21\ntest set: Test Failed at /tmp/tmpjsf1168b.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpjsf1168b.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsf1168b.jl:21\ntest set: Test Failed at /tmp/tmpjsf1168b.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpjsf1168b.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsf1168b.jl:21\ntest set: Test Failed at /tmp/tmpjsf1168b.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjsf1168b.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjsf1168b.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjsf1168b.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3etxz1rb.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3etxz1rb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp60onybut.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp60onybut.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnoz9_0i6.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpnoz9_0i6.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoz9_0i6.jl:23\ntest set: Test Failed at /tmp/tmpnoz9_0i6.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpnoz9_0i6.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoz9_0i6.jl:23\ntest set: Test Failed at /tmp/tmpnoz9_0i6.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpnoz9_0i6.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoz9_0i6.jl:23\ntest set: Test Failed at /tmp/tmpnoz9_0i6.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpnoz9_0i6.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoz9_0i6.jl:23\ntest set: Test Failed at /tmp/tmpnoz9_0i6.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpnoz9_0i6.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnoz9_0i6.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnoz9_0i6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes an array of coefficients and returns the sum\
    \ of the squares of the coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppgn112cn.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppgn112cn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)-1)\n    \n    for i = 1:length(xs)-1\n\
    \        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\n\
    Exercise: Write a function that takes in a list of numbers and returns the sum\
    \ of the squares of the numbers in the list.\nusing Test\n\n@testset begin\n\n\
    candidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpls58w83i.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpls58w83i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvev03knk.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpvev03knk.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvev03knk.jl:21\ntest set: Test Failed at /tmp/tmpvev03knk.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 3, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpvev03knk.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvev03knk.jl:21\ntest set: Test Failed at /tmp/tmpvev03knk.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpvev03knk.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvev03knk.jl:21\ntest set: Test Failed at /tmp/tmpvev03knk.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpvev03knk.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvev03knk.jl:21\ntest set: Test Failed at /tmp/tmpvev03knk.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpvev03knk.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvev03knk.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvev03knk.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<code language=julia-1.3>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppchsmxzk.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppchsmxzk.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5hsgy7ed.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5hsgy7ed.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial using Horner's\
    \ method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfvek9k00.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvek9k00.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # initialize a vector to hold derivative\n    derv::Vector{Int64}\
    \ = zeros(length(xs))\n    \n    # loop through each element of xs\n    for i\
    \ in 1:length(xs)\n        # use i to index into xs and derv\n        derv[i]\
    \ = xs[i]\n        # use i to index into xs and derv\n        derv[i] = derv[i]\
    \ * xs[i]\n    end\n    \n    return derv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the sum of\
    \ the squares of the elements of an array. For example, sum([1, 2, 3]) should\
    \ return 10. Make sure you use sum and not a for loop.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprj3pah3y.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprj3pah3y.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n  \
    \  end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvfyc8kq0.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvfyc8kq0.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs[2:end]\n        deriv = deriv * x + xs[1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.3>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ first derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbkl14obc.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbkl14obc.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoiyszpz_.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpoiyszpz_.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoiyszpz_.jl:23\ntest set: Test Failed at /tmp/tmpoiyszpz_.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpoiyszpz_.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoiyszpz_.jl:23\ntest set: Test Failed at /tmp/tmpoiyszpz_.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpoiyszpz_.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoiyszpz_.jl:23\ntest set: Test Failed at /tmp/tmpoiyszpz_.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpoiyszpz_.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoiyszpz_.jl:23\ntest set: Test Failed at /tmp/tmpoiyszpz_.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpoiyszpz_.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoiyszpz_.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoiyszpz_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjyh7rr98.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyh7rr98.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyh7rr98.jl:23\ntest set: Test Failed at /tmp/tmpjyh7rr98.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyh7rr98.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyh7rr98.jl:23\ntest set: Test Failed at /tmp/tmpjyh7rr98.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyh7rr98.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyh7rr98.jl:23\ntest set: Test Failed at /tmp/tmpjyh7rr98.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpjyh7rr98.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyh7rr98.jl:23\ntest set: Test Failed at /tmp/tmpjyh7rr98.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpjyh7rr98.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjyh7rr98.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjyh7rr98.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcf50ectv.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpcf50ectv.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcf50ectv.jl:21\ntest set: Test Failed at /tmp/tmpcf50ectv.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpcf50ectv.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcf50ectv.jl:21\ntest set: Test Failed at /tmp/tmpcf50ectv.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpcf50ectv.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcf50ectv.jl:21\ntest set: Test Failed at /tmp/tmpcf50ectv.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpcf50ectv.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcf50ectv.jl:21\ntest set: Test Failed at /tmp/tmpcf50ectv.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcf50ectv.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcf50ectv.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcf50ectv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes in two vectors and returns the dot product of the two\
    \ vectors.\nThe dot product of two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is\
    \ defined as:\n$$\\mathbf{a} \\cdot \\mathbf{b} = a_1b_1 + a_2b_2 + \\cdots +\
    \ a_nb_n$$\nWrite a function that takes in two vectors and returns the norm of\
    \ the dot product of the two vectors.\nThe norm of the dot product of two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$|\\mathbf{a} \\cdot \\mathbf{b}|\
    \ = \\sqrt{\\sum_{i=1}^{n}(a_ib_i)^2}$$\nWrite a function that takes in two vectors\
    \ and returns the angle between the two vectors.\nThe angle between two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\\theta = \\arccos{\\left(\
    \ \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\mathbf{a}||\\mathbf{b}|} \\right)}$$\n\
    Write a function that takes in two vectors and returns the angle between the two\
    \ vectors.\nThe angle between two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\\theta = \\arccos{\\left( \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\\
    mathbf{a}||\\mathbf{b}|} \\right)}$$\nWrite a function that takes in two vectors\
    \ and returns the angle between the two vectors.\nThe angle between two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\n$$\\theta = \\arccos{\\left(\
    \ \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\mathbf{a}||\\mathbf{b}|} \\right)}$$\n\
    Write a function that takes in two vectors and returns the angle between the two\
    \ vectors.\nThe angle between two vectors $\\mathbf{a}$ and $\\mathbf{b}$ is defined\
    \ as:\n$$\\theta = \\arccos{\\left( \\frac{\\mathbf{a} \\cdot \\mathbf{b}}{|\\\
    mathbf{a}||\\mathbf{b}|} \\right)}$$\nWrite a function that takes in two vectors\
    \ and returns the angle between the two vectors.\nThe angle between two vectors\
    \ $\\mathbf{a}$ and $\\mathbf{b}$ is defined as:\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp51f3cvlz.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp51f3cvlz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0853sc_i.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp0853sc_i.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0853sc_i.jl:21\ntest set: Test Failed at /tmp/tmp0853sc_i.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmp0853sc_i.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0853sc_i.jl:21\ntest set: Test Failed at /tmp/tmp0853sc_i.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmp0853sc_i.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0853sc_i.jl:21\ntest set: Test Failed at /tmp/tmp0853sc_i.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmp0853sc_i.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0853sc_i.jl:21\ntest set: Test Failed at /tmp/tmp0853sc_i.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp0853sc_i.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0853sc_i.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0853sc_i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial using Newton's method.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkshvtvcq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkshvtvcq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgx2k79z5.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx2k79z5.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx2k79z5.jl:23\ntest set: Test Failed at /tmp/tmpgx2k79z5.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx2k79z5.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx2k79z5.jl:23\ntest set: Test Failed at /tmp/tmpgx2k79z5.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx2k79z5.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx2k79z5.jl:23\ntest set: Test Failed at /tmp/tmpgx2k79z5.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpgx2k79z5.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx2k79z5.jl:23\ntest set: Test Failed at /tmp/tmpgx2k79z5.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgx2k79z5.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgx2k79z5.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgx2k79z5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpccr9hha4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpccr9hha4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprlgiazmb.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprlgiazmb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo08vyq2u.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo08vyq2u.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the integral of a function $f(x)$ from $0$\
    \ to $x$. \n$$\\int_0^x f(x) dx$$\nusing Test\n\n@testset begin\n\ncandidate =\
    \ derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28btev7d.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp28btev7d.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1] \n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1] \n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucv06vta.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpucv06vta.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3oe76jqn.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3oe76jqn.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.3>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4gcp8hfc.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4gcp8hfc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial with given coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk9k3pcrx.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9k3pcrx.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial with coefficients xs.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoe3gp73w.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoe3gp73w.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5lm7xr1n.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5lm7xr1n.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    The function should take in a vector of coefficients and return its derivative.\n\
    The function should return the same vector if the given coefficients are a scalar.\n\
    The function should raise an error if the given coefficients are a vector of length\
    \ less than 2.\nThe function should raise an error if the given coefficients are\
    \ a vector of length greater than 2.\nThe function should raise an error if the\
    \ given coefficients are a vector of length less than 2.\nThe function should\
    \ raise an error if the given coefficients are a vector of length greater than\
    \ 2.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps_i7fs8q.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps_i7fs8q.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7odyf_kf.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7odyf_kf.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpctn4x4vq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpctn4x4vq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0017j_we.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0017j_we.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg7ftih24.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg7ftih24.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgynyvgje.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpgynyvgje.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynyvgje.jl:21\ntest set: Test Failed at /tmp/tmpgynyvgje.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpgynyvgje.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynyvgje.jl:21\ntest set: Test Failed at /tmp/tmpgynyvgje.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpgynyvgje.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynyvgje.jl:21\ntest set: Test Failed at /tmp/tmpgynyvgje.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpgynyvgje.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynyvgje.jl:21\ntest set: Test Failed at /tmp/tmpgynyvgje.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpgynyvgje.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgynyvgje.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgynyvgje.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpi7ga21wq.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpi7ga21wq.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi7ga21wq.jl:21\ntest set: Test Failed at /tmp/tmpi7ga21wq.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpi7ga21wq.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi7ga21wq.jl:21\ntest set: Test Failed at /tmp/tmpi7ga21wq.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpi7ga21wq.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi7ga21wq.jl:21\ntest set: Test Failed at /tmp/tmpi7ga21wq.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpi7ga21wq.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi7ga21wq.jl:21\ntest set: Test Failed at /tmp/tmpi7ga21wq.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpi7ga21wq.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpi7ga21wq.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpi7ga21wq.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \n\
    Write a function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and returns the sum of the squares\
    \ of the numbers. \nFor example, sum([1, 2, 3, 4]) should return 10. \nWrite a\
    \ function that takes in a list of numbers and \nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsi68nhti.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsi68nhti.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the derivative of a polynomial with\
    \ one variable.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyjm90lu4.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyjm90lu4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the derivative of a polynomial with given coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1esdyg1m.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1esdyg1m.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr5e96132.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr5e96132.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxkz366j.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgxkz366j.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp5vhmslb3.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp5vhmslb3.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5vhmslb3.jl:21\ntest set: Test Failed at /tmp/tmp5vhmslb3.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 2] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmp5vhmslb3.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5vhmslb3.jl:21\ntest set: Test Failed at /tmp/tmp5vhmslb3.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmp5vhmslb3.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5vhmslb3.jl:21\ntest set: Test Failed at /tmp/tmp5vhmslb3.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmp5vhmslb3.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5vhmslb3.jl:21\ntest set: Test Failed at /tmp/tmp5vhmslb3.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp5vhmslb3.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp5vhmslb3.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp5vhmslb3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<code language=julia-1.4>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplyawu4sx.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplyawu4sx.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] - xs[i-1]\n   \
    \ end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial with one variable.\nusing Test\n\n\
    @testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprl83hff4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprl83hff4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # xs is a vector\n    # xs[0] is the coefficient of x^0\n    # xs[1]\
    \ is the coefficient of x^1\n    # xs[2] is the coefficient of x^2\n    # ...\n\
    \    # xs[len(xs)-1] is the coefficient of x^len(xs)\n    \n    # return derivative\
    \ of xs \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ of xs in same form as xs \n    # return derivative of xs in same form as xs\
    \ \n    # return derivative of xs in same form as xs \n    # return derivative\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxrx12zxi.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxrx12zxi.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxrx12zxi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # xs is a vector\n    # xs[0] is the coeff of x\n    # xs[1] is\
    \ the coeff of x^2\n    # xs[2] is the coeff of x^3\n    # ...\n    # xs[len(xs)-1]\
    \ is the coeff of x^len(xs)\n    \n    # initialize a vector to store the derivative\n\
    \    derivative = zeros(length(xs)-1)\n    \n    # loop through each element of\
    \ xs\n    for i in 1:length(xs)-1\n        # compute x^i\n        xpow = pow(xs[i],\
    \ xs[i+1])\n        # multiply xpow by x\n        derivative[i] = xpow * xs[i]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpebtm0k2u.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpebtm0k2u.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmph13g77ld.jl:26\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmph13g77ld.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph13g77ld.jl:25\ntest set: Test Failed at /tmp/tmph13g77ld.jl:27\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmph13g77ld.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph13g77ld.jl:25\ntest set: Test Failed at /tmp/tmph13g77ld.jl:28\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmph13g77ld.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph13g77ld.jl:25\ntest set: Test Failed at /tmp/tmph13g77ld.jl:29\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmph13g77ld.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph13g77ld.jl:25\ntest set: Test Failed at /tmp/tmph13g77ld.jl:30\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph13g77ld.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph13g77ld.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph13g77ld.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk7e6f_i1.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpk7e6f_i1.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7e6f_i1.jl:21\ntest set: Test Failed at /tmp/tmpk7e6f_i1.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 3, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpk7e6f_i1.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7e6f_i1.jl:21\ntest set: Test Failed at /tmp/tmpk7e6f_i1.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpk7e6f_i1.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7e6f_i1.jl:21\ntest set: Test Failed at /tmp/tmpk7e6f_i1.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpk7e6f_i1.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7e6f_i1.jl:21\ntest set: Test Failed at /tmp/tmpk7e6f_i1.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpk7e6f_i1.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk7e6f_i1.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk7e6f_i1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the integral of a polynomial using trapezoidal\
    \ rule.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpby9wjg_h.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpby9wjg_h.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfem117r8.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpfem117r8.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfem117r8.jl:21\ntest set: Test Failed at /tmp/tmpfem117r8.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpfem117r8.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfem117r8.jl:21\ntest set: Test Failed at /tmp/tmpfem117r8.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpfem117r8.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfem117r8.jl:21\ntest set: Test Failed at /tmp/tmpfem117r8.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpfem117r8.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfem117r8.jl:21\ntest set: Test Failed at /tmp/tmpfem117r8.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfem117r8.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfem117r8.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfem117r8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ in a list of numbers and returns the sum of the squares of the numbers. \nFor\
    \ example, sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in\
    \ a list of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, 3, 4]) should return 10. \nWrite a function that takes in a list\
    \ of numbers and returns the sum of the squares of the numbers. \nFor example,\
    \ sum([1, 2, \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt3kethng.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt3kethng.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvxvtloa6.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvxvtloa6.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg1uox2y1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg1uox2y1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_thhkfn9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_thhkfn9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] * derivative[i - 1]\n    end\n \
    \   return derivative\nend\n</cell>\n<code language=julia-1.4>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpan57fcm8.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpan57fcm8.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i]\
    \ = xs[i+1] - xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the integral\
    \ of a polynomial function using trapezoidal rule.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiiufmw98.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiiufmw98.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuirn9m7s.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuirn9m7s.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ an array of numbers and returns the sum of the squares of the numbers in the\
    \ array. For example, sum([1, 2, 3]) = 1 + 2 + 3 = 6.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdy96hyzn.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdy96hyzn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs[2:end]\n        deriv = deriv * x + xs[1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of coefficients and returns the polynomial evaluated at x.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf5or1lpp.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf5or1lpp.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes as input a polynomial and returns\
    \ the derivative polynomial in its expanded form. \nThe expanded form is given\
    \ by $x^n + x^(n-1) + x^(n-2) + ... + x + 1$. \nThe function should work for polynomials\
    \ of any degree.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyc3k3o87.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyc3k3o87.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcco11mgp.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcco11mgp.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnshg3f6q.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnshg3f6q.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6lqsl4ft.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp6lqsl4ft.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6lqsl4ft.jl:21\ntest set: Test Failed at /tmp/tmp6lqsl4ft.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmp6lqsl4ft.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6lqsl4ft.jl:21\ntest set: Test Failed at /tmp/tmp6lqsl4ft.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmp6lqsl4ft.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6lqsl4ft.jl:21\ntest set: Test Failed at /tmp/tmp6lqsl4ft.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmp6lqsl4ft.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6lqsl4ft.jl:21\ntest set: Test Failed at /tmp/tmp6lqsl4ft.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp6lqsl4ft.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6lqsl4ft.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6lqsl4ft.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdmiofcvl.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdmiofcvl.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgxczuhjz.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgxczuhjz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ derivative of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdx6fu0z_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdx6fu0z_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpuabqajkq.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpuabqajkq.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuabqajkq.jl:23\ntest set: Test Failed at /tmp/tmpuabqajkq.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpuabqajkq.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuabqajkq.jl:23\ntest set: Test Failed at /tmp/tmpuabqajkq.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpuabqajkq.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuabqajkq.jl:23\ntest set: Test Failed at /tmp/tmpuabqajkq.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpuabqajkq.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuabqajkq.jl:23\ntest set: Test Failed at /tmp/tmpuabqajkq.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpuabqajkq.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpuabqajkq.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpuabqajkq.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfwj2oapn.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpfwj2oapn.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwj2oapn.jl:23\ntest set: Test Failed at /tmp/tmpfwj2oapn.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpfwj2oapn.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwj2oapn.jl:23\ntest set: Test Failed at /tmp/tmpfwj2oapn.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpfwj2oapn.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwj2oapn.jl:23\ntest set: Test Failed at /tmp/tmpfwj2oapn.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpfwj2oapn.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwj2oapn.jl:23\ntest set: Test Failed at /tmp/tmpfwj2oapn.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfwj2oapn.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfwj2oapn.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfwj2oapn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial using\
    \ Newton's method.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qk2oey9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qk2oey9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyyo3jpqe.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyyo3jpqe.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl2bu5_pi.jl:23\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2bu5_pi.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2bu5_pi.jl:22\ntest set: Test Failed at /tmp/tmpl2bu5_pi.jl:24\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2bu5_pi.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2bu5_pi.jl:22\ntest set: Test Failed at /tmp/tmpl2bu5_pi.jl:25\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2bu5_pi.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2bu5_pi.jl:22\ntest set: Test Failed at /tmp/tmpl2bu5_pi.jl:26\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpl2bu5_pi.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2bu5_pi.jl:22\ntest set: Test Failed at /tmp/tmpl2bu5_pi.jl:27\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl2bu5_pi.jl:27\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl2bu5_pi.jl:22\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl2bu5_pi.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfly7v3rc.jl:24\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 1, 2, 4, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpfly7v3rc.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfly7v3rc.jl:23\ntest set: Test Failed at /tmp/tmpfly7v3rc.jl:25\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 3] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpfly7v3rc.jl:25\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfly7v3rc.jl:23\ntest set: Test Failed at /tmp/tmpfly7v3rc.jl:26\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 2, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpfly7v3rc.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfly7v3rc.jl:23\ntest set: Test Failed at /tmp/tmpfly7v3rc.jl:27\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 2, 1, 0, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpfly7v3rc.jl:27\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfly7v3rc.jl:23\ntest set: Test Failed at /tmp/tmpfly7v3rc.jl:28\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfly7v3rc.jl:28\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfly7v3rc.jl:23\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfly7v3rc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprt209rj2.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprt209rj2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3n0vbcoi.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmp3n0vbcoi.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3n0vbcoi.jl:21\ntest set: Test Failed at /tmp/tmp3n0vbcoi.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 3, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmp3n0vbcoi.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3n0vbcoi.jl:21\ntest set: Test Failed at /tmp/tmp3n0vbcoi.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmp3n0vbcoi.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3n0vbcoi.jl:21\ntest set: Test Failed at /tmp/tmp3n0vbcoi.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmp3n0vbcoi.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3n0vbcoi.jl:21\ntest set: Test Failed at /tmp/tmp3n0vbcoi.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp3n0vbcoi.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3n0vbcoi.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3n0vbcoi.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzva4_7lm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzva4_7lm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwlrnpp3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzwlrnpp3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp857y0snm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp857y0snm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-0.6>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-0.6>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the integral of a function over a given interval. For example, if the function\
    \ is $f(x) = x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$\
    \ is\n$$\\int_{-2}^{2} f(x) dx \\approx 5.$$\nWrite a function that calculates\
    \ the integral of a polynomial over a given interval. For example, if the polynomial\
    \ is $x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$ is\n\
    $$\\int_{-2}^{2} x^2 + 2x + 1 dx \\approx 5.$$\nWrite a function that calculates\
    \ the integral of a function over a given interval. For example, if the function\
    \ is $f(x) = x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$\
    \ is\n$$\\int_{-2}^{2} f(x) dx \\approx 5.$$\nWrite a function that calculates\
    \ the integral of a polynomial over a given interval. For example, if the polynomial\
    \ is $x^2 + 2x + 1$, then the integral of $f$ over the interval $[-2, 2]$ is\n\
    $$\\int_{-2}^{2} x^2 + 2x + 1 dx \\approx 5.$$\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuqafr4o6.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuqafr4o6.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv += xs[i] * deriv\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a list of numbers and returns\
    \ the sum of the squares of the numbers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9m9k09le.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9m9k09le.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqp1la3lq.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqp1la3lq.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial using central\
    \ differences.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1eiyboi1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1eiyboi1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3g1lssea.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3g1lssea.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqwjku68o.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqwjku68o.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpba16p5pq.jl:26\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpba16p5pq.jl:26\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba16p5pq.jl:25\ntest set: Test Failed at /tmp/tmpba16p5pq.jl:27\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpba16p5pq.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba16p5pq.jl:25\ntest set: Test Failed at /tmp/tmpba16p5pq.jl:28\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpba16p5pq.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba16p5pq.jl:25\ntest set: Test Failed at /tmp/tmpba16p5pq.jl:29\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpba16p5pq.jl:29\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba16p5pq.jl:25\ntest set: Test Failed at /tmp/tmpba16p5pq.jl:30\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpba16p5pq.jl:30\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba16p5pq.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpba16p5pq.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial using its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdy_ashbj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdy_ashbj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    for i = 1:length(xs)-1\n        deriv[i]\
    \ = xs[i+1] - xs[i]\n    end\n    return deriv\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzaldp9kc.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [-2, 1, 2, 1] == [1, 4, 12, 20]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzaldp9kc.jl:21\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaldp9kc.jl:20\ntest set: Test Failed at /tmp/tmpzaldp9kc.jl:22\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1] == [2, 6]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzaldp9kc.jl:22\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaldp9kc.jl:20\ntest set: Test Failed at /tmp/tmpzaldp9kc.jl:23\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [-1, -1] == [2, 2]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzaldp9kc.jl:23\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaldp9kc.jl:20\ntest set: Test Failed at /tmp/tmpzaldp9kc.jl:24\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [-1,\
    \ -1, -1, 4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpzaldp9kc.jl:24\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzaldp9kc.jl:20\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzaldp9kc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf4o0f38x.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf4o0f38x.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprfarttqr.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprfarttqr.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the derivative of a polynomial of degree\
    \ $n$. \nThe function should take in an array of coefficients and return the array\
    \ of derivatives.\nThe function should also take in an array of coefficients and\
    \ return the array of derivatives normalized.\nThe function should also take in\
    \ an array of coefficients and return the array of derivatives normalized.\nThe\
    \ function should also take in an array of coefficients and return the array of\
    \ derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should also take in an array of coefficients and return the array\
    \ of derivatives normalized.\nThe function should also take in an array of coefficients\
    \ and return the array of derivatives normalized.\nThe function should also take\
    \ in an array of coefficients and return the array of derivatives normalized.\n\
    The function should \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3jxjq1_i.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3jxjq1_i.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the derivative of a polynomial with coefficients xs.\nThe function should take\
    \ in a vector of integers xs and return a vector of integers deriv.\nThe function\
    \ should return the following vector:\nderiv = [1, 4, 12, 20]\nHint: Use a for\
    \ loop to iterate through the vector. \nHint: Use a second for loop to iterate\
    \ through the vector.\nHint: Use a third for loop to iterate through the vector.\n\
    Hint: Use a fourth loop to iterate through the vector.\nHint: Use a fifth loop\
    \ to iterate through the vector.\nHint: Use a sixth loop to iterate through the\
    \ vector.\nHint: Use a seventh loop to iterate through the vector.\nHint: Use\
    \ a eighth loop to iterate through the vector.\nHint: Use a ninth loop to iterate\
    \ through the vector.\nHint: Use a tenth loop to iterate through the vector.\n\
    Hint: Use a eleventh loop to iterate through the vector.\nHint: Use a twelfth\
    \ loop to iterate through the vector.\nHint: Use a thirteenth loop to iterate\
    \ through the vector.\nHint: Use a fourteenth loop to iterate through the vector.\n\
    Hint: Use a fifteenth loop to iterate through the vector.\nHint: Use a sixteenth\
    \ loop to iterate through the vector.\nHint: Use a seventeenth loop to iterate\
    \ through the vector.\nHint: Use a eighteenth loop to iterate through the vector.\n\
    Hint: Use a nineteenth loop to iterate through the vector.\nHint: Use a twentieth\
    \ loop to iterate through the vector.\nHint: Use a twenty-first loop to iterate\
    \ through the vector.\nHint: Use a twenty-second loop to iterate through the vector.\n\
    Hint: Use a twenty-third loop to iterate through the vector.\nHint: Use a twenty-fourth\
    \ loop to iterate through the vector.\nHint: Use a twenty-fifth loop to iterate\
    \ through the vector.\nHint: Use a twenty-sixth loop to iterate through the vector.\n\
    Hint: Use a twenty-seventh loop to iterate through the vector.\nHint: Use a twenty-eighth\
    \ loop to iterate through the vector.\nHint: Use a twenty-ninth \nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2khvkk91.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2khvkk91.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5kvee48e.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5kvee48e.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt3x31lwp.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpt3x31lwp.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3x31lwp.jl:21\ntest set: Test Failed at /tmp/tmpt3x31lwp.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpt3x31lwp.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3x31lwp.jl:21\ntest set: Test Failed at /tmp/tmpt3x31lwp.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpt3x31lwp.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3x31lwp.jl:21\ntest set: Test Failed at /tmp/tmpt3x31lwp.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpt3x31lwp.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3x31lwp.jl:21\ntest set: Test Failed at /tmp/tmpt3x31lwp.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpt3x31lwp.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt3x31lwp.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt3x31lwp.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the integral of a polynomial using\
    \ trapezoidal rule. \nThe function should take as input a vector of coefficients\
    \ xs and output the integral of the polynomial using trapezoidal rule.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdi4zds94.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdi4zds94.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n   \
    \ return derivative\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: "test set: Test Failed at /tmp/tmpfyvu1mq8.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, -2, 4, 0, 5] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpfyvu1mq8.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyvu1mq8.jl:21\ntest set: Test Failed at /tmp/tmpfyvu1mq8.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 2] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpfyvu1mq8.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyvu1mq8.jl:21\ntest set: Test Failed at /tmp/tmpfyvu1mq8.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, -1, 2] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpfyvu1mq8.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyvu1mq8.jl:21\ntest set: Test Failed at /tmp/tmpfyvu1mq8.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ -1, 2, -2, 6] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpfyvu1mq8.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyvu1mq8.jl:21\ntest set: Test Failed at /tmp/tmpfyvu1mq8.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpfyvu1mq8.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfyvu1mq8.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfyvu1mq8.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpubolt4np.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpubolt4np.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return derivative\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp7k_2bbun.jl:24\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n  BoundsError: attempt\
    \ to access 5-element Array{Int64,1} at index [0]\n  Stacktrace:\n   [1] getindex\
    \ at ./array.jl:788 [inlined]\n   [2] derivative(::Array{Int64,1}) at /tmp/tmp7k_2bbun.jl:14\n\
    \   [3] top-level scope at /tmp/tmp7k_2bbun.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7k_2bbun.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp7k_2bbun.jl:25\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3]) == [2, 6]\n  BoundsError: attempt to access 3-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] derivative(::Array{Int64,1}) at /tmp/tmp7k_2bbun.jl:14\n   [3] top-level\
    \ scope at /tmp/tmp7k_2bbun.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7k_2bbun.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp7k_2bbun.jl:26\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [2, 2]\n  BoundsError: attempt to access 3-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] derivative(::Array{Int64,1}) at /tmp/tmp7k_2bbun.jl:14\n   [3] top-level\
    \ scope at /tmp/tmp7k_2bbun.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7k_2bbun.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp7k_2bbun.jl:27\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16]\n  BoundsError: attempt to access 5-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] derivative(::Array{Int64,1}) at /tmp/tmp7k_2bbun.jl:14\n   [3] top-level\
    \ scope at /tmp/tmp7k_2bbun.jl:27\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7k_2bbun.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp7k_2bbun.jl:28\n  Test threw exception\n  Expression: candidate([1])\
    \ == Vector{Int64}([])\n  BoundsError: attempt to access 1-element Array{Int64,1}\
    \ at index [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] derivative(::Array{Int64,1}) at /tmp/tmp7k_2bbun.jl:14\n   [3] top-level\
    \ scope at /tmp/tmp7k_2bbun.jl:28\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp7k_2bbun.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7k_2bbun.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with n coefficients.\n\
    The function should take in an array of Int64 and return a vector of Int64.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu5x9gsyj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu5x9gsyj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    for i = 1:length(xs)\n        deriv[i]\
    \ = xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes in a list of numbers and returns the sum of the squares of the numbers.\
    \ \nFor example: sum([1, 2, 3]) = 1 + 2 + 3 = 6\nHint: use the sum function.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmperyzjova.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmperyzjova.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise: Write a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5as11g4w.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5as11g4w.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that takes in a polynomial\
    \ and returns the derivative of the polynomial. \nHint: Use a for loop to iterate\
    \ through the polynomial\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq6urj2cj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq6urj2cj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9gbkmsh.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn9gbkmsh.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[1]\n  \
    \  end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that computes the\
    \ derivative of a polynomial in one variable at a time.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdgq7iom4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdgq7iom4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a polynomial and returns the derivative of the polynomial in the same\
    \ form as in Exercise 2.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_i8ipelz.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_i8ipelz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjjsct0pp.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjjsct0pp.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj6jcqzb_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj6jcqzb_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i - 1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcnbcj9su.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpcnbcj9su.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcnbcj9su.jl:21\ntest set: Test Failed at /tmp/tmpcnbcj9su.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpcnbcj9su.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcnbcj9su.jl:21\ntest set: Test Failed at /tmp/tmpcnbcj9su.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpcnbcj9su.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcnbcj9su.jl:21\ntest set: Test Failed at /tmp/tmpcnbcj9su.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpcnbcj9su.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcnbcj9su.jl:21\ntest set: Test Failed at /tmp/tmpcnbcj9su.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpcnbcj9su.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcnbcj9su.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcnbcj9su.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    deriv[2] = xs[2]\n\
    \    deriv[3] = xs[3]\n    deriv[4] = xs[4]\n    deriv[5] = xs[5]\n    deriv[6]\
    \ = xs[6]\n    deriv[7] = xs[7]\n    deriv[8] = xs[8]\n    deriv[9] = xs[9]\n\
    \    deriv[10] = xs[10]\n    deriv[11] = xs[11]\n    deriv[12] = xs[12]\n    deriv[13]\
    \ = xs[13]\n    deriv[14] = xs[14]\n    deriv[15] = xs[15]\n    deriv[16] = xs[16]\n\
    \    deriv[17] = xs[17]\n    deriv[18] = xs[18]\n    deriv[19] = xs[19]\n    deriv[20]\
    \ = xs[20]\n    deriv[21] = xs[21]\n    deriv[22] = xs[22]\n    deriv[23] = xs[23]\n\
    \    deriv[24] = xs[24]\n    deriv[25] = xs[25]\n    deriv[26] = xs[26]\n    deriv[27]\
    \ = xs[27]\n    deriv[28] = xs[28]\n    deriv[29] = xs[29]\n    deriv[30] = xs[30]\n\
    \    deriv[31] = xs[31]\n    deriv[32] = xs[32]\n    deriv[33] = xs[33]\n    deriv[34]\
    \ = xs[34]\n    deriv[35] = xs[35]\n    deriv[36] = xs[36]\n    deriv[37] = xs[37]\n\
    \    deriv[38] = xs[38]\n    deriv[39] = xs[39]\n    deriv[40] = xs[40]\n    deriv[41]\
    \ = xs[41]\n    deriv[42] = xs[42]\n    deriv[43] = xs[43]\n    deriv[44] = xs[44]\n\
    \    deriv[45] = xs[45]\n    deriv[46] = xs[46]\n    deriv[47] = xs[47]\n    deriv[48]\
    \ = xs[48]\n    deriv[49] = xs[49]\n    deriv[50] = xs[50]\n    deriv[51] = xs[51]\n\
    \    deriv[52] = xs[52]\n    deriv[53] = xs[53]\n    deriv[54] = xs[54]\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpp38s1ge4.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpp38s1ge4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpp38s1ge4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmputayq1lv.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmputayq1lv.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i] - xs[i-1]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxmdusjav.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxmdusjav.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i = 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nderivative([1,\
    \ 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp97yp48yd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp97yp48yd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the derivative of a polynomial given\
    \ its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwbbga77l.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwbbga77l.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] * derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the integral of a polynomial function using trapezoidal rule. \n\
    The function should take as input a vector of coefficients and a vector of x values.\
    \ \nThe function should return an array of y values corresponding to the x values\
    \ given. \nThe function should return an array of y values corresponding to the\
    \ x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of y values corresponding\
    \ to the x values given. \nThe function should return an array of \nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqdljeovd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdljeovd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1,\
    \ 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the derivative\
    \ of a polynomial given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmap3tvo3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmap3tvo3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    derivative = zeros(length(xs))\n    derivative[1] = xs[1]\n    for i in\
    \ 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n    end\n   \
    \ return derivative\nend\n</cell>\n<text>\nNow let's try it out on some examples:\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpemncgdjm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpemncgdjm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nThe function should take in two arguments: the coefficients of\
    \ the polynomial, and the length of the polynomial.\nThe function should return\
    \ the derivative of the polynomial as a vector of coefficients.\nThe function\
    \ should return an error if the length of the polynomial is not even.\nThe function\
    \ should return an error if the length of the polynomial is not equal to the length\
    \ of the coefficients.\nThe function should return an error if the coefficients\
    \ are not integers.\nThe function should return an error if the coefficients are\
    \ not in the range $[0,\\infty)$.\nThe function should return an error if the\
    \ coefficients are all zero.\nThe function should return an error if the coefficients\
    \ are all non-positive.\nThe function should return an error if the coefficients\
    \ are all non-negative.\nThe function should return an error if the coefficients\
    \ are all non-zero.\nThe function should return an error if the coefficients are\
    \ all non-negative.\nThe function should return an error if the coefficients are\
    \ all non-positive.\nThe function should return an error if the coefficients are\
    \ all non-zero.\nThe function should return an error if the coefficients are all\
    \ non-negative.\nThe function should return an error if the coefficients are all\
    \ non-positive.\nThe function should return an error if the coefficients are all\
    \ non-zero.\nThe function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function should return an error if the coefficients are all non-negative.\n\
    The function should return an error if the coefficients are all non-positive.\n\
    The function should return an error if the coefficients are all non-zero.\nThe\
    \ function \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpug4q2sip.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpug4q2sip.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4djk_p00.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4djk_p00.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    derivative[1] = xs[1]\n\
    \    \n    for i in 2:length(xs)\n        derivative[i] = xs[i] - derivative[i-1]\n\
    \    end\n    \n    return derivative\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the derivative of a polynomial with given coefficients.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeimzdqhe.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeimzdqhe.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs)-1)\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxq45szbu.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxq45szbu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a polynomial and returns the derivative of\
    \ the polynomial in terms of its coefficients. \nHint: Use derivative function\
    \ you wrote earlier.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph8jmxvch.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph8jmxvch.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)) \n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptv881o12.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptv881o12.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i = 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8g29bz_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8g29bz_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    # Initialize a vector to store the derivative\n    derivative =\
    \ zeros(length(xs))\n    \n    # Compute the first derivative\n    derivative[1]\
    \ = xs[1]\n    \n    # Compute the second derivative\n    for i = 2:length(xs)\n\
    \        derivative[i] = derivative[i-1] * xs[i]\n    end\n    \n    return derivative\n\
    end\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that computes the derivative of a polynomial\
    \ given its coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpymwr80ca.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpymwr80ca.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyy065s_1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyy065s_1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs[2:end]\n        deriv = deriv * x + xs[1]\n\
    \    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\nderivative([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that takes an integer\
    \ $n$ and returns the $n$th Fibonacci number.\nusing Test\n\n@testset begin\n\n\
    candidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdd0iqvfv.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdd0iqvfv.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv = deriv * xs[i]\
    \ + xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ calculates the integral of a polynomial function from 0 to infinity. \nThe function\
    \ should take in two arguments: the polynomial coefficients and the lower and\
    \ upper bounds of the integral.\nThe function should return the value of the integral\
    \ as a Float64.\nThe function should raise a TypeError if the polynomial coefficients\
    \ are not a Vector{Int64}.\nThe function should raise a TypeError if the lower\
    \ and upper bounds are not Float64s.\nThe function should raise a TypeError if\
    \ the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,1].\nThe function should\
    \ raise a TypeError if the lower and upper bounds are not in the interval [0,1].\n\
    The function should raise a TypeError if the lower and upper bounds are not in\
    \ the interval [0,1].\nThe function should raise a TypeError if the lower and\
    \ upper bounds are not in the interval [0,1].\nThe function should raise a TypeError\
    \ if the lower and upper bounds are not in the interval [0,\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwnhghp75.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwnhghp75.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that calculates the derivative of a polynomial with coefficients\
    \ xs. Use a for loop to iterate over the elements of the vector xs.\nHint: Remember\
    \ that you can access elements of a vector using square brackets.\nusing Test\n\
    \n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuh2cxqf6.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuh2cxqf6.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial with one variable.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpivg21dhj.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpivg21dhj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp51kxc29v.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp51kxc29v.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa6ies63f.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 4, 6, 10, 15] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpa6ies63f.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa6ies63f.jl:21\ntest set: Test Failed at /tmp/tmpa6ies63f.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 3, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpa6ies63f.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa6ies63f.jl:21\ntest set: Test Failed at /tmp/tmpa6ies63f.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 5, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpa6ies63f.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa6ies63f.jl:21\ntest set: Test Failed at /tmp/tmpa6ies63f.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 5, 6, 6, 10] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpa6ies63f.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa6ies63f.jl:21\ntest set: Test Failed at /tmp/tmpa6ies63f.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpa6ies63f.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa6ies63f.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa6ies63f.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs)-1)\n    for i = 1:length(xs)-1\n       \
    \ deriv[i] = xs[i+1] - xs[i] * xs[i+1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    derivative([1, 2, 3])\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_yg0y8jm.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_yg0y8jm.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs)-1)\n    \n    for i = 1:length(xs)-1\n\
    \        derivative[i] = xs[i+1] - xs[i] * xs[i+1]\n    end\n    \n    return\
    \ derivative\nend\n</cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the integral\
    \ of a polynomial using trapezoidal rule. \nThe function should take as input\
    \ a vector of coefficients xs and output the integral of the polynomial evaluated\
    \ at xs.\nThe function should return a single number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmxpht18d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmxpht18d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that computes the derivative of a polynomial given\
    \ its coefficients.\nThe function should take as input a vector of coefficients\
    \ xs.\nThe function should return the same vector but with the derivative of the\
    \ polynomial computed.\nThe function should return an error if the input vector\
    \ is empty.\nThe function should return an error if the input vector is not of\
    \ length 3.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ is not 1.\nThe function should return an error if the input vector is not of\
    \ length 3 or if the first element of the input vector is not 1 or if the first\
    \ element of the input vector is not 1.\nThe function should return an error if\
    \ the input vector is not of length 3 or if the first element of the input vector\
    \ is not 1 or if the first element of the input vector is not 1.\nThe function\
    \ should return an error if the input vector is not of length 3 or if the first\
    \ element of the input vector is not 1 or if the first element of the input vector\
    \ \nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx87cy91y.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx87cy91y.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpaqojk2nc.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 3, 6, 24, 120] == [1, 4, 12,\
    \ 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpaqojk2nc.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqojk2nc.jl:21\ntest set: Test Failed at /tmp/tmpaqojk2nc.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 2, 6] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpaqojk2nc.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqojk2nc.jl:21\ntest set: Test Failed at /tmp/tmpaqojk2nc.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 6, 6] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpaqojk2nc.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqojk2nc.jl:21\ntest set: Test Failed at /tmp/tmpaqojk2nc.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 6, 6, 0, 0] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpaqojk2nc.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqojk2nc.jl:21\ntest set: Test Failed at /tmp/tmpaqojk2nc.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpaqojk2nc.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpaqojk2nc.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpaqojk2nc.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.3>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7cfeiz12.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7cfeiz12.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite a function that calculates\
    \ the integral of a polynomial function using trapezoidal rule.\nusing Test\n\n\
    @testset begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5])\
    \ == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcj14xt9d.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcj14xt9d.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] * deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.4>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial given its\
    \ coefficients.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3yimvqy7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3yimvqy7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for x in xs\n        deriv = deriv * x + xs[1]\n  \
    \  end\n    return deriv\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpdcybpwkf.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type Array{Int64,1}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array\
    \ at array.jl:533\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpdcybpwkf.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdcybpwkf.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdcybpwkf.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpdcybpwkf.jl:22\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3]) == [2, 6]\n  MethodError: Cannot `convert` an object of type Int64 to\
    \ an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpdcybpwkf.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdcybpwkf.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdcybpwkf.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpdcybpwkf.jl:23\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [2, 2]\n  MethodError: Cannot `convert` an object of type Int64 to\
    \ an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpdcybpwkf.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdcybpwkf.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdcybpwkf.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpdcybpwkf.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16]\n  MethodError: Cannot `convert` an object of\
    \ type Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpdcybpwkf.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdcybpwkf.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdcybpwkf.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpdcybpwkf.jl:25\n  Test threw exception\n  Expression: candidate([1])\
    \ == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpdcybpwkf.jl:14\n\
    \   [2] top-level scope at /tmp/tmpdcybpwkf.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpdcybpwkf.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdcybpwkf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq0cmpmyf.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20]\n   Evaluated: [3, 0, -1, -6, -34] == [1, 4,\
    \ 12, 20]\nStacktrace:\n [1] top-level scope at /tmp/tmpq0cmpmyf.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0cmpmyf.jl:21\ntest set: Test Failed at /tmp/tmpq0cmpmyf.jl:23\n\
    \  Expression: candidate([1, 2, 3]) == [2, 6]\n   Evaluated: [1, 1, 1] == [2,\
    \ 6]\nStacktrace:\n [1] top-level scope at /tmp/tmpq0cmpmyf.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0cmpmyf.jl:21\ntest set: Test Failed at /tmp/tmpq0cmpmyf.jl:24\n\
    \  Expression: candidate([3, 2, 1]) == [2, 2]\n   Evaluated: [3, 3, 1] == [2,\
    \ 2]\nStacktrace:\n [1] top-level scope at /tmp/tmpq0cmpmyf.jl:24\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0cmpmyf.jl:21\ntest set: Test Failed at /tmp/tmpq0cmpmyf.jl:25\n\
    \  Expression: candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16]\n   Evaluated: [3,\
    \ 3, 1, -1, -4] == [2, 2, 0, 16]\nStacktrace:\n [1] top-level scope at /tmp/tmpq0cmpmyf.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0cmpmyf.jl:21\ntest set: Test Failed at /tmp/tmpq0cmpmyf.jl:26\n\
    \  Expression: candidate([1]) == Vector{Int64}([])\n   Evaluated: [1] == Int64[]\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpq0cmpmyf.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq0cmpmyf.jl:21\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq0cmpmyf.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs)) \n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86gzqof1.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86gzqof1.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] * xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that calculates the derivative of a polynomial using central\
    \ differences.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpen2xlsj_.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpen2xlsj_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv = deriv * xs[i]\
    \ + xs[i-1]\n    end\n    return deriv\nend\n</cell>\n<code language=julia-1.5>\n\
    derivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in a polynomial and returns the derivative of the polynomial in the same\
    \ form.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvnq2tfhj.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvnq2tfhj.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes in a list of numbers and returns the sum of the\
    \ squares of the numbers in the list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1,\
    \ 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplkic9rd3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplkic9rd3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    \n    derivative = zeros(length(xs))\n    \n    for i = 1:length(xs)\n\
    \        derivative[i] = xs[i]\n    end\n    \n    return derivative\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that computes the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp026ry47z.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp026ry47z.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = xs[1]\n    for i in 2:length(xs)\n        deriv = deriv * xs[i]\n\
    \    end\n    return deriv\nend\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: "test set: Error During Test at /tmp/tmpqd6zt8gp.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20]\n  MethodError: Cannot\
    \ `convert` an object of type Int64 to an object of type Array{Int64,1}\n  Closest\
    \ candidates are:\n    convert(::Type{T}, !Matched::AbstractArray) where T<:Array\
    \ at array.jl:533\n    convert(::Type{T}, !Matched::T) where T<:AbstractArray\
    \ at abstractarray.jl:14\n    convert(::Type{T}, !Matched::LinearAlgebra.Factorization)\
    \ where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpqd6zt8gp.jl:14\n\
    \   [2] top-level scope at /tmp/tmpqd6zt8gp.jl:21\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqd6zt8gp.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqd6zt8gp.jl:22\n  Test threw exception\n  Expression: candidate([1,\
    \ 2, 3]) == [2, 6]\n  MethodError: Cannot `convert` an object of type Int64 to\
    \ an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpqd6zt8gp.jl:14\n\
    \   [2] top-level scope at /tmp/tmpqd6zt8gp.jl:22\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqd6zt8gp.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqd6zt8gp.jl:23\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1]) == [2, 2]\n  MethodError: Cannot `convert` an object of type Int64 to\
    \ an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpqd6zt8gp.jl:14\n\
    \   [2] top-level scope at /tmp/tmpqd6zt8gp.jl:23\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqd6zt8gp.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqd6zt8gp.jl:24\n  Test threw exception\n  Expression: candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16]\n  MethodError: Cannot `convert` an object of\
    \ type Int64 to an object of type Array{Int64,1}\n  Closest candidates are:\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    convert(::Type{T}, !Matched::LinearAlgebra.Factorization) where T<:AbstractArray\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpqd6zt8gp.jl:14\n\
    \   [2] top-level scope at /tmp/tmpqd6zt8gp.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqd6zt8gp.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpqd6zt8gp.jl:25\n  Test threw exception\n  Expression: candidate([1])\
    \ == Vector{Int64}([])\n  MethodError: Cannot `convert` an object of type Int64\
    \ to an object of type Array{Int64,1}\n  Closest candidates are:\n    convert(::Type{T},\
    \ !Matched::AbstractArray) where T<:Array at array.jl:533\n    convert(::Type{T},\
    \ !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n    convert(::Type{T},\
    \ !Matched::LinearAlgebra.Factorization) where T<:AbstractArray at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LinearAlgebra/src/factorization.jl:55\n\
    \    ...\n  Stacktrace:\n   [1] derivative(::Array{Int64,1}) at /tmp/tmpqd6zt8gp.jl:14\n\
    \   [2] top-level scope at /tmp/tmpqd6zt8gp.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpqd6zt8gp.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqd6zt8gp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(Int, length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.0>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the integral of a polynomial function\
    \ using trapezoidal rule.\nusing Test\n\n@testset begin\n\ncandidate = derivative;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2,\
    \ 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3,\
    \ 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3dnc2179.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3dnc2179.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1] + xs[i]\n    end\n    return deriv\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes in a polynomial and returns the\
    \ derivative of the polynomial in reverse order. For example, if the input was\
    \ [1, 2, 3, 4], the output should be [4, 3, 2, 1].\nusing Test\n\n@testset begin\n\
    \ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1, 4, 12, 20])\n\
    \t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3, 2, 1]) == [2, 2])\n\
    \t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t@test(candidate([1]) ==\
    \ Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzefsj7un.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzefsj7un.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = deriv[i-1]*xs[i] - xs[i-1]\n    end\n    return deriv\nend\n\
    </cell>\n<code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nderivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite\
    \ a function that calculates the derivative of a polynomial given its coefficients.\n\
    using Test\n\n@testset begin\n\ncandidate = derivative;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == [1, 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t\
    @test(candidate([3, 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2,\
    \ 2, 0, 16])\n\t@test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppkw3dxk0.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppkw3dxk0.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" xs represent coefficients of a polynomial.\n    xs[0] + xs[1] *\
    \ x + xs[2] * x^2 + ....\n     Return derivative of this polynomial in the same\
    \ form.\n    >>> derivative([3, 1, 2, 4, 5])\n    [1, 4, 12, 20]\n    >>> derivative([1,\
    \ 2, 3])\n    [2, 6]\n    \"\"\"\nfunction derivative(xs::Vector{Int64})::Vector{Int64}\
    \ \n    deriv = zeros(length(xs))\n    deriv[1] = xs[1]\n    for i in 2:length(xs)\n\
    \        deriv[i] = xs[i] - deriv[i-1]\n    end\n    return deriv\nend\n</cell>\n\
    <code language=julia-1.5>\nderivative([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    derivative([1, 2, 3])\n</cell>\n<text>\nExercise\nWrite a function that calculates\
    \ the derivative of a polynomial given its coefficients.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = derivative;\n\t@test(candidate([3, 1, 2, 4, 5]) == [1,\
    \ 4, 12, 20])\n\t@test(candidate([1, 2, 3]) == [2, 6])\n\t@test(candidate([3,\
    \ 2, 1]) == [2, 2])\n\t@test(candidate([3, 2, 1, 0, 4]) == [2, 2, 0, 16])\n\t\
    @test(candidate([1]) == Vector{Int64}([]))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzxgu0w9c.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzxgu0w9c.jl:17\n"
  exit_code: 1
  status: Exception
