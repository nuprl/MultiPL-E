name: HumanEval_122_add_elements
language: julia
results:
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nQuestion 4\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj3izk6fh.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj3izk6fh.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 4\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. \n\
    For example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3s6yws9k.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3s6yws9k.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0krs026y.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0krs026y.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0krs026y.jl:29\ntest set: Test Failed at /tmp/tmp0krs026y.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp0krs026y.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0krs026y.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0krs026y.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpop_2r2h2.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpop_2r2h2.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpop_2r2h2.jl:25\ntest set: Test Failed at /tmp/tmpop_2r2h2.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpop_2r2h2.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpop_2r2h2.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpop_2r2h2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvjhx2z9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvjhx2z9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr[k:end]\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuht0rv2k.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuht0rv2k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpva0hc1u8.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpva0hc1u8.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpva0hc1u8.jl:25\ntest set: Test Failed at /tmp/tmpva0hc1u8.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpva0hc1u8.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpva0hc1u8.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpva0hc1u8.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvhb1jxh4.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvhb1jxh4.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvhb1jxh4.jl:25\ntest set: Test Failed at /tmp/tmpvhb1jxh4.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpvhb1jxh4.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvhb1jxh4.jl:25\ntest set: Test Failed at /tmp/tmpvhb1jxh4.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpvhb1jxh4.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvhb1jxh4.jl:25\ntest set: Test Failed at /tmp/tmpvhb1jxh4.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpvhb1jxh4.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvhb1jxh4.jl:25\ntest set: Test Failed at /tmp/tmpvhb1jxh4.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvhb1jxh4.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvhb1jxh4.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvhb1jxh4.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        else\n            sum += x % 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 3.2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, your function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzjogp5oq.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzjogp5oq.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8cxlbdj2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8cxlbdj2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq0y38vyx.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq0y38vyx.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpis3korjk.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpis3korjk.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpis3korjk.jl:25\ntest set: Test Failed at /tmp/tmpis3korjk.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpis3korjk.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpis3korjk.jl:25\ntest set: Test Failed at /tmp/tmpis3korjk.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpis3korjk.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpis3korjk.jl:25\ntest set: Test Failed at /tmp/tmpis3korjk.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpis3korjk.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpis3korjk.jl:25\ntest set: Test Failed at /tmp/tmpis3korjk.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpis3korjk.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpis3korjk.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpis3korjk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpru3327nt.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpru3327nt.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i in 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmppx8ajqip.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmppx8ajqip.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmppx8ajqip.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ffplys6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9ffplys6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd58dbr3c.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd58dbr3c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd58dbr3c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpow0_5nf1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpow0_5nf1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\nadd_elements(arr, k)\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes in an array of integers and an integer k and returns the sum of the elements\
    \ with at most k digits from the first k elements of arr. For example, given arr\
    \ = [111,21,3,4000,5,6,7,8,9] and k = 4, the function should return 24. Your function\
    \ should work for any value of k and for any arr where arr has at least k elements.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1tj5h5e1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1tj5h5e1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 >\
    \ 2\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nQuestion 3\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4, you should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpepmme2t3.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpepmme2t3.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 4\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, the function should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpydnb7bu6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpydnb7bu6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp53loe7io.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp53loe7io.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nProblem 8\nGiven a non-empty array\
    \ of integers arr, return a new array where each element is the sum of the elements\
    \ from the original array except the element at index i.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps6eexqsg.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps6eexqsg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2zaw4mkt.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp2zaw4mkt.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2zaw4mkt.jl:25\ntest set: Test Failed at /tmp/tmp2zaw4mkt.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp2zaw4mkt.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2zaw4mkt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2zaw4mkt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzr7yc1yp.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzr7yc1yp.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr7yc1yp.jl:25\ntest set: Test Failed at /tmp/tmpzr7yc1yp.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpzr7yc1yp.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr7yc1yp.jl:25\ntest set: Test Failed at /tmp/tmpzr7yc1yp.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpzr7yc1yp.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzr7yc1yp.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzr7yc1yp.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the number of elements in the array that have at most two digits.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplm4erigk.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplm4erigk.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt2wved9a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt2wved9a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps4cyhm7l.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps4cyhm7l.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4cyhm7l.jl:25\ntest set: Test Failed at /tmp/tmps4cyhm7l.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmps4cyhm7l.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4cyhm7l.jl:25\ntest set: Test Failed at /tmp/tmps4cyhm7l.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmps4cyhm7l.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4cyhm7l.jl:25\ntest set: Test Failed at /tmp/tmps4cyhm7l.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmps4cyhm7l.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4cyhm7l.jl:25\ntest set: Test Failed at /tmp/tmps4cyhm7l.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmps4cyhm7l.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps4cyhm7l.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps4cyhm7l.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzekypffv.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzekypffv.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzekypffv.jl:25\ntest set: Test Failed at /tmp/tmpzekypffv.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpzekypffv.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzekypffv.jl:25\ntest set: Test Failed at /tmp/tmpzekypffv.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpzekypffv.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzekypffv.jl:25\ntest set: Test Failed at /tmp/tmpzekypffv.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpzekypffv.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzekypffv.jl:25\ntest set: Test Failed at /tmp/tmpzekypffv.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzekypffv.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzekypffv.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzekypffv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmps334id0u.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps334id0u.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps334id0u.jl:25\ntest set: Test Failed at /tmp/tmps334id0u.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmps334id0u.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps334id0u.jl:25\ntest set: Test Failed at /tmp/tmps334id0u.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmps334id0u.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps334id0u.jl:25\ntest set: Test Failed at /tmp/tmps334id0u.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmps334id0u.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps334id0u.jl:25\ntest set: Test Failed at /tmp/tmps334id0u.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmps334id0u.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmps334id0u.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmps334id0u.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. \nFor example, given arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpast6bqzr.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpast6bqzr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpntm6aylt.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpntm6aylt.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpntm6aylt.jl:25\ntest set: Test Failed at /tmp/tmpntm6aylt.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpntm6aylt.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpntm6aylt.jl:25\ntest set: Test Failed at /tmp/tmpntm6aylt.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpntm6aylt.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpntm6aylt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpntm6aylt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n    \
    \    return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the number of times the number \"k\" appears in arr starting from index 1.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfqb6mg89.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfqb6mg89.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk44du2_k.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk44du2_k.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. \nThe function should return an\
    \ Int64.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaz3cf7kz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaz3cf7kz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nQuestion 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1b_t6ta4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1b_t6ta4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxx722abd.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxx722abd.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e % 10 + 10 * (e / 10)\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<text>\nQuestion 4\nWrite\
    \ a function that returns the sum of the elements with at most two digits from\
    \ the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0b0x4atb.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0b0x4atb.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 2:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a non-empty\
    \ array of integers arr, return a new array where each element is the sum of the\
    \ elements with two digits from the original array's first k elements. \nFor example,\
    \ given arr = [111,21,3,4000,5,6,7,8,9], return [24,15,16,12].\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk5xv5jtd.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk5xv5jtd.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4j0xt7lw.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4j0xt7lw.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4j0xt7lw.jl:25\ntest set: Test Failed at /tmp/tmp4j0xt7lw.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp4j0xt7lw.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4j0xt7lw.jl:25\ntest set: Test Failed at /tmp/tmp4j0xt7lw.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp4j0xt7lw.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4j0xt7lw.jl:25\ntest set: Test Failed at /tmp/tmp4j0xt7lw.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp4j0xt7lw.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4j0xt7lw.jl:25\ntest set: Test Failed at /tmp/tmp4j0xt7lw.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4j0xt7lw.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4j0xt7lw.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4j0xt7lw.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Problem 7: Find the sum of all the elements of the given array arr that are divisible\
    \ by 7\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf306kzcd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf306kzcd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nQuestion 7\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, your function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxzsooh9b.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxzsooh9b.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\nk = 2\nadd_elements(arr,\
    \ k)\n</cell>\n<text>\nProblem 3\nGiven a non-empty array of integers arr, return\
    \ a new array where each element is the sum of the elements with two digits from\
    \ the original array's element at that index.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqeok3k4n.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqeok3k4n.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_2cdycqe.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_2cdycqe.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_2cdycqe.jl:25\ntest set: Test Failed at /tmp/tmp_2cdycqe.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp_2cdycqe.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_2cdycqe.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_2cdycqe.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in 1:k \n            sum += arr[i] \n        endfor\
    \ \n        return sum \n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphw0axmt8.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphw0axmt8.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that takes an array of integers arr and an integer\
    \ k and returns the sum of the elements with at most k digits from the first k\
    \ elements of arr.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjd_djbs.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjd_djbs.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e % 10 + 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\nadd_elements(arr, k)\n</cell>\n<text>\nProblem 3\nGiven a non-empty array\
    \ of integers arr, return a new array where each element is the sum of the elements\
    \ with two digits from the original array's element at that index.\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3h84td9e.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3h84td9e.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprctpbqho.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprctpbqho.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdcsf4733.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdcsf4733.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdcsf4733.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeljin_qq.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpeljin_qq.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeljin_qq.jl:29\ntest set: Test Failed at /tmp/tmpeljin_qq.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpeljin_qq.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeljin_qq.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeljin_qq.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgatwpvih.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgatwpvih.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpyrbzu61s.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyrbzu61s.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyrbzu61s.jl:25\ntest set: Test Failed at /tmp/tmpyrbzu61s.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpyrbzu61s.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyrbzu61s.jl:25\ntest set: Test Failed at /tmp/tmpyrbzu61s.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpyrbzu61s.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyrbzu61s.jl:25\ntest set: Test Failed at /tmp/tmpyrbzu61s.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpyrbzu61s.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyrbzu61s.jl:25\ntest set: Test Failed at /tmp/tmpyrbzu61s.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpyrbzu61s.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyrbzu61s.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyrbzu61s.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxtboa14o.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxtboa14o.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxtboa14o.jl:25\ntest set: Test Failed at /tmp/tmpxtboa14o.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpxtboa14o.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxtboa14o.jl:25\ntest set: Test Failed at /tmp/tmpxtboa14o.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpxtboa14o.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxtboa14o.jl:25\ntest set: Test Failed at /tmp/tmpxtboa14o.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpxtboa14o.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxtboa14o.jl:25\ntest set: Test Failed at /tmp/tmpxtboa14o.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxtboa14o.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxtboa14o.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxtboa14o.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the number\
    \ of unique elements in the given array.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb5w7hc96.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb5w7hc96.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_1nqa7qd.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1nqa7qd.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1nqa7qd.jl:25\ntest set: Test Failed at /tmp/tmp_1nqa7qd.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp_1nqa7qd.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1nqa7qd.jl:25\ntest set: Test Failed at /tmp/tmp_1nqa7qd.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp_1nqa7qd.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_1nqa7qd.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_1nqa7qd.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzc4w3jif.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpzc4w3jif.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzc4w3jif.jl:25\ntest set: Test Failed at /tmp/tmpzc4w3jif.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpzc4w3jif.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzc4w3jif.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzc4w3jif.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpih50lgar.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpih50lgar.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpih50lgar.jl:25\ntest set: Test Failed at /tmp/tmpih50lgar.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpih50lgar.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpih50lgar.jl:25\ntest set: Test Failed at /tmp/tmpih50lgar.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpih50lgar.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpih50lgar.jl:25\ntest set: Test Failed at /tmp/tmpih50lgar.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpih50lgar.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpih50lgar.jl:25\ntest set: Test Failed at /tmp/tmpih50lgar.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpih50lgar.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpih50lgar.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpih50lgar.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nProblem 3\nGiven a non-empty array\
    \ of integers arr, return a new array where each element is the sum of the elements\
    \ with two digits in their decimal representation.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd48jhvy9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd48jhvy9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that takes an array of integers and an integer k\
    \ and returns the sum of the elements with at most two digits from the first k\
    \ elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9] and k =\
    \ 4, the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcleeuohz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcleeuohz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Subsets\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiope65bk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiope65bk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr1o6mz1s.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr1o6mz1s.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr1o6mz1s.jl:25\ntest set: Test Failed at /tmp/tmpr1o6mz1s.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpr1o6mz1s.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr1o6mz1s.jl:25\ntest set: Test Failed at /tmp/tmpr1o6mz1s.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpr1o6mz1s.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr1o6mz1s.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr1o6mz1s.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 4\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7fyn_f93.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7fyn_f93.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxmm_s_cd.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpxmm_s_cd.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxmm_s_cd.jl:25\ntest set: Test Failed at /tmp/tmpxmm_s_cd.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpxmm_s_cd.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxmm_s_cd.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxmm_s_cd.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nGiven an array arr of positive integers,\
    \ return all possible subsets (without duplicates) of arr.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcp6w75eg.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcp6w75eg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpiw89wdzl.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiw89wdzl.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiw89wdzl.jl:25\ntest set: Test Failed at /tmp/tmpiw89wdzl.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpiw89wdzl.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiw89wdzl.jl:25\ntest set: Test Failed at /tmp/tmpiw89wdzl.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpiw89wdzl.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpiw89wdzl.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpiw89wdzl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 4\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmu2wmne5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmu2wmne5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        if el % 10\
    \ > 1\n            sum += el\n        end\n    end\n    return sum\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2,\
    \ -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000,\
    \ 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\
    \t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1],\
    \ 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnjmyykqr.jl:28\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 407 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnjmyykqr.jl:28\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjmyykqr.jl:27\ntest set: Test Failed at /tmp/tmpnjmyykqr.jl:29\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 14\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpnjmyykqr.jl:29\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjmyykqr.jl:27\ntest set: Test Failed at /tmp/tmpnjmyykqr.jl:30\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpnjmyykqr.jl:30\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjmyykqr.jl:27\ntest set: Test Failed at /tmp/tmpnjmyykqr.jl:31\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpnjmyykqr.jl:31\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjmyykqr.jl:27\ntest set: Test Failed at /tmp/tmpnjmyykqr.jl:32\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnjmyykqr.jl:32\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnjmyykqr.jl:27\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnjmyykqr.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx0q_1o6h.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx0q_1o6h.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx0q_1o6h.jl:25\ntest set: Test Failed at /tmp/tmpx0q_1o6h.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpx0q_1o6h.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx0q_1o6h.jl:25\ntest set: Test Failed at /tmp/tmpx0q_1o6h.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpx0q_1o6h.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx0q_1o6h.jl:25\ntest set: Test Failed at /tmp/tmpx0q_1o6h.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpx0q_1o6h.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx0q_1o6h.jl:25\ntest set: Test Failed at /tmp/tmpx0q_1o6h.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpx0q_1o6h.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx0q_1o6h.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx0q_1o6h.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 2:k \n            sum += arr[i] \n        end\n \
    \       return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3a8znlei.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3a8znlei.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpldoqma9i.jl:30\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 388 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldoqma9i.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpldoqma9i.jl:29\ntest set: Test Failed at /tmp/tmpldoqma9i.jl:31\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4004\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpldoqma9i.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpldoqma9i.jl:29\ntest set: Test Failed at /tmp/tmpldoqma9i.jl:32\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpldoqma9i.jl:32\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpldoqma9i.jl:29\ntest set: Test Failed at /tmp/tmpldoqma9i.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpldoqma9i.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpldoqma9i.jl:29\ntest set: Test Failed at /tmp/tmpldoqma9i.jl:34\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpldoqma9i.jl:34\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpldoqma9i.jl:29\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldoqma9i.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <text>\nQuestion 7\nWrite a function that returns the sum of the elements with\
    \ at most two digits from the first k elements of arr. For example, given arr\
    \ = [111,21,3,4000,5,6,7,8,9], k = 4, you should return 24.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpegvfmq8c.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpegvfmq8c.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n    \
    \    return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpv9psq3yd.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpv9psq3yd.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv9psq3yd.jl:29\ntest set: Test Failed at /tmp/tmpv9psq3yd.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpv9psq3yd.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpv9psq3yd.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpv9psq3yd.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\nadd_elements(arr, k)\n</cell>\n<text>\nQuestion 3\nWrite a Julia function\
    \ named two_digit_sum that takes an array of integers arr and an integer k and\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0l336o7x.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0l336o7x.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz3bq_e0_.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz3bq_e0_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz3bq_e0_.jl:25\ntest set: Test Failed at /tmp/tmpz3bq_e0_.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpz3bq_e0_.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz3bq_e0_.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz3bq_e0_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nProblem 3\nGiven a non-empty array\
    \ of integers arr, return a new array where each element is the product of all\
    \ the numbers in the original array except the one at index i.\nusing Test\n\n\
    @testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpom2lb1uk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpom2lb1uk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmboh1sd2.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmboh1sd2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmboh1sd2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 >\
    \ 2\n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx9yj0v5g.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx9yj0v5g.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 4\nWrite a Julia function called two_digit_sum that takes in an array\
    \ of integers arr and an integer k, and returns the sum of the elements with at\
    \ most two digits from the first k elements of arr.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeirpq1ws.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeirpq1ws.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 7\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, the function should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6zeakv0i.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6zeakv0i.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_mb3ljuz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_mb3ljuz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Problem 3\nGiven a non-empty array of integers arr, return a new array where each\
    \ element is the product of three consecutive elements arr[0], arr[1], and arr[2].\
    \ \nThe product of any three consecutive elements is the sum of the products of\
    \ those three consecutive elements.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdlu02jvz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdlu02jvz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nQuestion 3\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. \nFor example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the\
    \ function should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9o0bhc4_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9o0bhc4_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq1fsttpx.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq1fsttpx.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm5mhhsfs.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5mhhsfs.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5mhhsfs.jl:25\ntest set: Test Failed at /tmp/tmpm5mhhsfs.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpm5mhhsfs.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5mhhsfs.jl:25\ntest set: Test Failed at /tmp/tmpm5mhhsfs.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpm5mhhsfs.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5mhhsfs.jl:25\ntest set: Test Failed at /tmp/tmpm5mhhsfs.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpm5mhhsfs.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5mhhsfs.jl:25\ntest set: Test Failed at /tmp/tmpm5mhhsfs.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm5mhhsfs.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm5mhhsfs.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm5mhhsfs.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpezmmqk00.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpezmmqk00.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpezmmqk00.jl:25\ntest set: Test Failed at /tmp/tmpezmmqk00.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpezmmqk00.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpezmmqk00.jl:25\ntest set: Test Failed at /tmp/tmpezmmqk00.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpezmmqk00.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpezmmqk00.jl:25\ntest set: Test Failed at /tmp/tmpezmmqk00.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpezmmqk00.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpezmmqk00.jl:25\ntest set: Test Failed at /tmp/tmpezmmqk00.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpezmmqk00.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpezmmqk00.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpezmmqk00.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdn50vaet.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdn50vaet.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn50vaet.jl:25\ntest set: Test Failed at /tmp/tmpdn50vaet.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpdn50vaet.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn50vaet.jl:25\ntest set: Test Failed at /tmp/tmpdn50vaet.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpdn50vaet.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdn50vaet.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdn50vaet.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgp9uykwh.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgp9uykwh.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgp9uykwh.jl:25\ntest set: Test Failed at /tmp/tmpgp9uykwh.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpgp9uykwh.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgp9uykwh.jl:25\ntest set: Test Failed at /tmp/tmpgp9uykwh.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpgp9uykwh.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgp9uykwh.jl:25\ntest set: Test Failed at /tmp/tmpgp9uykwh.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpgp9uykwh.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgp9uykwh.jl:25\ntest set: Test Failed at /tmp/tmpgp9uykwh.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgp9uykwh.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgp9uykwh.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgp9uykwh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 4)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp15ryttj3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp15ryttj3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiqizzwqt.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiqizzwqt.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpby7n3fcv.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpby7n3fcv.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpby7n3fcv.jl:25\ntest set: Test Failed at /tmp/tmpby7n3fcv.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpby7n3fcv.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpby7n3fcv.jl:25\ntest set: Test Failed at /tmp/tmpby7n3fcv.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpby7n3fcv.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpby7n3fcv.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpby7n3fcv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 7: Write a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. You\
    \ may assume that arr is non-empty and k \u2264 len(arr).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpygh1f5d_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpygh1f5d_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp3kf_gnit.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3kf_gnit.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3kf_gnit.jl:25\ntest set: Test Failed at /tmp/tmp3kf_gnit.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp3kf_gnit.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3kf_gnit.jl:25\ntest set: Test Failed at /tmp/tmp3kf_gnit.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp3kf_gnit.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3kf_gnit.jl:25\ntest set: Test Failed at /tmp/tmp3kf_gnit.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp3kf_gnit.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3kf_gnit.jl:25\ntest set: Test Failed at /tmp/tmp3kf_gnit.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp3kf_gnit.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp3kf_gnit.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp3kf_gnit.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 4)\n</cell>\n<text>\nQuestion\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7twqz5go.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7twqz5go.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\nadd_elements(arr, k)\n</cell>\n<text>\nProblem 3\nGiven a non-empty array\
    \ of integers arr, return a new array where each element is the sum of the elements\
    \ with two digits in their decimal representation.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwmyp9w8_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwmyp9w8_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k+1:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nProblem 8\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph50oeck6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph50oeck6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu9i9jp2o.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu9i9jp2o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu9i9jp2o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp19do2xu2.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp19do2xu2.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19do2xu2.jl:25\ntest set: Test Failed at /tmp/tmp19do2xu2.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp19do2xu2.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19do2xu2.jl:25\ntest set: Test Failed at /tmp/tmp19do2xu2.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp19do2xu2.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19do2xu2.jl:25\ntest set: Test Failed at /tmp/tmp19do2xu2.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp19do2xu2.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19do2xu2.jl:25\ntest set: Test Failed at /tmp/tmp19do2xu2.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp19do2xu2.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp19do2xu2.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp19do2xu2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpesjik9iu.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpesjik9iu.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpesjik9iu.jl:25\ntest set: Test Failed at /tmp/tmpesjik9iu.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpesjik9iu.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpesjik9iu.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpesjik9iu.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpk8nkg6pz.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpk8nkg6pz.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk8nkg6pz.jl:25\ntest set: Test Failed at /tmp/tmpk8nkg6pz.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpk8nkg6pz.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpk8nkg6pz.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpk8nkg6pz.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubtract Elements\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3md79fxm.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3md79fxm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphhthdvmh.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphhthdvmh.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhthdvmh.jl:29\ntest set: Test Failed at /tmp/tmphhthdvmh.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmphhthdvmh.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphhthdvmh.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphhthdvmh.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpopgvp0bj.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpopgvp0bj.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpopgvp0bj.jl:25\ntest set: Test Failed at /tmp/tmpopgvp0bj.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpopgvp0bj.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpopgvp0bj.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpopgvp0bj.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 4)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9dnwznap.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9dnwznap.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n   \
    \ end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9gr15whi.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9gr15whi.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9gr15whi.jl:25\ntest set: Test Failed at /tmp/tmp9gr15whi.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp9gr15whi.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9gr15whi.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9gr15whi.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppinyisnc.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppinyisnc.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppinyisnc.jl:25\ntest set: Test Failed at /tmp/tmppinyisnc.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmppinyisnc.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppinyisnc.jl:25\ntest set: Test Failed at /tmp/tmppinyisnc.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmppinyisnc.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppinyisnc.jl:25\ntest set: Test Failed at /tmp/tmppinyisnc.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmppinyisnc.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppinyisnc.jl:25\ntest set: Test Failed at /tmp/tmppinyisnc.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppinyisnc.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppinyisnc.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppinyisnc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1br4tmw6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1br4tmw6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1br4tmw6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1rdel2hz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1rdel2hz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.4>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp22pnsafi.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp22pnsafi.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0azq1b1q.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0azq1b1q.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0azq1b1q.jl:25\ntest set: Test Failed at /tmp/tmp0azq1b1q.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp0azq1b1q.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0azq1b1q.jl:25\ntest set: Test Failed at /tmp/tmp0azq1b1q.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp0azq1b1q.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0azq1b1q.jl:25\ntest set: Test Failed at /tmp/tmp0azq1b1q.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp0azq1b1q.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0azq1b1q.jl:25\ntest set: Test Failed at /tmp/tmp0azq1b1q.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0azq1b1q.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0azq1b1q.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0azq1b1q.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nQuestion 7\nWrite a function that\
    \ returns the sum of the elements with at most two digits from the first k elements\
    \ of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, your function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf_km8by4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf_km8by4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmptx22k1oj.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmptx22k1oj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmptx22k1oj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        if el < 10\n\
    \            sum += el\n        else\n            sum += el - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Problem 7: Add Elements\nGiven a non-empty array of integers arr and an integer\
    \ k, return\nthe sum of the elements with at most two digits from the first k\
    \ elements of arr.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2wjylmok.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2wjylmok.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp64ve2qph.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp64ve2qph.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64ve2qph.jl:25\ntest set: Test Failed at /tmp/tmp64ve2qph.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp64ve2qph.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64ve2qph.jl:25\ntest set: Test Failed at /tmp/tmp64ve2qph.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp64ve2qph.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64ve2qph.jl:25\ntest set: Test Failed at /tmp/tmp64ve2qph.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp64ve2qph.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64ve2qph.jl:25\ntest set: Test Failed at /tmp/tmp64ve2qph.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp64ve2qph.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp64ve2qph.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp64ve2qph.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in 1:k \n            sum += arr[i] \n        return\
    \ sum \nend \n</cell>\n<text>\nSolution 3\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppaoh_g0x.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppaoh_g0x.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpn7u7z055.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn7u7z055.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn7u7z055.jl:25\ntest set: Test Failed at /tmp/tmpn7u7z055.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpn7u7z055.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn7u7z055.jl:25\ntest set: Test Failed at /tmp/tmpn7u7z055.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpn7u7z055.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn7u7z055.jl:25\ntest set: Test Failed at /tmp/tmpn7u7z055.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpn7u7z055.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn7u7z055.jl:25\ntest set: Test Failed at /tmp/tmpn7u7z055.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpn7u7z055.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpn7u7z055.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn7u7z055.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpocv0v96w.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpocv0v96w.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf9jatemx.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf9jatemx.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in 1:k \n            sum += arr[i] \n        return\
    \ sum + add_elements(arr[k+1:], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [111,21,3,4000,5,6,7,8,9]\nk = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr,\
    \ k)\n</cell>\n<text>\nProblem 8\nGiven a non-empty array of integers arr, return\
    \ a new array where each element is the sum of the elements with index less than\
    \ or equal to the given index.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"(k + 1):\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpzmtqcbdi.jl:21\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpzmtqcbdi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i = 1:k\n        sum += arr[i]\n   \
    \ end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 9\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5zyqptwu.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5zyqptwu.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    \n    sum = 0\n\
    \    for i = 1:k\n        sum += arr[i]\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\nk = 2\n</cell>\n<code\
    \ language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphxqss0c5.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphxqss0c5.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjz2cz4zc.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjz2cz4zc.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjz2cz4zc.jl:25\ntest set: Test Failed at /tmp/tmpjz2cz4zc.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpjz2cz4zc.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjz2cz4zc.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjz2cz4zc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 2:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nQuestion 4\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt4fin5rd.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt4fin5rd.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nQ8. Write a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. \nExample: arr = [111,21,3,4000,5,6,7,8,9], k = 4\nOutput: 24\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpao4hw7ys.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpao4hw7ys.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjjgm_xd.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjjgm_xd.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k \n            sum += arr[i] \n        end\n\
    \        return sum\n    end\nend\n</cell>\n<text>\nadd_elements(arr, k)\nThis\
    \ function will return the sum of the elements with at most two digits from the\
    \ first k elements of arr. \nThe function will throw an error if k is less than\
    \ 1 or greater than the number of elements in arr.\nusing Test\n\n@testset begin\n\
    \ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88,\
    \ 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpidwe02s4.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpidwe02s4.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptpg4kuch.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptpg4kuch.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc6jvnly4.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc6jvnly4.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6jvnly4.jl:25\ntest set: Test Failed at /tmp/tmpc6jvnly4.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpc6jvnly4.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6jvnly4.jl:25\ntest set: Test Failed at /tmp/tmpc6jvnly4.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpc6jvnly4.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc6jvnly4.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc6jvnly4.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpkavdyzel.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkavdyzel.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkavdyzel.jl:25\ntest set: Test Failed at /tmp/tmpkavdyzel.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpkavdyzel.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkavdyzel.jl:25\ntest set: Test Failed at /tmp/tmpkavdyzel.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpkavdyzel.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpkavdyzel.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkavdyzel.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_yri0exf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_yri0exf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp2gj1kzc2.jl:30\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 385 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2gj1kzc2.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2gj1kzc2.jl:29\ntest set: Test Failed at /tmp/tmp2gj1kzc2.jl:31\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4115\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp2gj1kzc2.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2gj1kzc2.jl:29\ntest set: Test Failed at /tmp/tmp2gj1kzc2.jl:32\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 115 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp2gj1kzc2.jl:32\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2gj1kzc2.jl:29\ntest set: Test Failed at /tmp/tmp2gj1kzc2.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4025 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp2gj1kzc2.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp2gj1kzc2.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gj1kzc2.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqt8je3zv.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqt8je3zv.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy6vicuvr.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy6vicuvr.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr[k:end]\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplez4j8vo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplez4j8vo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpamk0lyzt.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpamk0lyzt.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpamk0lyzt.jl:25\ntest set: Test Failed at /tmp/tmpamk0lyzt.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpamk0lyzt.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpamk0lyzt.jl:25\ntest set: Test Failed at /tmp/tmpamk0lyzt.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpamk0lyzt.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpamk0lyzt.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpamk0lyzt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpef5dlgol.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpef5dlgol.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpef5dlgol.jl:25\ntest set: Test Failed at /tmp/tmpef5dlgol.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpef5dlgol.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpef5dlgol.jl:25\ntest set: Test Failed at /tmp/tmpef5dlgol.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpef5dlgol.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpef5dlgol.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpef5dlgol.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplnyd89wh.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplnyd89wh.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnyd89wh.jl:25\ntest set: Test Failed at /tmp/tmplnyd89wh.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmplnyd89wh.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnyd89wh.jl:25\ntest set: Test Failed at /tmp/tmplnyd89wh.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmplnyd89wh.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplnyd89wh.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplnyd89wh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph6dbqknp.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph6dbqknp.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph6dbqknp.jl:25\ntest set: Test Failed at /tmp/tmph6dbqknp.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmph6dbqknp.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph6dbqknp.jl:25\ntest set: Test Failed at /tmp/tmph6dbqknp.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmph6dbqknp.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph6dbqknp.jl:25\ntest set: Test Failed at /tmp/tmph6dbqknp.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmph6dbqknp.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph6dbqknp.jl:25\ntest set: Test Failed at /tmp/tmph6dbqknp.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmph6dbqknp.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph6dbqknp.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph6dbqknp.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum = sum + arr[i]\n        end\n\
    \        return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp36m1ccxi.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp36m1ccxi.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp36m1ccxi.jl:29\ntest set: Test Failed at /tmp/tmp36m1ccxi.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp36m1ccxi.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp36m1ccxi.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp36m1ccxi.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg3j4e98h.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg3j4e98h.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpumuj64m_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpumuj64m_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1]\n    else \n      \
    \  sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8e9q0o9n.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8e9q0o9n.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8e9q0o9n.jl:29\ntest set: Test Failed at /tmp/tmp8e9q0o9n.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp8e9q0o9n.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8e9q0o9n.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8e9q0o9n.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjqjn163x.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjqjn163x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjqjn163x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i in arr[k:end] \n            sum += i \n        return\
    \ sum + arr[k] \nend\n</cell>\n<text>\nNow let's see how we call this function\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz8ea7wj_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8ea7wj_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 3\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function should\
    \ return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp81drlp7o.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp81drlp7o.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpp6uq1b5k.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp6uq1b5k.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp6uq1b5k.jl:25\ntest set: Test Failed at /tmp/tmpp6uq1b5k.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpp6uq1b5k.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp6uq1b5k.jl:25\ntest set: Test Failed at /tmp/tmpp6uq1b5k.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpp6uq1b5k.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpp6uq1b5k.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp6uq1b5k.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0 \n        for i = 2:k \n            sum += arr[i] \n        return\
    \ sum + arr[k-1] \nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"if\" at /tmp/tmpjq_hhz63.jl:15\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjq_hhz63.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjq_hhz63.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvknxhq4h.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvknxhq4h.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e % 10 + 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 3\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 7\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfurmr6mt.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfurmr6mt.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x % 10 ==\
    \ 0 \n            sum += x\n        end\n    end\n    return sum\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\nk = 2\nadd_elements(arr,\
    \ k)\n</cell>\n<text>\nProblem 7\nusing Test\n\n@testset begin\n\ncandidate =\
    \ add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf5opo0h.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkf5opo0h.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for n in arr[k+1:end]\n        sum += n\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 7: Write a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7ce47ao3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7ce47ao3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprl7tfkqh.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprl7tfkqh.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprl7tfkqh.jl:25\ntest set: Test Failed at /tmp/tmprl7tfkqh.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmprl7tfkqh.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprl7tfkqh.jl:25\ntest set: Test Failed at /tmp/tmprl7tfkqh.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmprl7tfkqh.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprl7tfkqh.jl:25\ntest set: Test Failed at /tmp/tmprl7tfkqh.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmprl7tfkqh.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprl7tfkqh.jl:25\ntest set: Test Failed at /tmp/tmprl7tfkqh.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprl7tfkqh.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprl7tfkqh.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprl7tfkqh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i in 1:k\n            sum += arr[i]\n        end\n  \
    \      return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmplt0wk25z.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplt0wk25z.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplt0wk25z.jl:29\ntest set: Test Failed at /tmp/tmplt0wk25z.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmplt0wk25z.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmplt0wk25z.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmplt0wk25z.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 2:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpve5ehily.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpve5ehily.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   sum = 0\n        for i = 1:k\n            sum += arr[i]\n        end\n   \
    \     return sum\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp72yhlr6m.jl:31\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp72yhlr6m.jl:31\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72yhlr6m.jl:29\ntest set: Test Failed at /tmp/tmp72yhlr6m.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp72yhlr6m.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp72yhlr6m.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp72yhlr6m.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.4>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.4>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4, your function should return 24.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbxdt5wp7.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbxdt5wp7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpza4sdx4b.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpza4sdx4b.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpza4sdx4b.jl:25\ntest set: Test Failed at /tmp/tmpza4sdx4b.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpza4sdx4b.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpza4sdx4b.jl:25\ntest set: Test Failed at /tmp/tmpza4sdx4b.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpza4sdx4b.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpza4sdx4b.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpza4sdx4b.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpwufvgxbs.jl:30\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 385 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwufvgxbs.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwufvgxbs.jl:29\ntest set: Test Failed at /tmp/tmpwufvgxbs.jl:31\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4115\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpwufvgxbs.jl:31\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwufvgxbs.jl:29\ntest set: Test Failed at /tmp/tmpwufvgxbs.jl:32\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 115 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpwufvgxbs.jl:32\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwufvgxbs.jl:29\ntest set: Test Failed at /tmp/tmpwufvgxbs.jl:33\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4025 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpwufvgxbs.jl:33\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpwufvgxbs.jl:29\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwufvgxbs.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeuayw083.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeuayw083.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuayw083.jl:25\ntest set: Test Failed at /tmp/tmpeuayw083.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpeuayw083.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuayw083.jl:25\ntest set: Test Failed at /tmp/tmpeuayw083.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpeuayw083.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuayw083.jl:25\ntest set: Test Failed at /tmp/tmpeuayw083.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpeuayw083.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuayw083.jl:25\ntest set: Test Failed at /tmp/tmpeuayw083.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpeuayw083.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeuayw083.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeuayw083.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nProblem 3\nGiven a non-empty array of integers\
    \ arr, return a new array where each element is the sum of the elements with two\
    \ digits from the original array arr.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp35klyaqa.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp35klyaqa.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp54jx8wy0.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp54jx8wy0.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54jx8wy0.jl:25\ntest set: Test Failed at /tmp/tmp54jx8wy0.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp54jx8wy0.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54jx8wy0.jl:25\ntest set: Test Failed at /tmp/tmp54jx8wy0.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp54jx8wy0.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp54jx8wy0.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp54jx8wy0.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqr2bld40.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqr2bld40.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4osc_c6q.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4osc_c6q.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4osc_c6q.jl:25\ntest set: Test Failed at /tmp/tmp4osc_c6q.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp4osc_c6q.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4osc_c6q.jl:25\ntest set: Test Failed at /tmp/tmp4osc_c6q.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp4osc_c6q.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4osc_c6q.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4osc_c6q.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9hp_1v40.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9hp_1v40.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9hp_1v40.jl:25\ntest set: Test Failed at /tmp/tmp9hp_1v40.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmp9hp_1v40.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9hp_1v40.jl:25\ntest set: Test Failed at /tmp/tmp9hp_1v40.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmp9hp_1v40.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9hp_1v40.jl:25\ntest set: Test Failed at /tmp/tmp9hp_1v40.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp9hp_1v40.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9hp_1v40.jl:25\ntest set: Test Failed at /tmp/tmp9hp_1v40.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9hp_1v40.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9hp_1v40.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9hp_1v40.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphasudjxk.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphasudjxk.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphasudjxk.jl:25\ntest set: Test Failed at /tmp/tmphasudjxk.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmphasudjxk.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphasudjxk.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphasudjxk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj1zz8n3j.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj1zz8n3j.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1zz8n3j.jl:25\ntest set: Test Failed at /tmp/tmpj1zz8n3j.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpj1zz8n3j.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1zz8n3j.jl:25\ntest set: Test Failed at /tmp/tmpj1zz8n3j.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpj1zz8n3j.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1zz8n3j.jl:25\ntest set: Test Failed at /tmp/tmpj1zz8n3j.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpj1zz8n3j.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1zz8n3j.jl:25\ntest set: Test Failed at /tmp/tmpj1zz8n3j.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpj1zz8n3j.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj1zz8n3j.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj1zz8n3j.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpba6s3wlr.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpba6s3wlr.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba6s3wlr.jl:25\ntest set: Test Failed at /tmp/tmpba6s3wlr.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpba6s3wlr.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba6s3wlr.jl:25\ntest set: Test Failed at /tmp/tmpba6s3wlr.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpba6s3wlr.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba6s3wlr.jl:25\ntest set: Test Failed at /tmp/tmpba6s3wlr.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpba6s3wlr.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba6s3wlr.jl:25\ntest set: Test Failed at /tmp/tmpba6s3wlr.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpba6s3wlr.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpba6s3wlr.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpba6s3wlr.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 7\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsl9j99ak.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsl9j99ak.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    </cell>\n<code language=julia-1.5>\nadd_elements(arr, 4)\n</cell>\n<text>\nProblem\
    \ 3\nGiven a non-empty array of integers arr, return a new array where each element\
    \ is the sum of the elements with index less than or equal to the given index.\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv5fpue8w.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv5fpue8w.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp30y406pg.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp30y406pg.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5jjzh7jj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5jjzh7jj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpz1uxmzvf.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpz1uxmzvf.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1uxmzvf.jl:25\ntest set: Test Failed at /tmp/tmpz1uxmzvf.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpz1uxmzvf.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpz1uxmzvf.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpz1uxmzvf.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 2.2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, the function should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqxb4qdlb.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqxb4qdlb.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxd2wez67.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxd2wez67.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd2wez67.jl:25\ntest set: Test Failed at /tmp/tmpxd2wez67.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpxd2wez67.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd2wez67.jl:25\ntest set: Test Failed at /tmp/tmpxd2wez67.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpxd2wez67.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd2wez67.jl:25\ntest set: Test Failed at /tmp/tmpxd2wez67.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpxd2wez67.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd2wez67.jl:25\ntest set: Test Failed at /tmp/tmpxd2wez67.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxd2wez67.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxd2wez67.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxd2wez67.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nSolution\nLet's see how we would\
    \ implement this function in Julia:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppv92lxx5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppv92lxx5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa5w1lie1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa5w1lie1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp90oxsok_.jl:27\n  Expression: candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 232 == 0\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp90oxsok_.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp90oxsok_.jl:25\ntest set: Test Failed at /tmp/tmp90oxsok_.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4135 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmp90oxsok_.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp90oxsok_.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    3     2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 3 passed, 2 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp90oxsok_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpczs0fukw.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpczs0fukw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpczs0fukw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nSolution 3\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp40itg_3.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp40itg_3.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nQuestion 5\nWrite a function that takes\
    \ in an array of integers and an integer k and returns the sum of the elements\
    \ with at most two digits from the first k elements of arr. For example, if arr\
    \ = [111,21,3,4000,5,6,7,8,9] and k = 4, the function should return 24. Your function\
    \ should return an Int64.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyivn1ej_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyivn1ej_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        if e < 10\n\
    \            sum += e\n        else\n            sum += e % 10 + 10 * (e // 10)\n\
    \        end\n    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert add_elements([111,21,3,4000,5,6,7,8,9], 4) == 24\n</cell>\n<text>\nQuestion\
    \ 3\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, if arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4, then the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq6x4fo1q.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq6x4fo1q.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111,21,3,4000,5,6,7,8,9] and k = 4, the function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3kmb1rxo.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3kmb1rxo.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41,\
    \ 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6],\
    \ 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ktj8jpp.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ktj8jpp.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Question 3\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. \nFor example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfgs0d3hi.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfgs0d3hi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpltyyew69.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpltyyew69.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltyyew69.jl:25\ntest set: Test Failed at /tmp/tmpltyyew69.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpltyyew69.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltyyew69.jl:25\ntest set: Test Failed at /tmp/tmpltyyew69.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpltyyew69.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltyyew69.jl:25\ntest set: Test Failed at /tmp/tmpltyyew69.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpltyyew69.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltyyew69.jl:25\ntest set: Test Failed at /tmp/tmpltyyew69.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpltyyew69.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpltyyew69.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpltyyew69.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpw5svmwfv.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw5svmwfv.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw5svmwfv.jl:25\ntest set: Test Failed at /tmp/tmpw5svmwfv.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpw5svmwfv.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw5svmwfv.jl:25\ntest set: Test Failed at /tmp/tmpw5svmwfv.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpw5svmwfv.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw5svmwfv.jl:25\ntest set: Test Failed at /tmp/tmpw5svmwfv.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpw5svmwfv.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw5svmwfv.jl:25\ntest set: Test Failed at /tmp/tmpw5svmwfv.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpw5svmwfv.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpw5svmwfv.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw5svmwfv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmppmd0b3ml.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppmd0b3ml.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmd0b3ml.jl:25\ntest set: Test Failed at /tmp/tmppmd0b3ml.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmppmd0b3ml.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmd0b3ml.jl:25\ntest set: Test Failed at /tmp/tmppmd0b3ml.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmppmd0b3ml.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmd0b3ml.jl:25\ntest set: Test Failed at /tmp/tmppmd0b3ml.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmppmd0b3ml.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmd0b3ml.jl:25\ntest set: Test Failed at /tmp/tmppmd0b3ml.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmppmd0b3ml.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmppmd0b3ml.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppmd0b3ml.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nProblem 7: Find all elements with at most\
    \ two digits from the first k elements of arr\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpak1xdxi4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpak1xdxi4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the sum of the elements with at most\
    \ two digits from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsy7i5g_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsy7i5g_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp555y_18m.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp555y_18m.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    add_elements(arr, 4)\n</cell>\n<text>\nQuestion 7\nWrite a function that returns\
    \ the sum of the elements with at most two digits from the first k elements of\
    \ arr. For example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, your function\
    \ should return 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqyayubgk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqyayubgk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf4ks0zc7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf4ks0zc7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for i in 1:k\n        sum += arr[i]\n  \
    \  end\n    return sum\nend\n</cell>\n<text>\nadd_elements(arr, k)\n</cell>\n\
    <text>\nSolution 2\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3i4bhxiz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3i4bhxiz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nQuestion 4.2\nWrite a function that returns the sum\
    \ of the elements with at most two digits from the first k elements of arr. For\
    \ example, given arr = [111,21,3,4000,5,6,7,8,9], k = 4, the function should return\
    \ 24.\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\t@test(candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3,\
    \ 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4)\
    \ == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t\
    @test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7f30on44.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7f30on44.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpxjf4xgw1.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxjf4xgw1.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxjf4xgw1.jl:25\ntest set: Test Failed at /tmp/tmpxjf4xgw1.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpxjf4xgw1.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxjf4xgw1.jl:25\ntest set: Test Failed at /tmp/tmpxjf4xgw1.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpxjf4xgw1.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxjf4xgw1.jl:25\ntest set: Test Failed at /tmp/tmpxjf4xgw1.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpxjf4xgw1.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxjf4xgw1.jl:25\ntest set: Test Failed at /tmp/tmpxjf4xgw1.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpxjf4xgw1.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpxjf4xgw1.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxjf4xgw1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[2:k], k-1) \nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76,\
    \ 87, 88, 99], 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\
    \t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111,\
    \ 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpecenbod6.jl:14\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpecenbod6.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpecenbod6.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k+1:end]\n        sum += e\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\narr = [111,21,3,4000,5,6,7,8,9]\n\
    k = 2\n</cell>\n<code language=julia-1.5>\nadd_elements(arr, k)\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqxovemdn.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqxovemdn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        sum += x\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcwr5ngra.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 448 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcwr5ngra.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcwr5ngra.jl:25\ntest set: Test Failed at /tmp/tmpcwr5ngra.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4014\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpcwr5ngra.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcwr5ngra.jl:25\ntest set: Test Failed at /tmp/tmpcwr5ngra.jl:28\n\
    \  Expression: candidate([11, 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125\n   Evaluated:\
    \ 35 == 125\nStacktrace:\n [1] top-level scope at /tmp/tmpcwr5ngra.jl:28\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcwr5ngra.jl:25\ntest set: Test Failed at /tmp/tmpcwr5ngra.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 35 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpcwr5ngra.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcwr5ngra.jl:25\ntest set: Test Failed at /tmp/tmpcwr5ngra.jl:30\n\
    \  Expression: candidate([1], 1) == 1\n   Evaluated: 0 == 1\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcwr5ngra.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcwr5ngra.jl:25\nTest Summary: | Fail  Total\n\
    test set      |    5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcwr5ngra.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for el in arr[k:end]\n        sum += el\n\
    \    end\n    return sum\nend\n</cell>\n<text>\nSolution\nLet's see how we would\
    \ implement this function in Julia:\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvsouneuc.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvsouneuc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for e in arr[k:end]\n        sum += e\n\
    \    end\n    return sum\nend\nusing Test\n\n@testset begin\n\ncandidate = add_elements;\n\
    \t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4)\n\t@test(candidate([111,\
    \ 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11, 21, 3, 90, 5, 6, 7, 8,\
    \ 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24)\n\
    \t@test(candidate([1], 1) == 1)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpan6uewfl.jl:26\n  Expression: candidate([1,\
    \ -2, -3, 41, 57, 76, 87, 88, 99], 3) == -4\n   Evaluated: 445 == -4\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpan6uewfl.jl:26\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpan6uewfl.jl:25\ntest set: Test Failed at /tmp/tmpan6uewfl.jl:27\n\
    \  Expression: candidate([111, 121, 3, 4000, 5, 6], 2) == 0\n   Evaluated: 4135\
    \ == 0\nStacktrace:\n [1] top-level scope at /tmp/tmpan6uewfl.jl:27\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpan6uewfl.jl:25\ntest set: Test Failed at /tmp/tmpan6uewfl.jl:29\n\
    \  Expression: candidate([111, 21, 3, 4000, 5, 6, 7, 8, 9], 4) == 24\n   Evaluated:\
    \ 4035 == 24\nStacktrace:\n [1] top-level scope at /tmp/tmpan6uewfl.jl:29\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpan6uewfl.jl:25\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpan6uewfl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    if k == 0 \n        return arr[1] \n    else \n     \
    \   return arr[1] + add_elements(arr[k+1:end], k-1)\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [111,21,3,4000,5,6,7,8,9]\nadd_elements(arr, 4)\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that returns the sum of the elements with at most two digits\
    \ from the first k elements of arr. For example, given arr = [111,21,3,4000,5,6,7,8,9]\
    \ and k = 4, the function should return 24.\nusing Test\n\n@testset begin\n\n\
    candidate = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99],\
    \ 3) == -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpon6q1k1t.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpon6q1k1t.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Given a non-empty array of integers arr and an integer k,\
    \ return\n    the sum of the elements with at most two digits from the first k\
    \ elements of arr.\n\n    Example:\n\n        Input: arr = [111,21,3,4000,5,6,7,8,9],\
    \ k = 4\n        Output: 24 # sum of 21 + 3\n\n    Constraints:\n        1. 1\
    \ <= len(arr) <= 100\n        2. 1 <= k <= len(arr)\n    \"\"\"\nfunction add_elements(arr::Vector{Int64},\
    \ k::Int64)::Int64 \n    sum = 0\n    for x in arr[k+1:end]\n        if x < 10\n\
    \            sum += x\n        else\n            sum += x - 10\n        end\n\
    \    end\n    return sum\nend\n</cell>\n<code language=julia-1.5>\n@assert add_elements([111,21,3,4000,5,6,7,8,9],\
    \ 4) == 24\n</cell>\n<text>\nSubsets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = add_elements;\n\t@test(candidate([1, -2, -3, 41, 57, 76, 87, 88, 99], 3) ==\
    \ -4)\n\t@test(candidate([111, 121, 3, 4000, 5, 6], 2) == 0)\n\t@test(candidate([11,\
    \ 21, 3, 90, 5, 6, 7, 8, 9], 4) == 125)\n\t@test(candidate([111, 21, 3, 4000,\
    \ 5, 6, 7, 8, 9], 4) == 24)\n\t@test(candidate([1], 1) == 1)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdgaaqmee.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdgaaqmee.jl:25\n"
  exit_code: 1
  status: Exception
