name: HumanEval_136_largest_smallest_integers
language: julia
results:
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns a tuple (a, b),\
    \ where 'a' is the largest of positive integers, and 'b' is the smallest of negative\
    \ integers in a list.\nIf there is no negative or positive integers, return them\
    \ as None.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy82xzqwt.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy82xzqwt.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    else\n        (a, b) = (max(lst), min(lst))\n    end\n\
    \    return (a, b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ihe42en.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ihe42en.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\
    \ \n        return None, None\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_m3847rl.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_m3847rl.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ called largest_smallest_integers_list that takes a list of integers and returns\
    \ the largest and smallest integers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_1vvmx3.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu_1vvmx3.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([2, 4, 1, 3,\
    \ 5, 7])\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.3>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of positive integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr5dd2ji7.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr5dd2ji7.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and a number\
    \ as input, and returns the number of times the number appears in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5gx_vugs.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5gx_vugs.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjaa2r_y.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjaa2r_y.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers in the list.\
    \ \nIf there are no numbers in the list, return 0.\nIf there are multiple numbers\
    \ in the list, return the sum of the numbers in the list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl9avsnei.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl9avsnei.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_g86z130.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_g86z130.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsau4qz0o.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsau4qz0o.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns a list of all numbers from 1 to n that are divisible by 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4dzvln_v.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4dzvln_v.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    else\n        largest = minimum(el for el in lst\
    \ if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n       \
    \ return largest, smallest\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpirrh8npk.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpirrh8npk.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a vector of integers and returns a vector of booleans\
    \ indicating whether each integer is even or odd.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdj21xx42.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdj21xx42.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxab2qs7a.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxab2qs7a.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (None, None)\n\
    \    elseif lst == [0]\n        return (None, None)\n    elseif lst == [-i for\
    \ i in lst]\n        return (None, -min(lst))\n    else\n        largest = maximum(lst,\
    \ key=abs)\n        smallest = minimum(lst, key=abs)\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<text>\nlargest_smallest_integers\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptmdrpxvz.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptmdrpxvz.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the largest and smallest numbers in a list.\nIf there are no numbers\
    \ in the list, return (None, None).\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6lts5zup.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6lts5zup.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return (None, None)\n\
    \    elseif lst == [Int64(0)]\n        return (None, None)\n    elseif lst ==\
    \ [Int64(-1)]\n        return (Int64(-1), Int64(0))\n    elseif lst == [Int64(1)]\n\
    \        return (Int64(1), Int64(0))\n    elseif lst == [Int64(-2)]\n        return\
    \ (Int64(-2), Int64(0))\n    elseif lst == [Int64(-3)]\n        return (Int64(-3),\
    \ Int64(0))\n    elseif lst == [Int64(-4)]\n        return (Int64(-4), Int64(0))\n\
    \    elseif lst == [Int64(-5)]\n        return (Int64(-5), Int64(0))\n    elseif\
    \ lst == [Int64(-6)]\n        return (Int64(-6), Int64(0))\n    elseif lst ==\
    \ [Int64(-7)]\n        return (Int64(-7), Int64(0))\n    elseif lst == [Int64(-8)]\n\
    \        return (Int64(-8), Int64(0))\n    elseif lst == [Int64(-9)]\n       \
    \ return (Int64(-9), Int64(0))\n    elseif lst == [Int64(-10)]\n        return\
    \ (Int64(-10), Int64(0))\n    elseif lst == [Int64(-11)]\n        return (Int64(-11),\
    \ Int64(0))\n    elseif lst == [Int64(-12)]\n        return (Int64(-12), Int64(0))\n\
    \    elseif lst == [Int64(-13)]\n        return (Int64(-13), Int64(0))\n    elseif\
    \ lst == [Int64(-14)]\n        return (Int64(-14), Int64(0))\n    elseif lst ==\
    \ [Int64(-15)]\n        return (Int64(-15), Int64(0))\n    elseif lst == [Int64(-16)]\n\
    \        return (Int64(-16), Int64(0))\n    elseif lst == [Int64(-17)]\n     \
    \   return (Int64(-17), Int64(0))\n    elseif lst == [Int64(-18)]\n        return\
    \ (Int64(-18), Int64(0))\n    elseif lst == [Int64(-19)]\n        return (Int64(-19),\
    \ Int64(0))\n    elseif lst == [Int64(-20)]\n        return (Int64(-20), Int64(0))\n\
    \    elseif lst == [Int64(-21)]\n        return (Int64(-21), Int64(0))\n    elseif\
    \ lst == [Int64(-22)]\n        return (Int64(-22), Int64(0))\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq9nayji9.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq9nayji9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list of numbers\
    \ and returns the sum of the numbers in the list. \nIf the list is empty, return\
    \ 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf88m1nux.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf88m1nux.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif all(x -> x < 0, lst) \n        return (None, lst[1])\n    elseif all(x\
    \ -> x > 0, lst) \n        return (lst[1], None)\n    else\n        largest =\
    \ maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp42dtdc5r.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp42dtdc5r.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptm1v4z21.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptm1v4z21.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns a new vector where each element\
    \ is the sum of the original vector except for the first and last elements. For\
    \ example,\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp03v5wagc.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp03v5wagc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp19_hmu85.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp19_hmu85.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuotcz4w5.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuotcz4w5.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the largest and smallest numbers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5giq8bq3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5giq8bq3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_three\n        return\
    \ (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n        return (lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_six\n        return\
    \ (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif\
    \ lst.is_seven\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last)\n    elseif lst.is_eight\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_nine\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_eleven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n\
    \    elseif lst.is_twelve\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_thirteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_fourteen\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_fifteen\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp24zhgbgf.jl:45\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp24zhgbgf.jl:45\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (0, 0)\n\
    \    else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ a number as input, and returns the number of times the number appears in the\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpylanr5ge.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpylanr5ge.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<code language=julia-1.3>\nlargest_smallest_integers([2, 4,\
    \ 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of positive integers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp36wj_tea.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp36wj_tea.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns a list of all the prime numbers less than or equal\
    \ to a given number.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuem2un7a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuem2un7a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg4052zba.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg4052zba.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2\n        return (lst[1], lst[1])\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpujhwjkl5.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpujhwjkl5.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns a vector where each element\
    \ is the sum of the squares of the elements in the original vector. For example,\
    \ square_sum([1, 2, 3, 4]) should return [4, 9, 16, 25].\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpep58pawo.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpep58pawo.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx_q47oby.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx_q47oby.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the largest and smallest integers in the vector. \n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nWrite a function that takes a vector\
    \ of integers and returns the largest and smallest integers in the vector. \n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector. \nWrite a function that takes a vector of integers and returns\
    \ the product of the integers in the vector. \nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsb8n_h0l.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsb8n_h0l.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, Nothing)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (Nothing,\
    \ None)\n    else\n        (a, b) = (min(lst), max(lst))\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3wwq6u9f.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3wwq6u9f.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if\
    \ largest < smallest \n        return largest, smallest\n    else\n        return\
    \ None, None\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\
    \ Test it on $[-10, -9, -8, -7, -6, -5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5, 6, 7,\
    \ 8, 9]$.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppb2yzfbd.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppb2yzfbd.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of times a value appears in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbhiikeni.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbhiikeni.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector and a number as input, and returns the\
    \ sum of the numbers in the vector that are less than or equal to the given number.\
    \ For example, if the input vector is [4, 6, 3, 9] and you call the function with\
    \ 7 as input, the output should be 5.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm3v00c1t.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm3v00c1t.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        return None, None\n\
    \    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    if largest\
    \ < smallest\n        return largest, smallest\n    else\n        return None,\
    \ None\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdsitbkz.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptdsitbkz.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwqv3upkv.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwqv3upkv.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2k_1j0jv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2k_1j0jv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x >= 0))\n    elseif all(x >= 0 for x in lst)\n\
    \        return (min(x for x in lst if x < 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv_12s1ry.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv_12s1ry.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6nc7w2o0.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6nc7w2o0.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called largest_smallest_integers_list\
    \ that takes a list of integers and returns the largest and smallest integers\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsx68gg_e.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsx68gg_e.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x >= 0))\n    elseif all(x > 0 for x in lst)\n\
    \        return (min(x for x in lst if x <= 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6586_t2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6586_t2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst, None)\n\
    \    else\n        (a, b) = sort(lst)\n    end\n    return (a, b)\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([0])\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the largest and smallest integers in a vector, where 'a' is the largest\
    \ of negative integers, and 'b' is the smallest of positive integers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplncn37p8.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplncn37p8.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the largest and smallest numbers in a list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprsu9qnhj.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprsu9qnhj.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite\
    \ a function that takes a vector as input and returns a vector where each element\
    \ is the sum of the squares of the elements in the input vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqnielpa4.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqnielpa4.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2gqlf1_b.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2gqlf1_b.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return min(lst), None\n    else\n        smallest,\
    \ largest = lst[1], lst[1]\n        for i in 2:length(lst)\n            if lst[i]\
    \ < smallest \n                largest = lst[i]\n            elseif lst[i] > largest\
    \ \n                smallest = lst[i]\n            else\n                break\n\
    \        end\n        return (smallest, largest)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbapp354h.jl:34\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbapp354h.jl:34\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    elseif lst.is_universe\n        largest = minimum(lst)\n        smallest\
    \ = maximum(lst)\n        return largest, smallest\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ sum of the integers in a list.\nIf there are no integers, return 0.\nIf there\
    \ are multiple integers, return only the largest one.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn_tv4rdk.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn_tv4rdk.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a vector and\
    \ returns the sum of the squares of the elements of the vector. Test it on $[1,2,3]$\
    \ and $[2,3,4]$.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdj0432on.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdj0432on.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ integers in a list that are\nevenly divisible by 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxxan4xer.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxxan4xer.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest, smallest = largest_smallest_integers(lst[2:end])\n  \
    \      return (largest, smallest)\n    elseif length(lst) == 1 \n        return\
    \ (lst[1], lst[1])\n    else\n        return (None, None)\n    end\nend\n</cell>\n\
    <text>\nExercise 4\nWrite a function that takes a vector of integers and returns\
    \ the sum of the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjzn82ghd.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjzn82ghd.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    \n    largest = minimum(el for el in lst if el\
    \ < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise\nWrite a function called largest_smallest_integers_2\
    \ that returns a tuple (a, b), where 'a' is the largest of negative integers,\
    \ and 'b' is the smallest of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy9zdrj_t.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy9zdrj_t.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the largest and smallest numbers in a list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2rbjlpr0.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2rbjlpr0.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ called largest_smallest_integers_2 that returns the largest and smallest integers\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpug3l0caf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpug3l0caf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (min(lst),\
    \ max(lst))\n    else\n        (a, b) = (None, None)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the sum of the absolute values of the elements in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdi2_ltm6.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdi2_ltm6.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6x_secei.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6x_secei.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers squared.\
    \ \nFor example, if the input vector is [4, 6, 2, 9, 11], your function should\
    \ return 52.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp63eihsnj.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp63eihsnj.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the sum of the integers in the vector. \nIf the vector is empty,\
    \ return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcpnakra_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcpnakra_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of times a given element appears in a given\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe4t7em5w.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe4t7em5w.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the squares of\
    \ the elements in the vector. \nWrite a function that takes a vector and returns\
    \ the sum of the squares of the elements in the vector. \nWrite a function that\
    \ takes a vector and returns the sum of the squares of the elements in the vector.\
    \ \nWrite a function that takes a vector and returns the sum of the \nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpedzqdv60.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpedzqdv60.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a vector and returns the sum of the absolute values of\
    \ the elements of the vector. \nFor example, if the vector is [3, -4, 2, -5, 6,\
    \ -7, 8], the function should return 15.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxed619k2.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxed619k2.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    \n    largest = minimum(el for el in\
    \ lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns a vector of integers representing the number\
    \ of times each integer appears in the vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp406oluli.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp406oluli.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(isnothing(el) for el in lst[1 : (end-1)])\n\
    \        return lst[1], None\n    elseif all(isnothing(el) for el in lst[1 : end])\n\
    \        return lst[1], lst[1]\n    else\n        largest, smallest = lst[1],\
    \ lst[1]\n        for el in lst[2:end]\n            if el > largest\n        \
    \        largest = el\n            elseif el < smallest\n                smallest\
    \ = el\n            else\n                break\n        end\n        return (largest,\
    \ smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2r52lovo.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2r52lovo.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the number of times a value appears in a list.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu8oy6cz6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu8oy6cz6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the number of positive integers in a list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnr8fi66k.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnr8fi66k.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(isnothing(el) for el in lst)\n  \
    \      return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2xqn4e8a.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2xqn4e8a.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the sum of the absolute values of the elements of the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk42chlpt.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk42chlpt.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that returns the number of times a given value appears in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rkrdury.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_rkrdury.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 4\nWrite a function that returns\
    \ the number of integers in a list that are\nless than a given value.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpylebtuat.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpylebtuat.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, min(lst))\n    elseif all(x -> x\
    \ > 0, lst)\n        return (min(lst), None)\n    else\n        smallest = min(lst)\n\
    \        largest = max(lst)\n        return (largest, smallest)\n    end\nend\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of positive\
    \ integers in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpldpfwwj3.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpldpfwwj3.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and\
    \ returns the number of elements that are not equal to zero.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzf9oe92_.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzf9oe92_.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\
    \ Test it on some test cases.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5y07vsnf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5y07vsnf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return max(lst), None\n    else \n       \
    \ return max(lst), min(lst)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector and returns the sum of the elements in the vector.\
    \ \nIf there are no elements in the vector, return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpogr5lg8i.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpogr5lg8i.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements of the vector.\
    \ \nFor example, \n    sum([1, 2, 3])\nshould return 6.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1wxuzlqc.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1wxuzlqc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\
    \ \n        return None, None\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptucln413.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptucln413.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(isnothing(el) for el in lst[1 : (end-1)])\n\
    \        return None, lst[end]\n    else\n        largest = minimum(lst[1 : (end-1)])\n\
    \        smallest = maximum(lst[1 : (end-1)])\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector. For\
    \ example,\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptxvf9s1i.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptxvf9s1i.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk5i3gvdb.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk5i3gvdb.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    largest, smallest = lst.minmax_element()\n    if largest < 0\n   \
    \     return None, None\n    if smallest > 0\n        return largest, smallest\n\
    \    return largest, None\nend\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp482lmvnf.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp482lmvnf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers. If the list\
    \ is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgz69nl8g.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgz69nl8g.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(isnothing(el) for el in lst)\n    \
    \    return None, None\n    elseif all(el < 0 for el in lst)\n        return None,\
    \ min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n    \
    \    return max(el for el in lst if el > 0), None\n    else\n        return max(el\
    \ for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,functional-programming |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg75zevks.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg75zevks.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n    \
    \    return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of integers and returns the sum of the absolute values of\
    \ the integers in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzkv900y.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzkv900y.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2dqwt2ed.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2dqwt2ed.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector. For example,\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi9r9j2gg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi9r9j2gg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of numbers and returns the sum of the numbers. If the list\
    \ is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzg966v0t.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzg966v0t.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x > 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x < 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 2\nWrite a function called largest_positive_integers which takes\
    \ a vector of integers and returns the largest positive integer in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0aa19pu6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0aa19pu6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (), ()\n    \n    largest, smallest = Inf, -Inf\n    for i in lst\n        if\
    \ i < smallest\n            smallest = i\n        elseif i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest, smallest\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcqxr1fuz.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcqxr1fuz.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the elements in the vector. \nIf\
    \ there are no elements in the vector, return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4bq5k81t.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4bq5k81t.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(lst))\n        return\
    \ None, None\n    elseif all(isnothing(lst[1:end-1]))\n        return lst[1],\
    \ None\n    elseif all(isnothing(lst[2:end]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1],\
    \ lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n\
    \    elseif all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif\
    \ all(isnothing(lst[2:end-1]))\n        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n\
    \        return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n    \
    \    return lst[1], lst[2]\n    elseif all(isnothing(lst[2:end-1]))\n        return\
    \ lst[1], lst[2]\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpod5f3lhi.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpod5f3lhi.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    largest = minimum(el for el in lst if\
    \ el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgzyg7ork.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgzyg7ork.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    else\n  \
    \      largest = lst.last\n        smallest = lst.first\n        for elt in lst[2:end]\n\
    \            if elt > largest\n                largest = elt\n            elseif\
    \ elt < smallest\n                smallest = elt\n            end\n        end\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a vector and returns the sum of the absolute values\
    \ of the elements in the vector.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprupum7nd.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprupum7nd.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphzqv8_w3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphzqv8_w3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<text>\nExercise\nWrite a function that\
    \ takes a vector of integers and returns the sum of the squares of the integers\
    \ in the vector. Test it on $[1,2,3]$.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpha1od6ty.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpha1od6ty.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector. For example, square_of_sums([1,\
    \ 2, 3, 4]) should return [4, 9, 16, 25].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwgf9yop6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwgf9yop6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_three\n        return\
    \ (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n        return (lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_six\n        return\
    \ (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif\
    \ lst.is_seven\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last)\n    elseif lst.is_eight\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_nine\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_eleven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n\
    \    elseif lst.is_twelve\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_thirteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first)\n    elseif lst.is_fourteen\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_fifteen\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpex638n85.jl:45\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpex638n85.jl:45\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the number of positive integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaiuzbzck.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaiuzbzck.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ nothing, nothing \n    else \n        largest = minimum(lst) \n        smallest\
    \ = maximum(lst) \n        return largest, smallest \nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of integers and returns a vector of\
    \ integers containing the first n integers of the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb_lhs4cw.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb_lhs4cw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ called largest_smallest_integers_2 that takes a list of numbers and returns\
    \ the largest and smallest numbers in the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgswf0lf7.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgswf0lf7.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function called largest_smallest_integers_2\
    \ that returns two numbers, a and b, such that a\nis the largest of negative integers,\
    \ and b is the smallest of positive integers in a list.\nIf there is no negative\
    \ or positive integers, return them as None.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6k0et443.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6k0et443.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a list that are\nless than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp99caxra5.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp99caxra5.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, lst[0])\n    elseif all(x -> x >\
    \ 0, lst)\n        return (lst[-1], None)\n    else\n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list as an argument\
    \ and returns a list where all negative numbers are replaced by 0s, and all positive\
    \ numbers are replaced by 1s.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppk9r1z8g.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppk9r1z8g.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0mg0_342.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0mg0_342.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of elements in a list that are\nless than a given value.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa1v6o59s.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa1v6o59s.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector. \nFor example, \n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1,\
    \ 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n   \
    \ abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3])\
    \ == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1,\
    \ 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n   \
    \ abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2])\
    \ == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1,\
    \ -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n   \
    \ abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3])\
    \ == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1,\
    \ 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n   \
    \ abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1, 2, -3])\
    \ == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n    abs_sum([-1,\
    \ 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2]) == 3\n   \
    \ abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1, -2])\
    \ == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n    abs_sum([-1,\
    \ -2]) == 3\n    abs_sum([-1, 2, -3]) == 5\n    abs_sum([-1, 2, 3]) == 5\n   \
    \ abs_sum([-1, -2]) == \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5wsg25fo.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5wsg25fo.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the numbers in the vector.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbjw62z4w.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbjw62z4w.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns a vector of integers where the integers are the\
    \ sum of the integers in the original vector, except for those integers that are\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbxv1tfpv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbxv1tfpv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a list of numbers and returns the sum of the numbers in the list. \nIf there\
    \ are no numbers in the list, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_5mtaa3a.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_5mtaa3a.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv3ketbf5.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv3ketbf5.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst == []\n        (a, b) = (None,\
    \ None)\n    else\n        (a, b) = maximum(lst, lt=lt), minimum(lst, lt=lt)\n\
    \    end\n    return (a, b)\nend\n</cell>\n<text>\nlargest_smallest_integers_v2\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv6g9sq08.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv6g9sq08.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    elseif lst.head < 0\n        return None, lst.head\n    elseif lst.head\
    \ > 0\n        return lst.head, None\n    else\n        return largest_smallest_integers(lst.tail)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkvglg4lp.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkvglg4lp.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcbzos_hw.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcbzos_hw.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsah40gr6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsah40gr6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the integers in the vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoy2veh85.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoy2veh85.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return (largest, smallest)\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the number of positive integers in a list.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd6_dvu7f.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd6_dvu7f.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9zqk6vq_.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9zqk6vq_.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeg5v8z_z.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeg5v8z_z.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector of integers and returns the sum of the integers squared. \nIf\
    \ there are no integers in the vector, return 0.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwzw4rd5a.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwzw4rd5a.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    elseif all(el < 0 for el in lst)\n        return\
    \ None, min(el for el in lst if el < 0)\n    elseif all(el > 0 for el in lst)\n\
    \        return max(el for el in lst if el > 0), None\n    else\n        return\
    \ max(el for el in lst if el > 0), min(el for el in lst if el < 0)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplrbwzahc.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplrbwzahc.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(lst)\n     \
    \   smallest = maximum(lst)\n        return (largest, smallest)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7])\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of elements that are greater than zero.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzwkumwf1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzwkumwf1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, 0)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (0, 0)\n \
    \   else\n        (a, b) = minimum(lst), maximum(lst)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number\
    \ of integers in a list that are\ndivisible by 7. For example, given the list\
    \ [7, 11, 13, 17, 19], your function\nshould return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprp4cfc7m.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprp4cfc7m.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, lst[0])\n    elseif all(x -> x >\
    \ 0, lst)\n        return (lst[-1], None)\n    else\n        largest = maximum(lst)\n\
    \        smallest = minimum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns the number of\
    \ times a given value appears in a given list.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyia_dp3l.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyia_dp3l.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the number of positive\
    \ integers in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp32rd2yly.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp32rd2yly.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    else\n        largest = lst.last\n\
    \        smallest = lst.first\n        for i in lst.tail\n            if i < largest\n\
    \                largest = i\n            elseif i > smallest\n              \
    \  smallest = i\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a list\
    \ of numbers and returns the sum of the numbers in the list. \nIf the list is\
    \ empty, return 0.\nIf the list has one number, return that number.\nIf the list\
    \ has two numbers, return the sum of the two numbers.\nIf the list has three or\
    \ more numbers, return the sum of the first two numbers, then add the last number\
    \ in the list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq90ubcnr.jl:32\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq90ubcnr.jl:32\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the largest and smallest numbers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplaruq1px.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplaruq1px.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7km6u7gv.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7km6u7gv.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function called largest_smallest_integers_v2(lst :: Vector{Int64}) that returns\
    \ a tuple (a, b), where 'a' is the largest of negative integers, and 'b' is the\
    \ smallest of positive integers in a list. If there is no negative or positive\
    \ integers, return them as None.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp773xjptt.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp773xjptt.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (lst.last,\
    \ lst.head)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function called\
    \ largest_smallest_integers_list that takes a list of integers and returns the\
    \ largest and smallest integers in the list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp37le93mh.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp37le93mh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nlargest_smallest_integers\n\
    Let's test our function by comparing it to the built-in max() and min() functions.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7952v5ry.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7952v5ry.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x < 0 for x in lst)\n        return (None, min(x for x in lst if x < 0))\n\
    \    elseif all(x > 0 for x in lst)\n        return (min(x for x in lst if x >\
    \ 0), None)\n    else\n        return (min(x for x in lst if x > 0), max(x for\
    \ x in lst if x < 0))\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt7r3cbbr.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt7r3cbbr.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    elseif lst.is_one\n        return lst.head, None\n    else\n     \
    \   largest = lst.head\n        smallest = lst.tail.head\n        for elt in lst.tail\n\
    \            if elt > largest\n                largest = elt\n            elseif\
    \ elt < smallest\n                smallest = elt\n            end\n        end\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of positive integers in a list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp14tlop09.jl:30\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp14tlop09.jl:30\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    \n    if largest < smallest \n        return largest, smallest\n    else\
    \ \n        return None, None\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of integers in a list that are less than a given number.\
    \ For example, if the list is [4, 6, 3, 8, 2, 9, 1, 5, 7], and you want the number\
    \ of integers that are less than 7, the function should return 3.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps98iypa8.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps98iypa8.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), max(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3gv8fon5.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3gv8fon5.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpws3tg92s.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpws3tg92s.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    else\n        largest = minimum(el for el in lst\
    \ if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n       \
    \ return largest, smallest\n    end\nend\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a list of numbers and returns the sum of the numbers. If the list\
    \ is empty, return 0.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw7sd73of.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw7sd73of.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (lst.last, lst.first)\n    else\n   \
    \     return (lst.last, lst.first)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the largest and smallest numbers in a list.\nIf\
    \ there are no numbers, return (None, None).\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3gt_5rn.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3gt_5rn.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. For example, if the vector is [4, 6, -2, 3], the function should\
    \ return 10.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpezob3sb9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpezob3sb9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (lst.head, lst.last)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns a new vector where each element is the sum of the\
    \ elements in the original vector. For example, if the input vector is [1,2,3],\
    \ the output vector should be [3,4,6].\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplijbcips.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplijbcips.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that returns a tuple (a, b),\
    \ where 'a' is the largest of positive integers, and 'b' is the smallest of negative\
    \ integers in a list.\nIf there is no negative or positive integers, return them\
    \ as None.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsc2nxqh9.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsc2nxqh9.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn0r5k6dk.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn0r5k6dk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    else\n        largest, smallest = lst.last,\
    \ lst.first\n        for elt in lst[2:end]\n            if elt > largest\n   \
    \             largest = elt\n            elseif elt < smallest\n             \
    \   smallest = elt\n            end\n        end\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements of the vector. \n\
    For example, if the vector is [4, -2, 3], the function should return 5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9bk3rcmx.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9bk3rcmx.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5xje1mub.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5xje1mub.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_glbw_fs.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_glbw_fs.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that takes a list of integers and returns the sum of the integers\
    \ in the list. \nIf there are no integers in the list, return 0.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn33euw7i.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn33euw7i.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise 3\nWrite a function that takes a\
    \ vector of integers and returns the sum of the integers in the vector. \nIf there\
    \ are no integers in the vector, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjs2jofa6.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjs2jofa6.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<text>\nExercise 4\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp58gkggog.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp58gkggog.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. Test it on $[-1,\
    \ 0, 2, -3]$.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphx77cxi9.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphx77cxi9.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. Test it on $[-10,\
    \ -5, 3, 8, 10, 2, -5, -4, -3]$.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4c_dlqkh.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4c_dlqkh.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ of integers and returns the sum of the integers in the vector.\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyoj_zzfg.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyoj_zzfg.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([2, 4, 1, 3, 5, 7])\n</cell>\n\
    <code language=julia-1.5>\nlargest_smallest_integers([])\n</cell>\n<code language=julia-1.5>\n\
    largest_smallest_integers([0])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp3f_3dej.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp3f_3dej.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwg3s1144.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwg3s1144.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    else\n        largest = minimum(lst)\n        smallest = maximum(lst)\n\
    \        return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that takes a vector of integers and returns the sum of the integers\
    \ in the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp05nx7n3m.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp05nx7n3m.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n   \
    \ return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpih57_5ps.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpih57_5ps.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n\
    \        return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function called largest_smallest_integers_2 that returns a tuple (a, b), where\
    \ 'a' is the largest of negative integers, and 'b' is the smallest of positive\
    \ integers in a list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpygbv3df2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpygbv3df2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[1]\n  \
    \  elseif all(x -> x < 0, lst)\n        return None, min(lst)\n    elseif all(x\
    \ -> x > 0, lst)\n        return max(lst), None\n    else\n        largest, smallest\
    \ = largest_smallest_integers(lst[2 : (end - 1)])\n        return largest, smallest\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmmhku22k.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmmhku22k.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.empty\n        return (None, None)\n\
    \    elseif all(lst.>=0)\n        return (max(lst), min(lst))\n    else\n    \
    \    return (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of integers and returns the sum of the integers in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpukcsp1sp.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpukcsp1sp.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.is_one\n        return (lst.last, None)\n    elseif lst.is_two\n\
    \        return (lst.last, lst.first)\n    elseif lst.is_three\n        return\
    \ (lst.last, lst.first, lst.last)\n    elseif lst.is_four\n        return (lst.last,\
    \ lst.first, lst.last, lst.first)\n    elseif lst.is_five\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last)\n    elseif lst.is_six\n        return\
    \ (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif\
    \ lst.is_seven\n        return (lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.last)\n    elseif lst.is_eight\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n    elseif lst.is_nine\n\
    \        return (lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_ten\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first)\n    elseif lst.is_eleven\n        return (lst.last, lst.first, lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last)\n\
    \    elseif lst.is_twelve\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first)\n\
    \    elseif lst.is_thirteen\n        return (lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last)\n    elseif lst.is_fourteen\n        return (lst.last, lst.first,\
    \ lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first,\
    \ lst.last, lst.first, lst.last)\n    elseif lst.is_fifteen\n        return (lst.last,\
    \ lst.first, lst.last, lst.first, lst.last, lst.first, lst.last, lst.first, lst.last,\
    \ lst.first, lst.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9g75cfrk.jl:45\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9g75cfrk.jl:45\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, min(el for el in lst if el < 0))\n    elseif all(el > 0 for el in lst)\n\
    \        return (min(el for el in lst if el > 0), None)\n    else\n        return\
    \ (min(el for el in lst if el > 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the number of elements that are even.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg6d0e8ez.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg6d0e8ez.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. \nFor example, if the input is [4, -5, 6, -7, 8], the output\
    \ should be 15.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpez__bdnm.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpez__bdnm.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x -> x > 0, lst)\n        (a, b) = (lst[end],\
    \ lst[1])\n    else\n        (a, b) = (lst[end], lst[1])\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp79j86vbz.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp79j86vbz.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2: Write a function\
    \ that returns the largest and smallest numbers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvrlhbizl.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvrlhbizl.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<code language=julia-1.5>\n@assert largest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7]) == (None, None)\n@assert largest_smallest_integers([]) == (None,\
    \ None)\n@assert largest_smallest_integers([0]) == (None, None)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the number of positive integers in a\
    \ list.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6f636ya3.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6f636ya3.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n \
    \       return (min(x for x in lst if x > 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ takes a vector and returns the sum of the absolute values of the elements in\
    \ the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdv68rqs9.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdv68rqs9.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        if lst[0] < 0\n            return\
    \ (None, None)\n        elseif lst[0] > 0\n            return (1, lst[0])\n  \
    \      else\n            return (None, None)\n        end\n    else\n        largest\
    \ = minimum(lst)\n        smallest = maximum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoe1xwaeg.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoe1xwaeg.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ \nFor example, \n    abs_sum([1, 2, 3, 4]) == 5\n    abs_sum([-1, -2, -3, -4])\
    \ == 5\n    abs_sum([1, -2, 3, -4]) == 5\n    abs_sum([-1, -2, -3, -4, 5]) ==\
    \ 5\n    abs_sum([1, -2, 3, -4, 5]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6])\
    \ == 5\n    abs_sum([1, -2, 3, -4, -5, 6]) == 5\n    abs_sum([-1, -2, -3, -4,\
    \ 5, 6, 7]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6, 7, 8]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8]) == 5\n\
    \    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, 9]) == 5\n    abs_sum([1, -2, 3, -4,\
    \ -5, 6, 7, 8, 9]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10]) ==\
    \ 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10]) == 5\n    abs_sum([-1, -2,\
    \ -3, -4, 5, 6, 7, 8, -9, 10, 11]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7,\
    \ 8, -9, 10, 11]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10, 11, 12])\
    \ == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10, 11, 12]) == 5\n    abs_sum([-1,\
    \ -2, -3, -4, 5, 6, 7, 8, -9, 10, 11, 12, 13]) == 5\n    abs_sum([1, -2, 3, -4,\
    \ -5, 6, 7, 8, -9, 10, 11, 12, 13]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7,\
    \ 8, -9, 10, 11, 12, 13, 14]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9,\
    \ 10, 11, 12, 13, 14]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10,\
    \ 11, 12, 13, 14, 15]) == 5\n    abs_sum([1, -2, 3, -4, -5, 6, 7, 8, -9, 10, 11,\
    \ 12, 13, 14, 15]) == 5\n    abs_sum([-1, -2, -3, -4, 5, 6, 7, 8, -9, 10, 11,\
    \ 12, 13, 14, 15, 16]) == 5\n    abs_sum([1, \nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxp6n22s2.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxp6n22s2.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        return\
    \ (None, min(x for x in lst if x >= 0))\n    elseif all(x > 0 for x in lst)\n\
    \        return (max(x for x in lst if x <= 0), None)\n    else\n        return\
    \ (None, None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that\
    \ returns the sum of the integers in a list.\nusing Test\n\n@testset begin\n\n\
    candidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpif8fhtgv.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpif8fhtgv.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2\n        return (lst[1], lst[1])\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns the sum of the absolute values of the elements in the vector.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphkvde8e8.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphkvde8e8.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.head)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function that takes\
    \ a vector and returns the sum of the absolute values of the elements in the vector.\
    \ Test it on $[-5, -4, -3, -2, -1, 0, 1, 2, 3, 4, 5]$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpojqyfhh7.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpojqyfhh7.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a vector and returns the number of times each\
    \ element appears in the vector. For example, if the vector is [1, 1, 2, 3], the\
    \ function should return [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] =>\
    \ [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3]\
    \ => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2,\
    \ 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1,\
    \ 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1,\
    \ 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => [1, 1, 2, 3] => \nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz23v4yqd.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz23v4yqd.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a vector of integers and returns the sum of the squares of the integers. \n\
    The function should raise an error if the vector is empty.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmelshic3.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmelshic3.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    elseif all(x > 0 for x in lst)\n        (a, b) = (max(lst),\
    \ min(lst))\n    else\n        (a, b) = (None, None)\n    end\n    return (a,\
    \ b)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the number\
    \ of integers in a list that are less than a given number. For example, if the\
    \ list is [4, 2, 7, 3, 6, 8], the function should return 3.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbe2_h5r2.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbe2_h5r2.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n        (a,\
    \ b) = (None, min(lst))\n    elseif all(x -> x > 0, lst)\n        (a, b) = (min(lst),\
    \ None)\n    else\n        (a, b) = (min(lst), max(lst))\n    end\n    return\
    \ (a, b)\nend\n</cell>\n<text>\nExercise 4\nWrite a function that takes a list\
    \ as an argument and returns the number of positive integers in the list.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvj_suw_o.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvj_suw_o.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, Nothing)\n    elseif length(lst) == 1 \n        return (lst[1], Nothing)\n\
    \    elseif all(x < 0 for x in lst) \n        return (None, lst[1])\n    elseif\
    \ all(x > 0 for x in lst) \n        return (lst[1], None)\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5e5vd8aq.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5e5vd8aq.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[1], lst[1])\n    elseif\
    \ length(lst) == 2\n        return (lst[1], lst[1])\n    else\n        largest\
    \ = maximum(lst)\n        smallest = minimum(lst)\n        return (largest, smallest)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ of integers and returns the sum of the squares of the integers. \nIf there are\
    \ no integers in the vector, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu7fmeuz9.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu7fmeuz9.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([])\n\
    </cell>\n<code language=julia-1.5>\nlargest_smallest_integers([0])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of times a given\
    \ value appears in a given list.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ar5aajg.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ar5aajg.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    elseif all(el < 0 for el in lst)\n        return\
    \ (None, None)\n    elseif all(el > 0 for el in lst)\n        return (max(el for\
    \ el in lst if el < 0), min(el for el in lst if el < 0))\n    else\n        return\
    \ (max(el for el in lst if el < 0), min(el for el in lst if el < 0))\n    end\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that takes a vector and returns\
    \ the number of times each element appears in the vector.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7p2zswg.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7p2zswg.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\n    return (a, b)\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8n62_d8w.jl:27\n  Test threw exception\n\
    \  Expression: candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1)\n  MethodError: no\
    \ method matching min(::Base.Generator{Base.Iterators.Filter{var\"#6#10\",Array{Int64,1}},typeof(identity)})\n\
    \  Closest candidates are:\n    min(::Any, !Matched::Missing) at missing.jl:126\n\
    \    min(::Any, !Matched::Any) at operators.jl:422\n    min(::Any, !Matched::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n    ...\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:16\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:28\n  Test threw exception\n  Expression: candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:29\n  Test threw exception\n  Expression: candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:30\n  Test threw exception\n  Expression: candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:31\n  Test threw exception\n  Expression: candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:32\n  Test threw exception\n  Expression: candidate(Vector{Int64}([]))\
    \ == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n  \
    \ [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:32\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:33\n  Test threw exception\n  Expression: candidate([0])\
    \ == (nothing, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n  \
    \ [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:33\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:34\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:34\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:35\n  Test threw exception\n  Expression: candidate([-1,\
    \ -3, -5, -6, 0]) == (-1, nothing)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:35\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:36\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:36\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmp8n62_d8w.jl:37\n  Test threw exception\n  Expression: candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1)\n  UndefVarError: None not defined\n  Stacktrace:\n\
    \   [1] largest_smallest_integers(::Array{Int64,1}) at /tmp/tmp8n62_d8w.jl:18\n\
    \   [2] top-level scope at /tmp/tmp8n62_d8w.jl:37\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8n62_d8w.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |    11     11\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 11 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8n62_d8w.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ of the vector.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk68v0mmv.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk68v0mmv.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (), ()\n    \n    largest, smallest = Inf, -Inf\n    for i in lst\n        if\
    \ i < smallest\n            smallest = i\n        elseif i > largest\n       \
    \     largest = i\n        end\n    end\n    return largest, smallest\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns the sum of\
    \ the absolute values of the elements in the vector. \nIf there are no non-negative\
    \ numbers in the vector, return 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiuxkld5w.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiuxkld5w.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    elseif\
    \ all(x -> x < 0, lst)\n        return (None, min(lst))\n    elseif all(x -> x\
    \ > 0, lst)\n        return (min(lst), None)\n    else\n        smallest, largest\
    \ = minimum(lst), maximum(lst)\n        return (largest, smallest)\n    end\n\
    end\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector and returns\
    \ the sum of the absolute values of the elements in the vector. \nFor example,\
    \ \n    sum([1, 2, 3]) == 6\n    sum([-1, -2, -3]) == 6\n    sum([1, -2, 3, -4])\
    \ == 6\n    sum([-1, -2, -3, -4]) == 6\n    sum([-1, -2, -3, -4, 5]) == 6\n  \
    \  sum([-1, -2, -3, -4, -5]) == 6\n    sum([-1, -2, -3, -4, -5, 6]) == 6\n   \
    \ sum([-1, -2, -3, -4, -5, 6, 7]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, 8])\
    \ == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, 9]) == 6\n    sum([-1, -2, -3,\
    \ -4, -5, 6, -7, -8, -9, 10]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9,\
    \ -10, 11]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11])\
    \ == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12]) == 6\n\
    \    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13]) == 6\n  \
    \  sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14]) == 6\n\
    \    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14, 15]) ==\
    \ 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13, 14, 15,\
    \ 16]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10, -11, 12, 13,\
    \ 14, 15, 16, 17]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7, -8, -9, -10, -10,\
    \ -11, 12, 13, 14, 15, 16, 17, 18]) == 6\n    sum([-1, -2, -3, -4, -5, 6, -7,\
    \ -8, -9, -10, -10, \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp53v61i52.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp53v61i52.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, min(x for x in lst if x < 0))\n    elseif all(x > 0 for x in lst)\n\
    \        (a, b) = (min(x for x in lst if x > 0), None)\n    else\n        (a,\
    \ b) = (None, None)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of positive integers in a list.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2q3wdynp.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2q3wdynp.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return (None,\
    \ None)\n    elseif lst.head < 0\n        return (lst.last, None)\n    elseif\
    \ lst.head > 0\n        return (None, lst.first)\n    else\n        return (None,\
    \ None)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of the integers in a list.\nIf there are no integers, return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcs7pgbjl.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcs7pgbjl.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    \n    largest = minimum(el for el in\
    \ lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return\
    \ largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the largest and smallest numbers in a list.\nIf there are no numbers, return\
    \ (None, None).\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9cc93wth.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9cc93wth.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x -> x < 0, lst)\n    else if\
    \ all(x -> x > 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x ->\
    \ x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0,\
    \ lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x\
    \ -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x ==\
    \ 0, lst)\n    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n\
    \    else if all(x -> x == 0, lst)\n    else if all(x -> x == 0, lst)\n    else\
    \ if all(x -> x == 0, \nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6z716grl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6z716grl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a list of integers and returns the sum of the integers in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp54alm9f3.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp54alm9f3.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    \n    largest = minimum(el for el in lst if el\
    \ < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return largest,\
    \ smallest\nend\n</cell>\n<text>\nExercise 3\nWrite a function that takes a vector\
    \ and returns a vector where each element is the sum of the squares of the elements\
    \ in the original vector. For example, square_sum([1, 2, 3, 4, 5]) should return\
    \ [25, 9, 16, 9, 25].\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7sb8em72.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7sb8em72.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        (a, b)\
    \ = (None, None)\n    elseif length(lst) == 1 \n        (a, b) = (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 3 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 4 \n   \
    \     (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 5 \n        (a, b)\
    \ = (lst[1], lst[2])\n    elseif length(lst) == 6 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 7 \n        (a, b) = (lst[1], lst[2])\n \
    \   elseif length(lst) == 8 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 9 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 10 \n  \
    \      (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 11 \n        (a, b)\
    \ = (lst[1], lst[2])\n    elseif length(lst) == 12 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 13 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 14 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 15 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 16 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 17 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 18 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 19 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 20 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 21 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 22 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 23 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 24 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 25 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 26 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == 27 \n        (a, b) = (lst[1], lst[2])\n\
    \    elseif length(lst) == 28 \n        (a, b) = (lst[1], lst[2])\n    elseif\
    \ length(lst) == 29 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst)\
    \ == 30 \n        (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 31 \n \
    \       (a, b) = (lst[1], lst[2])\n    elseif length(lst) == 32 \n        (a,\
    \ b) = (lst[1], lst[2])\n    elseif length(lst) == 33 \n        (a, b) = (lst[1],\
    \ lst[2])\n    elseif length(lst) == \nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqtx57rf3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqtx57rf3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a vector of integers and returns the sum of the squares\
    \ of the integers. \nFor example, \nsquare_sum([1, 2, 3, 4]) should return 25.\
    \ \nThe function should raise an error if the vector is empty.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpms7bxu_b.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpms7bxu_b.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return None, None\n    end\n    \n    largest = minimum(el for el in\
    \ lst if el < 0)\n    smallest = maximum(el for el in lst if el > 0)\n    return\
    \ largest, smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpolknbmve.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpolknbmve.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if lst.is_empty\n        return None,\
    \ None\n    largest = minimum(lst)\n    smallest = maximum(lst)\n    return largest,\
    \ smallest\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp06q_10ob.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp06q_10ob.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    elseif length(lst) == 1 \n        return (lst[1], lst[1])\n\
    \    elseif length(lst) == 2 \n        return (lst[1], lst[1])\n    elseif length(lst)\
    \ > 2 \n        largest = maximum(lst)\n        smallest = minimum(lst)\n    \
    \    return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise: Write\
    \ a function that returns a tuple (a, b), where 'a' is the largest of positive\
    \ integers, and 'b' is the smallest of negative integers in a list.\nIf there\
    \ is no negative or positive integers, return them as None.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6kf5ropm.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6kf5ropm.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    elseif length(lst) == 1\n        return (lst[0], None)\n    else\n\
    \        largest = minimum(lst)\n        smallest = maximum(lst)\n        return\
    \ (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a vector and returns the sum of the absolute values of the elements\
    \ in the vector. Test it on $[-10, -5, 0, 1, 5, 10]$.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb3v_eft6.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb3v_eft6.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn2w4wg1s.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn2w4wg1s.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (), () \n    else \n        largest, smallest = Inf, -Inf \n        for elt\
    \ in lst \n            if elt > largest \n                largest = elt \n   \
    \         else if elt < smallest \n                smallest = elt \n         \
    \   end \n        end \n        return (largest, smallest) \n    end \nend \n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a list as an argument\
    \ and returns the number of elements in the list that are even.\nusing Test\n\n\
    @testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5w3gtdc9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5w3gtdc9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    elseif length(lst) == 1 \n        return lst[1], lst[0]\n  \
    \  elseif all(x < 0 for x in lst) \n        return None, min(lst)\n    elseif\
    \ all(x > 0 for x in lst) \n        return max(lst), None\n    else\n        smallest,\
    \ largest = minimum(lst), maximum(lst)\n        if smallest < 0 \n           \
    \ return None, largest\n        elseif largest < 0 \n            return smallest,\
    \ None\n        else\n            return smallest, largest\n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the sum of the numbers in a\
    \ list. \nIf there are no numbers in the list, return 0.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvldytii.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcvldytii.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ None, None\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return largest, smallest\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector and returns a vector where each element is the sum of the\
    \ squares of the elements in the original vector.\nusing Test\n\n@testset begin\n\
    \ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7])\
    \ == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\
    \t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5,\
    \ 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) ==\
    \ (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t@test(candidate([0])\
    \ == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6]) == (-1, nothing))\n\
    \t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\t@test(candidate([-6,\
    \ -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4, -4, -3, -100, 1]) ==\
    \ (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1zq18u5e.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1zq18u5e.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0\n        return (None,\
    \ None)\n    end\n    largest = minimum(lst)\n    smallest = maximum(lst)\n  \
    \  return (largest, smallest)\nend\n</cell>\n<code language=julia-1.4>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) ==\
    \ (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm1akyfv7.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm1akyfv7.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(x < 0 for x in lst)\n        (a,\
    \ b) = (None, None)\n    else\n        (a, b) = (max(lst), min(lst))\n    end\n\
    \    return (a, b)\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = largest_smallest_integers;\n\t@test(candidate([2, 4, 1,\
    \ 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing,\
    \ 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4,\
    \ 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9])\
    \ == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) == (nothing, nothing))\n\t\
    @test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1, -3, -5, -6])\
    \ == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1, nothing))\n\
    \t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6, -4,\
    \ -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsu0y9z9d.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsu0y9z9d.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if all(isnothing(el) for el in lst)\n\
    \        return (None, None)\n    else\n        largest = minimum(el for el in\
    \ lst if el < 0)\n        smallest = maximum(el for el in lst if el > 0)\n   \
    \     return (largest, smallest)\n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the number of integers in a list that are\nevenly\
    \ divisible by 3.\nusing Test\n\n@testset begin\n\ncandidate = largest_smallest_integers;\n\
    \t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing, 1))\n\t@test(candidate([2,\
    \ 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1, 3, 2, 4, 5, 6, -2])\
    \ == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) == (-7, 2))\n\t@test(candidate([7,\
    \ 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([])) ==\
    \ (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25wovuj_.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp25wovuj_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    Create a function that returns a tuple (a, b), where 'a' is\n\
    \    the largest of negative integers, and 'b' is the smallest\n    of positive\
    \ integers in a list.\n    If there is no negative or positive integers, return\
    \ them as None.\n\n    Examples:\n    largest_smallest_integers([2, 4, 1, 3, 5,\
    \ 7]) == (None, 1)\n    largest_smallest_integers([]) == (None, None)\n    largest_smallest_integers([0])\
    \ == (None, None)\n    \"\"\"\nfunction largest_smallest_integers(lst::Vector{Int64})::Tuple{Union{Int64,\
    \ Nothing}, Union{Int64, Nothing}} \n    if length(lst) == 0 \n        return\
    \ (None, None)\n    \n    largest = minimum(lst)\n    smallest = maximum(lst)\n\
    \    return (largest, smallest)\nend\n</cell>\n<code language=julia-1.5>\nlargest_smallest_integers([2,\
    \ 4, 1, 3, 5, 7])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ largest and smallest integers in a list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = largest_smallest_integers;\n\t@test(candidate([2, 4, 1, 3, 5, 7]) == (nothing,\
    \ 1))\n\t@test(candidate([2, 4, 1, 3, 5, 7, 0]) == (nothing, 1))\n\t@test(candidate([1,\
    \ 3, 2, 4, 5, 6, -2]) == (-2, 1))\n\t@test(candidate([4, 5, 3, 6, 2, 7, -7]) ==\
    \ (-7, 2))\n\t@test(candidate([7, 3, 8, 4, 9, 2, 5, -9]) == (-9, 2))\n\t@test(candidate(Vector{Int64}([]))\
    \ == (nothing, nothing))\n\t@test(candidate([0]) == (nothing, nothing))\n\t@test(candidate([-1,\
    \ -3, -5, -6]) == (-1, nothing))\n\t@test(candidate([-1, -3, -5, -6, 0]) == (-1,\
    \ nothing))\n\t@test(candidate([-6, -4, -4, -3, 1]) == (-3, 1))\n\t@test(candidate([-6,\
    \ -4, -4, -3, -100, 1]) == (-3, 1))\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfcu8ujgn.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfcu8ujgn.jl:20\n"
  exit_code: 1
  status: Exception
