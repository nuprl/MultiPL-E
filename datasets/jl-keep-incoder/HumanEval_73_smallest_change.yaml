name: HumanEval_73_smallest_change
language: julia
prompt: "\"\"\"\n    Given an array arr of integers, find the minimum number of elements\
  \ that\n    need to be changed to make the array palindromic. A palindromic array\
  \ is an array that\n    is read the same backwards and forwards. In one change,\
  \ you can change one element to any other element.\n\n    For example:\n    smallest_change([1,2,3,5,4,7,9,6])\
  \ == 4\n    smallest_change([1, 2, 3, 4, 3, 2, 2]) == 1\n    smallest_change([1,\
  \ 2, 3, 2, 1]) == 0\n    \"\"\"\nfunction smallest_change(arr::Vector{Int64})::Int64\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = smallest_change;\n\t@test(candidate([1,\
  \ 2, 3, 5, 4, 7, 9, 6]) == 4)\n\t@test(candidate([1, 2, 3, 4, 3, 2, 2]) == 1)\n\t\
  @test(candidate([1, 4, 2]) == 1)\n\t@test(candidate([1, 4, 4, 2]) == 1)\n\t@test(candidate([1,\
  \ 2, 3, 2, 1]) == 0)\n\t@test(candidate([3, 1, 1, 3]) == 0)\n\t@test(candidate([1])\
  \ == 0)\n\t@test(candidate([0, 1]) == 1)\nend\n"
completions: ["    \n    smallest_change = Int64(0)\n    \n    for x in arr\n    \
    \    if x == reverse(arr[x])\n            smallest_change = smallest_change +\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    smallest_change(arr, 0, length(arr)-1)\nend", " \
    \   \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.", "    \n    smallest_change = Int64(0)\n    \n\
    \    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of times\
    \ a given element appears in an array. For example, given [1,2,2,3,3,4,4,5,5,5,5,6,6,6,6],\
    \ the function should return 3.", "    smallest_change(arr, 0, length(arr)-1)\n\
    end", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 8\nWrite a function that returns true if the given string\
    \ is a palindrome (that is, a word or phrase that is the same forwards and backwards).",
  "    smallest_change(arr, 0, length(arr))\nend", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    for i = length(arr)-1\
    \ to 1 \n        if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ i+1)\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem\
    \ 7: Palindrome Partitioning\nGiven a string, find all possible palindrome partitions\
    \ of that string. For example, given \"aab\", return [\"\", \"a\",\"a\",\"b\"\
    ]. Given \"ab\", return [\"\", \"a\",\"b\"].", "    \n    smallest_change = 0\n\
    \    \n    for a in arr\n        if a > arr[smallest_change]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 7: Find the longest palindromic substring in arr", "    smallest_change(arr,\
    \ 0, length(arr))\nend", "    smallest_change = Int64(0)\n    \n    for x in arr\n\
    \        smallest_change = min(smallest_change, x - arr[smallest_change])\n  \
    \  end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that checks if a number is palindrome or not. \nA palindrome is a number that\
    \ is the same when read from left to right and from right to left.", "    \n \
    \   smallest_change = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 8\nA palindromic number reads the same both ways. The\
    \ largest palindrome made from the product of two 2-digit numbers is 9009 = 91\
    \ x 99.", "    \n    smallest_change = 0\n    \n    for x in arr\n        if x\
    \ == reverse(arr)[1]\n            smallest_change = smallest_change + 1\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 4\nWrite a function that takes an array\
    \ of integers and returns the number of elements in the array that are less than\
    \ the average of the array. For example, if the array is [4, 6, 10, 2, 7, 1, 3],\
    \ the function should return 2, since there are two elements that are less than\
    \ the average of the array.", "    \n    smallest_change = Inf \n    \n    for\
    \ x in arr \n        if x == reverse(arr[x]) \n            smallest_change = x\
    \ \n            break\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 9\nWrite a function that returns the number of elements in a vector that\
    \ satisfy a condition. For example, if the vector is [1,2,3,4,5,6,7,8,9], then\
    \ your function should return 5 because there are 5 numbers in the vector that\
    \ satisfy the condition: 6 < x < 9. Your function should work for vectors of any\
    \ length.", "    \n    smallest_change = 0\n    \n    for x in arr\n        if\
    \ x == reverse(arr)[1]\n            smallest_change = smallest_change + 1\n  \
    \      end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nGiven an array\
    \ arr of integers, find the minimum number of elements that\nneed to be changed\
    \ to make the array palindromic. A palindromic array is an array that\nis read\
    \ the same backwards and forwards. In one change, you can change one element to\
    \ any other element.", "    smallest_change = 0\n    \n    for x in arr\n    \
    \    if x == reverse(arr[x])\n            smallest_change = smallest_change +\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that takes in an array of integers and returns the number\
    \ of palindromic arrays in that array.", "    smallest_change = 0\n    \n    for\
    \ x in arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    largest = largest * 10\n    smallest = smallest * 10\n\
    \    largest = largest * 10\n    smallest = smallest * 10\n    largest = largest\
    \ * 10\n    smallest = smallest * 10\n    largest = lar", "    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n      \
    \  end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    minimum = minimum(arr)\n    \n    for i = minimum, length(arr)-1 do\n\
    \        if arr[i] != reverse(arr[i]) \n            minimum = i\n        end\n\
    \    end\n    \n    return minimum\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nGiven an array\
    \ arr of integers, find the minimum number of elements that\nneed to be changed\
    \ to make the array palindromic. A palindromic array is an array that\nis read\
    \ the same backwards and forwards. In one change, you can change one element to\
    \ any other element.", "    smallest_change(arr, 0, length(arr)-1)\nend", "  \
    \  \n    smallest_change = 0\n    \n    for x in arr\n        if x != arr[end-1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  smallest_change = 0\n    largest = maximum(arr)\n    smallest_change = largest\n\
    \    for x in arr\n        if x != largest\n            smallest_change = smallest_change\
    \ + 1\n            largest = x\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    smalle", "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n\
    \    if largest == smallest\n        return 0\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smallest\
    \ = smallest * 10\n    \n    largest = largest * 10\n    smallest = smallest *\
    \ 10\n    \n    largest = largest * 10\n    smallest = smallest * 10\n    \n \
    \   largest = largest * 10\n    smallest = smallest * 10\n    \n    largest =\
    \ largest * 10\n    smallest = smallest * 10\n    \n    largest = largest * 10\n\
    \    smallest = smallest * 10\n    \n    largest = largest * 10\n    smalle",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change + 1\n        if smallest_change > length(arr)\n          \
    \  break\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 7: Find the longest\
    \ palindromic substring in arr", "    smallest_change = 0\n    for a in arr\n\
    \        smallest_change = smallest_change + 1\n        if a != reverse(arr)\n\
    \            smallest_change = smallest_change - 1\n        end\n    end\n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 7: Find the longest palindromic substring\nGiven a string, find the length\
    \ of the longest palindromic substring.", "    \n    smallest_change = 0\n   \
    \ \n    for i = length(arr) - 2 to -1 \n        if arr[i] > arr[i+1] \n      \
    \      smallest_change = smallest_change + 1\n        else \n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nQuestion 3\nWrite a function that takes an array of integers\
    \ and returns the number of elements in the array that are less than the average\
    \ of the array.", "    \n    smallest_change = 0\n    \n    for a in arr\n   \
    \     if a > arr[smallest_change]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns an array of all permutations of an input\
    \ array. For example, permutations([1,2,3]) should return [[1,2,3],[1,3,2],[2,1,3],[2,3,1],[3,1,2],[3,2,1]].\
    \ Make sure your function works with multidimensional arrays.", "    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    smallest_change = 0\n    \n\
    \    for a in arr\n        if a < arr[smallest_change]\n            smallest_change\
    \ = i\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of times a given element appears in an array. For example, if the array\
    \ is [1, 1, 2, 3, 4, 4, 5], then your function should return 3 because there are\
    \ 3 1's in the array.", "    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 to 1 \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        else \n            smallest_change = smallest_change + 1\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change(arr, 0, length(arr)-1)\nend", "    \n    smallest_change =\
    \ 0\n    \n    for i = length(arr) downto 1 do\n        if arr[i] > arr[length(arr)-i-1]\
    \ then\n            smallest_change = i\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        smallest_change = smallest_change + smallest_change(x)\n    end\n\
    \    \n    return smallest_change\nend", "    smallest_change = Int64(0)\n   \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n    for\
    \ i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n\
    \    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7: Find the longest palindromic substring in an array\
    \ of strings\nGiven an array of strings, find the longest palindromic substring.",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7: Find the largest palindromic subarray", "    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr)-1)\n    for\
    \ i = smallest_change : length(arr)-1 \n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change(arr, 0, length(arr)-1)\n\
    end", "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest\
    \ == smallest \n        return largest\n    \n    change = 0\n    \n    for i\
    \ = 1:largest\n        if arr[i] != largest\n            change += 1\n       \
    \     \n            if arr[i] != smallest \n                change += 1\n    \
    \            \n            if arr[i] != largest \n                change += 1\n\
    \                \n            if arr[i] != smallest \n                change\
    \ += 1\n                \n            if arr[i] != largest \n                change\
    \ += 1\n                \n            if arr[i] != smallest \n               \
    \ change += 1\n                \n            if arr[i] != largest \n         \
    \       change += 1\n                \n            if arr[i] != smallest \n  \
    \              change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != smallest\
    \ \n                change += 1\n                \n            if arr[i] != largest\
    \ \n                change += 1\n                \n            if arr[i] != ",
  "    smallest_change = 0\n    for x in arr\n        smallest_change = smallest_change\
    \ + 1\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns true if the array arr\
    \ has all unique elements and false otherwise. For example,", "    \n    smallest_change\
    \ = 0\n    \n    for a in arr\n        smallest_change = smallest_change + 1\n\
    \        if a != reverse(arr)\n            smallest_change = smallest_change -\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    \n    minimum = 0\n    \n    for x in arr\n     \
    \   if x == minimum\n            minimum = x\n        else\n            if minimum\
    \ > x\n                minimum = x\n            else\n                if minimum\
    \ == x\n                    minimum = x\n                else\n              \
    \      if minimum < x\n                        minimum = x\n                 \
    \   else\n                        if minimum == x\n                          \
    \  minimum = x\n                        else\n                            if minimum\
    \ > x\n                                minimum = x\n                         \
    \   else\n                                if minimum == x\n                  \
    \                  minimum = x\n                                else\n       \
    \                             if minimum < x\n                               \
    \         minimum = x\n                                    else\n            \
    \                            if minimum == x\n                               \
    \             minimum = x\n                                        else\n    \
    \                                        if minimum > x\n                    \
    \                            minimum = x\n                                   \
    \         else\n                                                if minimum ==\
    \ x\n                                                    minimum = x\n       \
    \                                         else\n                             \
    \                       if minimum < x\n                                     \
    \                   minimum = x\n                                            \
    \        else\n                                                        if minimum\
    \ == x\n                                                            minimum =\
    \ x\n                                                        else\n          \
    \                                                  if minimum > x\n          \
    \                                                      minimum = x\n         \
    \                                                   else\n                   \
    \                                             if minimum == x\n              \
    \                                                      minimum = x\n         \
    \                                                       else\n               \
    \                                                     if minimum < x\n       \
    \                                                                 minimum = x\n\
    \                                                                    else\n  \
    \                                                      if minimum == x\n     \
    \                                                       minimum = x\n        \
    \                                                else\n                      \
    \                                      if minimum > x\n                      \
    \                                          minimum = x\n                     \
    \                                       else\n                               \
    \                                 if minimum == x\n                          \
    \                                          minimum = x\n                     \
    \                                           else\n                           \
    \                                         if minimum < x\n                   \
    \                                                     minimum = x\n          \
    \                                                          else\n            \
    \                                            if minimum == x\n               \
    \                                             minimum = x\n                  \
    \                                      else\n                                \
    \                            if minimum > x\n                                \
    \                                minimum = x\n                               \
    \                             else\n                                         \
    \                       if minimum == x\n                                    \
    \                                minimum = x\n                               \
    \                                 else\n                                     \
    \                               if minimum < x\n                             \
    \                                           minimum = x\n                    \
    \                                                else\n                      \
    \                                  if minimum == x\n                         \
    \                                   minimum = x\n                            \
    \                            else\n                                          \
    \                  if minimum > x\n                                          \
    \                      minimum = x\n                                         \
    \                   else\n                                                   \
    \             if minimum == x\n                                              \
    \                      minimum = x\n                                         \
    \                       else\n                                               \
    \                     if minimum < x\n                                       \
    \                                 minimum = x\n                              \
    \                                      else\n                                \
    \                        if minimum == x\n                                   \
    \                         minimum = x\n                                      \
    \                  else\n                                                    \
    \        if minimum > x\n                                                    \
    \            minimum = x\n                                                   \
    \         else\n                                                             \
    \   if minimum == x\n                                                        \
    \            minimum = x\n                                                   \
    \             else\n                                                         \
    \           if minimum < x\n                                                 \
    \                       minimum = x\n                                        \
    \                            else\n                                          \
    \              if minimum == x\n                                             \
    \               minimum = x\n                                                \
    \        else\n                                                            if\
    \ minimum > x\n                                                              \
    \  minimum = x\n                                                            else\n\
    \                                                                if minimum ==\
    \ x\n                                                                    minimum\
    \ = x\n                                                                else\n\
    \                                                                    if minimum\
    \ < x\n                                                                      \
    \  minimum = x\n                                                             \
    \       else\n                                                        if minimum\
    \ == x\n                                                            minimum =\
    \ x\n                                                        else\n          \
    \                                                  if minimum > ", "    smallest_change\
    \ = Int64(0)\n    for x in arr\n        smallest_change = min(smallest_change,\
    \ x - x)\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of elements in a vector that are less than a given value.",
  "    smallest_change(arr, 0, length(arr)-1) \nend", "    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for\
    \ x in arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 7", "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \        end\n    end\n    return smallest_change\nend\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a dscore=1 |>\n<code>", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return largest\n    end\n    \n   \
    \ change = largest - smallest\n    \n    if change == 0\n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end\n    \n    change = change + 1\n\
    \    \n    if change == largest\n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0\n        return largest\n    end\n  \
    \  \n    change = change + 1\n    \n    if change == largest\n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end\n    \n    change = change + 1\n\
    \    \n    if change == largest\n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0\n        return largest\n    end\n  \
    \  \n    change = change + 1\n    \n    if change == largest\n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end\n    \n    change = change + 1\n\
    \    \n    if change == largest\n        return largest\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 0\n        return largest\n    end\n  \
    \  \n    change = change + 1\n    \n    if change == largest\n        return largest\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 0\n        return\
    \ largest\n    end\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 0\n        return largest\n    end", "    smallest_change = Inf \n\
    \    for x in arr \n        if x == reverse(arr[x]) \n            smallest_change\
    \ = min(smallest_change, length(arr)-x) \n        else \n            smallest_change\
    \ = min(smallest_change, length(arr)-x+1) \n    end \n    return smallest_change\
    \ \nend ", "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change\
    \ = 0\n    for a in arr\n        if a < arr[smallest_change]\n            smallest_change\
    \ = smallest_change\n        else\n            if a != arr[smallest_change]\n\
    \                smallest_change = smallest_change + 1\n            end\n    \
    \    end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = 0\n    for x in arr\n        if x == reverse(arr)[1]\n  \
    \          smallest_change = smallest_change + 1\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the number of times a given element appears in an array. For example,\
    \ the number of times 5 appears in [1,2,3,4,5,6,7,8,9,10] would be 5.", "    smallest_change(arr,\
    \ length(arr)-1) \nend", "    \n    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary search tree and a node in that tree, find the in-order successor\
    \ of that node in the BST.", "    smallest_change(arr, 0, length(arr)-1)\nend",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change + 1\n        if smallest_change > length(arr)\n          \
    \  break\n    end\n    \n    return smallest_change\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes an array of integers and returns the number of\
    \ unique elements in the array. For example,", "    \n    smallest_change = 0\n\
    \    \n    for i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change =\
    \ smallest_change + 1 if arr[i] != arr[i+1] \n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 3\nGiven a string, find the length of the longest substring without repeating\
    \ characters.", "    \n    smallest_change = 0\n    \n    for i = length(arr)\
    \ - 2 to -1 \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        else \n            smallest_change = smallest_change + 1\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nGiven an array,\
    \ find the largest palindrome made from the array.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest \n        return\
    \ largest\n    \n    changes = 0\n    \n    for x in arr\n        if x != largest\n\
    \            changes += 1\n            largest = largest * 10 + x\n          \
    \  smallest = smallest * 10 + x\n        elseif x == largest\n            largest\
    \ = largest * 10 + x\n        elseif x == smallest\n            smallest = smallest\
    \ * 10 + x\n        end\n    end\n    \n    return changes\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    \n   \
    \ for x in arr\n        if x == reverse(arr[x])\n            smallest_change =\
    \ smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,1,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,1,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,1,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,1,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,5,6,7,8,9,0,1,0,0,0,0,0,0,1,0,0,0,0,0])\n\
    </cell>\n<code language=julia-1.5", "    smallest_change(arr, 0, length(arr)-1)\
    \ \nend", "    smallest_change(arr, 0, length(arr))\nend", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest \n        return\
    \ largest\n    \n    changes = 0\n    \n    for a in arr\n        if a > largest\
    \ \n            changes += 1\n            largest = a\n        elseif a < smallest\
    \ \n            changes += 1\n            smallest = a\n        else\n       \
    \     if a > largest - smallest \n                changes += 1\n             \
    \   largest = a\n            elseif a < smallest - largest \n                changes\
    \ += 1\n                smallest = a\n            else\n                largest\
    \ = a\n                smallest = a\n            end\n        end\n    end\n \
    \   \n    return changes\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.", "    \n    smallest_change = Inf \n    \n  \
    \  for x in arr \n        if x == reverse(arr[x]) \n            smallest_change\
    \ = x \n            break \n        else \n            smallest_change = Inf \n\
    \            break \n    end \n    return smallest_change \nend \n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary search tree and a number x, find x such that root of BST is\
    \ x. \nFor example, given BST [1,null,2,null,3,null,4,null,null,5,null,6] and\
    \ x = 5, return 5.", "    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n",
  "    \n    smallest_change = Int64(0)\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change + 1\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of times a given value appears\
    \ in an array.", "    \n    smallest_change = 0\n    \n    for x in arr\n    \
    \    if x == reverse(arr)[1]\n            smallest_change = smallest_change +\
    \ 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that checks if a number is palindrome or not.", "    smallest_change\
    \ = 0\n    smallest_change = minimum(smallest_change, length(arr))\n    for i\
    \ = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n            smallest_change\
    \ = minimum(smallest_change, length(arr) - i)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that checks if a number is palindrome\
    \ or not.", "    \n    smallest_change = 0\n    \n    for x in arr\n        if\
    \ x == reverse(arr)\n            smallest_change = smallest_change + 1\n     \
    \   end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 7: Find the longest palindromic substring\
    \ in an array of strings\nGiven an array of strings, find the longest palindromic\
    \ substring.", "    smallest_change(arr, 0, length(arr)-1)\nend", "    smallest_change\
    \ = 0\n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.0>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n\
    <text>\nProblem 3\nGiven a binary search tree and a node in it, find the in-order\
    \ successor of that node. \nFor example, given the following tree:", "    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a binary search tree and a node in it, find\
    \ the in-order successor of that node in the BST.", "    smallest_change = 0\n\
    \    smallest_change = minimum(smallest_change, length(arr)-1)\n    for i = 1:length(arr)\n\
    \        if arr[i] != arr[smallest_change]\n            smallest_change = i\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 to -1 \n        smallest_change = smallest_change\
    \ + 1 \n        if arr[i] != arr[i+1] \n            break\n        end\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes a vector of integers\
    \ and returns the number of elements in the vector that are greater than or equal\
    \ to 50", "    smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr) - i)\n   \
    \     end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the number of palindromic permutations of a string.", "    smallest_change\
    \ = Int64(0)\n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n\
    <text>\nProblem 7\nWrite a function that returns the number of palindromic permutations\
    \ of a given string.", "    smallest_change = 0\n    \n    for x in arr\n    \
    \    if x == reverse(arr)\n            smallest_change = smallest_change + 1\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    smallest_change\
    \ = Inf \n    for x in arr \n        if x == reverse(arr) \n            smallest_change\
    \ = x \n            break \n        else \n            smallest_change = min(smallest_change,\
    \ x-1)\n    end\n    return smallest_change\nend\n</cell>\n<text>\nProblem 3\n\
    Write a function that returns true if a given string is a palindrome and false\
    \ otherwise.", "    smallest_change(arr, 0, length(arr)-1) \nend", "    \n   \
    \ \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change = 0\n\
    \    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n   \
    \ for i = length(arr):-1:1\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, i+1)\n        end\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nThe function smallest_change is now complete. Let's test it on\
    \ a few examples:", "    \n    smallest_change = Int64(0)\n    \n    for i = length(arr)\
    \ - 1, j = length(arr) - 1, k = 0; i >= 0 || j >= 0 || k >= 0; i--, j--, k++\n\
    \        if arr[i] > arr[j]\n            smallest_change = k\n        end\n  \
    \  end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = 0\n    smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n           \
    \ smallest_change = minimum(smallest_change, length(arr)-length(arr))\n      \
    \  end\n    end\n    return smallest_change\nend\n</code>\n<|/ a dscore=2 |>\n\
    <| a tags=arrays,julia |>\n<code>", "    smallest_change(arr, 0, length(arr)-1)\
    \ \nend", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to\
    \ -1 \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        elseif arr[i] < arr[i+1] \n            smallest_change = smallest_change\
    \ - 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that checks if a number is prime or not. You may\
    \ want to use the Sieve of Eratosthenes algorithm for this.", "    smallest_change(arr,\
    \ 0, length(arr))\nend", "    smallest_change = 0\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-i)\n     \
    \   end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = 0\n    largest = maximum(arr)\n    smallest_change = largest\n\
    \    for x in arr\n        if x == largest\n            smallest_change = largest\n\
    \            break\n        elseif x == smallest_change\n            smallest_change\
    \ = x\n        else\n            smallest_change = smallest_change\n        end\n\
    \    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.4>",
  "    smallest_change = 0\n    smallest_change = minimum(smallest_change, length(arr))\n\
    \    for i = 1:smallest_change\n        if arr[i] != reverse(arr[i])\n       \
    \     smallest_change = i\n            break\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nThe function smallest_change is now implemented in the file smallest_change.jl.",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 ; i >= 0 ; i--\
    \ \n        \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n            arr[i] = arr[i+1]\n            arr[i+1] = arr[i]\n        else\
    \ \n            smallest_change = smallest_change + 1\n            arr[i] = arr[i+1]\n\
    \            arr[i+1] = arr[i]\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change = Int64(0)\n  \
    \  for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ += 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    smallest_change(arr, 0, length(arr)-1) \nend", " \
    \   \n    smallest_change = 0\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change + 1\n        if x != reverse(arr)[1]\n            smallest_change\
    \ = smallest_change - 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns true if the given string\
    \ is a palindrome and false otherwise.", "    \n    smallest_change = 0\n    \n\
    \    for x in arr\n        smallest_change = smallest_change + 1\n        if x\
    \ != reverse(arr)\n            smallest_change = smallest_change - 1\n       \
    \ end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 3\nGiven a binary search tree and a node\
    \ in that tree, find the in-order successor of that node in the tree. \nFor example,\
    \ given the following tree:", "    \n    smallest_change = 0\n    \n    for x\
    \ in arr\n        if x == reverse(arr[x])\n            smallest_change += 1\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 2\nWrite a function that checks if a\
    \ number is palindrome or not. For example,", "    \n    smallest_change = 0\n\
    \    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a binary search tree and a node in it, find\
    \ the in-order successor of that node in the BST.", "    \n    smallest_change\
    \ = 0\n    \n    for i = length(arr) - 2 to 0 step -1\n        if arr[i] > arr[i+1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 3\nGiven a binary search tree and a node in it, find the in-order successor\
    \ of that node in the BST.", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns true if the array arr is sorted in ascending\
    \ order, and false otherwise.", "    \n    smallest_change = Inf \n    for a in\
    \ arr \n        if a < smallest_change \n            smallest_change = a\n   \
    \     end\n    end\n    return smallest_change\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns true if the given string is a palindrome, false\
    \ otherwise. For example, \n\"racecar\" is a palindrome, but \"racecarc\" is not\
    \ a palindrome.", "    largest = maximum(arr)\n    smallest = minimum(arr)\n \
    \   \n    if largest == smallest \n        return largest\n    \n    change =\
    \ largest - smallest\n    \n    if change == 0 \n        return largest\n    \n\
    \    change = change / 2\n    \n    if change == 0 \n        return largest\n\
    \    \n    change = change + 1\n    \n    if change == largest\n        return\
    \ largest\n    \n    change = change + 1\n    \n    if change == largest\n   \
    \     return largest\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    \n    change = change + 1\n    \n    if change ==\
    \ largest\n        return largest\n    \n    change = change + 1\n    \n    if\
    \ change == largest\n        return largest\n    \n    change = change + 1\n \
    \   \n    if change == largest\n        return largest\n    \n    change = change\
    \ + 1\n    \n    if change == largest\n        return largest\n    \n    change\
    \ = change + 1\n    \n    if change == largest\n        return largest\n    \n\
    \    change = change + 1\n    \n    if change == largest\n        return largest\n\
    \    \n    change = change + 1\n    \n    if change == largest\n        return\
    \ largest\n    \n    change = change + 1\n    \n    if change == largest\n   \
    \     return largest\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    \n    change = change + 1\n    \n    if change ==\
    \ largest\n        return largest\n    \n    change = change + 1\n    \n    if\
    \ change == largest\n        return largest\n    \n    change = change + 1\n \
    \   \n    if change == largest\n        return largest\n    \n    change = change\
    \ + 1\n    \n    if change == largest\n        return largest\n    \n    change\
    \ = change + 1\n    \n    if change == largest\n        return largest\n    \n\
    \    change = change + 1\n    \n    if change == largest\n        return largest\n\
    \    \n    change = change + 1\n    \n    if change == largest\n        return\
    \ largest\n    \n    change = change + 1\n    \n    if change == largest\n   \
    \     return largest\n    \n    change = change + 1\n    \n    if change == largest\n\
    \        return largest\n    \n    change = change + 1\n    \n    if change ==\
    \ largest\n        return largest\n    \n    change = change ", "    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if smallest_change > length(arr)\n            break\n        if x ==\
    \ reverse(arr)[1]\n            smallest_change = smallest_change - 1\n       \
    \     break\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 7", "    largest\
    \ = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest - smallest\n\
    \    count = 0\n    for i in arr\n        if i != largest\n            count +=\
    \ 1\n            if diff == 0\n                return count\n            diff\
    \ -= 1\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of times a given element appears\
    \ in a given array.", "    \n    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 7: Find the longest palindromic substring\nGiven a string s, find the\
    \ longest palindromic substring in s. You may assume that the maximum length of\
    \ s is 1000.", "    \n    smallest_change = 0\n    \n    for x in arr\n      \
    \  smallest_change = smallest_change + 1\n        if x == reverse(arr)[1]\n  \
    \          return smallest_change\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 8\nGiven a binary tree and a node in it, find the in-order successor of\
    \ that node. \nFor example, given the following tree:", "    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n", "    smallest_change(arr, 0, length(arr)-1)\
    \ \nend", "    \n    smallest_change = 0\n    \n    for i = length(arr) - 2 to\
    \ -1 \n        if arr[i] > arr[i+1] \n            smallest_change = smallest_change\
    \ + 1\n        else \n            smallest_change = smallest_change + 1\n    \
    \    end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 8\nA palindromic\
    \ number reads the same both ways. The largest palindrome made from the product\
    \ of two 2-digit numbers is 9009 = 91 x 99.", "    smallest_change = 0\n    for\
    \ x in arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.", "    \n\
    \    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns an array of integers\
    \ such that each element in the array is either 0 or 1. For example:", "    \n\
    \    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of palindromic\
    \ permutations of an input string.", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr)-length(arr))\n    for i = 1:length(arr)\n\
    \        if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr)-i)\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.4>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.4>\n\
    smallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n\
    </cell>\n<code language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n\
    <code language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n</cell>\n<code\
    \ language=julia-1.4>\nsmallest_change([1,2,3,4,5,6,7,8,9,0])\n", "    smallest_change\
    \ = 0\n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1,2,3,4,3,2,1,2])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,3,2,1,2])", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr))\n    for i = 1:length(arr)\n       \
    \ if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr) - i)\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 7: Find the largest palindromic subarray\nGiven an array arr of integers,\
    \ find the largest palindromic subarray. Palindromic subarrays are arrays that\
    \ read the same backwards and forwards. In one change, you can change one element\
    \ to any other element.", "    \n    \n    \n    \n    \n    \n    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n", "    smallest_change = 0\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = Int64(0)\n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n", "    smallest_change(arr,\
    \ 0, length(arr)-1)\nend", "    smallest_change(arr, length(arr)-1)\nend", " \
    \   largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest\
    \ == smallest\n        return 0\n    \n    changes = 0\n    \n    for x in arr\n\
    \        if x != largest\n            changes +=1\n        end\n    end\n    \n\
    \    return changes\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 8\nWrite a function that returns true if the array arr\
    \ is sorted in ascending order, and false otherwise.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        smallest_change = smallest_change + 1\n\
    \        if smallest_change > length(arr)\n            break\n    end\n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.", "    \n    smallest_change = 0\n    \n    for\
    \ x in arr\n        smallest_change = smallest_change + 1\n        if x != reverse(arr)\n\
    \            smallest_change = smallest_change - 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 4\nWrite a function that returns the number of palindromic\
    \ permutations of an array. For example, given the array [1,2,3,4,5,6,7,8,9],\
    \ your function should return 8.", "    largest = maximum(arr)\n    smallest =\
    \ minimum(arr)\n    \n    largest = largest * 2\n    smallest = smallest * 2\n\
    \    \n    largest = largest * 2\n    smallest = smallest * 2\n    \n    largest\
    \ = largest * 2\n    smallest = smallest * 2\n    \n    largest = largest * 2\n\
    \    smallest = smallest * 2\n    \n    largest = largest * 2\n    smallest =\
    \ smallest * 2\n    \n    largest = largest * 2\n    smallest = smallest * 2\n\
    \    \n    largest = largest * 2\n    smallest = smallest * 2\n    \n    largest\
    \ = largest * 2\n    smallest = smallest * 2\n    \n    largest = largest * 2\n\
    \    smallest = smallest * 2\n    \n    largest = largest * 2\n    smallest =\
    \ smallest * 2\n    \n    largest = largest * 2\n    smallest = smallest * 2\n\
    \    \n    largest = largest * 2\n    smallest = smallest * 2\n    \n    largest\
    \ = largest * 2\n    smallest = smallest * 2\n    \n    largest = largest * 2\n\
    \    smallest = smallest * 2\n    \n    largest = largest * 2\n    smallest =\
    \ smallest * 2\n    \n    largest = largest * 2\n    smallest = smallest * 2\n\
    \    \n    largest = largest * 2\n    smallest = smallest * 2\n    \n    largest\
    \ = largest * 2\n    smallest = smallest * 2\n    \n    largest = largest * 2\n\
    \    smallest = smallest * 2\n    \n    largest = largest * 2\n    smallest =\
    \ smallest * 2\n    \n    largest = largest * 2\n    smallest = smallest * 2\n\
    \    \n    largest = largest * 2\n    smallest = smallest * 2\n    \n    largest\
    \ = largest * 2\n    smallest = smallest * 2\n    \n    largest = largest * 2\n\
    \    smallest = smallest * 2\n    \n    largest = largest * 2\n    smallest =\
    \ smallest * 2\n    \n    largest = largest * 2\n    smallest = smallest * 2\n\
    \    \n    lar", "    smallest_change(arr, 0, length(arr)-1) \nend", "    \n \
    \   smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 9\nA palindromic number reads the same backwards and\
    \ forward. For example, 5321 is a palindromic number.", "    smallest_change =\
    \ Inf \n    for x in arr \n        if x == reverse(arr) \n            smallest_change\
    \ = min(smallest_change, length(arr) - 1) \n        else \n            smallest_change\
    \ = min(smallest_change, length(arr) - 1) \n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that takes a string and returns\
    \ the number of words in the string.", "    \n    smallest_change = 0\n    \n\
    \    for x in arr\n        if x == reverse(arr)\n            smallest_change =\
    \ smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven an array, find the minimum number of elements\
    \ that need to be changed to make the array palindromic. A palindromic array is\
    \ an array that is read the same backwards and forwards. In one change, you can\
    \ change one element to any other element.", "    smallest_change(arr, 0, length(arr)-1)\n\
    end", "    \n    smallest_change = 0\n    \n    for x in arr\n        if x ==\
    \ reverse(arr[x])\n            smallest_change = smallest_change + 1\n       \
    \ end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that checks if a number is palindrome or not.", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    largest = largest * largest\n    smallest\
    \ = smallest * smallest\n    \n    largest = largest * largest\n    smallest =\
    \ smallest * smallest\n    \n    largest = largest * largest\n    smallest = smallest\
    \ * smallest\n    \n    largest = largest * largest\n    smallest = smallest *\
    \ smallest\n    \n    largest = largest * largest\n    smallest = smallest * smallest\n\
    \    \n    largest = largest * largest\n    smallest = smallest * smallest\n \
    \   \n    largest = largest * largest\n    smallest = smallest * smallest\n  \
    \  \n    largest = largest * largest\n    smallest = smallest * smallest\n   \
    \ \n    largest = largest * largest\n    smallest = smallest * smallest\n    \n\
    \    largest = largest * largest\n    smallest = smallest * smallest\n    \n \
    \   largest = largest * largest\n    smallest = smallest * smallest\n    \n  \
    \  largest = largest * largest\n    smallest = smallest * smallest\n    \n   \
    \ largest = largest * largest\n    smallest = smallest * smallest\n    \n    largest\
    \ = largest * largest\n    smallest = smallest * smallest\n    \n    largest =\
    \ largest * largest\n    smallest = smallest * smallest\n    \n    largest = largest\
    \ * largest\n    smallest = smallest * smallest\n    \n    largest = largest *\
    \ largest\n    smallest = smallest * smallest\n    \n    largest = largest * largest\n\
    \    smallest = smallest * smallest\n    \n    largest = largest * largest\n \
    \   smallest = smallest * smallest\n    \n    largest = largest * largest\n  \
    \  smallest = smallest * smallest\n    \n    largest = largest * largest\n   \
    \ smallest = smallest * smallest\n    \n    largest = largest * largest\n    smallest\
    \ = smallest * smallest\n    \n    largest = largest * largest\n    smallest =\
    \ smallest * smallest\n    \n    largest = largest * largest\n    smallest = ",
  "    smallest_change(arr, 0, length(arr)-1)\nend", "    smallest_change(arr, 0,\
    \ length(arr)-1) \nend", "    largest = maximum(arr)\n    smallest = minimum(arr)\n\
    \    \n    if largest == smallest\n        return 0\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    ", "    smallest_change = 0\n    \n\
    \    for x in arr\n        if x == reverse(arr)\n            smallest_change +=\
    \ 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nQuestion 2.2\nWrite a function\
    \ that takes an array of integers and returns the number of elements in the array\
    \ that are greater than the average of the array. For example, if the array is\
    \ [1,2,3,4,5,6,7,8,9], the average is 5.5, so the function should return 4.",
  "    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)\n            smallest_change\
    \ += 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 9\nA palindromic number reads the same backwards and forward. For example,\
    \ 321 is a palindromic number while 321421 is a palindromic number.", "    smallest_change\
    \ = 0\n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    return smallest_change\nend\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n\
    <text>\nProblem 3\nGiven a binary search tree and a node in that tree, find the\
    \ in-order successor of that node. \nFor example, given the following tree:",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given value appears in an array. For example, given [1,2,2,3,3,4,4,4,5,5,5,5,6,6,6,6,7,7,7,7,8,8,8,8,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,",
  "    \n    smallest_change = 0\n    \n    for x in arr\n        smallest_change\
    \ = smallest_change + 1\n        if x == reverse(arr)[1]\n            return smallest_change\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 7: Find the longest\
    \ palindromic substring\nGiven a string s, find the longest palindromic substring\
    \ in s. A palindromic substring is a substring that reads the same backwards and\
    \ forwards.", "    \n    smallest_change = Int64(0)\n    \n    for x in arr\n\
    \        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.", "    \n    minimum = 0\n    \n    for element in arr\n    \
    \    if element == minimum\n            minimum = minimum + 1\n        else\n\
    \            minimum = minimum - 1\n        end\n    end\n    \n    return minimum\n\
    end\n</cell>\n<code language=julia-1.5>", "    smallest_change = 0\n    for x\
    \ in arr\n        if x == reverse(arr)\n            smallest_change += 1\n   \
    \     end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nGiven a string,\
    \ find the length of the longest substring without repeating characters.", " \
    \   \n    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change += 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of times\
    \ a given element appears in an array. For example, given [1,2,3,4,5,6,7], the\
    \ function should return 3 because 3 appears 3 times in the array.", "    \n \
    \   smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7: Find the longest palindromic substring in an array\
    \ of strings\nGiven an array of strings, find the longest palindromic substring.",
  "    largest = maximum(arr)\n    smallest = minimum(arr)\n    \n    if largest ==\
    \ smallest\n        return 0\n    end\n    \n    change = largest - smallest\n\
    \    \n    if change == 0\n        return 1\n    end\n    \n    change = change\
    \ / 2\n    \n    if change == 1\n        return 2\n    end\n    \n    change =\
    \ change / 2\n    \n    if change == 1\n        return 3\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 1\n        return 4\n    end\n    \n  \
    \  change = change / 2\n    \n    if change == 1\n        return 5\n    end\n\
    \    \n    change = change / 2\n    \n    if change == 1\n        return 6\n \
    \   end\n    \n    change = change / 2\n    \n    if change == 1\n        return\
    \ 7\n    end\n    \n    change = change / 2\n    \n    if change == 1\n      \
    \  return 8\n    end\n    \n    change = change / 2\n    \n    if change == 1\n\
    \        return 9\n    end\n    \n    change = change / 2\n    \n    if change\
    \ == 1\n        return 10\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 1\n        return 11\n    end\n    \n    change = change / 2\n   \
    \ \n    if change == 1\n        return 12\n    end\n    \n    change = change\
    \ / 2\n    \n    if change == 1\n        return 13\n    end\n    \n    change\
    \ = change / 2\n    \n    if change == 1\n        return 14\n    end\n    \n \
    \   change = change / 2\n    \n    if change == 1\n        return 15\n    end\n\
    \    \n    change = change / 2\n    \n    if change == 1\n        return 16\n\
    \    end\n    \n    change = change / 2\n    \n    if change == 1\n        return\
    \ 17\n    end\n    \n    change = change / 2\n    \n    if change == 1\n     \
    \   return 18\n    end\n    \n    change = change / 2\n    \n    if change ==\
    \ 1\n        return 19\n    end\n    \n    change = change / 2\n    \n    if change\
    \ == 1\n        return 20\n    end\n    \n    change = change / 2\n    \n    if\
    \ change == 1\n        return 21\n    end\n    \n    change = change / 2\n   \
    \ \n    if change == 1\n        return 22\n    end\n    \n    change = change\
    \ / 2\n    \n    if change == 1\n        return 23\n    end\n    \n    ", "  \
    \  smallest_change = 0\n    for x in arr\n        smallest_change = smallest_change\
    \ if x == reverse(arr[x])\n    end\n    return smallest_change\nend", "    smallest_change\
    \ = 0\n    for x in arr\n        smallest_change = smallest_change + 1\n     \
    \   if smallest_change > length(arr)\n            break\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change - 1\n            break\n    end\n\
    \    return smallest_change\nend\n</cell>\n<code language=julia-1.4>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that takes an array of integers\
    \ and returns the number of elements in the array that are less than or equal\
    \ to each other. For example:", "    \n    smallest_change = 0\n    \n    for\
    \ i = length(arr) - 2 ; i >= 0 ; i-- \n        smallest_change = smallest_change\
    \ + 1 \n        if arr[i] != reverse(arr[i]) \n            break\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a binary search tree and a node in it, find\
    \ the in-order successor of that node in the BST.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given element\
    \ appears in an array. For example, given [1,2,3,4,5,6,7,8,9], the function should\
    \ return 3 because 3 appears 3 times in the array.", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of times a given value appears\
    \ in an array. For example,", "    smallest_change = 0\n    largest = maximum(arr)\n\
    \    smallest_change = largest\n    for x in arr\n        if x == largest\n  \
    \          smallest_change = smallest_change + 1\n        elseif x == smallest_change\n\
    \            smallest_change = smallest_change + 1\n        else\n           \
    \ smallest_change = smallest_change + 1\n        end\n    end\n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>", "    \n    smallest_change = 0\n   \
    \ \n    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of palindromic\
    \ permutations of a given string.", "    \n    smallest_change = 0\n    \n   \
    \ for x in arr\n        if x == reverse(arr)[1]\n            smallest_change +=\
    \ 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 7: Find the largest\
    \ palindromic subarray\nGiven a string, find the largest palindromic substring\
    \ in it.", "    \n    smallest_change = 0\n    \n    for a in arr\n        if\
    \ a > arr[smallest_change]\n            smallest_change = i\n        end\n   \
    \ end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nGiven a string,\
    \ find the length of the longest substring without repeating characters.", " \
    \   largest = maximum(arr)\n    smallest = minimum(arr)\n    diff = largest -\
    \ smallest\n    count = 0\n    for el in arr\n        if el == smallest || el\
    \ == largest\n            count += 1\n        else\n            if el == diff\
    \ / 2\n                count += 1\n            else\n                count +=\
    \ 2\n        end\n    end\n    return count\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 7\nGiven a binary\
    \ search tree and a node in it, find the in-order successor of that node in the\
    \ BST.", "    \n    smallest_change = 0\n    \n    for a in arr\n        if a\
    \ < arr[smallest_change]\n            smallest_change = i\n        end\n    end\n\
    \    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", " \
    \   smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nExercise 3\nWrite a function that returns the number of palindromic\
    \ permutations of an array. For example, if the input array is [1,2,3,4,5,6,7],\
    \ then the output should be 6 (1 2 3 4 5 6 7 and 7 6 5 4 3 2 1). Make sure to\
    \ account for duplicate permutations.", "    smallest_change(arr, 0, length(arr)-1)\n\
    end", "    \n    smallest_change = 0\n    \n    for x in arr\n        if x ==\
    \ reverse(arr)\n            smallest_change = smallest_change + 1\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ number of elements in a vector that are less than a given value.", "    \n \
    \   smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  smallest_change = Int64(0)\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-length(arr))\n    for i = 1:length(arr)\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = minimum(smallest_change, length(arr)-length(arr))\n\
    \        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements in the array\
    \ that are less than the mean of the array. For example, if the array is [1,2,3,4,5,6,7,8,9],\
    \ the function should return 3.", "    smallest_change(arr, 0, length(arr)-1)\n\
    end", "    smallest_change = 0\n    smallest_change = minimum(smallest_change,\
    \ length(arr)-1)\n    for i = smallest_change, length(arr)-1 do \n        if arr[i]\
    \ != reverse(arr[i]) \n            smallest_change = i\n            break\n  \
    \      end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nThe function smallest_change\
    \ is now complete. Let's test it on a few examples:", "    largest = maximum(arr)\n\
    \    smallest = minimum(arr)\n    \n    if largest == smallest\n        return\
    \ largest\n    end\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n  \
    \  largest = largest / 10\n    smallest = smallest / 10\n    \n    largest = largest\
    \ * 10 + largest\n    smallest = smallest * 10 + smallest\n    \n    largest =\
    \ largest / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10\
    \ + largest\n    smallest = smallest * 10 + smallest\n    \n    largest = largest\
    \ / 10\n    smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n\
    \    smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n \
    \   smallest = smallest / 10\n    \n    largest = largest * 10 + largest\n   \
    \ smallest = smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest\
    \ = smallest / 10\n    \n    largest = largest * 10 + largest\n    smallest =\
    \ smallest * 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest\
    \ / 10\n    \n    largest = largest * 10 + largest\n    smallest = smallest *\
    \ 10 + smallest\n    \n    largest = largest / 10\n    smallest = smallest / 10\n\
    \    \n    largest = largest * 10 + largest\n    smallest = smallest * 10 + smallest\n\
    \    \n    largest = largest / 10\n    smallest = smallest / 10\n    \n    largest\
    \ = largest * 10 + largest\n    smallest = smallest * 10 + ", "    \n    \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n", "    smallest_change = Inf \n  \
    \  for x in arr \n        if x == reverse(arr[x]) \n            smallest_change\
    \ = min(smallest_change, x - 1) \n        else \n            smallest_change =\
    \ min(smallest_change, x - 1) \n    end \n    return smallest_change \nend ",
  "    \n    smallest_change = Int64(0)\n    \n    for x in arr\n        if x == reverse(arr)[1]\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 8\nA palindromic number reads the same backwards and\
    \ forward. For example, 321 is a palindromic number while 321421 is a not. Find\
    \ the sum of all palindromic numbers less than one million. The palindromic numbers\
    \ are all less than one million.", "    \n    smallest_change = 0\n    \n    for\
    \ x in arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary search tree and a node in it, find the in-order successor\
    \ of that node. \nThe in-order successor of a node is the node with the smallest\
    \ value greater than the node's value.", "    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n", "    \n    smallest_change = 0\n    \n    for x in arr\n\
    \        if x == reverse(arr[x])\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    \n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 8\nA palindromic number reads the same backwards and forward. For example,\
    \ 321 is a palindromic number while 3211 is not a palindromic number.", "    \n\
    \    smallest_change = 0\n    \n    for x in arr\n        if x == reverse(arr)\n\
    \            smallest_change = smallest_change + 1\n        end\n    end\n   \
    \ \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 8\nWrite a function that returns the number of palindromic\
    \ permutations of a given string.", "    \n    smallest_change = Int64(0)\n  \
    \  \n    for i = length(arr) - 1 downto 1 do\n        if arr[i] != reverse(arr[i])\n\
    \            smallest_change = i\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<text>\nProblem 7\nWrite a function that takes an array of integers\
    \ and returns the number of unique elements in the array.", "    smallest_change\
    \ = 0\n    for x in arr\n        smallest_change = smallest_change if x < smallest_change\
    \ else x\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>",
  "    smallest_change(arr, 0, length(arr)-1) \nend", "    \n    minimum = Int.MaxValue\n\
    \    \n    for x in arr\n        if x < minimum\n            minimum = x\n   \
    \     end\n    end\n    \n    for x in arr\n        if x == minimum\n        \
    \    minimum = x\n        end\n    end\n    \n    return minimum\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n<code\
    \ language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,4,5,6,7,8,9])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an array of integers and returns the number of elements in the array\
    \ that are less than or equal to zero.", "    smallest_change(arr, 0, length(arr)-1)\n\
    end", "    \n    smallest_change = 0\n    \n    for x in arr\n        if x ==\
    \ reverse(arr)\n            smallest_change = smallest_change + 1\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 7: Find the longest\
    \ palindromic substring in an array of strings", "    \n    smallest_change =\
    \ 0\n    \n    for a in arr\n        if a < arr[smallest_change]\n           \
    \ smallest_change = i\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nWrite a function that returns the number of palindromic\
    \ permutations of a given string.", "    \n    smallest_change = 0\n    \n   \
    \ for x in arr\n        if x == reverse(arr)\n            smallest_change += 1\n\
    \        end\n    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 4, 3, 2, 2])\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,\
    \ 2, 3, 2, 1])\n</cell>\n<text>\nProblem 8\nA palindromic number reads the same\
    \ backwards and forward. For example, 121 is a palindromic number while 123444332211\
    \ is a palindromic number.", "    \n    smallest_change = 0\n    \n    for x in\
    \ arr\n        if x == reverse(arr)[1]\n            smallest_change = smallest_change\
    \ + 1\n        end\n    end\n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nA palindromic\
    \ number reads the same both ways. The largest palindrome made from the product\
    \ of two 2-digit numbers is 9009 = 91 x 99.", "    smallest_change = 0\n    \n\
    \    for x in arr\n        if x == reverse(arr[x])\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 3\nGiven a string, find the length of the longest substring\
    \ without repeating characters.", "    smallest_change = 0\n    smallest_change\
    \ = minimum(smallest_change, length(arr))\n    for i = 1:length(arr)\n       \
    \ if arr[i] != reverse(arr[i])\n            smallest_change = minimum(smallest_change,\
    \ length(arr) - i)\n        end\n    end\n    return smallest_change\nend\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\n\
    Problem 4\nWrite a function that returns true if the given string is a palindrome.\
    \ For example, \n\"racecar\" is a palindrome, but \"madam\" is not a palindrome.",
  "    \n    smallest_change = 0\n    \n    for i = length(arr) downto 1 do\n    \
    \    if arr[i] != reverse(arr[i])\n            smallest_change = i\n        end\n\
    \    end\n    \n    return smallest_change\nend\n</cell>\n<code language=julia-1.5>\n\
    smallest_change([1,2,3,5,4,7,9,6])\n</cell>\n<text>\nProblem 3\nGiven a string,\
    \ find the length of the longest substring without repeating characters.", " \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x != reverse(arr)\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that returns an array of all permutations\
    \ of a given string. For example, given \"abc\", your function should return [\"\
    abc\", \"acb\", \"bac\", \"bca\", \"cab\", \"cba\"].", "    \n    smallest_change\
    \ = 0\n    \n    for x in arr\n        if x == reverse(arr)[1]\n            smallest_change\
    \ = smallest_change + 1\n        end\n    end\n    \n    return smallest_change\n\
    end\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<code language=julia-1.5>\nsmallest_change([1, 2, 3, 4, 3, 2, 2])\n</cell>\n\
    <code language=julia-1.5>\nsmallest_change([1, 2, 3, 2, 1])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the number of times a given element\
    \ appears in an array. For example,", "    \n    smallest_change = 0\n    \n \
    \   for i = length(arr) - 2 ; i >= 0 ; i-- \n        \n        if arr[i] > arr[i+1]\
    \ \n            smallest_change = smallest_change + 1\n        else \n       \
    \     smallest_change = smallest_change + 1\n        end\n    end\n    \n    return\
    \ smallest_change\nend\n</cell>\n<code language=julia-1.5>\nsmallest_change([1,2,3,5,4,7,9,6])\n\
    </cell>\n<text>\nProblem 7\nWrite a function that takes a vector of integers and\
    \ returns the number of unique elements in the vector. \nFor example, unique([1,1,2,3])\
    \ should return 3."]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
