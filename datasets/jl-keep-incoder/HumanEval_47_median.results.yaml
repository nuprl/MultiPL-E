name: HumanEval_47_median
language: julia
results:
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(string(\"median of empty list\")))\n\
    \    end\n    return l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the mean\
    \ of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7xmn7qlx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7xmn7qlx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n\
    \    \n    if mid%2 == 0 \n        return l[mid]\n    \n    mid = ceil(mid)\n\
    \    \n    return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should work for both real and complex numbers.\
    \ \nThe function should work for any number of arguments.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb7epsdjy.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb7epsdjy.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    mid = floor(mid)\n\
    \    \n    if mid%2 == 0\n        return l[mid]\n    else\n        return (l[mid-1]\
    \ + l[mid])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsw_2bjrp.jl:27\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.5 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpsw_2bjrp.jl:27\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsw_2bjrp.jl:26\ntest set: Test Failed at /tmp/tmpsw_2bjrp.jl:28\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 1000.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpsw_2bjrp.jl:28\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsw_2bjrp.jl:26\ntest set: Test Failed at /tmp/tmpsw_2bjrp.jl:30\n\
    \  Expression: candidate([6, 5]) == 5.5\n   Evaluated: 6.0 == 5.5\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsw_2bjrp.jl:30\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsw_2bjrp.jl:26\ntest set: Test Failed at /tmp/tmpsw_2bjrp.jl:31\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 9.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpsw_2bjrp.jl:31\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsw_2bjrp.jl:26\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 4 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsw_2bjrp.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjm6wbtwj.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjm6wbtwj.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle value\" of\
    \ the sorted set. \nThe median is often called the \"middle index\" of the sorted\
    \ set. \nThe median is often called the \"middle value\" of the sorted set. \n\
    The median is often called the \"middle index\" of the sorted set. \nThe median\
    \ is often called the \"middle value\" of the sorted set. \nThe median is often\
    \ called the \"middle index\" of the sorted set. \nThe median is often called\
    \ the \"middle value\" of the sorted set. \nThe median is often called the \"\
    middle index\" of the sorted set. \nThe median is often called the \"middle value\"\
    \ of the sorted set. \nThe median is often called the \"middle index\" of the\
    \ sorted set. \nThe median is often called the \"middle value\" of the sorted\
    \ set. \nThe median is often called the \"middle index\" of the sorted set. \n\
    The median is often called the \"middle value\" of the sorted set. \nThe median\
    \ is often called the \"middle index\" of the sorted set. \nThe median is often\
    \ called the \"middle value\" of the sorted set. \nThe median is often called\
    \ the \"middle index\" of the sorted set. \nThe median is often called the \"\
    middle value\" of the sorted set. \nThe median is often called the \"middle index\"\
    \ of the sorted set. \nThe median is often called the \"middle value\" of the\
    \ sorted set. \nThe median is often called the \"middle index\" of the sorted\
    \ set. \nThe median is often called the \"middle value\" of the sorted set. \n\
    The median is often called the \"middle index\" of the sorted set. \nThe median\
    \ is often called the \"middle value\" of the sorted set. \nThe median is often\
    \ called the \"middle index\" of the sorted set. \nThe median is often called\
    \ the \"middle value\" of the sorted set. \nThe median is often called the \"\
    middle index\" of the sorted set. \nThe median is often called the \"middle value\"\
    \ of the sorted set. \n\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpewwmmy49.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpewwmmy49.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2.0\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4zablzvp.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4zablzvp.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]+l[mid])\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8se6ln7t.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8se6ln7t.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return NaN\n    \n    mid = floor(mid)\n\
    \    if mid == 0\n        return l[mid]\n    \n    left = mid - 1\n    right =\
    \ mid\n    \n    while left < right\n        if l[left] >= l[right]\n        \
    \    right -= 1\n        else\n            left += 1\n        end\n    end\n \
    \   \n    return l[left]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpps06wxdr.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpps06wxdr.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    if mid %\
    \ 2 == 0\n        return (l[mid-1] + l[mid]) / 2\n    else\n        return l[mid]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers. Write\
    \ a test that passes when the function returns the correct answer. Write a test\
    \ that fails when the function returns the incorrect answer.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpybpqli6p.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpybpqli6p.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 0\n        return l[floor(length(l)/2)]\n    else\n\
    \        return (l[floor(length(l)/2)] + l[floor(length(l)/2)-1])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the mode of a given list of numbers. \nThe\
    \ mode is the number that appears most often in the list. \nThe function should\
    \ return the mode of the list passed as a parameter.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbcf9fg58.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbcf9fg58.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<text>\n\
    median([3, 1, 2, 4, 5])\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6n8wuhrr.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6n8wuhrr.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument. \nThe function should return a single number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmcnmm66u.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmcnmm66u.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers, rounded to a specified number of decimal places.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2k5oxso.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2k5oxso.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ZeroDivisionError(\"median of an empty list\"\
    ))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    if\
    \ l[mid] == l[mid - 1]\n        return l[mid]\n    end\n    \n    mid1 = mid -\
    \ 1\n    mid2 = mid + 1\n    \n    if l[mid1] > l[mid2]\n        return median(l[mid1:mid2])\n\
    \    else\n        return median(l[mid2:mid1])\n    end\nend\n</cell>\n<text>\n\
    Median of Lists\nThe median of a list of numbers is defined as the middle number\
    \ of the sorted list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3mzbyq49.jl:31\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3mzbyq49.jl:31\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpqjh2d84i.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex at ./number.jl:78 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpqjh2d84i.jl:12\n   [3] top-level scope at /tmp/tmpqjh2d84i.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqjh2d84i.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqjh2d84i.jl:23\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  BoundsError\n  Stacktrace:\n   [1] getindex at\
    \ ./number.jl:78 [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmpqjh2d84i.jl:12\n\
    \   [3] top-level scope at /tmp/tmpqjh2d84i.jl:23\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqjh2d84i.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqjh2d84i.jl:24\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78 [inlined]\n\
    \   [2] median(::Array{Int64,1}) at /tmp/tmpqjh2d84i.jl:12\n   [3] top-level scope\
    \ at /tmp/tmpqjh2d84i.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqjh2d84i.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqjh2d84i.jl:25\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmpqjh2d84i.jl:12\n   [3]\
    \ top-level scope at /tmp/tmpqjh2d84i.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqjh2d84i.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmpqjh2d84i.jl:26\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmpqjh2d84i.jl:12\n   [3]\
    \ top-level scope at /tmp/tmpqjh2d84i.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpqjh2d84i.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqjh2d84i.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers. \nThe function should take a list of numbers\
    \ as an argument. \nThe function should return the median of the numbers in the\
    \ list.\nThe function should raise an error if the list is empty.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp63nxhf00.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp63nxhf00.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(ZeroDivisionError, \"median of an\
    \ empty list\")\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n\
    \    \n    mid = floor(mid)\n    \n    if l[mid] == l[mid - 1]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid + 1]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n    end\n  \
    \  \n    if l[mid] == l[mid+1]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 2]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ + 2]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 3]\n  \
    \      return l[mid]\n    end\n    \n    if l[mid] == l[mid + 3]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 4]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid + 4]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 5]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid + 5]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 6]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ + 6]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid - 7]\n  \
    \      return l[mid]\n    end\n    \n    if l[mid] == l[mid + 7]\n        return\
    \ l[mid]\n    end\n    \n    if l[mid] == l[mid - 8]\n        return l[mid]\n\
    \    end\n    \n    if l[mid] == l[mid + 8]\n        return l[mid]\n    end\n\
    \    \n    if l[mid] == l[mid - 9]\n        return l[mid]\n    end\n    \n   \
    \ if l[mid] == l[mid + 9]\n        return l[mid]\n    end\n    \n    if l[mid]\
    \ == l[mid - 10]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid\
    \ + 10]\n        return l[mid]\n    end\n    \n    if l[mid] == l[mid \nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeql_c6ex.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeql_c6ex.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[floor(length(l)/2)]\n    else\n\
    \        return (l[floor(length(l)/2)] + l[floor(length(l)/2)-1])/2\n    end\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that calculates the mean of a list of numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphsbtkqax.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphsbtkqax.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return Float64(0)\n    \n    mid = floor(Int,\
    \ length(l) / 2)\n    \n    if length(l) % 2 == 0 \n        return l[mid]\n  \
    \  \n    else \n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument. \nThe function should return the median of the numbers in the list.\
    \ \nThe median is the number in the middle of the list that has the highest value.\
    \ \nIf the list is empty, return Float64(0). \nIf the list has one element, return\
    \ that element. \nIf the list has two elements, return the average of the two\
    \ elements. \nIf the list has more than two elements, return the average of the\
    \ two middle elements. \nFor example, if the list is [4, 6, 10, 2, 3], the median\
    \ is 6.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgjeifg9c.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgjeifg9c.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid % 2 == 0\
    \ \n        return l[mid / 2]\n    \n    return median(l[mid/2 : end - 1]) + median(l[1\
    \ : mid/2])\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the mean of a list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqslinsuu.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqslinsuu.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp28b7xb88.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp28b7xb88.jl:16\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28b7xb88.jl:15\ntest set: Test Failed at /tmp/tmp28b7xb88.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmp28b7xb88.jl:17\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28b7xb88.jl:15\ntest set: Error During Test at\
    \ /tmp/tmp28b7xb88.jl:18\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmp28b7xb88.jl:9\n   [3] top-level scope at /tmp/tmp28b7xb88.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp28b7xb88.jl:15\n  \ntest set: Test Failed at\
    \ /tmp/tmp28b7xb88.jl:19\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 6.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmp28b7xb88.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28b7xb88.jl:15\ntest set: Test Failed at /tmp/tmp28b7xb88.jl:20\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 3.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp28b7xb88.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp28b7xb88.jl:15\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp28b7xb88.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2==0\n\
    \        return l[(length(l)+1)/2-1]\n    else\n        return l[(length(l)+1)/2]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    The median of a finite set of numbers is called the \"middle\" of the set. For\
    \ example, in the set {1, 2, 3, 4}, the median is (2 + 4) / 2 = 2.5.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzw6nw_qq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzw6nw_qq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2+1])/2\n    end\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis is\
    \ not an answer, but a comment.\n<|/ c |>\n<| c |>\nIt is an answer, but not a\
    \ complete one. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked for median of elements in the list l. Your code returns\
    \ median of list l. OP asked \nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwywn0ak3.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwywn0ak3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise: Write a function that returns the median of\
    \ a list of numbers. Write a test that passes when the function returns the correct\
    \ answer. Write a test that fails when the function returns the incorrect answer.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp080wrbli.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp080wrbli.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end-1]\n\
    \    \n    if median == 0\n        median = median(sort(l)[1:end-1])\n    end\n\
    \    \n    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ missing, missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], missing, missing, missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], missing, missing, missing, missing)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], missing, missing, missing, missing, missing)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing,\
    \ missing, missing, missing, missing, missing)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], missing, missing, missing, missing, missing,\
    \ missing, missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], missing, missing, missing, missing, missing, missing, missing, missing)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing, missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing, missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing, missing)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], missing,\
    \ missing, missing, missing, missing, missing, missing, missing, missing, missing,\
    \ missing)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ missing, missing, missing, missing, missing, \nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4d_xtakd.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4d_xtakd.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    if mid % 2 == 0\n\
    \        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function to compute the mean of a list of numbers.\
    \ \nThe function should take a list of numbers and return a Float64.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpysmx33cz.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpysmx33cz.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpql1r752w.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpql1r752w.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = floor(mid)\n\
    \    if mid == 1 \n        return l[1]\n    \n    if mid == length(l)\n      \
    \  return l[mid]\n    \n    left = mid - 1\n    right = mid + 1\n    \n    if\
    \ l[left] > l[right] \n        return median(l[left:right])\n    \n    return\
    \ median(l[left:right])\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkj3bd2b9.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkj3bd2b9.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError())\n    end\n    return\
    \ l[mid-1]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise\nWrite a function that returns the median of a list of numbers,\
    \ rounded to two decimal places.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcmzptz1d.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcmzptz1d.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers and\
    \ return the median of the numbers. \nThe median of a list of numbers can be defined\
    \ as the middle number of the list \ndivided by the number of elements in the\
    \ list. \nFor example, if the list is [3, 1, 2, 4, 5], the median is 2.5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgv1kdg93.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgv1kdg93.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpw6ri6bzs.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmpw6ri6bzs.jl:0\n   [4] top-level scope at /tmp/tmpw6ri6bzs.jl:21\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpw6ri6bzs.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6ri6bzs.jl:22\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpw6ri6bzs.jl:0\n\
    \   [4] top-level scope at /tmp/tmpw6ri6bzs.jl:22\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpw6ri6bzs.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6ri6bzs.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpw6ri6bzs.jl:0\n\
    \   [4] top-level scope at /tmp/tmpw6ri6bzs.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpw6ri6bzs.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6ri6bzs.jl:24\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpw6ri6bzs.jl:0\n\
    \   [4] top-level scope at /tmp/tmpw6ri6bzs.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpw6ri6bzs.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpw6ri6bzs.jl:25\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.5 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpw6ri6bzs.jl:0\n\
    \   [4] top-level scope at /tmp/tmpw6ri6bzs.jl:25\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpw6ri6bzs.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpw6ri6bzs.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor((length(l)+1)/2)\n    if length(l) == 0 \n        throw(DomainError(\"\
    \"))\n    end\n    if mid == 1 \n        return l[1]\n    end\n    if l[mid] ==\
    \ l[mid-1] \n        return median(l[mid+1:end]) \n    end\n    return median(l[mid-1:mid+2])\
    \ \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1p3cinxt.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1p3cinxt.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv50x5u18.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv50x5u18.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    median = (l[mid-1]\
    \ + l[mid]) / 2\n    return median\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe median is the number in the middle of the\
    \ sorted list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps2i0xyjm.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps2i0xyjm.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2==0\n\
    \        return l[floor(length(l)/2)]\n    else\n        return (l[floor(length(l)/2)]+l[floor(length(l)/2)-1])/2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers, rounded\
    \ to two decimal places.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpki24s5g3.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpki24s5g3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the mean of a list of\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmdldd890.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmdldd890.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the median of a list of numbers. If the list has an\
    \ even number of elements, it should return the average of the two middle numbers.\
    \ If the list has an odd number of elements, it should return the middle number.\
    \ For example, median([3, 1, 2, 4, 5]) should return 3, and median([3, 1, 2, 4,\
    \ 3, 5]) should return 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvk81smy5.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvk81smy5.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    mid = floor(mid)\n\
    \    if mid == 0\n        return l[mid - 1]\n    end\n    \n    if l[mid] == l[mid\
    \ - 1]\n        return median(l[mid+1:end])\n    end\n    \n    if l[mid] == l[mid\
    \ - 2]\n        return median(l[mid-1:mid+1])\n    end\n    \n    if l[mid] ==\
    \ l[mid - 3]\n        return median(l[mid-2:mid+2])\n    end\n    \n    if l[mid]\
    \ == l[mid - 4]\n        return median(l[mid-3:mid+3])\n    end\n    \n    if\
    \ l[mid] == l[mid - 5]\n        return median(l[mid-4:mid+4])\n    end\n    \n\
    \    if l[mid] == l[mid - 6]\n        return median(l[mid-5:mid+5])\n    end\n\
    \    \n    if l[mid] == l[mid - 7]\n        return median(l[mid-6:mid+6])\n  \
    \  end\n    \n    if l[mid] == l[mid - 8]\n        return median(l[mid-7:mid+7])\n\
    \    end\n    \n    if l[mid] == l[mid - 9]\n        return median(l[mid-8:mid+8])\n\
    \    end\n    \n    if l[mid] == l[mid - 10]\n        return median(l[mid-9:mid+9])\n\
    \    end\n    \n    if l[mid] == l[mid - 11]\n        return median(l[mid-10:mid+10])\n\
    \    end\n    \n    if l[mid] == l[mid - 12]\n        return median(l[mid-11:mid+11])\n\
    \    end\n    \n    if l[mid] == l[mid - 13]\n        return median(l[mid-12:mid+12])\n\
    \    end\n    \n    if l[mid] == l[mid - 14]\n        return median(l[mid-13:mid+13])\n\
    \    end\n    \n    if l[mid] == l[mid - 15]\n        return median(l[mid-14:mid+14])\n\
    \    end\n    \n    if l[mid] == l[mid - 16]\n        return median(l[mid-15:mid+15])\n\
    \    end\n    \n    if l[mid] == l[mid - 17]\n        return median(l[mid-16:mid+16])\n\
    \    end\n    \n    if l[mid] == l[mid - 18\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9__s606b.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9__s606b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l)%2 == 0\n        return l[mid]\n  \
    \  else\n        return 0.5*(l[mid-1] + l[mid])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return the median of the numbers. \nThe median\
    \ is the number in the middle of the sorted list of numbers. \nThe median is defined\
    \ as the value separating the higher half of the sorted list from the lower half.\
    \ \nIf the length of the list is even, then the median is the mean of the two\
    \ middle numbers. \nIf the length of the list is odd, then the median is the number\
    \ in the middle of the sorted list divided by 2.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc9dg4wv1.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc9dg4wv1.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a finite set of numbers\
    \ is called the \"middle\" of the set. For example, the median of the set {1,\
    \ 2, 3, 4} is (2 + 4)/2 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxo0m23k7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxo0m23k7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm2ppd1ff.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm2ppd1ff.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. Write a test that passes when the function returns the\
    \ correct median and fails otherwise.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwbukvzyu.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwbukvzyu.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    mid1 = mid\
    \ - 1\n    mid2 = mid + 1\n    if mid2 == length(l)\n        return l[mid1]\n\
    \    end\n    \n    if l[mid1] > l[mid2]\n        return median(l[mid1:mid2])\n\
    \    else\n        return median(l[mid2:mid1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that checks the median of the following\
    \ lists:\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6torhbzl.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6torhbzl.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return median(l[1..mid/2])\n    else\n        return median(l[mid/2..mid])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], by=median)\n</cell>\n<text>\nThe median of a\
    \ finite set of numbers is called the \"typical\" number. \nThe median is often\
    \ called the \"middle number\" because it is the number in the middle. \nThe median\
    \ is often called the \"middle value\" because it is the value that is in the\
    \ middle.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuep4hlwm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuep4hlwm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median of\
    \ a list of numbers. \nThe function should take a list of numbers and return the\
    \ median of the numbers. \nThe median is the number in the middle of the list\
    \ that has the highest number of elements.\nFor example, if the list is [3, 1,\
    \ 2, 4, 5] then the median is 3.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg0sg2_7c.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg0sg2_7c.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==1\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], dims=1)\n</cell>\n<text>\nThe median of a set of numbers is defined\
    \ as the value separating the higher half of the numbers from the lower half.\
    \ For example, in the set {1, 2, 3, 4}, the median is 3. If there are an even\
    \ number of elements, then the median is the average of the two middle values.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd5i8s6r1.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd5i8s6r1.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a finite set of numbers\
    \ is called the \"typical\" median.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpscu64zri.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpscu64zri.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(\"\"))\n    end\n   \
    \ \n    if mid == 1\n        return l[1]\n    end\n    \n    if l[mid] == l[mid\
    \ - 1]\n        return l[mid]\n    end\n    \n    mid1 = mid - 1\n    mid2 = mid\
    \ + 1\n    \n    if l[mid1] > l[mid2]\n        return l[mid1]\n    end\n    \n\
    \    return l[mid2]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyhu702_c.jl:36\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  BoundsError: attempt to access\
    \ 5-element Array{Int64,1} at index [6]\n  Stacktrace:\n   [1] getindex at ./array.jl:788\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmpyhu702_c.jl:25\n   [3]\
    \ top-level scope at /tmp/tmpyhu702_c.jl:36\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyhu702_c.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhu702_c.jl:37\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  BoundsError: attempt to access 6-element Array{Int64,1}\
    \ at index [7]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n \
    \  [2] median(::Array{Int64,1}) at /tmp/tmpyhu702_c.jl:25\n   [3] top-level scope\
    \ at /tmp/tmpyhu702_c.jl:37\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyhu702_c.jl:35\n  \ntest set: Error During\
    \ Test at /tmp/tmpyhu702_c.jl:39\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  BoundsError: attempt to access 2-element Array{Int64,1} at index\
    \ [3]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpyhu702_c.jl:25\n   [3] top-level scope at /tmp/tmpyhu702_c.jl:39\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpyhu702_c.jl:35\n  \ntest set: Test Failed at\
    \ /tmp/tmpyhu702_c.jl:40\n  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\
    \   Evaluated: 9.0 == 7\nStacktrace:\n [1] top-level scope at /tmp/tmpyhu702_c.jl:40\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpyhu702_c.jl:35\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    1     1      3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 1 failed, 3 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyhu702_c.jl:33\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return l[mid]\n    else\n        return\
    \ (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers in the list.\nThe median is the number\
    \ in the middle of the list that has the smallest absolute value. If there are\
    \ an even number of numbers in the list, then the median is the mean of the two\
    \ middle numbers.\nFor example, if the list is [4, 6, 8, 10, 12], then the median\
    \ is 10 (the average of the middle two numbers is 10).\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeffu_mc9.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeffu_mc9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppy7ywohx.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex at ./number.jl:78 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmppy7ywohx.jl:14\n   [3] top-level scope at /tmp/tmppy7ywohx.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppy7ywohx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmppy7ywohx.jl:23\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  BoundsError\n  Stacktrace:\n   [1] getindex at\
    \ ./number.jl:78 [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmppy7ywohx.jl:14\n\
    \   [3] top-level scope at /tmp/tmppy7ywohx.jl:23\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppy7ywohx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmppy7ywohx.jl:24\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78 [inlined]\n\
    \   [2] median(::Array{Int64,1}) at /tmp/tmppy7ywohx.jl:14\n   [3] top-level scope\
    \ at /tmp/tmppy7ywohx.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppy7ywohx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmppy7ywohx.jl:25\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmppy7ywohx.jl:14\n   [3]\
    \ top-level scope at /tmp/tmppy7ywohx.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppy7ywohx.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmppy7ywohx.jl:26\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmppy7ywohx.jl:14\n   [3]\
    \ top-level scope at /tmp/tmppy7ywohx.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmppy7ywohx.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppy7ywohx.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    if mid == 1\n        return\
    \ l[1]\n    if l[mid] == l[mid-1]\n        return l[mid]\n    return median(l)\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function to compute the mean of a list of numbers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkf114rna.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkf114rna.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element to sort and cannot be called on empty list\"))\n    end\n\
    \    mid\n    \n    if mid % 2 == 0\n        return (l[mid/2] + l[mid/2-1])/2\n\
    \    else\n        return l[mid/2]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, the median of the set {1, 2, 3, 4} is\
    \ (2 + 4) / 2 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbyf0hlje.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbyf0hlje.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ l[mid/2 - 1] + l[mid/2]/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the mean of a list of numbers. \nThe function should take a list of numbers\
    \ as an argument and return the mean of the numbers. \nThe function should raise\
    \ an error if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo9ecamcj.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo9ecamcj.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that checks that your function works.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuxj8h9sf.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuxj8h9sf.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    if mid == 2\n\
    \        return median(l[1..end-1]) + l[end]\n    end\n    \n    mid = floor(mid)\n\
    \    if mid == 0\n        return median(l[1..end-1]) + l[end]\n    end\n    \n\
    \    left  = median(l[1..mid])\n    right = median(l[mid+1..end])\n    \n    return\
    \ left + right/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. \nThe median is the number in the middle of the sorted list of numbers.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8sqxpc8h.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8sqxpc8h.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the median of a list of numbers. Write a test that checks that your function\
    \ works.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaapk2oeo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaapk2oeo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n    else\n   \
    \     return 0.5 * (l[end] + l[end-1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxq0g1p5k.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxq0g1p5k.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 4\nWrite a function to compute the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg1jzowo5.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg1jzowo5.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor((length(l)+1)/2)\n    if length(l)%2==0\n        return l[mid]\n\
    \    else\n        return 0.5*(l[mid-1]+l[mid])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ to compute the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpma1ua7jm.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpma1ua7jm.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nThe median of a finite set of numbers is called the \"middle\"\
    \ of the set. For example, in the set {1, 2, 3, 4}, the median is (2 + 3) / 2\
    \ = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa0sku8qq.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa0sku8qq.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l\n\
    \    else \n        return l[(i + 1) \xF7 2]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc9r31o47.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc9r31o47.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc9r31o47.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(string(\"median of empty list\")))\n\
    \    end\n    \n    if mid == 1 \n        return l[1]\n    end\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7ws5a3ic.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7ws5a3ic.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7ws5a3ic.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3: Write a function\
    \ to compute the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp16ehaf51.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp16ehaf51.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return median(l[end-1]) + median(l[end])/2\n\
    \    else\n        return median(l[end-1]) + median(l[end])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmff1f_2s.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmff1f_2s.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the median\
    \ of a list of numbers in descending order.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1um01gwx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1um01gwx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(Int,\
    \ length(l)/2)\n    if length(l) % 2 == 1\n        return l[mid]\n    else\n \
    \       return (l[mid] + l[mid-1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. If the length of the list is even, the median is\
    \ the mean of the two middle numbers.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8bzkhymj.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8bzkhymj.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n\
    \    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l\
    \ = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n\
    \    l = l[1:end-1]\n    l = l[end]\n    l = l[1:end-1]\n    l = l[end]\n    l\
    \ = l[1:end-1]\n    \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5818n4u0.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5818n4u0.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5818n4u0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise\nWrite a function that returns the median of a list\
    \ of numbers. \nWrite a function that returns the median of a list of numbers.\
    \ \nWrite a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of numbers. \nWrite a function\
    \ that returns the median of a list of numbers. \nWrite a function that returns\
    \ the median of a list of numbers. \nWrite a function that returns the median\
    \ of a list of numbers. \nWrite a function that returns the median of a list of\
    \ numbers. \nWrite a function that returns the median of a list of numbers. \n\
    Write a function that returns the median of a list of number\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcoutqee3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcoutqee3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise: Write a function that returns the median of a list\
    \ of numbers. Write a test that passes when the function returns the correct median\
    \ and fails otherwise.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmq01qiyp.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmq01qiyp.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<text>\nExercise 4\n\
    Write a function that returns the mean of a list of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvub8mfhd.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvub8mfhd.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptg7vcgmx.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptg7vcgmx.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    mid = round(Int, mid)\n    if\
    \ mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] +\
    \ l[mid/2 - 1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpeab2b8u9.jl:26\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmpeab2b8u9.jl:0\n   [4] top-level scope at /tmp/tmpeab2b8u9.jl:26\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpeab2b8u9.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpeab2b8u9.jl:27\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpeab2b8u9.jl:0\n\
    \   [4] top-level scope at /tmp/tmpeab2b8u9.jl:27\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpeab2b8u9.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpeab2b8u9.jl:28\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpeab2b8u9.jl:0\n\
    \   [4] top-level scope at /tmp/tmpeab2b8u9.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpeab2b8u9.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpeab2b8u9.jl:29\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpeab2b8u9.jl:0\n\
    \   [4] top-level scope at /tmp/tmpeab2b8u9.jl:29\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpeab2b8u9.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpeab2b8u9.jl:30\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.5 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpeab2b8u9.jl:0\n\
    \   [4] top-level scope at /tmp/tmpeab2b8u9.jl:30\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpeab2b8u9.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeab2b8u9.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers, rounded to two decimal places.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp26czlrba.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp26czlrba.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sort(l)\n    \n \
    \   if length(l)%2 == 1\n        return median(l[floor(length(l)/2)-1:floor(length(l)/2)+1])\n\
    \    else\n        return median(l[floor(length(l)/2)-1:floor(length(l)/2)+2])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5y6ggd17.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5y6ggd17.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" element. \nThe median is often called the \"middle element\"\
    \ because it is the middle number of the sorted set.\nThe median is often called\
    \ the \"middle element\" because it is the middle number of the sorted set.\n\
    The median is often called the \"middle element\" because it is the middle number\
    \ of the sorted set.\nThe median is often called the \"middle element\" because\
    \ it is the middle number of the sorted set.\nThe median is often called the \"\
    middle element\" because it is the middle number of the sorted set.\nThe median\
    \ is often called the \"middle element\" because it is the middle number of the\
    \ sorted set.\nThe median is often called the \"middle element\" because it is\
    \ the middle number of the sorted set.\nThe median is often called the \"middle\
    \ element\" because it is the middle number of the sorted set.\nThe median is\
    \ often called the \"middle element\" because it is the middle number of the sorted\
    \ set.\nThe median is often called the \"middle element\" because it is the middle\
    \ number of the sorted set.\nThe median is often called the \"middle element\"\
    \ because it is the middle number of the sorted set.\nThe median is often called\
    \ the \"middle element\" because it is the middle number of the sorted set.\n\
    The median is often called the \"middle element\" because it is the middle number\
    \ of the sorted set.\nThe median is often called the \"middle element\" because\
    \ it is the middle number of the sorted set.\nThe median is often called the \"\
    middle element\" because it is the middle number of the sorted set.\nThe median\
    \ is often called the \"middle element\" because it is the middle number of the\
    \ sorted set.\nThe median is often called the \"middle element\" because it is\
    \ the middle number of the sorted set.\nThe median is often called the \"middle\
    \ element\" because it is the middle number of the sorted set.\nThe median is\
    \ often called the \"middle element\" because it is the middle number of the sorted\
    \ set.\nThe median is often called the \"middle element\" because it is the middle\
    \ number of the sorted set.\nThe median is often called the \"middle element\"\
    \ because it is the middle number of the sorted set.\nThe median is often called\
    \ the \"middle element\" because it is the middle number of the sorted set.\n\
    The median is often called the \"middle element\" \nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfbm0e683.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfbm0e683.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a tags=julia,median,performance\
    \ |>\n<| c |>\nThe median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code does not do that. Also, the median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code does not do that. Also, the median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ does not do that. Also, the median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. Your code does not do that. Also,\
    \ the median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. Your code does not do that. Also, the median of a set\
    \ of numbers is defined as the value that appears more than n/2 times in the set.\
    \ Your code does not do that. Also, the median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. Your code does not\
    \ do that. Also, the median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code does not do that. Also, the median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code does not do that. Also, the median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ does not do that. Also, the median of a set of numbers is defined as the value\
    \ that appears more than n/2 times in the set. Your code does not do that. Also,\
    \ the median of a set of numbers is defined as the value that appears more than\
    \ n/2 times in the set. Your code does not do that. Also, the median of a set\
    \ of numbers is defined as the value that appears more than n/2 times in the set.\
    \ Your code does not do that. Also, the median of a set of numbers is defined\
    \ as the value that appears more than n/2 times in the set. Your code does not\
    \ do that. Also, the median of a set of numbers is defined as the value that appears\
    \ more than n/2 times in the set. Your code does not do that. Also, the median\
    \ of a set of numbers is defined as the value that appears more than n/2 times\
    \ in the set. Your code does not do that. Also, the median of a set of numbers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ does not do that. Also, the median of a set of numbers is \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ehd4y6k.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ehd4y6k.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nThe median of a finite set of numbers is called the \"typical\"\
    \ number. \nThe median is often called the \"middle number\" because it is often\
    \ the number in the middle. \nThe median is often called the \"middle element\"\
    \ because it is often the element in the middle. \nThe median is often called\
    \ the \"middle value\" because it is often the value that is the middle of the\
    \ set of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcgjz060u.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcgjz060u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nMedian Absolute Deviation\nThe median absolute\
    \ deviation (MAD) is a measure of statistical dispersion, \nthat measures the\
    \ dispersion of a set of data points from the rest of the \npopulation. MAD is\
    \ defined as the median of the absolute deviations from the \nmedian.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx3qvcp5r.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx3qvcp5r.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx10g7j3j.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx10g7j3j.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(BoundsError(\"median of empty list\"))\n    end\n\
    \    mid\nend\n</cell>\n<code language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the median of a list of numbers. \n\
    The function should take an argument of type Vector{Int64}.\nThe function should\
    \ return an Int64 value.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5c2qqdlv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5c2qqdlv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = l/2\n    if l % 2 == 0\n        return mid\n    else\n        return\
    \ mid + 1\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work\
    \ if you have a list of negative numbers. Try `median([-10, 4, 6, 1000, 10, 20])`.\n\
    <|/ c |>\n<| c |>\nI added a version that works with negative numbers. Thanks\
    \ for the suggestion.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkcj_38h5.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkcj_38h5.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (length(l) / 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. Your function should take a list\
    \ of numbers as an argument, and return the median of the numbers in the list.\
    \ Test your function on a list of numbers that you generated in the previous exercise.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcptd3b6s.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcptd3b6s.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    sortedlist = sort(l)\n\
    \    \n    mid = length(sortedlist) / 2\n    \n    if length(sortedlist) % 2 ==\
    \ 0\n        return sortedlist[mid]\n    else\n        return (sortedlist[mid]\
    \ + sortedlist[mid + 1]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"middle\" of the set. For example, the median of the set {1, 2, 3} is (2\
    \ + 3) / 2 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuic68bzj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuic68bzj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the mean of a list of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc01flw1d.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc01flw1d.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(BoundsError(\"median requires at least one element\"\
    ))\n    end\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n  \
    \      return (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9r_mrdrc.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9r_mrdrc.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function to compute the mean of a list of numbers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcdscg_mt.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcdscg_mt.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? return 0.0 : l[floor(Int64, length(l) / 2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the median of a list of numbers. \nThe function should take a list of numbers\
    \ as an argument, and return the median of the list.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppunu42p2.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppunu42p2.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8kabpp8i.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8kabpp8i.jl:16\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kabpp8i.jl:15\ntest set: Test Failed at /tmp/tmp8kabpp8i.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmp8kabpp8i.jl:17\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kabpp8i.jl:15\ntest set: Error During Test at\
    \ /tmp/tmp8kabpp8i.jl:18\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmp8kabpp8i.jl:9\n   [3] top-level scope at /tmp/tmp8kabpp8i.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp8kabpp8i.jl:15\n  \ntest set: Test Failed at\
    \ /tmp/tmp8kabpp8i.jl:19\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 6.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmp8kabpp8i.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kabpp8i.jl:15\ntest set: Test Failed at /tmp/tmp8kabpp8i.jl:20\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 3.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp8kabpp8i.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8kabpp8i.jl:15\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8kabpp8i.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. \nThe function should work for both vectors and matrices.\nThe function\
    \ should work for both positive and negative numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdz4y3y5z.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdz4y3y5z.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    \n    if mid %\
    \ 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2\
    \ - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2,\
    \ 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers, rounded to two decimal places.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmytsibdi.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmytsibdi.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return l[mid / 2]\n    else\n        return (l[mid / 2] + l[(mid - 1)\
    \ / 2]) / 2\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a list of numbers. \nThe mode is the number that appears most frequently\
    \ in the list.\nThe function should return the mode of the list l as a Float64.\
    \ \nThe function should also return the number of times the mode appears in the\
    \ list l.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphi7igss_.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphi7igss_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ZeroDivisionError())\n    end\n    return l[mid]\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp68seg5_2.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp68seg5_2.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp68seg5_2.jl:19\ntest set: Test Failed at /tmp/tmp68seg5_2.jl:21\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 20.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmp68seg5_2.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp68seg5_2.jl:19\ntest set: Test Failed at /tmp/tmp68seg5_2.jl:23\n\
    \  Expression: candidate([6, 5]) == 5.5\n   Evaluated: 5.0 == 5.5\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp68seg5_2.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp68seg5_2.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    2     3      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 2 passed, 3 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp68seg5_2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.4>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. Write a test that passes when\
    \ the function returns the correct result, and a test that fails when the function\
    \ returns the incorrect result.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp83_ddtq2.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp83_ddtq2.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l[end]\n\
    \    else \n        return l[(i + 1) \xF7 2]\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mode of a list of numbers. \nThe mode is the number that appears most often\
    \ in the list.\nFor example, mode([3, 1, 2, 4, 5]) should return 3.\nHint: Use\
    \ a dictionary to keep track of counts of each number in the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbit5myey.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbit5myey.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2==0\n        return l[mid]\n  \
    \  else\n        return (l[mid-1] + l[mid])/2\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2kfiyt44.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] getindex at ./abstractarray.jl:980 [inlined]\n   [6] median(::Array{Int64,1})\
    \ at /tmp/tmp2kfiyt44.jl:13\n   [7] top-level scope at /tmp/tmp2kfiyt44.jl:21\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp2kfiyt44.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kfiyt44.jl:22\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.5 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmp2kfiyt44.jl:11\n   [7]\
    \ top-level scope at /tmp/tmp2kfiyt44.jl:22\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp2kfiyt44.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kfiyt44.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 0.0 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmp2kfiyt44.jl:13\n   [7]\
    \ top-level scope at /tmp/tmp2kfiyt44.jl:23\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp2kfiyt44.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kfiyt44.jl:24\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.5 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmp2kfiyt44.jl:11\n   [7]\
    \ top-level scope at /tmp/tmp2kfiyt44.jl:24\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp2kfiyt44.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2kfiyt44.jl:25\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmp2kfiyt44.jl:13\n   [7]\
    \ top-level scope at /tmp/tmp2kfiyt44.jl:25\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmp2kfiyt44.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2kfiyt44.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid % 2 == 0\n\
    \        return (l[mid / 2] + l[mid / 2 - 1]) / 2\n    else\n        return l[mid\
    \ / 2]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the median of a list of numbers.\
    \ \nThe function should take a list of numbers and return the median of the numbers.\
    \ \nThe median is the number in the middle of the list that has the highest value.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpypq5j2cs.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpypq5j2cs.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(BoundsError(\"median of empty list\"\
    ))\n    end\n    \n    mid = round(Int64, mid)\n    if mid % 2 == 0\n        return\
    \ l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers, rounded to the nearest integer.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg2f8xwz1.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg2f8xwz1.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0888nodn.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0888nodn.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1 \n \
    \       return l[1]\n    \n    if l[mid] == l[mid-1] \n        return l[mid]\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpafy7cgxm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpafy7cgxm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 3\nWrite a function that computes the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxu_f5yyc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxu_f5yyc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    mid = round(Int64, mid)\n  \
    \  if mid % 2 == 0\n        return (l[mid-1] + l[mid]) / 2\n    else\n       \
    \ return l[mid]\n    end\nend\n</cell>\n<text>\nExercise: Write a function that\
    \ returns the median of a list of numbers. Write a test that passes when the function\
    \ returns the correct value.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5dx9f8cm.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5dx9f8cm.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        return l[end]\n\
    \    else \n        return l[(i + 1) \xF7 2]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprzcq4ih3.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprzcq4ih3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers. Use a for loop to iterate over the list.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyvbg_mbb.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyvbg_mbb.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return NaN\n    \n    mid = round(mid)\n\
    \    if mid == 1 \n        return l[1]\n    \n    mid = round(mid)\n    if mid\
    \ == 2 \n        return l[end]\n    \n    mid = round(mid)\n    if mid == length(l)\n\
    \        return l[mid-1]\n    \n    mid = round(mid)\n    if mid == length(l)-1\n\
    \        return l[mid]\n    \n    mid = round(mid)\n    if mid == length(l)-2\n\
    \        return l[mid+1]\n    \n    mid = round(mid)\n    if mid == length(l)-3\n\
    \        return l[mid+2]\n    \n    mid = round(mid)\n    if mid == length(l)-4\n\
    \        return l[mid+3]\n    \n    mid = round(mid)\n    if mid == length(l)-5\n\
    \        return l[mid+4]\n    \n    mid = round(mid)\n    if mid == length(l)-6\n\
    \        return l[mid+5]\n    \n    mid = round(mid)\n    if mid == length(l)-7\n\
    \        return l[mid+6]\n    \n    mid = round(mid)\n    if mid == length(l)-8\n\
    \        return l[mid+7]\n    \n    mid = round(mid)\n    if mid == length(l)-9\n\
    \        return l[mid+8]\n    \n    mid = round(mid)\n    if mid == length(l)-10\n\
    \        return l[mid+9]\n    \n    mid = round(mid)\n    if mid == length(l)-11\n\
    \        return l[mid+10]\n    \n    mid = round(mid)\n    if mid == length(l)-12\n\
    \        return l[mid+11]\n    \n    mid = round(mid)\n    if mid == length(l)-13\n\
    \        return l[mid+12]\n    \n    mid = round(mid)\n    if mid == length(l)-14\n\
    \        return l[mid+13]\n    \n    mid = round(mid)\n    if mid == length(l)-15\n\
    \        return l[mid+14]\n    \n    mid = round(mid)\n    if mid == length(l)-16\n\
    \        return l[mid+15]\n    \n    mid = round(mid)\n    if mid == length(l)-17\n\
    \        return l[mid+16]\n    \n    mid = round(mid)\n    if mid == length(l)-18\n\
    \        return l[mid+17]\n    \n    mid = round(mid)\n    if mid == length(l)-19\n\
    \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnegc3dp3.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnegc3dp3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    mid\
    \ = length(l)\n    if mid == 0 \n        return l[1]\n    \n    mid = round(Int64,\
    \ mid)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    \n    left = (mid-1)/2\n\
    \    right = (mid+1)/2\n    \n    if l[left] > l[right]\n        return median(l[left:right])\n\
    \    else\n        return median(l[left:right+1])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of\
    \ a list of numbers is defined as the value separating the higher half of the\
    \ numbers from the lower half. For example, in the list [3, 1, 2, 4, 5], the median\
    \ is 3.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppn268tqx.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppn268tqx.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1] \n    else \n        return\
    \ l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3eu7094y.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3eu7094y.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)//2)]\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the median of a list of numbers. \nThe function should take a list of numbers\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the sorted list.\nThe median is defined as the value separating the higher\
    \ half of a sorted list from the lower half.\nThe median is often called the \"\
    typical\" median because it is often the number that appears near the middle of\
    \ the list.\nThe median is defined as the value separating the higher half of\
    \ a sorted list from the lower half.\nThe median is often called the \"typical\"\
    \ median because it is often the number that appears near the middle of the list.\n\
    The median is defined as the value separating the higher half of a sorted list\
    \ from the lower half.\nThe median is often called the \"typical\" median because\
    \ it is often the number that appears near the middle of the list.\nThe median\
    \ is defined as the value separating the higher half of a sorted list from the\
    \ lower half.\nThe median is often called the \"typical\" median because it is\
    \ often the number that appears near the middle of the list.\nThe median is defined\
    \ as the value separating the higher half of a sorted list from the lower half.\n\
    The median is often called the \"typical\" median because it is often the number\
    \ that appears near the middle of the list.\nThe median is defined as the value\
    \ separating the higher half of a sorted list from the lower half.\nThe median\
    \ is often called the \"typical\" median because it is often the number that appears\
    \ near the middle of the list.\nThe median is defined as the value separating\
    \ the higher half of a sorted list from the lower half.\nThe median is often called\
    \ the \"typical\" median because it is often the number that appears near the\
    \ middle of the list.\nThe median is defined as the value separating the higher\
    \ half of a sorted list from the lower half.\nThe median is often called the \"\
    typical\" median because it is often the number that appears near the middle of\
    \ the list.\nThe median is defined as the value separating the higher half of\
    \ a sorted list from the lower half.\nThe median is often called the \"typical\"\
    \ median because it is often the number that appears near the middle of the list.\n\
    The median is defined as the value separating the higher half of a sorted list\
    \ from the lower half.\nThe median is often called the \"typical\" median because\
    \ it is often the number that appears near the middle of the list.\nThe median\
    \ is defined as the value separating the higher half of a sorted list from the\
    \ lower half.\nThe median is often \nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmhtg_k4x.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmhtg_k4x.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the mean of a list of numbers. \nThe function should take a list of\
    \ numbers and return the mean of the list.\nThe function should raise an error\
    \ if the list is empty.\nThe function should raise an error if the list contains\
    \ non-numbers.\nThe function should raise an error if the list contains negative\
    \ numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwkv8v7eq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwkv8v7eq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvprmwmv7.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvprmwmv7.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError(\n            \"median\
    \ can only be applied to a non-empty vector\"))\n    end\n    \n    if mid ==\
    \ 1\n        return l[1]\n    end\n    \n    if l[mid] == l[mid - 1]\n       \
    \ return l[mid]\n    end\n    \n    if l[mid] == l[mid - 2]\n        return l[mid\
    \ - 1] + l[mid]/2\n    end\n    \n    if l[mid] == l[mid - 3]\n        return\
    \ l[mid - 2] + l[mid] + l[mid - 1]/3\n    end\n    \n    return l[mid]\nend\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfi9hp468.jl:38\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 5.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpfi9hp468.jl:38\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi9hp468.jl:37\ntest set: Test Failed at /tmp/tmpfi9hp468.jl:39\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 1000.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpfi9hp468.jl:39\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi9hp468.jl:37\ntest set: Error During Test at\
    \ /tmp/tmpfi9hp468.jl:41\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  BoundsError: attempt to access 2-element Array{Int64,1} at index\
    \ [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpfi9hp468.jl:23\n   [3] top-level scope at /tmp/tmpfi9hp468.jl:41\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpfi9hp468.jl:37\n  \ntest set: Test Failed at\
    \ /tmp/tmpfi9hp468.jl:42\n  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\
    \   Evaluated: 9.0 == 7\nStacktrace:\n [1] top-level scope at /tmp/tmpfi9hp468.jl:42\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfi9hp468.jl:37\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    1     3      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfi9hp468.jl:35\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l)/2)] + l[ceil(length(l)/2)])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set\
    \ of numbers is called the \"typical\" number. \nThe median is often called the\
    \ \"middle\" number because it is often the number \nthat would be present at\
    \ the middle of a data set when sorted.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7r8lp7iy.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7r8lp7iy.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1] \n    \n    mid1 = mid - 1\n\
    \    mid2 = mid + 1\n    \n    if l[mid2] > l[mid1] \n        return l[mid2] \n\
    \    else \n        return l[mid1]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument, and return a single number.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg3jqs39x.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg3jqs39x.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n \
    \   \n    if l[mid] == l[mid+1]\n        return l[mid]\n    \n    if l[mid] ==\
    \ l[mid-1] + l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1]\
    \ - l[mid]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1] + l[mid]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1] + l[mid+1] - l[mid]\n        return\
    \ l[mid]\n    \n    if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] + l[mid+1] + l[mid]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid-1] + l[mid+1] - l[mid]\n        return l[mid]\n    \n   \
    \ if l[mid] == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] + l[mid+1] + l[mid]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid-1] - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ + l[mid+1] - l[mid]\n        return l[mid]\n    \n    if l[mid] == l[mid-1]\
    \ - l[mid+1]\n        return l[mid]\n    \n    if l[mid] == l[mid-1] + l[\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2d_zqfza.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2d_zqfza.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return (l[mid/2]\
    \ + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called the \"\
    typical\" number. \nThe median is often called the \"middle element\", \nbut in\
    \ statistics it is often called the \"representative element\".\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmparta3dlr.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmparta3dlr.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = round(Int64,\
    \ mid)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1]) / 2\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpndzvj6y5.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpndzvj6y5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptkog2dwx.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptkog2dwx.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return l[1]\n    \n    if mid == 1\n   \
    \     return l[1]\n    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n\
    \    \n    mid = floor((mid + 0.5) / 2)\n    if l[mid] == l[mid - 1]\n       \
    \ return l[mid]\n    \n    if l[mid] > l[mid - 1]\n        return median(l[mid-1:mid+1])\n\
    \    else\n        return median(l[mid-1:mid])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that checks that your function works.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0kxfdxm8.jl:29\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0kxfdxm8.jl:29\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. Write a test that checks that\
    \ your function returns the correct value.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5_tsqmq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt5_tsqmq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the mean of a list\
    \ of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp_r_p2md.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp_r_p2md.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a list of numbers is defined\
    \ as the value separating the higher half of the list from the lower half. For\
    \ example, in the list [3, 1, 2, 4, 5], the median is 3. The median is the value\
    \ separating the higher half of the list from the lower half. In the list [-10,\
    \ 4, 6, 1000, 10, 20], the median is 15. The median is the value separating the\
    \ higher half of the list from the lower half. In the list [-10, 4, 6, 1000, 10,\
    \ 20, 30], the median is 15. The median is the value separating the higher half\
    \ of the list from the lower half.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgkyidg4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphgkyidg4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.1>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mode of a list of numbers. \nThe mode is the number that appears most often\
    \ in the list.\nFor example, mode([3, 1, 2, 4, 5]) should return 3.\nHint: Use\
    \ a dictionary to keep track of counts of numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrfsimx9.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrfsimx9.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ mean of a list of numbers. \nThe function should take a list of numbers as an\
    \ argument, and return a Float64. \nThe function should ignore the case where\
    \ all numbers are negative.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaup9gcf1.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaup9gcf1.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    median = sort(l)[end-1]\n\
    \    \n    if median == 0\n        median = median(sort(l)[1:end-1])\n    end\n\
    \    \n    return median\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzwvvjcql.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpzwvvjcql.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwvvjcql.jl:21\ntest set: Test Failed at /tmp/tmpzwvvjcql.jl:23\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 20.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpzwvvjcql.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwvvjcql.jl:21\ntest set: Error During Test at\
    \ /tmp/tmpzwvvjcql.jl:24\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpzwvvjcql.jl:9\n   [3] top-level scope at /tmp/tmpzwvvjcql.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpzwvvjcql.jl:21\n  \ntest set: Test Failed at\
    \ /tmp/tmpzwvvjcql.jl:25\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 5.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmpzwvvjcql.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwvvjcql.jl:21\ntest set: Test Failed at /tmp/tmpzwvvjcql.jl:26\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 9.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpzwvvjcql.jl:26\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzwvvjcql.jl:21\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzwvvjcql.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return NaN\n    \n    mid = round(Int64,\
    \ mid)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n    else\n       \
    \ return (l[mid/2] + l[mid/2+1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers, rounded to the nearest integer.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplgu1599z.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplgu1599z.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid] + l[mid-1])/2\n    end\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx79jyema.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 2.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpx79jyema.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx79jyema.jl:20\ntest set: Test Failed at /tmp/tmpx79jyema.jl:22\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 5.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpx79jyema.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx79jyema.jl:20\ntest set: Error During Test at\
    \ /tmp/tmpx79jyema.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpx79jyema.jl:11\n   [3] top-level scope at /tmp/tmpx79jyema.jl:23\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpx79jyema.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpx79jyema.jl:24\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  BoundsError: attempt to access 2-element Array{Int64,1} at index\
    \ [0]\n  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpx79jyema.jl:13\n   [3] top-level scope at /tmp/tmpx79jyema.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpx79jyema.jl:20\n  \ntest set: Test Failed at\
    \ /tmp/tmpx79jyema.jl:25\n  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\
    \   Evaluated: 3.0 == 7\nStacktrace:\n [1] top-level scope at /tmp/tmpx79jyema.jl:25\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx79jyema.jl:20\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    3      2      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 3 failed, 2 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx79jyema.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    mid = length(l)\n    \n    if mid % 2 == 0\n        return l[mid/2]\n\
    \    else\n        return (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpj6usa6mc.jl:24\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmpj6usa6mc.jl:0\n   [4] top-level scope at /tmp/tmpj6usa6mc.jl:24\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj6usa6mc.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpj6usa6mc.jl:25\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpj6usa6mc.jl:0\n\
    \   [4] top-level scope at /tmp/tmpj6usa6mc.jl:25\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj6usa6mc.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpj6usa6mc.jl:26\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 0.5 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpj6usa6mc.jl:0\n\
    \   [4] top-level scope at /tmp/tmpj6usa6mc.jl:26\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj6usa6mc.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpj6usa6mc.jl:27\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpj6usa6mc.jl:0\n\
    \   [4] top-level scope at /tmp/tmpj6usa6mc.jl:27\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj6usa6mc.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpj6usa6mc.jl:28\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.5 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpj6usa6mc.jl:0\n\
    \   [4] top-level scope at /tmp/tmpj6usa6mc.jl:28\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpj6usa6mc.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj6usa6mc.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid]) / 2\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a given list of numbers. \nThe mode is the number that\
    \ appears most often in the list.\nFor example, mode([1, 1, 2, 3]) should return\
    \ 1.\nHint: Use a dictionary to keep track of counts of each number in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi1e97nwv.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi1e97nwv.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 1\n        return l[1]\n    end\n    if mid == 2\n\
    \        return 0.5 * (l[1] + l[2])\n    end\n    \n    mid = floor(mid)\n   \
    \ \n    if mid%2 == 0\n        return 0.5 * (l[mid] + l[mid-1])\n    end\n   \
    \ \n    return 0.5 * (l[mid-1] + l[mid])\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Your function should take a list of numbers as\
    \ an argument, and return a Float64. Your function should also handle an empty\
    \ list gracefully.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkd6lqmrn.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkd6lqmrn.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 0\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<text>\nExercise 9\n\
    Write a function that returns the median of a list of numbers. Write a test that\
    \ passes if your function returns the correct median and fails if it does not.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbtxssmjz.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbtxssmjz.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError())\n    end\n    return l[mid]\n\
    end\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise:\
    \ Write a function that returns the median of a list of numbers. \nThe function\
    \ should throw an error if the list is empty.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28u37s9r.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp28u37s9r.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. \nThe median is often called the \"middle\" of a set\
    \ of numbers. \nThe median is often called the \"typical value\" of a set of numbers.\
    \ \nThe median is often called the \"typical range\" of a set of numbers. \nThe\
    \ median is often called the \"typical spread\" of a set of numbers. \nThe median\
    \ is often called the \"typical spread of values\" of a set of numbers. \nThe\
    \ median is often called the \"typical spread of ranges\" of a set of numbers.\
    \ \nThe median is often called the \"typical spread of spreads\" of a set of numbers.\
    \ \nThe median is often called the \"typical spread of spread of values\" of a\
    \ set of numbers. \nThe median is often called the \"typical spread of spread\
    \ of ranges\" of a set of numbers. \nThe median is often called the \"typical\
    \ spread of spread of spreads\" of a set of numbers. \nThe median is often called\
    \ the \"typical spread of spread of spread of values\" of a set of numbers. \n\
    The median is often called the \"typical spread of spread of spread of ranges\"\
    \ of a set of numbers. \nThe median is often called the \"typical spread of spread\
    \ of spread of spreads\" of a set of numbers. \nThe median is often called the\
    \ \"typical spread of spread of spread of spread of values\" of a set of numbers.\
    \ \nThe median is often called the \"typical spread of spread of spread of spread\
    \ of ranges\" of a set of numbers. \nThe median is often called the \"typical\
    \ spread of spread of spread of spread of spreads\" of a set of numbers. \nThe\
    \ median is often called the \"typical spread of spread of spread of spread of\
    \ spread of values\" of a set of numbers. \nThe median is often called the \"\
    typical spread of spread of spread of spread of spread of ranges\" of a set of\
    \ numbers. \nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplkpvcgqy.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplkpvcgqy.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5\
    \ * (l[mid] + l[mid-1])\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8aqwt5hc.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmp8aqwt5hc.jl:0\n   [4] top-level scope at /tmp/tmp8aqwt5hc.jl:21\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8aqwt5hc.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp8aqwt5hc.jl:22\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmp8aqwt5hc.jl:0\n\
    \   [4] top-level scope at /tmp/tmp8aqwt5hc.jl:22\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8aqwt5hc.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp8aqwt5hc.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 0.0 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmp8aqwt5hc.jl:0\n\
    \   [4] top-level scope at /tmp/tmp8aqwt5hc.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8aqwt5hc.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp8aqwt5hc.jl:24\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmp8aqwt5hc.jl:0\n\
    \   [4] top-level scope at /tmp/tmp8aqwt5hc.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8aqwt5hc.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp8aqwt5hc.jl:25\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmp8aqwt5hc.jl:0\n\
    \   [4] top-level scope at /tmp/tmp8aqwt5hc.jl:25\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp8aqwt5hc.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8aqwt5hc.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        throw(DomainError())\n    end\n    return\
    \ l[mid-1]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpke664oem.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpke664oem.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpke664oem.jl:19\ntest set: Test Failed at /tmp/tmpke664oem.jl:21\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 20.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpke664oem.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpke664oem.jl:19\ntest set: Error During Test at\
    \ /tmp/tmpke664oem.jl:22\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpke664oem.jl:13\n   [3] top-level scope at /tmp/tmpke664oem.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpke664oem.jl:19\n  \ntest set: Test Failed at\
    \ /tmp/tmpke664oem.jl:23\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 5.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmpke664oem.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpke664oem.jl:19\ntest set: Test Failed at /tmp/tmpke664oem.jl:24\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 9.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpke664oem.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpke664oem.jl:19\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpke664oem.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? Inf : l[floor(length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ a measure of central tendency. \nThe median is the value separating the higher\
    \ half of a data set from the lower half. \nThe median is often called the \"\
    typical\" value of the distribution. \nThe median is often called the \"middle\"\
    \ value of the distribution. \nThe median is often called the \"typical\" value\
    \ of the distribution. \nThe median is often called the \"typical\" value of the\
    \ distribution. \nThe median is often called the \"typical\" value of the distribution.\
    \ \nThe median is often called the \"typical\" value of the distribution. \nThe\
    \ median is often called the \"typical\" value of the distribution. \nThe median\
    \ is often called the \"typical\" value of the distribution. \nThe median is often\
    \ called the \"typical\" value of the distribution. \nThe median is often called\
    \ the \"typical\" value of the distribution. \nThe median is often called the\
    \ \"typical\" value of the distribution. \nThe median is often called the \"typical\"\
    \ value of the distribution. \nThe median is often called the \"typical\" value\
    \ of the distribution. \nThe median is often called the \"typical\" value of the\
    \ distribution. \nThe median is often called the \"typical\" value of the distribution.\
    \ \nThe median is often called the \"typical\" value of the distribution. \nThe\
    \ median is often called the \"typical\" value of the distribution. \nThe median\
    \ is often called the \"typical\" value of the distribution. \nThe median is often\
    \ called the \"typical\" value of the distribution. \nThe median is often called\
    \ the \"typical\" value of the distribution. \nThe median is often called the\
    \ \"typical\" value of the distribution. \nThe median is often called the \"typical\"\
    \ value of the distribution. \nThe median is often called the \"typical\" value\
    \ of the distribution. \nThe median is often called the \"typical\" value of the\
    \ distribution. \nThe median is often called the \"typical\" value of the distribution.\
    \ \nThe median is often called the \"typical\" value of the distribution. \nThe\
    \ median is often called the \"typical\" value of the distribution. \nThe median\
    \ is often called the \"typical\" value of the distribution. \nThe median is often\
    \ called the \"typical\" value of the distribution. \nThe median is often called\
    \ the \"typ\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp02xexdnm.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp02xexdnm.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the mean of the numbers in the list.\n\
    The function should raise an error if the list is empty.\nThe function should\
    \ raise an error if the list contains non-numbers.\nThe function should raise\
    \ an error if the list contains negative numbers.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9w0buvw5.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9w0buvw5.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    half = floor(Int64, mid/2)\n    if half*2\
    \ == mid\n        return l[half]\n    else\n        return median(l[half-1:mid])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the median of a list of numbers. \n\
    The function should take a list of numbers as an argument. \nThe function should\
    \ return the median of the numbers in the list.\nThe function should throw an\
    \ error if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi2ct1lib.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi2ct1lib.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0\n        return NaN\n    \n    mid = round(mid)\n\
    \    if mid % 2 == 0\n        return l[mid-1]\n    else\n        return (l[mid-1]\
    \ + l[mid]) / 2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa96oalqp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa96oalqp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ n = length(l)\n    \n    if n == 1\n        return l[1]\n    end\n    \n   \
    \ mid = n \xF72\n    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:n])\n\
    \    end\n    \n    if l[mid] == l[mid+1]\n        return median(l[mid+2:n])\n\
    \    end\n    \n    if l[mid] == l[mid-1]\n        return median(l[mid+1:n])\n\
    \    end\n    \n    if l[mid] == l[mid+1]\n        return median(l[mid+2:n])\n\
    \    end\n    \n    if l[mid] == l[mid+2]\n        return median(l[mid+1:n])\n\
    \    end\n    \n    return l[mid]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 2)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 3)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 4)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 5)\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 6)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], 7)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], 8)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4,\
    \ 6, 1000, 10, 20], 9)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20], 10)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], 11)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20], 12)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 13)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 14)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 15)\n</cell\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptq4dfhe7.jl:40\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptq4dfhe7.jl:40\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l)-1)] + l[floor(length(l)-2)])/2\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a list of numbers. If the list\
    \ has even number of elements, then the median is the mean of the two middle elements.\
    \ If the list has an odd number of elements, then the median is the average of\
    \ the two middle elements.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm5pzi65g.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm5pzi65g.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2lt9jwv9.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2lt9jwv9.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ mean of a list of numbers. If the list is empty, return zero.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn0f9ays1.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn0f9ays1.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpl9txa0g2.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpl9txa0g2.jl:16\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9txa0g2.jl:15\ntest set: Test Failed at /tmp/tmpl9txa0g2.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpl9txa0g2.jl:17\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9txa0g2.jl:15\ntest set: Error During Test at\
    \ /tmp/tmpl9txa0g2.jl:18\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpl9txa0g2.jl:9\n   [3] top-level scope at /tmp/tmpl9txa0g2.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpl9txa0g2.jl:15\n  \ntest set: Test Failed at\
    \ /tmp/tmpl9txa0g2.jl:19\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 6.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmpl9txa0g2.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9txa0g2.jl:15\ntest set: Test Failed at /tmp/tmpl9txa0g2.jl:20\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 3.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpl9txa0g2.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpl9txa0g2.jl:15\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpl9txa0g2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    half = floor(Int64, mid/2)\n    if half\
    \ == 0\n        return l[mid]\n    else\n        return 0.5 * (l[half] + l[half-1])\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    The median of a finite set of numbers is called the \"typical\" element. \nThe\
    \ median is often called the \"middle element\" because it is often the \nnumber\
    \ that occurs in an ordered list of numbers that are not divisible by \nthe length\
    \ of the list. \nThe median is also called the \"middle value\" because it is\
    \ often the \nnumber that occurs in an unordered list of numbers that are not\
    \ divisible by \nthe length of the list. \nThe median is also called the \"middle\
    \ index\" because it is often the \nnumber that occurs in an unordered list of\
    \ numbers that are not divisible by \nthe length of the list. \nThe median is\
    \ also called the \"middle value\" because it is often the \nnumber that occurs\
    \ in an unordered list of numbers that are not divisible by \nthe length of the\
    \ list. \nThe median is also called the \"middle index\" because it is often the\
    \ \nnumber that occurs in an unordered list of numbers that are not divisible\
    \ by \nthe length of the list. \nThe median is also called the \"middle value\"\
    \ because it is often the \nnumber that occurs in an unordered list of numbers\
    \ that are not divisible by \nthe length of the list. \nThe median is also called\
    \ the \"middle index\" because it is often the \nnumber that occurs in an unordered\
    \ list of numbers that are not divisible by \nthe length of the list. \nThe median\
    \ is also called the \"middle value\" because it is often the \nnumber that occurs\
    \ in an unordered list of numbers that are not divisible by \nthe length of the\
    \ list. \nThe median is also called the \"middle index\" because it is often the\
    \ \nnumber that occurs in an unordered list of numbers that are not divisible\
    \ by \nthe length of the list. \nThe median is also called the \"middle value\"\
    \ because it is often the \nnumber that occurs in an unordered list of numbers\
    \ that are not divisible by \nthe length of the list. \nThe median is also called\
    \ the \"middle index\" because it is often the \nnumber that occurs in an unordered\
    \ list of numbers that are not divisible by \nthe length of the list. \nThe median\
    \ is also called the \"middle value\" \nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkgbngfa6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkgbngfa6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? return 0.0 : l[floor(Int64, length(l) / 2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nThe median of a list of numbers is defined\
    \ as the value separating the higher half of the list from the lower half. For\
    \ example, the median of the list [3, 1, 2, 4, 5] would be the value 2.5.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: colon expected in \"?\" expression\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppcb18gts.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppcb18gts.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2-1])/2\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nThe median of three numbers is just the average of the two middle numbers.\
    \ So the median is just the average of the two middle numbers. So the median is\
    \ just the average of the two middle numbers. So the median is just the average\
    \ of the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle numbers. So the\
    \ median is just the average of the two middle numbers. So the median is just\
    \ the average of the two middle numbers. So the median is just the average of\
    \ the two middle numbers. So the median is just the average of the two middle\
    \ numbers. So the median is just the average of the two middle \nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_ub5sav.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj_ub5sav.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[end-1] + l[end])/2\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the mean of a list of numbers. \nThe function should\
    \ take a list of numbers as an argument and return the mean of the numbers in\
    \ the list.\nThe function should raise an error if the list is empty.\nThe function\
    \ should raise an error if the list contains non-numbers.\nThe function should\
    \ raise an error if the list contains negative numbers.\nThe function should raise\
    \ an error if the list contains numbers outside the range [-100, 100].\nThe function\
    \ should raise an error if the list contains numbers outside the range [-10, 10].\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2g0h6fte.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2g0h6fte.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mean of a list of numbers.\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp69dlxig5.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp69dlxig5.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length = length(l)\n\
    \    if length == 0 \n        throw(ArgumentError(\"median requires at least one\
    \ element\"))\n    end\n    middle = length / 2\n    if length%2 == 1\n      \
    \  return l[middle]\n    else\n        return (l[middle-1] + l[middle]) / 2\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise: Write a function that returns the median of a list of numbers. \nThe\
    \ median is the number in the middle of the sorted list of numbers. \nIf the length\
    \ of the list is even, the median is the average of the two middle numbers. \n\
    If the length of the list is odd, the median is the middle number of the sorted\
    \ list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv160dj1e.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv160dj1e.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    median = sort(l)[end]\n\
    \    return median\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo2fvlbz1.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo2fvlbz1.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid % 2 == 0\
    \ \n        return l[mid/2]\n    \n    else \n        return (l[mid/2] + l[mid/2\
    \ - 1])/2\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the median of a list of numbers,\
    \ rounded to two decimal places.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxl2wkp6b.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxl2wkp6b.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the mode of a list of numbers. \nThe mode is the number that appears\
    \ most often in the list.\nThe function should work for both sorted and unsorted\
    \ lists.\nThe function should return nothing if the list contains no numbers.\n\
    The function should raise an error if the list contains negative numbers.\nThe\
    \ function should raise an error if the list contains more than one mode.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw4rdebhw.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw4rdebhw.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[(length(l)+1)/2]\n    end\n    \n\
    \    mid = length(l)//2\n    \n    if l[mid] < l[mid+1]\n        return median(l[mid+1:end])\n\
    \    else\n        return median(l[mid:end-1])\n    end\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpyz54u5wn.jl:28\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] getindex at ./abstractarray.jl:980 [inlined]\n   [6] median(::Array{Int64,1})\
    \ at /tmp/tmpyz54u5wn.jl:12\n   [7] top-level scope at /tmp/tmpyz54u5wn.jl:28\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyz54u5wn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpyz54u5wn.jl:29\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3//1 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(::Rational{Int64}) at ./indices.jl:297\n   [2]\
    \ to_index(::Array{Int64,1}, ::Rational{Int64}) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] getindex at ./abstractarray.jl:980 [inlined]\n   [6] median(::Array{Int64,1})\
    \ at /tmp/tmpyz54u5wn.jl:17\n   [7] top-level scope at /tmp/tmpyz54u5wn.jl:29\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyz54u5wn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpyz54u5wn.jl:30\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmpyz54u5wn.jl:12\n   [7]\
    \ top-level scope at /tmp/tmpyz54u5wn.jl:30\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyz54u5wn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpyz54u5wn.jl:31\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1//1 of type Rational{Int64}\n \
    \ Stacktrace:\n   [1] to_index(::Rational{Int64}) at ./indices.jl:297\n   [2]\
    \ to_index(::Array{Int64,1}, ::Rational{Int64}) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] getindex at ./abstractarray.jl:980 [inlined]\n   [6] median(::Array{Int64,1})\
    \ at /tmp/tmpyz54u5wn.jl:17\n   [7] top-level scope at /tmp/tmpyz54u5wn.jl:31\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyz54u5wn.jl:27\n  \ntest set: Error During\
    \ Test at /tmp/tmpyz54u5wn.jl:32\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 4.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmpyz54u5wn.jl:12\n   [7]\
    \ top-level scope at /tmp/tmpyz54u5wn.jl:32\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpyz54u5wn.jl:27\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpyz54u5wn.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2==1\n        return l[(length(l)+1)/2]\n    else\n     \
    \   return 0.5*(l[end-1] + l[end])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptqo0kuz7.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptqo0kuz7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(ArgumentError(\"median requires at least one\
    \ element\"))\n    end\n    return l[mid-1]\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpeozq0vsu.jl:20\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpeozq0vsu.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeozq0vsu.jl:19\ntest set: Test Failed at /tmp/tmpeozq0vsu.jl:21\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 10.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpeozq0vsu.jl:21\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeozq0vsu.jl:19\ntest set: Error During Test at\
    \ /tmp/tmpeozq0vsu.jl:22\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpeozq0vsu.jl:13\n   [3] top-level scope at /tmp/tmpeozq0vsu.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpeozq0vsu.jl:19\n  \ntest set: Test Failed at\
    \ /tmp/tmpeozq0vsu.jl:23\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 6.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmpeozq0vsu.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeozq0vsu.jl:19\ntest set: Test Failed at /tmp/tmpeozq0vsu.jl:24\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 2.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpeozq0vsu.jl:24\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpeozq0vsu.jl:19\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpeozq0vsu.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.4>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.4>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median\
    \ of a list of numbers. If the length of the list is even, the median is the mean\
    \ of the two middle numbers. If the length of the list is odd, the median is the\
    \ number in the middle position. For example, median([3, 1, 2, 4, 5]) should return\
    \ 3, and median([3, 1, 2, 4, 6, 5]) should return 4.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5z2o8hof.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5z2o8hof.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(string(\"median of empty list\")))\n\
    \    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    mid =\
    \ round(Int64, mid)\n    \n    if mid % 2 == 0\n        return (l[mid-1] + l[mid])\
    \ / 2\n    end\n    \n    return (l[mid-1] + l[mid]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return the median of the list.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu992wxfk.jl:26\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu992wxfk.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return 0.5*(l[mid-1]\
    \ + l[mid])\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that\
    \ returns the median of a list of numbers. Your function should take a list of\
    \ numbers as an argument and return the median of the numbers. If the length of\
    \ the list is even, the median is the mean of the two middle numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_v3vhnqi.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_v3vhnqi.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)/2)\n    if length(l)%2 == 1\n        return l[mid]\n  \
    \  else\n        return 0.5 * (l[mid-1] + l[mid])\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument, and return a single number.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_x4vhhy.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_x4vhhy.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l)%2 == 1\n        return l[end-1]\n    else\n        return\
    \ (l[end-1] + l[end])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1cjaw431.jl:22\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp1cjaw431.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cjaw431.jl:21\ntest set: Test Failed at /tmp/tmp1cjaw431.jl:23\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 510.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmp1cjaw431.jl:23\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cjaw431.jl:21\ntest set: Error During Test at\
    \ /tmp/tmp1cjaw431.jl:24\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmp1cjaw431.jl:12\n   [3] top-level scope at /tmp/tmp1cjaw431.jl:24\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp1cjaw431.jl:21\n  \ntest set: Test Failed at\
    \ /tmp/tmp1cjaw431.jl:26\n  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n\
    \   Evaluated: 9.0 == 7\nStacktrace:\n [1] top-level scope at /tmp/tmp1cjaw431.jl:26\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1cjaw431.jl:21\nTest Summary: | Pass  Fail  Error\
    \  Total\ntest set      |    1     3      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 3 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1cjaw431.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the median of a list\
    \ of numbers. \nThe function should take a list of numbers as an argument and\
    \ return the median of the numbers in the list.\nThe median is defined as the\
    \ middle number of the sorted list.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9spi652z.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9spi652z.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)//2\n    if length(l)%2 == 1\n        return l[mid]\n    else\n   \
    \     return (l[mid] + l[mid-1])/2.0\n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the mean of a list of numbers.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppvavs874.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppvavs874.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(\n            \"median\
    \ requires at least one element\"))\n    end\n    \n    if mid % 2 == 0 \n   \
    \     return l[mid/2]\n    else\n        return (l[mid/2] + l[mid/2 - 1])/2.0\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\n\
    Exercise\nWrite a function that returns the median of a list of numbers, rounded\
    \ to a specified number of decimal places.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuudb9226.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuudb9226.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = length(l)\n    if i == 0\n        throw(DomainError(\"\"))\n    end\n\
    \    mid = floor(Int64, i/2)\n    if i == 1\n        return l[mid]\n    end\n\
    \    if l[mid] > l[mid+1]\n        return l[mid]\n    else\n        return l[mid+1]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvb9b_yvx.jl:24\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvb9b_yvx.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = findfirst(x -> x < l, l)\n    if i == length(l) \n        throw(DomainError(\n\
    \            \"median requires at least one element in the list\"))\n    mid =\
    \ l / 2\n    if i == 1\n        return mid\n    if i == length(l)\n        return\
    \ mid + 1\n    if l[i-1] < l[i]\n        return mid\n    return mid + 1\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. \nThe function should throw an\
    \ error if the list is empty.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsda_7n3b.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsda_7n3b.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? 0.0 : (l[floor(length(l) / 2)] + l[ceil(length(l) / 2)]) / 2.0\nend\n\
    </cell>\n<code language=julia-1.5>\n@assert median([3, 1, 2, 4, 5]) == 3.0\n@assert\
    \ median([-10, 4, 6, 1000, 10, 20]) == 15.0\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function to compute the mean of a list of numbers.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp625cmrsi.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp625cmrsi.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid-1]\n        return l[mid]\n \
    \   \n    mid1 = mid - 1\n    mid2 = mid + 1\n    \n    if l[mid1] > l[mid2]\n\
    \        return l[mid1]\n    \n    return l[mid2]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. \nThe function should take a list of numbers as\
    \ an argument and return the median of the numbers in the list.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3c1ac7jh.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3c1ac7jh.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    return l[mid-1]\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpmnd4dlxf.jl:21\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 4.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpmnd4dlxf.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmnd4dlxf.jl:20\ntest set: Test Failed at /tmp/tmpmnd4dlxf.jl:22\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 10.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmpmnd4dlxf.jl:22\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmnd4dlxf.jl:20\ntest set: Error During Test at\
    \ /tmp/tmpmnd4dlxf.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmpmnd4dlxf.jl:14\n   [3] top-level scope at /tmp/tmpmnd4dlxf.jl:23\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpmnd4dlxf.jl:20\n  \ntest set: Test Failed at\
    \ /tmp/tmpmnd4dlxf.jl:24\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 6.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmpmnd4dlxf.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmnd4dlxf.jl:20\ntest set: Test Failed at /tmp/tmpmnd4dlxf.jl:25\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 2.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpmnd4dlxf.jl:25\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpmnd4dlxf.jl:20\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpmnd4dlxf.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2] + l[mid/2 - 1])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_c0f8wj3.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_c0f8wj3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 1\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2yx9ijeh.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 5//2 of type Rational{Int64}\n  Stacktrace:\n   [1] to_index(::Rational{Int64})\
    \ at ./indices.jl:297\n   [2] to_index(::Array{Int64,1}, ::Rational{Int64}) at\
    \ ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmp2yx9ijeh.jl:0\n\
    \   [4] top-level scope at /tmp/tmp2yx9ijeh.jl:21\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2yx9ijeh.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2yx9ijeh.jl:22\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3//1 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(::Rational{Int64}) at ./indices.jl:297\n   [2]\
    \ to_index(::Array{Int64,1}, ::Rational{Int64}) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmp2yx9ijeh.jl:0\n   [4] top-level scope at /tmp/tmp2yx9ijeh.jl:22\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2yx9ijeh.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2yx9ijeh.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 1//2 of type Rational{Int64}\n  Stacktrace:\n\
    \   [1] to_index(::Rational{Int64}) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Rational{Int64}) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmp2yx9ijeh.jl:0\n\
    \   [4] top-level scope at /tmp/tmp2yx9ijeh.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2yx9ijeh.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2yx9ijeh.jl:24\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1//1 of type Rational{Int64}\n \
    \ Stacktrace:\n   [1] to_index(::Rational{Int64}) at ./indices.jl:297\n   [2]\
    \ to_index(::Array{Int64,1}, ::Rational{Int64}) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmp2yx9ijeh.jl:0\n   [4] top-level scope at /tmp/tmp2yx9ijeh.jl:24\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2yx9ijeh.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmp2yx9ijeh.jl:25\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 7//2 of type Rational{Int64}\n\
    \  Stacktrace:\n   [1] to_index(::Rational{Int64}) at ./indices.jl:297\n   [2]\
    \ to_index(::Array{Int64,1}, ::Rational{Int64}) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmp2yx9ijeh.jl:0\n   [4] top-level scope at /tmp/tmp2yx9ijeh.jl:25\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmp2yx9ijeh.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2yx9ijeh.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function that returns the\
    \ median of a list of numbers. Write a test to check your function.\nusing Test\n\
    \n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) ==\
    \ 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxdhuqmj_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxdhuqmj_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<code language=julia-1.3>\nmedian([-10, 4, 6, 1000, 10, 20])\n\
    </cell>\n<text>\nExercise 4\nWrite a function that returns the mode of a given\
    \ list of numbers. \nThe mode is the number that appears most often in the list.\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplmz3ka2d.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplmz3ka2d.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = floor(length(l)/2)\n\
    \    if length(l) % 2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the median\
    \ of a list of numbers. \nThe function should take a list of numbers as an argument,\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the sorted list.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppdzcwzgc.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppdzcwzgc.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    length(l)\
    \ == 0 ? Inf : l[floor(Int, length(l)/2)]\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nThe median of a finite set of numbers is called\
    \ the \"typical\" number. For example, in the set {1, 2, 3, 4}, the median is\
    \ (2 + 3 + 4)/3 = 2.5.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1r1oc0d5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1r1oc0d5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work for negative numbers. `median([-10, 4, 6, 1000, 10, 20])` returns\
    \ `15.0` instead of `-10`.\n<|/ c |>\n<| c |>\nI fixed the issue. Thanks for pointing\
    \ out.\n<|/ c |>\n<| a dscore=4 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbx8p53ak.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbx8p53ak.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2 == 0\n        return l[mid]\n    else\n        return (l[mid]\
    \ + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\nmedian([3,\
    \ 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20])\n</cell>\n<text>\nExercise 3\nWrite a function that returns the mean of\
    \ a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8stcz01.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj8stcz01.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)/2)\n    if length(l) % 2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid]) / 2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = median;\n\
    \t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000,\
    \ 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) ==\
    \ 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwrs7q6b3.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwrs7q6b3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\n    end\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp4j9x8t03.jl:22\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  BoundsError\n  Stacktrace:\n\
    \   [1] getindex at ./number.jl:78 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmp4j9x8t03.jl:14\n   [3] top-level scope at /tmp/tmp4j9x8t03.jl:22\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4j9x8t03.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp4j9x8t03.jl:23\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  BoundsError\n  Stacktrace:\n   [1] getindex at\
    \ ./number.jl:78 [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmp4j9x8t03.jl:14\n\
    \   [3] top-level scope at /tmp/tmp4j9x8t03.jl:23\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4j9x8t03.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp4j9x8t03.jl:24\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78 [inlined]\n\
    \   [2] median(::Array{Int64,1}) at /tmp/tmp4j9x8t03.jl:14\n   [3] top-level scope\
    \ at /tmp/tmp4j9x8t03.jl:24\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4j9x8t03.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp4j9x8t03.jl:25\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmp4j9x8t03.jl:14\n   [3]\
    \ top-level scope at /tmp/tmp4j9x8t03.jl:25\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4j9x8t03.jl:21\n  \ntest set: Error During\
    \ Test at /tmp/tmp4j9x8t03.jl:26\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  BoundsError\n  Stacktrace:\n   [1] getindex at ./number.jl:78\
    \ [inlined]\n   [2] median(::Array{Int64,1}) at /tmp/tmp4j9x8t03.jl:14\n   [3]\
    \ top-level scope at /tmp/tmp4j9x8t03.jl:26\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp4j9x8t03.jl:21\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4j9x8t03.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)//2\n\
    \    if length(l)%2==0\n        return l[mid]\n    else\n        return (l[mid]+l[mid-1])/2\n\
    \    end\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThe median of a set of integers\
    \ is defined as the value that appears more than n/2 times in the set. Your code\
    \ returns the median of a set of floats.\n<|/ c |>\n<| c |>\nI fixed the median\
    \ function\n<|/ c |>\n<| c |>\nI fixed the median function\n<|/ c |>\n<| a tags=julia,median\
    \ |>\nI wrote a package for median in Julia called median.jl that can handle vectors\
    \ of any type. \n<code>\njulia> using median\nusing Test\n\n@testset begin\n\n\
    candidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_0l_qw_8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_0l_qw_8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor((length(l)+1)/2)\n    if mid == length(l)\n        return l[end]\n\
    \    else \n        return median(l[mid-1:end])\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise: Write a function that returns\
    \ the median of a list of numbers. Your function should take a list of numbers\
    \ and return the median of the numbers. If the list is empty, return 0.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbc449cfq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbc449cfq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(DomainError(\"\"))\n    end\n    return l[mid]\n\
    end\n</cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the median of a list of numbers. \nThe function\
    \ should throw an error if the list has less than 2 elements.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuulz9qkh.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuulz9qkh.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)/2)]\nend\n</cell>\n<code language=julia-1.3>\nmedian([3, 1, 2, 4,\
    \ 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the median of\
    \ a list of numbers. \nThe function should take a list of numbers as an argument\
    \ and return the median of the numbers. \nThe median is the number in the middle\
    \ of the list that has the highest number of elements. \nFor example, if the list\
    \ is [3, 1, 2, 4, 5], the median is 3. The median is the number in the middle\
    \ of the list that has the highest number of elements.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6smcp_83.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6smcp_83.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element to work with\"))\n    end\n    return l[mid]\nend\n</cell>\n\
    <code language=julia-1.3>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise\n\
    Write a function that returns the median of a list of numbers. Write a test that\
    \ checks that your function works as expected.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpju9acdcy.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpju9acdcy.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor((length(l)+1)/2)\n    if mid == length(l)\n        return l[end]\n\
    \    else if l[mid] < 0\n        return median(l[mid+1:end])\n    else\n     \
    \   return median(l[1:mid])\n    end\nend\n</code>\n<|/ a tags=julia |>\n<| c\
    \ |>\nI added a median function based on your median function\n<|/ c |>\n<| c\
    \ |>\nI added a median function based on your median function\n<|/ c |>\n<| a\
    \ dscore=3 |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n\
    <code>\nusing median\nmedian([1,2,3,4,5])\n</code>\n<|/ a tags=julia |>\n<| a\
    \ tags=julia |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n\
    <code>\nusing median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia\
    \ |>\nI wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\n\
    using median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a dscore=2 |>\n\
    I wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\nusing\
    \ median\nmedian([1,2,3,4,5])\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n\
    I wrote a package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\nusing\
    \ median\nmedian([1,2,3,4,5])\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI wrote a\
    \ package for this:\nhttps://github.com/kamila-k/median.jl\n<code>\nusing median\n\
    median([1,2,3,4,5])\n</code>\n<|/ a tags=julia dscore=2 |>\n<| a tags=julia |>\n\
    I wrote a package for this:\nhttps://github.com/kamila-k/median\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpliwagx5t.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpliwagx5t.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.1>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the median of a list of numbers. Your function should take a list of numbers\
    \ as an argument, and return a Float64. Your function should use median to find\
    \ the median.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdahy0td.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptdahy0td.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    \n    if length(l)%2\
    \ == 1\n        return l[(length(l)+1)/2]\n    else\n        return (l[(length(l)+1)/2]\
    \ + l[(length(l)+1)/2]) / 2\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnuvj0s6_.jl:21\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 3.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1})\
    \ at /tmp/tmpnuvj0s6_.jl:0\n   [4] top-level scope at /tmp/tmpnuvj0s6_.jl:21\n\
    \   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnuvj0s6_.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpnuvj0s6_.jl:22\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.5 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpnuvj0s6_.jl:0\n\
    \   [4] top-level scope at /tmp/tmpnuvj0s6_.jl:22\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnuvj0s6_.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpnuvj0s6_.jl:23\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n \
    \  [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpnuvj0s6_.jl:0\n\
    \   [4] top-level scope at /tmp/tmpnuvj0s6_.jl:23\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnuvj0s6_.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpnuvj0s6_.jl:24\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.5 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpnuvj0s6_.jl:0\n\
    \   [4] top-level scope at /tmp/tmpnuvj0s6_.jl:24\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnuvj0s6_.jl:20\n  \ntest set: Error During\
    \ Test at /tmp/tmpnuvj0s6_.jl:25\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 4.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] median(::Array{Int64,1}) at /tmp/tmpnuvj0s6_.jl:0\n\
    \   [4] top-level scope at /tmp/tmpnuvj0s6_.jl:25\n   [5] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [6] top-level scope at /tmp/tmpnuvj0s6_.jl:20\n  \nTest Summary: | Error \
    \ Total\ntest set      |     5      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 5 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnuvj0s6_.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp70j7uxk4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp70j7uxk4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    \n    l = sort(l)\n   \
    \ \n    if length(l) == 0 \n        return NaN\n    end\n    \n    mid = floor(Int,\
    \ length(l)/2)\n    \n    if length(l) % 2 == 0\n        return l[mid]\n    else\n\
    \        return (l[mid] + l[mid-1])/2\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ median of a list of numbers. Your function should accept a list of numbers and\
    \ return a Float64. Test your function with lists of length 1, 2, and 3.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2xwq2_n.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2xwq2_n.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0\n        throw(DomainError(\n            \"median requires at\
    \ least one element\"))\n    end\n    \n    if mid == 1\n        return l[1]\n\
    \    end\n    \n    mid = floor(Int64, mid)\n    \n    if l[mid] == l[mid - 1]\n\
    \        return l[mid]\n    end\n    \n    lower = median(l[1 : mid])\n    upper\
    \ = median(l[(mid + 1) : end])\n    \n    if lower == upper\n        return lower\n\
    \    end\n    \n    if l[mid] < lower\n        return lower\n    end\n    \n \
    \   if l[mid] > upper\n        return upper\n    end\n    \n    return mid\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise: Write a function\
    \ that returns the median of a list of numbers. Write a test that passes when\
    \ the function returns the correct median and fails otherwise.\nusing Test\n\n\
    @testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\
    \t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) ==\
    \ 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2,\
    \ 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn7c5itmu.jl:42\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn7c5itmu.jl:42\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[end]\n\
    \    l = l[end]\n    l = l[end]\n    l = l[end]\n    l = l[\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0se7eqw_.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0se7eqw_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 0\n        return l[mid/2]\n    else\n        return\
    \ 0.5 * (l[mid/2-1] + l[mid/2])\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<text>\nExercise\nWrite a function that returns the\
    \ median of a list of numbers. Write a test that passes when the function returns\
    \ the correct value.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt43yqnjq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt43yqnjq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return\
    \ l[mid]\n    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe median is the number in\
    \ the middle of the sorted list. \nThe median is defined as the value separating\
    \ the higher half of the sorted list from the lower half.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv483qvyo.jl:17\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv483qvyo.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    return l[floor(Int64,\
    \ length(l)//2)]\nend\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t\
    @test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10,\
    \ 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\
    \t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Test Failed at /tmp/tmph3ccyirq.jl:16\n  Expression: candidate([3,\
    \ 1, 2, 4, 5]) == 3\n   Evaluated: 1.0 == 3\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmph3ccyirq.jl:16\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph3ccyirq.jl:15\ntest set: Test Failed at /tmp/tmph3ccyirq.jl:17\n\
    \  Expression: candidate([-10, 4, 6, 1000, 10, 20]) == 8.0\n   Evaluated: 6.0\
    \ == 8.0\nStacktrace:\n [1] top-level scope at /tmp/tmph3ccyirq.jl:17\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph3ccyirq.jl:15\ntest set: Error During Test at\
    \ /tmp/tmph3ccyirq.jl:18\n  Test threw exception\n  Expression: candidate([5])\
    \ == 5\n  BoundsError: attempt to access 1-element Array{Int64,1} at index [0]\n\
    \  Stacktrace:\n   [1] getindex at ./array.jl:788 [inlined]\n   [2] median(::Array{Int64,1})\
    \ at /tmp/tmph3ccyirq.jl:9\n   [3] top-level scope at /tmp/tmph3ccyirq.jl:18\n\
    \   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmph3ccyirq.jl:15\n  \ntest set: Test Failed at\
    \ /tmp/tmph3ccyirq.jl:19\n  Expression: candidate([6, 5]) == 5.5\n   Evaluated:\
    \ 6.0 == 5.5\nStacktrace:\n [1] top-level scope at /tmp/tmph3ccyirq.jl:19\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph3ccyirq.jl:15\ntest set: Test Failed at /tmp/tmph3ccyirq.jl:20\n\
    \  Expression: candidate([8, 1, 3, 9, 9, 2, 7]) == 7\n   Evaluated: 3.0 == 7\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmph3ccyirq.jl:20\n [2] top-level scope\
    \ at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmph3ccyirq.jl:15\nTest Summary: | Fail  Error \
    \ Total\ntest set      |    4      1      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 4 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmph3ccyirq.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    i = length(l)\n    j = floor(Int64(i/2))\n    if j > 0\n        return l[j]\n\
    \    else\n        return l[j-1]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20])\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], 2)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20], 3)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 4)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 5)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 6)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 7)\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 8)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], 9)\n</cell>\n<code language=julia-1.5>\nmedian([-10,\
    \ 4, 6, 1000, 10, 20], 10)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4,\
    \ 6, 1000, 10, 20], 11)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6,\
    \ 1000, 10, 20], 12)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000,\
    \ 10, 20], 13)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10,\
    \ 20], 14)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20],\
    \ 15)\n</cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 16)\n\
    </cell>\n<code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 17)\n</cell>\n\
    <code language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 18)\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([-10, 4, 6, 1000, 10, 20], 19)\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20], 20)\n</cell>\n<code language=julia-1.5>\nmedian\n\
    using Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1,\
    \ 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0o8jr89o.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0o8jr89o.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    l = l[end]\n\
    \    mid = floor(Int, length(l) / 2)\n    if length(l) % 2 == 0\n        return\
    \ l[mid]\n    else\n        return (l[mid] + l[mid-1]) / 2\nend\n</cell>\n<code\
    \ language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the mean of a list of numbers. \nThe function should\
    \ take a list of numbers as an argument. \nThe function should return the mean\
    \ of the numbers in the list.\nThe function should raise an error if the list\
    \ is empty.\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn24kkaw1.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn24kkaw1.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        return l[1]\n    else \n        return l[mid]\nend\n\
    </cell>\n<code language=julia-1.5>\nmedian([3, 1, 2, 4, 5])\n</cell>\n<code language=julia-1.5>\n\
    median([-10, 4, 6, 1000, 10, 20])\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the median of a list of numbers. \nThe function should take a list\
    \ of numbers as an argument and return the median of the list.\nThe median is\
    \ the number in the middle of the list that has the smallest absolute value.\n\
    For example, if the list is [3, 1, 2, 4, 5], the median is 3.\nIf the list is\
    \ [-10, 4, 6, 1000, 10, 20], the median is 10.\nusing Test\n\n@testset begin\n\
    \ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx8wrt5ru.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx8wrt5ru.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        throw(DomainError(\"\"))\n    end\n   \
    \ \n    if mid == 1\n        return l[1]\n    end\n    \n    if mid%2 == 1\n \
    \       return median(l[floor(mid/2):floor(mid/2)+1]) + median(l[floor(mid/2):floor(mid/2)+1])\n\
    \    end\n    \n    return median(l[floor(mid/2):mid]) + median(l[floor(mid/2):mid-1])\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3,\
    \ 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t\
    @test(candidate([5]) == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp_l8mzii1.jl:29\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.0 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] getindex at ./abstractarray.jl:980 [inlined]\n   [6] macro expansion at\
    \ ./multidimensional.jl:756 [inlined]\n   [7] macro expansion at ./cartesian.jl:64\
    \ [inlined]\n   [8] macro expansion at ./multidimensional.jl:751 [inlined]\n \
    \  [9] _unsafe_getindex! at ./multidimensional.jl:747 [inlined]\n   [10] _unsafe_getindex\
    \ at ./multidimensional.jl:741 [inlined]\n   [11] _getindex at ./multidimensional.jl:727\
    \ [inlined]\n   [12] getindex at ./abstractarray.jl:980 [inlined]\n   [13] median(::Array{Int64,1})\
    \ at /tmp/tmp_l8mzii1.jl:19\n   [14] top-level scope at /tmp/tmp_l8mzii1.jl:29\n\
    \   [15] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_l8mzii1.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp_l8mzii1.jl:30\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] macro expansion at ./multidimensional.jl:756 [inlined]\n \
    \  [7] macro expansion at ./cartesian.jl:64 [inlined]\n   [8] macro expansion\
    \ at ./multidimensional.jl:751 [inlined]\n   [9] _unsafe_getindex! at ./multidimensional.jl:747\
    \ [inlined]\n   [10] _unsafe_getindex at ./multidimensional.jl:741 [inlined]\n\
    \   [11] _getindex at ./multidimensional.jl:727 [inlined]\n   [12] getindex at\
    \ ./abstractarray.jl:980 [inlined]\n   [13] median(::Array{Int64,1}) at /tmp/tmp_l8mzii1.jl:22\n\
    \   [14] top-level scope at /tmp/tmp_l8mzii1.jl:30\n   [15] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_l8mzii1.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp_l8mzii1.jl:32\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] macro expansion at ./multidimensional.jl:756 [inlined]\n \
    \  [7] macro expansion at ./cartesian.jl:64 [inlined]\n   [8] macro expansion\
    \ at ./multidimensional.jl:751 [inlined]\n   [9] _unsafe_getindex! at ./multidimensional.jl:747\
    \ [inlined]\n   [10] _unsafe_getindex at ./multidimensional.jl:741 [inlined]\n\
    \   [11] _getindex at ./multidimensional.jl:727 [inlined]\n   [12] getindex at\
    \ ./abstractarray.jl:980 [inlined]\n   [13] median(::Array{Int64,1}) at /tmp/tmp_l8mzii1.jl:22\n\
    \   [14] top-level scope at /tmp/tmp_l8mzii1.jl:32\n   [15] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_l8mzii1.jl:28\n  \ntest set: Error During\
    \ Test at /tmp/tmp_l8mzii1.jl:33\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] macro expansion at ./multidimensional.jl:756 [inlined]\n \
    \  [7] macro expansion at ./cartesian.jl:64 [inlined]\n   [8] macro expansion\
    \ at ./multidimensional.jl:751 [inlined]\n   [9] _unsafe_getindex! at ./multidimensional.jl:747\
    \ [inlined]\n   [10] _unsafe_getindex at ./multidimensional.jl:741 [inlined]\n\
    \   [11] _getindex at ./multidimensional.jl:727 [inlined]\n   [12] getindex at\
    \ ./abstractarray.jl:980 [inlined]\n   [13] median(::Array{Int64,1}) at /tmp/tmp_l8mzii1.jl:19\n\
    \   [14] top-level scope at /tmp/tmp_l8mzii1.jl:33\n   [15] top-level scope at\
    \ /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [16] top-level scope at /tmp/tmp_l8mzii1.jl:28\n  \nTest Summary: | Pass \
    \ Error  Total\ntest set      |    1      4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_l8mzii1.jl:26\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ floor(Int, length(l)+1)/2\n    if length(l)%2 == 1\n        return l[mid]\n\
    \    else\n        return (l[mid-1] + l[mid])/2\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the mean of a list of numbers.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4,\
    \ 5]) == 3)\n\t@test(candidate([-10, 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5])\
    \ == 5)\n\t@test(candidate([6, 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9,\
    \ 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgbdaxgcw.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgbdaxgcw.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    sort(l)\n    mid = length(l)\n\
    \    if mid == 0 \n        throw(BoundsError(\"median requires at least one element\"\
    ))\n    end\n    \n    if mid == 1\n        return l[1]\n    end\n    \n    mid2\
    \ = mid / 2\n    \n    if l[mid2] > l[mid2+1]\n        return l[mid2]\n    else\n\
    \        return l[mid2+1]\n    end\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptb9xvhis.jl:31\n  Test threw exception\n\
    \  Expression: candidate([3, 1, 2, 4, 5]) == 3\n  ArgumentError: invalid index:\
    \ 2.5 of type Float64\n  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n\
    \   [2] to_index(::Array{Int64,1}, ::Float64) at ./indices.jl:274\n   [3] to_indices\
    \ at ./indices.jl:325 [inlined]\n   [4] to_indices at ./indices.jl:322 [inlined]\n\
    \   [5] getindex at ./abstractarray.jl:980 [inlined]\n   [6] median(::Array{Int64,1})\
    \ at /tmp/tmptb9xvhis.jl:20\n   [7] top-level scope at /tmp/tmptb9xvhis.jl:31\n\
    \   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmptb9xvhis.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmptb9xvhis.jl:32\n  Test threw exception\n  Expression: candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0\n  ArgumentError: invalid index: 3.0 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmptb9xvhis.jl:20\n   [7]\
    \ top-level scope at /tmp/tmptb9xvhis.jl:32\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmptb9xvhis.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmptb9xvhis.jl:34\n  Test threw exception\n  Expression: candidate([6,\
    \ 5]) == 5.5\n  ArgumentError: invalid index: 1.0 of type Float64\n  Stacktrace:\n\
    \   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmptb9xvhis.jl:20\n   [7]\
    \ top-level scope at /tmp/tmptb9xvhis.jl:34\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmptb9xvhis.jl:30\n  \ntest set: Error During\
    \ Test at /tmp/tmptb9xvhis.jl:35\n  Test threw exception\n  Expression: candidate([8,\
    \ 1, 3, 9, 9, 2, 7]) == 7\n  ArgumentError: invalid index: 3.5 of type Float64\n\
    \  Stacktrace:\n   [1] to_index(::Float64) at ./indices.jl:297\n   [2] to_index(::Array{Int64,1},\
    \ ::Float64) at ./indices.jl:274\n   [3] to_indices at ./indices.jl:325 [inlined]\n\
    \   [4] to_indices at ./indices.jl:322 [inlined]\n   [5] getindex at ./abstractarray.jl:980\
    \ [inlined]\n   [6] median(::Array{Int64,1}) at /tmp/tmptb9xvhis.jl:20\n   [7]\
    \ top-level scope at /tmp/tmptb9xvhis.jl:35\n   [8] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmptb9xvhis.jl:30\n  \nTest Summary: | Pass  Error\
    \  Total\ntest set      |    1      4      5\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 0 failed, 4 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptb9xvhis.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid == 0 \n        return l[1]\n    \n    if mid == 1\n  \
    \      return l[1]\n    \n    if l[mid] == l[mid - 1]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 2]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 3]\n        return l[mid]\n    \n    if l[mid] == l[mid - 4]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid - 5]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 6]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 7]\n        return l[mid]\n    \n    if l[mid] == l[mid - 8]\n  \
    \      return l[mid]\n    \n    if l[mid] == l[mid - 9]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 10]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 11]\n        return l[mid]\n    \n    if l[mid] == l[mid - 12]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 13]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 14]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 15]\n        return l[mid]\n    \n    if l[mid] == l[mid - 16]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 17]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 18]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 19]\n        return l[mid]\n    \n    if l[mid] == l[mid - 20]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - 21]\n        return l[mid]\n\
    \    \n    if l[mid] == l[mid - 22]\n        return l[mid]\n    \n    if l[mid]\
    \ == l[mid - 23]\n        return l[mid]\n    \n    if l[mid] == l[mid - 24]\n\
    \        return l[mid]\n    \n    if l[mid] == l[mid - \nusing Test\n\n@testset\
    \ begin\n\ncandidate = median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10,\
    \ 4, 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwwixo6_j.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwwixo6_j.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return median of elements in the list l.\n    >>> median([3, 1,\
    \ 2, 4, 5])\n    3\n    >>> median([-10, 4, 6, 1000, 10, 20])\n    15.0\n    \"\
    \"\"\nfunction median(l::Vector{Int64})::Float64 \n    l = sort(l)\n    mid =\
    \ length(l)\n    if mid % 2 == 1\n        return l[mid/2]\n    else\n        return\
    \ (l[mid/2] + l[mid/2 - 1])/2.0\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    median([3, 1, 2, 4, 5])\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the mean of a list of numbers.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ median;\n\t@test(candidate([3, 1, 2, 4, 5]) == 3)\n\t@test(candidate([-10, 4,\
    \ 6, 1000, 10, 20]) == 8.0)\n\t@test(candidate([5]) == 5)\n\t@test(candidate([6,\
    \ 5]) == 5.5)\n\t@test(candidate([8, 1, 3, 9, 9, 2, 7]) == 7)\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy1y5681e.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy1y5681e.jl:16\n"
  exit_code: 1
  status: Exception
