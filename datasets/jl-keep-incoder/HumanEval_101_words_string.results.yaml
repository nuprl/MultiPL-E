name: HumanEval_101_words_string
language: julia
results:
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp428augx8.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp428augx8.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp428augx8.jl:19\ntest set: Test Failed at /tmp/tmp428augx8.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp428augx8.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp428augx8.jl:19\ntest set: Test Failed at /tmp/tmp428augx8.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp428augx8.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp428augx8.jl:19\ntest set: Test Failed at /tmp/tmp428augx8.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp428augx8.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp428augx8.jl:19\ntest set: Test Failed at /tmp/tmp428augx8.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp428augx8.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp428augx8.jl:19\ntest set: Test Failed at /tmp/tmp428augx8.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp428augx8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp428augx8.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp428augx8.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgadzyuyz.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgadzyuyz.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgadzyuyz.jl:19\ntest set: Test Failed at /tmp/tmpgadzyuyz.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgadzyuyz.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgadzyuyz.jl:19\ntest set: Test Failed at /tmp/tmpgadzyuyz.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgadzyuyz.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgadzyuyz.jl:19\ntest set: Test Failed at /tmp/tmpgadzyuyz.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgadzyuyz.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgadzyuyz.jl:19\ntest set: Test Failed at /tmp/tmpgadzyuyz.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgadzyuyz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgadzyuyz.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgadzyuyz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr9yj5ru3.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr9yj5ru3.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9yj5ru3.jl:19\ntest set: Test Failed at /tmp/tmpr9yj5ru3.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr9yj5ru3.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9yj5ru3.jl:19\ntest set: Test Failed at /tmp/tmpr9yj5ru3.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr9yj5ru3.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9yj5ru3.jl:19\ntest set: Test Failed at /tmp/tmpr9yj5ru3.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr9yj5ru3.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9yj5ru3.jl:19\ntest set: Test Failed at /tmp/tmpr9yj5ru3.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr9yj5ru3.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr9yj5ru3.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr9yj5ru3.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpnp38erx0.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpnp38erx0.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnp38erx0.jl:19\ntest set: Test Failed at /tmp/tmpnp38erx0.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpnp38erx0.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnp38erx0.jl:19\ntest set: Test Failed at /tmp/tmpnp38erx0.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpnp38erx0.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnp38erx0.jl:19\ntest set: Test Failed at /tmp/tmpnp38erx0.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpnp38erx0.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnp38erx0.jl:19\ntest set: Test Failed at /tmp/tmpnp38erx0.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnp38erx0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpnp38erx0.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnp38erx0.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk2ns98lg.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk2ns98lg.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \", \")\n       \
    \ words_string += word + \", \"\n    end\n    \n    words_string[end-2:end]\n\
    end\n</cell>\n<code language=julia-1.5>\n@test words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n@test words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of words in the string.\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8smas4qw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8smas4qw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj5yr2qq9.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj5yr2qq9.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj5yr2qq9.jl:19\ntest set: Test Failed at /tmp/tmpj5yr2qq9.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj5yr2qq9.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj5yr2qq9.jl:19\ntest set: Test Failed at /tmp/tmpj5yr2qq9.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpj5yr2qq9.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj5yr2qq9.jl:19\ntest set: Test Failed at /tmp/tmpj5yr2qq9.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpj5yr2qq9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj5yr2qq9.jl:19\ntest set: Test Failed at /tmp/tmpj5yr2qq9.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj5yr2qq9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj5yr2qq9.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj5yr2qq9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_6skj80r.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_6skj80r.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_6skj80r.jl:19\ntest set: Test Failed at /tmp/tmp_6skj80r.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_6skj80r.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_6skj80r.jl:19\ntest set: Test Failed at /tmp/tmp_6skj80r.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_6skj80r.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_6skj80r.jl:19\ntest set: Test Failed at /tmp/tmp_6skj80r.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_6skj80r.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_6skj80r.jl:19\ntest set: Test Failed at /tmp/tmp_6skj80r.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6skj80r.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_6skj80r.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_6skj80r.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd6_e08vl.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd6_e08vl.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgf8x8eml.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgf8x8eml.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgf8x8eml.jl:19\ntest set: Test Failed at /tmp/tmpgf8x8eml.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgf8x8eml.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgf8x8eml.jl:19\ntest set: Test Failed at /tmp/tmpgf8x8eml.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgf8x8eml.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgf8x8eml.jl:19\ntest set: Test Failed at /tmp/tmpgf8x8eml.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgf8x8eml.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgf8x8eml.jl:19\ntest set: Test Failed at /tmp/tmpgf8x8eml.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgf8x8eml.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgf8x8eml.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgf8x8eml.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpzqwceqq7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpzqwceqq7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpzqwceqq7.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzqwceqq7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpzqwceqq7.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpzqwceqq7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpzqwceqq7.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzqwceqq7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpzqwceqq7.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpzqwceqq7.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpzqwceqq7.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzqwceqq7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpzqwceqq7.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpzqwceqq7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpzqwceqq7.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzqwceqq7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpzqwceqq7.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpzqwceqq7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpzqwceqq7.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzqwceqq7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpzqwceqq7.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpzqwceqq7.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpzqwceqq7.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpzqwceqq7.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzqwceqq7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_p9spf74.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp_p9spf74.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_p9spf74.jl:19\ntest set: Test Failed at /tmp/tmp_p9spf74.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_p9spf74.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_p9spf74.jl:19\ntest set: Test Failed at /tmp/tmp_p9spf74.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp_p9spf74.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_p9spf74.jl:19\ntest set: Test Failed at /tmp/tmp_p9spf74.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp_p9spf74.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_p9spf74.jl:19\ntest set: Test Failed at /tmp/tmp_p9spf74.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp_p9spf74.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_p9spf74.jl:19\ntest set: Test Failed at /tmp/tmp_p9spf74.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_p9spf74.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_p9spf74.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_p9spf74.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string where all the words are capitalized.\
    \ \nFor example \"Hi, my name is John\" -> \"Hi, My Name Is John\"\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnhnz5413.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnhnz5413.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp40sbciw8.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp40sbciw8.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40sbciw8.jl:19\ntest set: Test Failed at /tmp/tmp40sbciw8.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp40sbciw8.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40sbciw8.jl:19\ntest set: Test Failed at /tmp/tmp40sbciw8.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp40sbciw8.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40sbciw8.jl:19\ntest set: Test Failed at /tmp/tmp40sbciw8.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp40sbciw8.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40sbciw8.jl:19\ntest set: Test Failed at /tmp/tmp40sbciw8.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp40sbciw8.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40sbciw8.jl:19\ntest set: Test Failed at /tmp/tmp40sbciw8.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp40sbciw8.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp40sbciw8.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp40sbciw8.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpr7tzcibt.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr7tzcibt.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7tzcibt.jl:20\ntest set: Test Failed at /tmp/tmpr7tzcibt.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr7tzcibt.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7tzcibt.jl:20\ntest set: Test Failed at /tmp/tmpr7tzcibt.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpr7tzcibt.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7tzcibt.jl:20\ntest set: Test Failed at /tmp/tmpr7tzcibt.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpr7tzcibt.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7tzcibt.jl:20\ntest set: Test Failed at /tmp/tmpr7tzcibt.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpr7tzcibt.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7tzcibt.jl:20\ntest set: Test Failed at /tmp/tmpr7tzcibt.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpr7tzcibt.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpr7tzcibt.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpr7tzcibt.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \" \")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp51s_9h8m.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp51s_9h8m.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp93p9kpbf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp93p9kpbf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \", \")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1hr97lyv.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp1hr97lyv.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hr97lyv.jl:19\ntest set: Test Failed at /tmp/tmp1hr97lyv.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \"my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp1hr97lyv.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hr97lyv.jl:19\ntest set: Test Failed at /tmp/tmp1hr97lyv.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"\
    two\", \"three\", \"four\", \"five\", \"six,\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1hr97lyv.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hr97lyv.jl:19\ntest set: Test Failed at /tmp/tmp1hr97lyv.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp1hr97lyv.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hr97lyv.jl:19\ntest set: Test Failed at /tmp/tmp1hr97lyv.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1hr97lyv.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hr97lyv.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1hr97lyv.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4cxctocn.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4cxctocn.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cxctocn.jl:19\ntest set: Test Failed at /tmp/tmp4cxctocn.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4cxctocn.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cxctocn.jl:19\ntest set: Test Failed at /tmp/tmp4cxctocn.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4cxctocn.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cxctocn.jl:19\ntest set: Test Failed at /tmp/tmp4cxctocn.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4cxctocn.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cxctocn.jl:19\ntest set: Test Failed at /tmp/tmp4cxctocn.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4cxctocn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4cxctocn.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4cxctocn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpo98zioi0.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpo98zioi0.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo98zioi0.jl:19\ntest set: Test Failed at /tmp/tmpo98zioi0.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpo98zioi0.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo98zioi0.jl:19\ntest set: Test Failed at /tmp/tmpo98zioi0.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpo98zioi0.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo98zioi0.jl:19\ntest set: Test Failed at /tmp/tmpo98zioi0.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpo98zioi0.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo98zioi0.jl:19\ntest set: Test Failed at /tmp/tmpo98zioi0.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpo98zioi0.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo98zioi0.jl:19\ntest set: Test Failed at /tmp/tmpo98zioi0.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo98zioi0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpo98zioi0.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpo98zioi0.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp86tupm8l.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp86tupm8l.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \", \")\n       \
    \ words_string += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdhw5j02u.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdhw5j02u.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0q2qsen_.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0q2qsen_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4fsd1c43.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4fsd1c43.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4fsd1c43.jl:19\ntest set: Test Failed at /tmp/tmp4fsd1c43.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4fsd1c43.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4fsd1c43.jl:19\ntest set: Test Failed at /tmp/tmp4fsd1c43.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4fsd1c43.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4fsd1c43.jl:19\ntest set: Test Failed at /tmp/tmp4fsd1c43.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4fsd1c43.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4fsd1c43.jl:19\ntest set: Test Failed at /tmp/tmp4fsd1c43.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4fsd1c43.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4fsd1c43.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4fsd1c43.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \" \")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2g1p_a47.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2g1p_a47.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc05a3bdb.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpc05a3bdb.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc05a3bdb.jl:19\ntest set: Test Failed at /tmp/tmpc05a3bdb.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc05a3bdb.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc05a3bdb.jl:19\ntest set: Test Failed at /tmp/tmpc05a3bdb.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc05a3bdb.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc05a3bdb.jl:19\ntest set: Test Failed at /tmp/tmpc05a3bdb.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc05a3bdb.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc05a3bdb.jl:19\ntest set: Test Failed at /tmp/tmpc05a3bdb.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpc05a3bdb.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc05a3bdb.jl:19\ntest set: Test Failed at /tmp/tmpc05a3bdb.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc05a3bdb.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc05a3bdb.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc05a3bdb.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string[end-2:end]\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkcnudn28.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkcnudn28.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_words that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu3u6kha9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu3u6kha9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgrljkmo0.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpgrljkmo0.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgrljkmo0.jl:19\ntest set: Test Failed at /tmp/tmpgrljkmo0.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgrljkmo0.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgrljkmo0.jl:19\ntest set: Test Failed at /tmp/tmpgrljkmo0.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgrljkmo0.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgrljkmo0.jl:19\ntest set: Test Failed at /tmp/tmpgrljkmo0.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpgrljkmo0.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgrljkmo0.jl:19\ntest set: Test Failed at /tmp/tmpgrljkmo0.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpgrljkmo0.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgrljkmo0.jl:19\ntest set: Test Failed at /tmp/tmpgrljkmo0.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgrljkmo0.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgrljkmo0.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgrljkmo0.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp815zjo2l.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp815zjo2l.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp815zjo2l.jl:18\ntest set: Test Failed at /tmp/tmp815zjo2l.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp815zjo2l.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp815zjo2l.jl:18\ntest set: Test Failed at /tmp/tmp815zjo2l.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp815zjo2l.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp815zjo2l.jl:18\ntest set: Test Failed at /tmp/tmp815zjo2l.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp815zjo2l.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp815zjo2l.jl:18\ntest set: Test Failed at /tmp/tmp815zjo2l.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp815zjo2l.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp815zjo2l.jl:18\ntest set: Test Failed at /tmp/tmp815zjo2l.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp815zjo2l.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp815zjo2l.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp815zjo2l.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \", \")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq8vsvz51.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq8vsvz51.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbpv4_rgk.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbpv4_rgk.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzgwdy6a1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzgwdy6a1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\n@assert words_string(\"One, two, three, four, five, six\") ==\
    \ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns a string where all\
    \ spaces are replaced by underscores and all commas are replaced by underscores.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4vy24gtv.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4vy24gtv.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp_kjclybz.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_kjclybz.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_kjclybz.jl:19\ntest set: Test Failed at /tmp/tmp_kjclybz.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp_kjclybz.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_kjclybz.jl:19\ntest set: Test Failed at /tmp/tmp_kjclybz.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp_kjclybz.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_kjclybz.jl:19\ntest set: Test Failed at /tmp/tmp_kjclybz.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp_kjclybz.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_kjclybz.jl:19\ntest set: Test Failed at /tmp/tmp_kjclybz.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_kjclybz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp_kjclybz.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp_kjclybz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return split(words_string)\nend\n</cell>\n<code language=julia-1.3>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxeoafbal.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxeoafbal.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_spg2yp3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_spg2yp3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpucbe63s6.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpucbe63s6.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66o78pwc.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp66o78pwc.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66o78pwc.jl:18\ntest set: Test Failed at /tmp/tmp66o78pwc.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp66o78pwc.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66o78pwc.jl:18\ntest set: Test Failed at /tmp/tmp66o78pwc.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp66o78pwc.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66o78pwc.jl:18\ntest set: Test Failed at /tmp/tmp66o78pwc.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp66o78pwc.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66o78pwc.jl:18\ntest set: Test Failed at /tmp/tmp66o78pwc.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp66o78pwc.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66o78pwc.jl:18\ntest set: Test Failed at /tmp/tmp66o78pwc.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66o78pwc.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66o78pwc.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66o78pwc.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_t_8w4_t.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_t_8w4_t.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1hhdvlzf.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1hhdvlzf.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hhdvlzf.jl:19\ntest set: Test Failed at /tmp/tmp1hhdvlzf.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1hhdvlzf.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hhdvlzf.jl:19\ntest set: Test Failed at /tmp/tmp1hhdvlzf.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1hhdvlzf.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hhdvlzf.jl:19\ntest set: Test Failed at /tmp/tmp1hhdvlzf.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1hhdvlzf.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hhdvlzf.jl:19\ntest set: Test Failed at /tmp/tmp1hhdvlzf.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1hhdvlzf.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1hhdvlzf.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1hhdvlzf.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpntdp_vf3.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpntdp_vf3.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    return words_string.split(\" \")\nend\n\
    </cell>\n<code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3rkc8zqy.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3rkc8zqy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpat27b17a.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpat27b17a.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpat27b17a.jl:19\ntest set: Test Failed at /tmp/tmpat27b17a.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpat27b17a.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpat27b17a.jl:19\ntest set: Test Failed at /tmp/tmpat27b17a.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpat27b17a.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpat27b17a.jl:19\ntest set: Test Failed at /tmp/tmpat27b17a.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpat27b17a.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpat27b17a.jl:19\ntest set: Test Failed at /tmp/tmpat27b17a.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpat27b17a.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpat27b17a.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpat27b17a.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpes4ox5rk.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpes4ox5rk.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpes4ox5rk.jl:19\ntest set: Test Failed at /tmp/tmpes4ox5rk.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpes4ox5rk.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpes4ox5rk.jl:19\ntest set: Test Failed at /tmp/tmpes4ox5rk.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpes4ox5rk.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpes4ox5rk.jl:19\ntest set: Test Failed at /tmp/tmpes4ox5rk.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpes4ox5rk.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpes4ox5rk.jl:19\ntest set: Test Failed at /tmp/tmpes4ox5rk.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpes4ox5rk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpes4ox5rk.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpes4ox5rk.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpblo3kvy7.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpblo3kvy7.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpblo3kvy7.jl:19\ntest set: Test Failed at /tmp/tmpblo3kvy7.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpblo3kvy7.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpblo3kvy7.jl:19\ntest set: Test Failed at /tmp/tmpblo3kvy7.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpblo3kvy7.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpblo3kvy7.jl:19\ntest set: Test Failed at /tmp/tmpblo3kvy7.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpblo3kvy7.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpblo3kvy7.jl:19\ntest set: Test Failed at /tmp/tmpblo3kvy7.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpblo3kvy7.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpblo3kvy7.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpblo3kvy7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpazcvl9qa.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpazcvl9qa.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdt566vd2.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpdt566vd2.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdt566vd2.jl:19\ntest set: Test Failed at /tmp/tmpdt566vd2.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdt566vd2.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdt566vd2.jl:19\ntest set: Test Failed at /tmp/tmpdt566vd2.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpdt566vd2.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdt566vd2.jl:19\ntest set: Test Failed at /tmp/tmpdt566vd2.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpdt566vd2.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdt566vd2.jl:19\ntest set: Test Failed at /tmp/tmpdt566vd2.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpdt566vd2.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdt566vd2.jl:19\ntest set: Test Failed at /tmp/tmpdt566vd2.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdt566vd2.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdt566vd2.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdt566vd2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpps69if8c.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpps69if8c.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpdccjf_4z.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdccjf_4z.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdccjf_4z.jl:20\ntest set: Test Failed at /tmp/tmpdccjf_4z.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdccjf_4z.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdccjf_4z.jl:20\ntest set: Test Failed at /tmp/tmpdccjf_4z.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpdccjf_4z.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdccjf_4z.jl:20\ntest set: Test Failed at /tmp/tmpdccjf_4z.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpdccjf_4z.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdccjf_4z.jl:20\ntest set: Test Failed at /tmp/tmpdccjf_4z.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpdccjf_4z.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdccjf_4z.jl:20\ntest set: Test Failed at /tmp/tmpdccjf_4z.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpdccjf_4z.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpdccjf_4z.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpdccjf_4z.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4prkj60e.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp4prkj60e.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4prkj60e.jl:19\ntest set: Test Failed at /tmp/tmp4prkj60e.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4prkj60e.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4prkj60e.jl:19\ntest set: Test Failed at /tmp/tmp4prkj60e.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4prkj60e.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4prkj60e.jl:19\ntest set: Test Failed at /tmp/tmp4prkj60e.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp4prkj60e.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4prkj60e.jl:19\ntest set: Test Failed at /tmp/tmp4prkj60e.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4prkj60e.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4prkj60e.jl:19\ntest set: Test Failed at /tmp/tmp4prkj60e.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4prkj60e.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4prkj60e.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4prkj60e.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    @test words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n@test words_string(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx1xfcv1t.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1xfcv1t.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    return words\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuc4_nmt3.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuc4_nmt3.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpen_wmvdp.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpen_wmvdp.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpen_wmvdp.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpng6cbsml.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpng6cbsml.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \", \")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjxqo1s3i.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjxqo1s3i.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxqo1s3i.jl:19\ntest set: Test Failed at /tmp/tmpjxqo1s3i.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \"my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjxqo1s3i.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxqo1s3i.jl:19\ntest set: Test Failed at /tmp/tmpjxqo1s3i.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"\
    two\", \"three\", \"four\", \"five\", \"six,\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjxqo1s3i.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxqo1s3i.jl:19\ntest set: Test Failed at /tmp/tmpjxqo1s3i.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjxqo1s3i.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxqo1s3i.jl:19\ntest set: Test Failed at /tmp/tmpjxqo1s3i.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjxqo1s3i.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjxqo1s3i.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjxqo1s3i.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwjw50u3j.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwjw50u3j.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppt8150rt.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppt8150rt.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqvmpgl5j.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqvmpgl5j.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp6sp13jc4.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6sp13jc4.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6sp13jc4.jl:19\ntest set: Test Failed at /tmp/tmp6sp13jc4.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp6sp13jc4.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6sp13jc4.jl:19\ntest set: Test Failed at /tmp/tmp6sp13jc4.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp6sp13jc4.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6sp13jc4.jl:19\ntest set: Test Failed at /tmp/tmp6sp13jc4.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp6sp13jc4.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6sp13jc4.jl:19\ntest set: Test Failed at /tmp/tmp6sp13jc4.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6sp13jc4.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp6sp13jc4.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp6sp13jc4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkltcho7l.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkltcho7l.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkinmu9nj.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkinmu9nj.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvw5x6q_9.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpvw5x6q_9.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvw5x6q_9.jl:19\ntest set: Test Failed at /tmp/tmpvw5x6q_9.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvw5x6q_9.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvw5x6q_9.jl:19\ntest set: Test Failed at /tmp/tmpvw5x6q_9.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvw5x6q_9.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvw5x6q_9.jl:19\ntest set: Test Failed at /tmp/tmpvw5x6q_9.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpvw5x6q_9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvw5x6q_9.jl:19\ntest set: Test Failed at /tmp/tmpvw5x6q_9.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvw5x6q_9.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvw5x6q_9.jl:19\ntest set: Test Failed at /tmp/tmpvw5x6q_9.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvw5x6q_9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvw5x6q_9.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvw5x6q_9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnf7v9et1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnf7v9et1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \", \")\n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ called words_strings that takes a string and returns a vector of strings. Your\
    \ function should split the string into words and return an array of words.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjqbw0da2.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjqbw0da2.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    words = split(s, \" \")\n    return words\nend\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4qrlvrn3.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qrlvrn3.jl:19\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qrlvrn3.jl:18\ntest set: Test Failed at /tmp/tmp4qrlvrn3.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qrlvrn3.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qrlvrn3.jl:18\ntest set: Test Failed at /tmp/tmp4qrlvrn3.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp4qrlvrn3.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qrlvrn3.jl:18\ntest set: Test Failed at /tmp/tmp4qrlvrn3.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp4qrlvrn3.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qrlvrn3.jl:18\ntest set: Test Failed at /tmp/tmp4qrlvrn3.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qrlvrn3.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qrlvrn3.jl:18\ntest set: Test Failed at /tmp/tmp4qrlvrn3.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4qrlvrn3.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4qrlvrn3.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4qrlvrn3.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp52hsbad2.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp52hsbad2.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp52hsbad2.jl:19\ntest set: Test Failed at /tmp/tmp52hsbad2.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp52hsbad2.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp52hsbad2.jl:19\ntest set: Test Failed at /tmp/tmp52hsbad2.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp52hsbad2.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp52hsbad2.jl:19\ntest set: Test Failed at /tmp/tmp52hsbad2.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp52hsbad2.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp52hsbad2.jl:19\ntest set: Test Failed at /tmp/tmp52hsbad2.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp52hsbad2.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp52hsbad2.jl:19\ntest set: Test Failed at /tmp/tmp52hsbad2.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp52hsbad2.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp52hsbad2.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp52hsbad2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \", \")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpu_d9leh_.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpu_d9leh_.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_d9leh_.jl:19\ntest set: Test Failed at /tmp/tmpu_d9leh_.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \"my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpu_d9leh_.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_d9leh_.jl:19\ntest set: Test Failed at /tmp/tmpu_d9leh_.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"\
    two\", \"three\", \"four\", \"five\", \"six,\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpu_d9leh_.jl:23\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_d9leh_.jl:19\ntest set: Test Failed at /tmp/tmpu_d9leh_.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpu_d9leh_.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_d9leh_.jl:19\ntest set: Test Failed at /tmp/tmpu_d9leh_.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_d9leh_.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpu_d9leh_.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpu_d9leh_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd62gs949.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd62gs949.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb1_toqrl.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1_toqrl.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp92exkotv.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp92exkotv.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp92exkotv.jl:19\ntest set: Test Failed at /tmp/tmp92exkotv.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp92exkotv.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp92exkotv.jl:19\ntest set: Test Failed at /tmp/tmp92exkotv.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp92exkotv.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp92exkotv.jl:19\ntest set: Test Failed at /tmp/tmp92exkotv.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp92exkotv.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp92exkotv.jl:19\ntest set: Test Failed at /tmp/tmp92exkotv.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp92exkotv.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp92exkotv.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp92exkotv.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpozsuhtdp.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpozsuhtdp.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpozsuhtdp.jl:20\ntest set: Test Failed at /tmp/tmpozsuhtdp.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpozsuhtdp.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpozsuhtdp.jl:20\ntest set: Test Failed at /tmp/tmpozsuhtdp.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpozsuhtdp.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpozsuhtdp.jl:20\ntest set: Test Failed at /tmp/tmpozsuhtdp.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpozsuhtdp.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpozsuhtdp.jl:20\ntest set: Test Failed at /tmp/tmpozsuhtdp.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpozsuhtdp.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpozsuhtdp.jl:20\ntest set: Test Failed at /tmp/tmpozsuhtdp.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpozsuhtdp.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpozsuhtdp.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpozsuhtdp.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpqe1l7y7h.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpqe1l7y7h.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe1l7y7h.jl:19\ntest set: Test Failed at /tmp/tmpqe1l7y7h.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpqe1l7y7h.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe1l7y7h.jl:19\ntest set: Test Failed at /tmp/tmpqe1l7y7h.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpqe1l7y7h.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe1l7y7h.jl:19\ntest set: Test Failed at /tmp/tmpqe1l7y7h.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpqe1l7y7h.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe1l7y7h.jl:19\ntest set: Test Failed at /tmp/tmpqe1l7y7h.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpqe1l7y7h.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe1l7y7h.jl:19\ntest set: Test Failed at /tmp/tmpqe1l7y7h.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqe1l7y7h.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpqe1l7y7h.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpqe1l7y7h.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a vector of words and returns a vector of integers\
    \ representing the number of times each word appears in the input vector.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzdb106u4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzdb106u4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpm9wbvsnl.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm9wbvsnl.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm9wbvsnl.jl:19\ntest set: Test Failed at /tmp/tmpm9wbvsnl.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpm9wbvsnl.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm9wbvsnl.jl:19\ntest set: Test Failed at /tmp/tmpm9wbvsnl.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpm9wbvsnl.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm9wbvsnl.jl:19\ntest set: Test Failed at /tmp/tmpm9wbvsnl.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpm9wbvsnl.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm9wbvsnl.jl:19\ntest set: Test Failed at /tmp/tmpm9wbvsnl.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm9wbvsnl.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpm9wbvsnl.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpm9wbvsnl.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \" \")\n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9nvjpwro.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9nvjpwro.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpayey7n8l.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpayey7n8l.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpayey7n8l.jl:19\ntest set: Test Failed at /tmp/tmpayey7n8l.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpayey7n8l.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpayey7n8l.jl:19\ntest set: Test Failed at /tmp/tmpayey7n8l.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpayey7n8l.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpayey7n8l.jl:19\ntest set: Test Failed at /tmp/tmpayey7n8l.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpayey7n8l.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpayey7n8l.jl:19\ntest set: Test Failed at /tmp/tmpayey7n8l.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpayey7n8l.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpayey7n8l.jl:19\ntest set: Test Failed at /tmp/tmpayey7n8l.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpayey7n8l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpayey7n8l.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpayey7n8l.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvegdyn92.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpvegdyn92.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvegdyn92.jl:19\ntest set: Test Failed at /tmp/tmpvegdyn92.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvegdyn92.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvegdyn92.jl:19\ntest set: Test Failed at /tmp/tmpvegdyn92.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpvegdyn92.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvegdyn92.jl:19\ntest set: Test Failed at /tmp/tmpvegdyn92.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpvegdyn92.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvegdyn92.jl:19\ntest set: Test Failed at /tmp/tmpvegdyn92.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpvegdyn92.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvegdyn92.jl:19\ntest set: Test Failed at /tmp/tmpvegdyn92.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvegdyn92.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvegdyn92.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvegdyn92.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of words and returns the same vector but with all words\
    \ capitalized.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn2ihgvy8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn2ihgvy8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprx5rpbj4.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprx5rpbj4.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx5rpbj4.jl:19\ntest set: Test Failed at /tmp/tmprx5rpbj4.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprx5rpbj4.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx5rpbj4.jl:19\ntest set: Test Failed at /tmp/tmprx5rpbj4.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprx5rpbj4.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx5rpbj4.jl:19\ntest set: Test Failed at /tmp/tmprx5rpbj4.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprx5rpbj4.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx5rpbj4.jl:19\ntest set: Test Failed at /tmp/tmprx5rpbj4.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmprx5rpbj4.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx5rpbj4.jl:19\ntest set: Test Failed at /tmp/tmprx5rpbj4.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprx5rpbj4.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprx5rpbj4.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprx5rpbj4.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpoyu554hh.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpoyu554hh.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyu554hh.jl:20\ntest set: Test Failed at /tmp/tmpoyu554hh.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpoyu554hh.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyu554hh.jl:20\ntest set: Test Failed at /tmp/tmpoyu554hh.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpoyu554hh.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyu554hh.jl:20\ntest set: Test Failed at /tmp/tmpoyu554hh.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpoyu554hh.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyu554hh.jl:20\ntest set: Test Failed at /tmp/tmpoyu554hh.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpoyu554hh.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyu554hh.jl:20\ntest set: Test Failed at /tmp/tmpoyu554hh.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpoyu554hh.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpoyu554hh.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoyu554hh.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpssg_fw_1.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpssg_fw_1.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    return words\nend\n</cell>\n<code language=julia-0.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-0.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string with all the characters in lower case.\
    \ \nFor example \"Hi, my name is John\" -> \"hi, my name is john\"\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpafuxnb_k.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpafuxnb_k.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnw0hw0iw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnw0hw0iw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjr34hz_n.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjr34hz_n.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjr34hz_n.jl:20\ntest set: Test Failed at /tmp/tmpjr34hz_n.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjr34hz_n.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjr34hz_n.jl:20\ntest set: Test Failed at /tmp/tmpjr34hz_n.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpjr34hz_n.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjr34hz_n.jl:20\ntest set: Test Failed at /tmp/tmpjr34hz_n.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjr34hz_n.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjr34hz_n.jl:20\ntest set: Test Failed at /tmp/tmpjr34hz_n.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjr34hz_n.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjr34hz_n.jl:20\ntest set: Test Failed at /tmp/tmpjr34hz_n.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjr34hz_n.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjr34hz_n.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjr34hz_n.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq5d188pn.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq5d188pn.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5d188pn.jl:19\ntest set: Test Failed at /tmp/tmpq5d188pn.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq5d188pn.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5d188pn.jl:19\ntest set: Test Failed at /tmp/tmpq5d188pn.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpq5d188pn.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5d188pn.jl:19\ntest set: Test Failed at /tmp/tmpq5d188pn.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpq5d188pn.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5d188pn.jl:19\ntest set: Test Failed at /tmp/tmpq5d188pn.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq5d188pn.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq5d188pn.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq5d188pn.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1htq_u52.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1htq_u52.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjiqj4kjy.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjiqj4kjy.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjiqj4kjy.jl:20\ntest set: Test Failed at /tmp/tmpjiqj4kjy.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjiqj4kjy.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjiqj4kjy.jl:20\ntest set: Test Failed at /tmp/tmpjiqj4kjy.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpjiqj4kjy.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjiqj4kjy.jl:20\ntest set: Test Failed at /tmp/tmpjiqj4kjy.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpjiqj4kjy.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjiqj4kjy.jl:20\ntest set: Test Failed at /tmp/tmpjiqj4kjy.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjiqj4kjy.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjiqj4kjy.jl:20\ntest set: Test Failed at /tmp/tmpjiqj4kjy.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjiqj4kjy.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjiqj4kjy.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjiqj4kjy.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprf91j__j.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprf91j__j.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprf91j__j.jl:19\ntest set: Test Failed at /tmp/tmprf91j__j.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprf91j__j.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprf91j__j.jl:19\ntest set: Test Failed at /tmp/tmprf91j__j.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprf91j__j.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprf91j__j.jl:19\ntest set: Test Failed at /tmp/tmprf91j__j.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprf91j__j.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprf91j__j.jl:19\ntest set: Test Failed at /tmp/tmprf91j__j.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprf91j__j.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprf91j__j.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprf91j__j.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.3>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of words and returns the same\
    \ vector but with all words capitalized.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaseo5nj9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaseo5nj9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbojy_ot.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprbojy_ot.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvke71ana.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvke71ana.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvke71ana.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprs5v9ym7.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprs5v9ym7.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprs5v9ym7.jl:19\ntest set: Test Failed at /tmp/tmprs5v9ym7.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprs5v9ym7.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprs5v9ym7.jl:19\ntest set: Test Failed at /tmp/tmprs5v9ym7.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprs5v9ym7.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprs5v9ym7.jl:19\ntest set: Test Failed at /tmp/tmprs5v9ym7.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprs5v9ym7.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprs5v9ym7.jl:19\ntest set: Test Failed at /tmp/tmprs5v9ym7.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmprs5v9ym7.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprs5v9ym7.jl:19\ntest set: Test Failed at /tmp/tmprs5v9ym7.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprs5v9ym7.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprs5v9ym7.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprs5v9ym7.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpzh_thfo9.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzh_thfo9.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzh_thfo9.jl:19\ntest set: Test Failed at /tmp/tmpzh_thfo9.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpzh_thfo9.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzh_thfo9.jl:19\ntest set: Test Failed at /tmp/tmpzh_thfo9.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpzh_thfo9.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzh_thfo9.jl:19\ntest set: Test Failed at /tmp/tmpzh_thfo9.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpzh_thfo9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzh_thfo9.jl:19\ntest set: Test Failed at /tmp/tmpzh_thfo9.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzh_thfo9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpzh_thfo9.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpzh_thfo9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcdshstdd.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcdshstdd.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcdshstdd.jl:20\ntest set: Test Failed at /tmp/tmpcdshstdd.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcdshstdd.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcdshstdd.jl:20\ntest set: Test Failed at /tmp/tmpcdshstdd.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcdshstdd.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcdshstdd.jl:20\ntest set: Test Failed at /tmp/tmpcdshstdd.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpcdshstdd.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcdshstdd.jl:20\ntest set: Test Failed at /tmp/tmpcdshstdd.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcdshstdd.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcdshstdd.jl:20\ntest set: Test Failed at /tmp/tmpcdshstdd.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcdshstdd.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcdshstdd.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcdshstdd.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a vector of words. Your function should split\
    \ on spaces and commas and then split each word on spaces. For example, words_string(\"\
    Hi, my name is John\") should return [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ].\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppy0g3p4h.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppy0g3p4h.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgjx7susa.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgjx7susa.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgjx7susa.jl:19\ntest set: Test Failed at /tmp/tmpgjx7susa.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgjx7susa.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgjx7susa.jl:19\ntest set: Test Failed at /tmp/tmpgjx7susa.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpgjx7susa.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgjx7susa.jl:19\ntest set: Test Failed at /tmp/tmpgjx7susa.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpgjx7susa.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgjx7susa.jl:19\ntest set: Test Failed at /tmp/tmpgjx7susa.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgjx7susa.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgjx7susa.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgjx7susa.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8f4510k4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8f4510k4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns a string\
    \ with all the words capitalized. \nFor example, \ncapitalize_string(\"Hi, my\
    \ name is John\") should return \"Hi, My Name Is John\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprzdi0cmr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprzdi0cmr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplyfdmmyp.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplyfdmmyp.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp66kqbqcg.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp66kqbqcg.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66kqbqcg.jl:18\ntest set: Test Failed at /tmp/tmp66kqbqcg.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp66kqbqcg.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66kqbqcg.jl:18\ntest set: Test Failed at /tmp/tmp66kqbqcg.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp66kqbqcg.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66kqbqcg.jl:18\ntest set: Test Failed at /tmp/tmp66kqbqcg.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp66kqbqcg.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66kqbqcg.jl:18\ntest set: Test Failed at /tmp/tmp66kqbqcg.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp66kqbqcg.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66kqbqcg.jl:18\ntest set: Test Failed at /tmp/tmp66kqbqcg.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp66kqbqcg.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp66kqbqcg.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp66kqbqcg.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0xpuuasj.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0xpuuasj.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0xpuuasj.jl:19\ntest set: Test Failed at /tmp/tmp0xpuuasj.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0xpuuasj.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0xpuuasj.jl:19\ntest set: Test Failed at /tmp/tmp0xpuuasj.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0xpuuasj.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0xpuuasj.jl:19\ntest set: Test Failed at /tmp/tmp0xpuuasj.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0xpuuasj.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0xpuuasj.jl:19\ntest set: Test Failed at /tmp/tmp0xpuuasj.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0xpuuasj.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0xpuuasj.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0xpuuasj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpukdc42xe.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpukdc42xe.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpukdc42xe.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0_dvcb8q.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0_dvcb8q.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0_dvcb8q.jl:19\ntest set: Test Failed at /tmp/tmp0_dvcb8q.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0_dvcb8q.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0_dvcb8q.jl:19\ntest set: Test Failed at /tmp/tmp0_dvcb8q.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp0_dvcb8q.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0_dvcb8q.jl:19\ntest set: Test Failed at /tmp/tmp0_dvcb8q.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp0_dvcb8q.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0_dvcb8q.jl:19\ntest set: Test Failed at /tmp/tmp0_dvcb8q.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0_dvcb8q.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0_dvcb8q.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0_dvcb8q.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprwuxpx2l.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprwuxpx2l.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprwuxpx2l.jl:19\ntest set: Test Failed at /tmp/tmprwuxpx2l.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprwuxpx2l.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprwuxpx2l.jl:19\ntest set: Test Failed at /tmp/tmprwuxpx2l.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmprwuxpx2l.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprwuxpx2l.jl:19\ntest set: Test Failed at /tmp/tmprwuxpx2l.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmprwuxpx2l.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprwuxpx2l.jl:19\ntest set: Test Failed at /tmp/tmprwuxpx2l.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprwuxpx2l.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprwuxpx2l.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprwuxpx2l.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    return split(words_string)\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphtz3cysu.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphtz3cysu.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \", \")\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"\
    is\", \"John\"]\n@assert words_string(\"One, two, three, four, five, six\") ==\
    \ [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a vector of strings and returns a vector\
    \ of integers where the integer value is the index of the string in the original\
    \ vector.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8hk71wg.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf8hk71wg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \" \")\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfdow3q4_.jl:18\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfdow3q4_.jl:18\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfdow3q4_.jl:17\ntest set: Test Failed at /tmp/tmpfdow3q4_.jl:19\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfdow3q4_.jl:19\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfdow3q4_.jl:17\ntest set: Test Failed at /tmp/tmpfdow3q4_.jl:20\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpfdow3q4_.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfdow3q4_.jl:17\ntest set: Test Failed at /tmp/tmpfdow3q4_.jl:21\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpfdow3q4_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfdow3q4_.jl:17\ntest set: Test Failed at /tmp/tmpfdow3q4_.jl:22\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfdow3q4_.jl:22\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfdow3q4_.jl:17\ntest set: Test Failed at /tmp/tmpfdow3q4_.jl:23\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfdow3q4_.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfdow3q4_.jl:17\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfdow3q4_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpbp5wfdoa.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpbp5wfdoa.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbp5wfdoa.jl:19\ntest set: Test Failed at /tmp/tmpbp5wfdoa.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpbp5wfdoa.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbp5wfdoa.jl:19\ntest set: Test Failed at /tmp/tmpbp5wfdoa.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpbp5wfdoa.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbp5wfdoa.jl:19\ntest set: Test Failed at /tmp/tmpbp5wfdoa.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpbp5wfdoa.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbp5wfdoa.jl:19\ntest set: Test Failed at /tmp/tmpbp5wfdoa.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpbp5wfdoa.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbp5wfdoa.jl:19\ntest set: Test Failed at /tmp/tmpbp5wfdoa.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbp5wfdoa.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpbp5wfdoa.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbp5wfdoa.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpt61ut1b8.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpt61ut1b8.jl:19\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt61ut1b8.jl:18\ntest set: Test Failed at /tmp/tmpt61ut1b8.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpt61ut1b8.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt61ut1b8.jl:18\ntest set: Test Failed at /tmp/tmpt61ut1b8.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpt61ut1b8.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt61ut1b8.jl:18\ntest set: Test Failed at /tmp/tmpt61ut1b8.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpt61ut1b8.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt61ut1b8.jl:18\ntest set: Test Failed at /tmp/tmpt61ut1b8.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt61ut1b8.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpt61ut1b8.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt61ut1b8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8nism5z9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8nism5z9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp0ndprs3_.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp0ndprs3_.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ndprs3_.jl:18\ntest set: Test Failed at /tmp/tmp0ndprs3_.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp0ndprs3_.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ndprs3_.jl:18\ntest set: Test Failed at /tmp/tmp0ndprs3_.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp0ndprs3_.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ndprs3_.jl:18\ntest set: Test Failed at /tmp/tmp0ndprs3_.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp0ndprs3_.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ndprs3_.jl:18\ntest set: Test Failed at /tmp/tmp0ndprs3_.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp0ndprs3_.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ndprs3_.jl:18\ntest set: Test Failed at /tmp/tmp0ndprs3_.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0ndprs3_.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp0ndprs3_.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0ndprs3_.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \", \")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphumhakuj.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphumhakuj.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphumhakuj.jl:20\ntest set: Test Failed at /tmp/tmphumhakuj.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphumhakuj.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphumhakuj.jl:20\ntest set: Test Failed at /tmp/tmphumhakuj.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmphumhakuj.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphumhakuj.jl:20\ntest set: Test Failed at /tmp/tmphumhakuj.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmphumhakuj.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphumhakuj.jl:20\ntest set: Test Failed at /tmp/tmphumhakuj.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphumhakuj.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphumhakuj.jl:20\ntest set: Test Failed at /tmp/tmphumhakuj.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphumhakuj.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphumhakuj.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphumhakuj.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.3>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwydmvz4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvwydmvz4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ has been concatenated with itself and separated by a space.\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp9rtlx37.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp9rtlx37.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxvd7zwrz.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxvd7zwrz.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp8t8e8s8u.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp8t8e8s8u.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8t8e8s8u.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8t8e8s8u.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8t8e8s8u.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp8t8e8s8u.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8t8e8s8u.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8t8e8s8u.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8t8e8s8u.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmp8t8e8s8u.jl:14\n   [2] top-level scope at\
    \ /tmp/tmp8t8e8s8u.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8t8e8s8u.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8t8e8s8u.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp8t8e8s8u.jl:14\n\
    \   [2] top-level scope at /tmp/tmp8t8e8s8u.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8t8e8s8u.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8t8e8s8u.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: Cannot `convert` an object of type String\
    \ to an object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp8t8e8s8u.jl:19\n\
    \   [2] top-level scope at /tmp/tmp8t8e8s8u.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8t8e8s8u.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp8t8e8s8u.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmp8t8e8s8u.jl:14\n   [2] top-level scope at\
    \ /tmp/tmp8t8e8s8u.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp8t8e8s8u.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8t8e8s8u.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of integers representing\
    \ the number of words in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa3c6j29u.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa3c6j29u.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb3ewwwrf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb3ewwwrf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpnsafttx7.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpnsafttx7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpnsafttx7.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnsafttx7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnsafttx7.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpnsafttx7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpnsafttx7.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnsafttx7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnsafttx7.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpnsafttx7.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpnsafttx7.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnsafttx7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnsafttx7.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpnsafttx7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpnsafttx7.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnsafttx7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnsafttx7.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpnsafttx7.jl:14\n\
    \   [2] top-level scope at /tmp/tmpnsafttx7.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnsafttx7.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpnsafttx7.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpnsafttx7.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpnsafttx7.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpnsafttx7.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpnsafttx7.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9b6slods.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b6slods.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b6slods.jl:19\ntest set: Test Failed at /tmp/tmp9b6slods.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b6slods.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b6slods.jl:19\ntest set: Test Failed at /tmp/tmp9b6slods.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9b6slods.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b6slods.jl:19\ntest set: Test Failed at /tmp/tmp9b6slods.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9b6slods.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b6slods.jl:19\ntest set: Test Failed at /tmp/tmp9b6slods.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9b6slods.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b6slods.jl:19\ntest set: Test Failed at /tmp/tmp9b6slods.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9b6slods.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9b6slods.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9b6slods.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns a string with all the words reversed.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6hv285q5.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6hv285q5.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpjhuxyqaj.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpjhuxyqaj.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhuxyqaj.jl:19\ntest set: Test Failed at /tmp/tmpjhuxyqaj.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpjhuxyqaj.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhuxyqaj.jl:19\ntest set: Test Failed at /tmp/tmpjhuxyqaj.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpjhuxyqaj.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhuxyqaj.jl:19\ntest set: Test Failed at /tmp/tmpjhuxyqaj.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpjhuxyqaj.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhuxyqaj.jl:19\ntest set: Test Failed at /tmp/tmpjhuxyqaj.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpjhuxyqaj.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhuxyqaj.jl:19\ntest set: Test Failed at /tmp/tmpjhuxyqaj.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjhuxyqaj.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpjhuxyqaj.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjhuxyqaj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprl2z7oi2.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprl2z7oi2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp1o6llvvj.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1o6llvvj.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1o6llvvj.jl:19\ntest set: Test Failed at /tmp/tmp1o6llvvj.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp1o6llvvj.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1o6llvvj.jl:19\ntest set: Test Failed at /tmp/tmp1o6llvvj.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp1o6llvvj.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1o6llvvj.jl:19\ntest set: Test Failed at /tmp/tmp1o6llvvj.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp1o6llvvj.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1o6llvvj.jl:19\ntest set: Test Failed at /tmp/tmp1o6llvvj.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1o6llvvj.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp1o6llvvj.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp1o6llvvj.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoxcprg3w.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoxcprg3w.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of words and returns a vector of strings. Each string in\
    \ the returned vector is the concatenation of the word and each word in the input\
    \ vector. \nFor example, \n    words_string([[\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"], [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"]])\nshould\
    \ return \n    [\"HimynameisJohn\", \"Onetwothreefourfivesix\"]\nHint: use the\
    \ concat function.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm373yxot.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm373yxot.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"One, two, three, four, five, six\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of words in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7a5l_cv1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7a5l_cv1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmkh_asqf.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmkh_asqf.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \" \")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl5azct5n.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl5azct5n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpri2pn_iq.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpri2pn_iq.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpri2pn_iq.jl:18\ntest set: Test Failed at /tmp/tmpri2pn_iq.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpri2pn_iq.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpri2pn_iq.jl:18\ntest set: Test Failed at /tmp/tmpri2pn_iq.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpri2pn_iq.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpri2pn_iq.jl:18\ntest set: Test Failed at /tmp/tmpri2pn_iq.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpri2pn_iq.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpri2pn_iq.jl:18\ntest set: Test Failed at /tmp/tmpri2pn_iq.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpri2pn_iq.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpri2pn_iq.jl:18\ntest set: Test Failed at /tmp/tmpri2pn_iq.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpri2pn_iq.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpri2pn_iq.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpri2pn_iq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo3ba1ws_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo3ba1ws_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp9slkdy1e.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp9slkdy1e.jl:14\n\
    \   [2] top-level scope at /tmp/tmp9slkdy1e.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9slkdy1e.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9slkdy1e.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp9slkdy1e.jl:14\n\
    \   [2] top-level scope at /tmp/tmp9slkdy1e.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9slkdy1e.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9slkdy1e.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmp9slkdy1e.jl:14\n   [2] top-level scope at\
    \ /tmp/tmp9slkdy1e.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9slkdy1e.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9slkdy1e.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp9slkdy1e.jl:14\n\
    \   [2] top-level scope at /tmp/tmp9slkdy1e.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9slkdy1e.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9slkdy1e.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp9slkdy1e.jl:14\n\
    \   [2] top-level scope at /tmp/tmp9slkdy1e.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9slkdy1e.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmp9slkdy1e.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmp9slkdy1e.jl:14\n   [2] top-level scope at\
    \ /tmp/tmp9slkdy1e.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp9slkdy1e.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9slkdy1e.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpq6wztn5c.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6wztn5c.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6wztn5c.jl:18\ntest set: Test Failed at /tmp/tmpq6wztn5c.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6wztn5c.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6wztn5c.jl:18\ntest set: Test Failed at /tmp/tmpq6wztn5c.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpq6wztn5c.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6wztn5c.jl:18\ntest set: Test Failed at /tmp/tmpq6wztn5c.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpq6wztn5c.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6wztn5c.jl:18\ntest set: Test Failed at /tmp/tmpq6wztn5c.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpq6wztn5c.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6wztn5c.jl:18\ntest set: Test Failed at /tmp/tmpq6wztn5c.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq6wztn5c.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpq6wztn5c.jl:18\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq6wztn5c.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp0x8ijhjk.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp0x8ijhjk.jl:14\n\
    \   [2] top-level scope at /tmp/tmp0x8ijhjk.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0x8ijhjk.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0x8ijhjk.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp0x8ijhjk.jl:14\n\
    \   [2] top-level scope at /tmp/tmp0x8ijhjk.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0x8ijhjk.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0x8ijhjk.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmp0x8ijhjk.jl:14\n   [2] top-level scope at\
    \ /tmp/tmp0x8ijhjk.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0x8ijhjk.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0x8ijhjk.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp0x8ijhjk.jl:14\n\
    \   [2] top-level scope at /tmp/tmp0x8ijhjk.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0x8ijhjk.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0x8ijhjk.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: Cannot `convert` an object of type String\
    \ to an object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmp0x8ijhjk.jl:19\n\
    \   [2] top-level scope at /tmp/tmp0x8ijhjk.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0x8ijhjk.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmp0x8ijhjk.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmp0x8ijhjk.jl:14\n   [2] top-level scope at\
    \ /tmp/tmp0x8ijhjk.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp0x8ijhjk.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp0x8ijhjk.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ word_count(s::String)::Dict that returns a dictionary where the keys are words\
    \ and the values are the counts of the number of times that word appears in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoca5g85f.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoca5g85f.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpafwu0e3y.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpafwu0e3y.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafwu0e3y.jl:19\ntest set: Test Failed at /tmp/tmpafwu0e3y.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpafwu0e3y.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafwu0e3y.jl:19\ntest set: Test Failed at /tmp/tmpafwu0e3y.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpafwu0e3y.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafwu0e3y.jl:19\ntest set: Test Failed at /tmp/tmpafwu0e3y.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpafwu0e3y.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafwu0e3y.jl:19\ntest set: Test Failed at /tmp/tmpafwu0e3y.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpafwu0e3y.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafwu0e3y.jl:19\ntest set: Test Failed at /tmp/tmpafwu0e3y.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpafwu0e3y.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpafwu0e3y.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpafwu0e3y.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp8z8z3ia2.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp8z8z3ia2.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z8z3ia2.jl:19\ntest set: Test Failed at /tmp/tmp8z8z3ia2.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp8z8z3ia2.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z8z3ia2.jl:19\ntest set: Test Failed at /tmp/tmp8z8z3ia2.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp8z8z3ia2.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z8z3ia2.jl:19\ntest set: Test Failed at /tmp/tmp8z8z3ia2.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp8z8z3ia2.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z8z3ia2.jl:19\ntest set: Test Failed at /tmp/tmp8z8z3ia2.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp8z8z3ia2.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z8z3ia2.jl:19\ntest set: Test Failed at /tmp/tmp8z8z3ia2.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8z8z3ia2.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp8z8z3ia2.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp8z8z3ia2.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz8atu1lf.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz8atu1lf.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp42vmiy9w.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp42vmiy9w.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42vmiy9w.jl:19\ntest set: Test Failed at /tmp/tmp42vmiy9w.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp42vmiy9w.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42vmiy9w.jl:19\ntest set: Test Failed at /tmp/tmp42vmiy9w.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp42vmiy9w.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42vmiy9w.jl:19\ntest set: Test Failed at /tmp/tmp42vmiy9w.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp42vmiy9w.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42vmiy9w.jl:19\ntest set: Test Failed at /tmp/tmp42vmiy9w.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp42vmiy9w.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp42vmiy9w.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp42vmiy9w.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmprznv0c58.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmprznv0c58.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznv0c58.jl:19\ntest set: Test Failed at /tmp/tmprznv0c58.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmprznv0c58.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznv0c58.jl:19\ntest set: Test Failed at /tmp/tmprznv0c58.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmprznv0c58.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznv0c58.jl:19\ntest set: Test Failed at /tmp/tmprznv0c58.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmprznv0c58.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznv0c58.jl:19\ntest set: Test Failed at /tmp/tmprznv0c58.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmprznv0c58.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznv0c58.jl:19\ntest set: Test Failed at /tmp/tmprznv0c58.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprznv0c58.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmprznv0c58.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmprznv0c58.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.0>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbuh2v0_w.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbuh2v0_w.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpa9kezj49.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa9kezj49.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa9kezj49.jl:20\ntest set: Test Failed at /tmp/tmpa9kezj49.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa9kezj49.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa9kezj49.jl:20\ntest set: Test Failed at /tmp/tmpa9kezj49.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpa9kezj49.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa9kezj49.jl:20\ntest set: Test Failed at /tmp/tmpa9kezj49.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpa9kezj49.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa9kezj49.jl:20\ntest set: Test Failed at /tmp/tmpa9kezj49.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpa9kezj49.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa9kezj49.jl:20\ntest set: Test Failed at /tmp/tmpa9kezj49.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpa9kezj49.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpa9kezj49.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpa9kezj49.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpx7ypvuy6.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7ypvuy6.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7ypvuy6.jl:20\ntest set: Test Failed at /tmp/tmpx7ypvuy6.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7ypvuy6.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7ypvuy6.jl:20\ntest set: Test Failed at /tmp/tmpx7ypvuy6.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpx7ypvuy6.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7ypvuy6.jl:20\ntest set: Test Failed at /tmp/tmpx7ypvuy6.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpx7ypvuy6.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7ypvuy6.jl:20\ntest set: Test Failed at /tmp/tmpx7ypvuy6.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7ypvuy6.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7ypvuy6.jl:20\ntest set: Test Failed at /tmp/tmpx7ypvuy6.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpx7ypvuy6.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpx7ypvuy6.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpx7ypvuy6.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \", \")\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp4sm0gjuw.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp4sm0gjuw.jl:19\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4sm0gjuw.jl:18\ntest set: Test Failed at /tmp/tmp4sm0gjuw.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \"my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp4sm0gjuw.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4sm0gjuw.jl:18\ntest set: Test Failed at /tmp/tmp4sm0gjuw.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"\
    two\", \"three\", \"four\", \"five\", \"six,\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp4sm0gjuw.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4sm0gjuw.jl:18\ntest set: Test Failed at /tmp/tmp4sm0gjuw.jl:23\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp4sm0gjuw.jl:23\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4sm0gjuw.jl:18\ntest set: Test Failed at /tmp/tmp4sm0gjuw.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4sm0gjuw.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp4sm0gjuw.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp4sm0gjuw.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf13_485l.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf13_485l.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmptqrpb8oe.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmptqrpb8oe.jl:14\n\
    \   [2] top-level scope at /tmp/tmptqrpb8oe.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptqrpb8oe.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmptqrpb8oe.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmptqrpb8oe.jl:14\n\
    \   [2] top-level scope at /tmp/tmptqrpb8oe.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptqrpb8oe.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmptqrpb8oe.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmptqrpb8oe.jl:14\n   [2] top-level scope at\
    \ /tmp/tmptqrpb8oe.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptqrpb8oe.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmptqrpb8oe.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmptqrpb8oe.jl:14\n\
    \   [2] top-level scope at /tmp/tmptqrpb8oe.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptqrpb8oe.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmptqrpb8oe.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmptqrpb8oe.jl:14\n\
    \   [2] top-level scope at /tmp/tmptqrpb8oe.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptqrpb8oe.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmptqrpb8oe.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmptqrpb8oe.jl:14\n   [2] top-level scope at\
    \ /tmp/tmptqrpb8oe.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmptqrpb8oe.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmptqrpb8oe.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return split(words_string)\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John, my name is John, my name is John\")\n</cell>\n\
    <code language=julia-1.5>\nwords_string(\"Hi, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is John, my name is John, my name is John, my name is John,\
    \ my name is John, my name is John, my name is John, my name is John, my name\
    \ is John, my name is \nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\
    \t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1kjf4y0a.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1kjf4y0a.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4mmp838r.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4mmp838r.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4mmp838r.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.3>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.3>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2o14bj1_.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2o14bj1_.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuz2280xm.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuz2280xm.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    @test words_string(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"]\n@test words_string(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"]\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp2dsp7ak.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp2dsp7ak.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpcz1m86lo.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcz1m86lo.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcz1m86lo.jl:20\ntest set: Test Failed at /tmp/tmpcz1m86lo.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcz1m86lo.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcz1m86lo.jl:20\ntest set: Test Failed at /tmp/tmpcz1m86lo.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpcz1m86lo.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcz1m86lo.jl:20\ntest set: Test Failed at /tmp/tmpcz1m86lo.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpcz1m86lo.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcz1m86lo.jl:20\ntest set: Test Failed at /tmp/tmpcz1m86lo.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpcz1m86lo.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcz1m86lo.jl:20\ntest set: Test Failed at /tmp/tmpcz1m86lo.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpcz1m86lo.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpcz1m86lo.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpcz1m86lo.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmparek5n9t.jl:21\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmparek5n9t.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparek5n9t.jl:20\ntest set: Test Failed at /tmp/tmparek5n9t.jl:22\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmparek5n9t.jl:22\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparek5n9t.jl:20\ntest set: Test Failed at /tmp/tmparek5n9t.jl:23\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmparek5n9t.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparek5n9t.jl:20\ntest set: Test Failed at /tmp/tmparek5n9t.jl:24\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmparek5n9t.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparek5n9t.jl:20\ntest set: Test Failed at /tmp/tmparek5n9t.jl:25\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmparek5n9t.jl:25\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparek5n9t.jl:20\ntest set: Test Failed at /tmp/tmparek5n9t.jl:26\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \"\", \"\", \"\", \"\", \",\", \"gamal\"] == [\"ahmed\"\
    , \"gamal\"]\nStacktrace:\n [1] top-level scope at /tmp/tmparek5n9t.jl:26\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmparek5n9t.jl:20\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmparek5n9t.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpvrmydxva.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvrmydxva.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrmydxva.jl:19\ntest set: Test Failed at /tmp/tmpvrmydxva.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpvrmydxva.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrmydxva.jl:19\ntest set: Test Failed at /tmp/tmpvrmydxva.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpvrmydxva.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrmydxva.jl:19\ntest set: Test Failed at /tmp/tmpvrmydxva.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpvrmydxva.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrmydxva.jl:19\ntest set: Test Failed at /tmp/tmpvrmydxva.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvrmydxva.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpvrmydxva.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvrmydxva.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5j3ifw1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt5j3ifw1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0rbpq3dx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0rbpq3dx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpsu2td12x.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsu2td12x.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsu2td12x.jl:19\ntest set: Test Failed at /tmp/tmpsu2td12x.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpsu2td12x.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsu2td12x.jl:19\ntest set: Test Failed at /tmp/tmpsu2td12x.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpsu2td12x.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsu2td12x.jl:19\ntest set: Test Failed at /tmp/tmpsu2td12x.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpsu2td12x.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsu2td12x.jl:19\ntest set: Test Failed at /tmp/tmpsu2td12x.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsu2td12x.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpsu2td12x.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpsu2td12x.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprfjv5z3e.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprfjv5z3e.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw78lpdqs.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw78lpdqs.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppp6ig5ro.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppp6ig5ro.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9ttd91fk.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmp9ttd91fk.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ttd91fk.jl:19\ntest set: Test Failed at /tmp/tmp9ttd91fk.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9ttd91fk.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ttd91fk.jl:19\ntest set: Test Failed at /tmp/tmp9ttd91fk.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp9ttd91fk.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ttd91fk.jl:19\ntest set: Test Failed at /tmp/tmp9ttd91fk.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmp9ttd91fk.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ttd91fk.jl:19\ntest set: Test Failed at /tmp/tmp9ttd91fk.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmp9ttd91fk.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ttd91fk.jl:19\ntest set: Test Failed at /tmp/tmp9ttd91fk.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9ttd91fk.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9ttd91fk.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9ttd91fk.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr42dsu5d.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr42dsu5d.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \", \")\n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqe998eye.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqe998eye.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"Hi,\
    \ my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ count_words(s::String)::Int that counts the number of words in a string.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi,\
    \ my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpenl2h9kc.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpenl2h9kc.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    return words_string\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp9xs692cd.jl:19\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9xs692cd.jl:19\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9xs692cd.jl:18\ntest set: Test Failed at /tmp/tmp9xs692cd.jl:20\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp9xs692cd.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9xs692cd.jl:18\ntest set: Test Failed at /tmp/tmp9xs692cd.jl:21\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp9xs692cd.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9xs692cd.jl:18\ntest set: Test Failed at /tmp/tmp9xs692cd.jl:22\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp9xs692cd.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9xs692cd.jl:18\ntest set: Test Failed at /tmp/tmp9xs692cd.jl:24\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9xs692cd.jl:24\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp9xs692cd.jl:18\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp9xs692cd.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf_vbk2p0.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf_vbk2p0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of words in the string.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq_nysm_7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq_nysm_7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns a string with all uppercase letters replaced by their lowercase\
    \ counterparts.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf3g694hj.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf3g694hj.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuyvqlw54.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuyvqlw54.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ count_words that takes a string and returns the number of words in the string.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7_uie1i9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7_uie1i9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp7wfn2n70.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7wfn2n70.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wfn2n70.jl:19\ntest set: Test Failed at /tmp/tmp7wfn2n70.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp7wfn2n70.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wfn2n70.jl:19\ntest set: Test Failed at /tmp/tmp7wfn2n70.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp7wfn2n70.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wfn2n70.jl:19\ntest set: Test Failed at /tmp/tmp7wfn2n70.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp7wfn2n70.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wfn2n70.jl:19\ntest set: Test Failed at /tmp/tmp7wfn2n70.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wfn2n70.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp7wfn2n70.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp7wfn2n70.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfscla53h.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfscla53h.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfscla53h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    words_string\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp34xeofdy.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp34xeofdy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp1s7_r3so.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp1s7_r3so.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp1s7_r3so.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a vector of strings and returns a vector of strings where each string\
    \ has been concatenated with itself n times.\nusing Test\n\n@testset begin\n\n\
    candidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\"\
    , \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four,\
    \ five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\
    \t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdt_goa9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptdt_goa9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpask1g6dz.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpask1g6dz.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpask1g6dz.jl:19\ntest set: Test Failed at /tmp/tmpask1g6dz.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpask1g6dz.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpask1g6dz.jl:19\ntest set: Test Failed at /tmp/tmpask1g6dz.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpask1g6dz.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpask1g6dz.jl:19\ntest set: Test Failed at /tmp/tmpask1g6dz.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpask1g6dz.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpask1g6dz.jl:19\ntest set: Test Failed at /tmp/tmpask1g6dz.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpask1g6dz.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpask1g6dz.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpask1g6dz.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1w0zytop.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1w0zytop.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpoz92xor_.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpoz92xor_.jl:14\n\
    \   [2] top-level scope at /tmp/tmpoz92xor_.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoz92xor_.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpoz92xor_.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpoz92xor_.jl:14\n\
    \   [2] top-level scope at /tmp/tmpoz92xor_.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoz92xor_.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpoz92xor_.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpoz92xor_.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpoz92xor_.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoz92xor_.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpoz92xor_.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpoz92xor_.jl:14\n\
    \   [2] top-level scope at /tmp/tmpoz92xor_.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoz92xor_.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpoz92xor_.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpoz92xor_.jl:14\n\
    \   [2] top-level scope at /tmp/tmpoz92xor_.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoz92xor_.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpoz92xor_.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpoz92xor_.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpoz92xor_.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpoz92xor_.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpoz92xor_.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"One, two, three, four, five, six\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the number of words in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprznjdvbb.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprznjdvbb.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6a_4udsb.jl:9\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6a_4udsb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6a_4udsb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1f8ftojy.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1f8ftojy.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpj8swbalo.jl:18\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpj8swbalo.jl:18\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8swbalo.jl:17\ntest set: Test Failed at /tmp/tmpj8swbalo.jl:19\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpj8swbalo.jl:19\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8swbalo.jl:17\ntest set: Test Failed at /tmp/tmpj8swbalo.jl:20\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpj8swbalo.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8swbalo.jl:17\ntest set: Test Failed at /tmp/tmpj8swbalo.jl:21\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpj8swbalo.jl:21\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8swbalo.jl:17\ntest set: Test Failed at /tmp/tmpj8swbalo.jl:22\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpj8swbalo.jl:22\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8swbalo.jl:17\ntest set: Test Failed at /tmp/tmpj8swbalo.jl:23\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj8swbalo.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpj8swbalo.jl:17\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpj8swbalo.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \" \"\n    end\n    \n    words_string\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp985x6hev.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp985x6hev.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \",\")\n    return words\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj388vrsx.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj388vrsx.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s, \",\")\n    words_string = split(s, \" \")\n\
    \    \n    return words_string\nend\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"One,\
    \ two, three, four, five, six\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphhb94oit.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphhb94oit.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word + \" \"\n    end\n    \n    words_string\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprlgeyivf.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprlgeyivf.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmp22firpqi.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp22firpqi.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22firpqi.jl:19\ntest set: Test Failed at /tmp/tmp22firpqi.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmp22firpqi.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22firpqi.jl:19\ntest set: Test Failed at /tmp/tmp22firpqi.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmp22firpqi.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22firpqi.jl:19\ntest set: Test Failed at /tmp/tmp22firpqi.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmp22firpqi.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22firpqi.jl:19\ntest set: Test Failed at /tmp/tmp22firpqi.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp22firpqi.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmp22firpqi.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp22firpqi.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.4>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.4>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2y006p4b.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2y006p4b.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s)\n    \n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that takes a string and returns a string where all spaces are replaced by underscores.\n\
    using Test\n\n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdgrn1ale.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdgrn1ale.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \", \")\n    return words\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"\
    Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three,\
    \ four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"\
    ])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpfewq_5n5.jl:18\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \"my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpfewq_5n5.jl:18\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfewq_5n5.jl:17\ntest set: Test Failed at /tmp/tmpfewq_5n5.jl:20\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \"my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpfewq_5n5.jl:20\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfewq_5n5.jl:17\ntest set: Test Failed at /tmp/tmpfewq_5n5.jl:21\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"\
    two\", \"three\", \"four\", \"five\", \"six,\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpfewq_5n5.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfewq_5n5.jl:17\ntest set: Test Failed at /tmp/tmpfewq_5n5.jl:22\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpfewq_5n5.jl:22\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfewq_5n5.jl:17\ntest set: Test Failed at /tmp/tmpfewq_5n5.jl:23\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfewq_5n5.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpfewq_5n5.jl:17\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpfewq_5n5.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = split(s)\n    \n    return words_string\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpux600c7q.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\", \"is\", \"John\"] == [\"Hi\", \"my\", \"name\",\
    \ \"is\", \"John\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpux600c7q.jl:20\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpux600c7q.jl:19\ntest set: Test Failed at /tmp/tmpux600c7q.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,\", \"two,\"\
    , \"three,\", \"four,\", \"five,\", \"six\"] == [\"One\", \"two\", \"three\",\
    \ \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpux600c7q.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpux600c7q.jl:19\ntest set: Test Failed at /tmp/tmpux600c7q.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi,\", \"my\", \"name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1]\
    \ top-level scope at /tmp/tmpux600c7q.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpux600c7q.jl:19\ntest set: Test Failed at /tmp/tmpux600c7q.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One,,\",\
    \ \"two,\", \"three,\", \"four,\", \"five,\", \"six,\"] == [\"One\", \"two\",\
    \ \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at\
    \ /tmp/tmpux600c7q.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpux600c7q.jl:19\ntest set: Test Failed at /tmp/tmpux600c7q.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed\", \",\", \"gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpux600c7q.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpux600c7q.jl:19\nTest Summary: | Pass  Fail  Total\n\
    test set      |    1     5      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 1 passed, 5 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpux600c7q.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\
    \t@test(candidate(\"One,, two, three, four, five, six,\") == [\"One\", \"two\"\
    , \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\
    \t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxm9ot6_z.jl:24\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpxm9ot6_z.jl:14\n\
    \   [2] top-level scope at /tmp/tmpxm9ot6_z.jl:24\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxm9ot6_z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxm9ot6_z.jl:25\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpxm9ot6_z.jl:14\n\
    \   [2] top-level scope at /tmp/tmpxm9ot6_z.jl:25\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxm9ot6_z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxm9ot6_z.jl:26\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpxm9ot6_z.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpxm9ot6_z.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxm9ot6_z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxm9ot6_z.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpxm9ot6_z.jl:14\n\
    \   [2] top-level scope at /tmp/tmpxm9ot6_z.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxm9ot6_z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxm9ot6_z.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: no method matching +(::String, ::SubString{String})\n\
    \  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpxm9ot6_z.jl:14\n\
    \   [2] top-level scope at /tmp/tmpxm9ot6_z.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxm9ot6_z.jl:23\n  \ntest set: Error During\
    \ Test at /tmp/tmpxm9ot6_z.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::String, ::SubString{String})\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpxm9ot6_z.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpxm9ot6_z.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpxm9ot6_z.jl:23\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxm9ot6_z.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpgz9j25p9.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpgz9j25p9.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz9j25p9.jl:19\ntest set: Test Failed at /tmp/tmpgz9j25p9.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpgz9j25p9.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz9j25p9.jl:19\ntest set: Test Failed at /tmp/tmpgz9j25p9.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpgz9j25p9.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz9j25p9.jl:19\ntest set: Test Failed at /tmp/tmpgz9j25p9.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpgz9j25p9.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz9j25p9.jl:19\ntest set: Test Failed at /tmp/tmpgz9j25p9.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpgz9j25p9.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz9j25p9.jl:19\ntest set: Test Failed at /tmp/tmpgz9j25p9.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgz9j25p9.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpgz9j25p9.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpgz9j25p9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s)\n        words_string\
    \ += word + \", \"\n    end\n    \n    words_string = words_string[2:end]\n  \
    \  \n    return words_string\nend\nusing Test\n\n@testset begin\n\ncandidate =\
    \ words_string;\n\t@test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\"\
    , \"name\", \"is\", \"John\"])\n\t@test(candidate(\"One, two, three, four, five,\
    \ six\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two,\
    \ three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpkw7vmej1.jl:26\n  Test threw exception\n\
    \  Expression: candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\"\
    , \"is\", \"John\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpkw7vmej1.jl:14\n\
    \   [2] top-level scope at /tmp/tmpkw7vmej1.jl:26\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkw7vmej1.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpkw7vmej1.jl:27\n  Test threw exception\n  Expression: candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpkw7vmej1.jl:14\n\
    \   [2] top-level scope at /tmp/tmpkw7vmej1.jl:27\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkw7vmej1.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpkw7vmej1.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n  MethodError: no method matching\
    \ +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpkw7vmej1.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpkw7vmej1.jl:28\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkw7vmej1.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpkw7vmej1.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    One,, two, three, four, five, six,\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"]\n  MethodError: no method matching +(::SubString{String},\
    \ ::String)\n  Closest candidates are:\n    +(::Any, ::Any, !Matched::Any, !Matched::Any...)\
    \ at operators.jl:529\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpkw7vmej1.jl:14\n\
    \   [2] top-level scope at /tmp/tmpkw7vmej1.jl:29\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkw7vmej1.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpkw7vmej1.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    \") == Vector{String}([])\n  MethodError: Cannot `convert` an object of type String\
    \ to an object of type Array{String,1}\n  Closest candidates are:\n    convert(::Type{Array{String,1}},\
    \ !Matched::LibGit2.StrArrayStruct) at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/LibGit2/src/strarray.jl:14\n\
    \    convert(::Type{T}, !Matched::AbstractArray) where T<:Array at array.jl:533\n\
    \    convert(::Type{T}, !Matched::T) where T<:AbstractArray at abstractarray.jl:14\n\
    \    ...\n  Stacktrace:\n   [1] words_string(::String) at /tmp/tmpkw7vmej1.jl:19\n\
    \   [2] top-level scope at /tmp/tmpkw7vmej1.jl:30\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkw7vmej1.jl:25\n  \ntest set: Error During\
    \ Test at /tmp/tmpkw7vmej1.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  MethodError: no method matching\
    \ +(::SubString{String}, ::String)\n  Closest candidates are:\n    +(::Any, ::Any,\
    \ !Matched::Any, !Matched::Any...) at operators.jl:529\n  Stacktrace:\n   [1]\
    \ words_string(::String) at /tmp/tmpkw7vmej1.jl:14\n   [2] top-level scope at\
    \ /tmp/tmpkw7vmej1.jl:31\n   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpkw7vmej1.jl:25\n  \nTest Summary: | Error \
    \ Total\ntest set      |     6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 6 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpkw7vmej1.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words_string = \"\"\n    \n    for word in split(s, \",\")\n        words_string\
    \ += word\n    end\n    \n    return words_string\nend\n</cell>\n<code language=julia-1.0>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.0>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6zl2f_zw.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6zl2f_zw.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  words = split(s, \", \")\n    return words\nend\n</cell>\n<code language=julia-1.5>\n\
    words_string(\"Hi, my name is John\")\n</cell>\n<code language=julia-1.5>\nwords_string(\"\
    One, two, three, four, five, six\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the number of words in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name\
    \ is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9z4q68m9.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9z4q68m9.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\n</cell>\n<code\
    \ language=julia-1.5>\nwords_string(\"Hi, my name is John\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = words_string;\n\t\
    @test(candidate(\"Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\"\
    , \"John\"])\n\t@test(candidate(\"One, two, three, four, five, six\") == [\"One\"\
    , \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"Hi, my\
    \ name\") == [\"Hi\", \"my\", \"name\"])\n\t@test(candidate(\"One,, two, three,\
    \ four, five, six,\") == [\"One\", \"two\", \"three\", \"four\", \"five\", \"\
    six\"])\n\t@test(candidate(\"\") == Vector{String}([]))\n\t@test(candidate(\"\
    ahmed     , gamal\") == [\"ahmed\", \"gamal\"])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgch174t0.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgch174t0.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmphp4s2p4_.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmphp4s2p4_.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphp4s2p4_.jl:19\ntest set: Test Failed at /tmp/tmphp4s2p4_.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmphp4s2p4_.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphp4s2p4_.jl:19\ntest set: Test Failed at /tmp/tmphp4s2p4_.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmphp4s2p4_.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphp4s2p4_.jl:19\ntest set: Test Failed at /tmp/tmphp4s2p4_.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmphp4s2p4_.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphp4s2p4_.jl:19\ntest set: Test Failed at /tmp/tmphp4s2p4_.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmphp4s2p4_.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphp4s2p4_.jl:19\ntest set: Test Failed at /tmp/tmphp4s2p4_.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphp4s2p4_.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmphp4s2p4_.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmphp4s2p4_.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"\n    You will be given a string of words separated by commas or\
    \ spaces. Your task is\n    to split the string into words and return an array\
    \ of the words.\n    \n    For example:\n    words_string(\"Hi, my name is John\"\
    ) == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n    words_string(\"One, two,\
    \ three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\", \"five\"\
    , \"six\"]\n    \"\"\"\nfunction words_string(s::String)::Vector{String} \n  \
    \  \n    words = split(s, \",\")\n    \n    return words\nend\nusing Test\n\n\
    @testset begin\n\ncandidate = words_string;\n\t@test(candidate(\"Hi, my name is\
    \ John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"])\n\t@test(candidate(\"\
    One, two, three, four, five, six\") == [\"One\", \"two\", \"three\", \"four\"\
    , \"five\", \"six\"])\n\t@test(candidate(\"Hi, my name\") == [\"Hi\", \"my\",\
    \ \"name\"])\n\t@test(candidate(\"One,, two, three, four, five, six,\") == [\"\
    One\", \"two\", \"three\", \"four\", \"five\", \"six\"])\n\t@test(candidate(\"\
    \") == Vector{String}([]))\n\t@test(candidate(\"ahmed     , gamal\") == [\"ahmed\"\
    , \"gamal\"])\nend\n"
  stdout: "test set: Test Failed at /tmp/tmpc91qd4ut.jl:20\n  Expression: candidate(\"\
    Hi, my name is John\") == [\"Hi\", \"my\", \"name\", \"is\", \"John\"]\n   Evaluated:\
    \ [\"Hi\", \" my name is John\"] == [\"Hi\", \"my\", \"name\", \"is\", \"John\"\
    ]\nStacktrace:\n [1] top-level scope at /tmp/tmpc91qd4ut.jl:20\n [2] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc91qd4ut.jl:19\ntest set: Test Failed at /tmp/tmpc91qd4ut.jl:21\n\
    \  Expression: candidate(\"One, two, three, four, five, six\") == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \" two\"\
    , \" three\", \" four\", \" five\", \" six\"] == [\"One\", \"two\", \"three\"\
    , \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope at /tmp/tmpc91qd4ut.jl:21\n\
    \ [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc91qd4ut.jl:19\ntest set: Test Failed at /tmp/tmpc91qd4ut.jl:22\n\
    \  Expression: candidate(\"Hi, my name\") == [\"Hi\", \"my\", \"name\"]\n   Evaluated:\
    \ [\"Hi\", \" my name\"] == [\"Hi\", \"my\", \"name\"]\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpc91qd4ut.jl:22\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc91qd4ut.jl:19\ntest set: Test Failed at /tmp/tmpc91qd4ut.jl:23\n\
    \  Expression: candidate(\"One,, two, three, four, five, six,\") == [\"One\",\
    \ \"two\", \"three\", \"four\", \"five\", \"six\"]\n   Evaluated: [\"One\", \"\
    \", \" two\", \" three\", \" four\", \" five\", \" six\", \"\"] == [\"One\", \"\
    two\", \"three\", \"four\", \"five\", \"six\"]\nStacktrace:\n [1] top-level scope\
    \ at /tmp/tmpc91qd4ut.jl:23\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc91qd4ut.jl:19\ntest set: Test Failed at /tmp/tmpc91qd4ut.jl:24\n\
    \  Expression: candidate(\"\") == Vector{String}([])\n   Evaluated: [\"\"] ==\
    \ String[]\nStacktrace:\n [1] top-level scope at /tmp/tmpc91qd4ut.jl:24\n [2]\
    \ top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc91qd4ut.jl:19\ntest set: Test Failed at /tmp/tmpc91qd4ut.jl:25\n\
    \  Expression: candidate(\"ahmed     , gamal\") == [\"ahmed\", \"gamal\"]\n  \
    \ Evaluated: [\"ahmed     \", \" gamal\"] == [\"ahmed\", \"gamal\"]\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc91qd4ut.jl:25\n [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \ [3] top-level scope at /tmp/tmpc91qd4ut.jl:19\nTest Summary: | Fail  Total\n\
    test set      |    6      6\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 6 failed, 0 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpc91qd4ut.jl:17\n"
  exit_code: 1
  status: Exception
