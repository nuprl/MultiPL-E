name: HumanEval_156_int_to_mini_roman
language: julia
prompt: "\"\"\"\n    Given a positive integer, obtain its roman numeral equivalent\
  \ as a string,\n    and return it in lowercase.\n    Restrictions: 1 <= num <= 1000\n\
  \n    Examples:\n    >>> int_to_mini_roman(19) == 'xix'\n    >>> int_to_mini_roman(152)\
  \ == 'clii'\n    >>> int_to_mini_roman(426) == 'cdxxvi'\n    \"\"\"\nfunction int_to_mini_roman(number::Int64)::String\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = int_to_mini_roman;\n\t@test(candidate(19)\
  \ == \"xix\")\n\t@test(candidate(152) == \"clii\")\n\t@test(candidate(251) == \"\
  ccli\")\n\t@test(candidate(426) == \"cdxxvi\")\n\t@test(candidate(500) == \"d\"\
  )\n\t@test(candidate(1) == \"i\")\n\t@test(candidate(4) == \"iv\")\n\t@test(candidate(43)\
  \ == \"xliii\")\n\t@test(candidate(90) == \"xc\")\n\t@test(candidate(94) == \"xciv\"\
  )\n\t@test(candidate(532) == \"dxxxii\")\n\t@test(candidate(900) == \"cm\")\n\t\
  @test(candidate(994) == \"cmxciv\")\n\t@test(candidate(1000) == \"m\")\nend\n"
completions: ["    if number < 1 || number > 1000 \n        error(\"number must be\
    \ between 1 and 1000\")\n    else\n        roman_numerals = roman_numerals(number)\n\
    \        roman_numerals.sort\n        roman_numerals.reverse\n        roman_numerals.join\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = roman_to_int(number)\n\
    \    mini_roman = int_to_mini_roman(roman)\n    return mini_roman\nend", "   \
    \ if number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ < 1000 \n        return int_to_mini_roman(number - 1)\n    else \n        roman_numerals\
    \ = roman_numerals_list(number)\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numeral", "    if number < 1\
    \ || number > 1000 \n        error(\"Invalid input\") \n    else \n        roman\
    \ = roman_numeral(number)\n        roman = roman.lower()\n        return roman\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = Int64[]\n   \
    \ roman[1] = Int64(\"I\")\n    roman[2] = Int64(\"II\")\n    roman[3] = Int64(\"\
    III\")\n    roman[4] = Int64(\"IV\")\n    roman[5] = Int64(\"V\")\n    roman[6]\
    \ = Int64(\"VI\")\n    roman[7] = Int64(\"VII\")\n    roman[8] = Int64(\"VIII\"\
    )\n    roman[9] = Int64(\"IX\")\n    roman[10] = Int64(\"X\")\n    roman[11] =\
    \ Int64(\"XI\")\n    roman[12] = Int64(\"XII\")\n    roman[13] = Int64(\"XIII\"\
    )\n    roman[14] = Int64(\"XIV\")\n    roman[15] = Int64(\"XV\")\n    roman[16]\
    \ = Int64(\"XVI\")\n    roman[17] = Int64(\"XVII\")\n    roman[18] = Int64(\"\
    XVIII\")\n    roman[19] = Int64(\"XIX\")\n    roman[20] = Int64(\"XX\")\n    roman[21]\
    \ = Int64(\"XXI\")\n    roman[22] = Int64(\"XXII\")\n    roman[23] = Int64(\"\
    XXIII\")\n    roman[24] = Int64(\"XXIV\")\n    roman[25] = Int64(\"XXV\")\n  \
    \  roman[26] = Int64(\"XXVI\")\n    roman[27] = Int64(\"XXVII\")\n    roman[28]\
    \ = Int64(\"XXVIII\")\n    roman[29] = Int64(\"XXIX\")\n    roman[30] = Int64(\"\
    XXX\")\n    roman[31] = Int64(\"XXXI\")\n    roman[32] = Int64(\"XXXII\")\n  \
    \  roman[33] = Int64(\"XXXIII\")\n    roman[34] = Int64(\"XXXIV\")\n    roman[35]\
    \ = Int64(\"XXXV\")\n    roman[36] = Int64(\"XXXVI\")\n    roman[37] = Int64(\"\
    XXXVII\")\n    roman[38] = Int64(\"XXXVIII\")\n    roman[", "    if number < 1\
    \ || number > 1000 \n        return \"Error\" \n    roman = \"\"\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_length = length(roman_numerals)\n\
    \    roman_numerals_length = roman_numerals_length - 1\n    for i = roman_numerals_length\
    \ to 1 do \n        roman_numeral = roman_numerals[i]\n        if number >= roman_numerals_table()[i]\
    \ \n            roman = roman + roman_numeral\n            number = number - roman_numerals_table()[i]\n\
    \        else \n            roman = roman + roman_numeral + roman_numerals[roman_numerals_length]\n\
    \            number = number - roman_numerals_table()[i]\n            roman_numerals_length\
    \ = roman_numerals_length - 1\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    else \n        roman = roman_numeral(number)\n        roman =\
    \ roman.lower()\n        return roman\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = String[]\n    roman[1] = roman[2] = roman[3] = roman[4] = roman[5]\
    \ = roman[6] = roman[7] = roman[8] = roman[9] = roman[10] = roman[11] = roman[12]\
    \ = roman[13] = roman[14] = roman[15] = roman[16] = roman[17] = roman[18] = roman[19]\
    \ = roman[20] = roman[21] = roman[22] = roman[23] = roman[24] = roman[25] = roman[26]\
    \ = roman[27] = roman[28] = roman[29] = roman[30] = roman[31] = roman[32] = roman[33]\
    \ = roman[34] = roman[35] = roman[36] = roman[37] = roman[38] = roman[39] = roman[40]\
    \ = roman[41] = roman[42] = roman[43] = roman[44] = roman[45] = roman[46] = roman[47]\
    \ = roman[48] = roman[49] = roman[50] = roman[51] = roman[52] = roman[53] = roman[54]\
    \ = roman[55] = roman[56] = roman[57] = roman[58] = roman[59] = roman[60] = roman[61]\
    \ = roman[62] = roman[63] = roman[64] = roman[65] = roman[66] = roman[67] = roman[68]\
    \ = roman[69] = roman[70] = roman[71] = roman[72] = roman[73] = roman[74] = roman[75]\
    \ = roman[76] = roman[77] = roman[78] = roman[79] = roman[80] = roman[81] = roman[82]\
    \ = roman[83] = roman[84] = roman[85] = roman[86] = roman[87] = roman[88] = roman[89]\
    \ = roman[90] = roman[91] = roman[92] = roman[93] = roman[94] = roman[95] = roman[96]\
    \ = roman[97] = roman[98] = roman[99] = roman[100] = roman[101] = roman[102] =\
    \ roman[103] = roman[104] = ", "    roman = roman_numerals(number)\n    roman\
    \ = roman.map(&lowercase)\n    roman = roman.map(&char(\"0\"))\n    roman = roman.map(&char(\"\
    1\"))\n    roman = roman.map(&char(\"2\"))\n    roman = roman.map(&char(\"3\"\
    ))\n    roman = roman.map(&char(\"4\"))\n    roman = roman.map(&char(\"5\"))\n\
    \    roman = roman.map(&char(\"6\"))\n    roman = roman.map(&char(\"7\"))\n  \
    \  roman = roman.map(&char(\"8\"))\n    roman = roman.map(&char(\"9\"))\n    roman\
    \ = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"v\"))\n    roman =\
    \ roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"c\"))\n    roman = roman.map(&char(\"\
    d\"))\n    roman = roman.map(&char(\"m\"))\n    roman = roman.map(&char(\"n\"\
    ))\n    roman = roman.map(&char(\"k\"))\n    roman = roman.map(&char(\"q\"))\n\
    \    roman = roman.map(&char(\"p\"))\n    roman = roman.map(&char(\"b\"))\n  \
    \  roman = roman.map(&char(\"s\"))\n    roman = roman.map(&char(\"m\"))\n    roman\
    \ = roman.map(&char(\"o\"))\n    roman = roman.map(&char(\"k\"))\n    roman =\
    \ roman.map(&char(\"q\"))\n    roman = roman.map(&char(\"p\"))\n    roman = roman.map(&char(\"\
    b\"))\n    roman = roman.map(&char(\"s\"))\n    roman = roman.map(&char(\"m\"\
    ))\n    roman = roman.map(&char(\"o\"))\n    roman = roman.map(&char(\"k\"))\n\
    \    roman = roman.map(&char(\"q\"))\n    roman = roman.map(&char(\"p\"))\n  \
    \  roman = roman.map(&char(\"b\"))", "    if number < 1 || number > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    roman = String[]\n    roman[1] =\
    \ roman[2] = roman[3] = roman[4] = roman[5] = roman[6] = roman[7] = roman[8] =\
    \ roman[9] = roman[10] = roman[11] = roman[12] = roman[13] = roman[14] = roman[15]\
    \ = roman[16] = roman[17] = roman[18] = roman[19] = roman[20] = roman[21] = roman[22]\
    \ = roman[23] = roman[24] = roman[25] = roman[26] = roman[27] = roman[28] = roman[29]\
    \ = roman[30] = roman[31] = roman[32] = roman[33] = roman[34] = roman[35] = roman[36]\
    \ = roman[37] = roman[38] = roman[39] = roman[40] = roman[41] = roman[42] = roman[43]\
    \ = roman[44] = roman[45] = roman[46] = roman[47] = roman[48] = roman[49] = roman[50]\
    \ = roman[51] = roman[52] = roman[53] = roman[54] = roman[55] = roman[56] = roman[57]\
    \ = roman[58] = roman[59] = roman[60] = roman[61] = roman[62] = roman[63] = roman[64]\
    \ = roman[65] = roman[66] = roman[67] = roman[68] = roman[69] = roman[70] = roman[71]\
    \ = roman[72] = roman[73] = roman[74] = roman[75] = roman[76] = roman[77] = roman[78]\
    \ = roman[79] = roman[80] = roman[81] = roman[82] = roman[83] = roman[84] = roman[85]\
    \ = roman[86] = roman[87] = roman[88] = roman[89] = roman[90] = roman[91] = roman[92]\
    \ = roman[93] = roman[94] = roman[95] = roman[96] = roman[97] = roman[98] = roman[99]\
    \ = roman[100] = roman[101] = roman[102] = roman[103] = roman[104] = ", "    if\
    \ number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n   \
    \ roman = roman_numeral(number)\n    roman = roman.lowercase()\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman_numerals = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = Dict(\"I\" =>\
    \ \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n   \
    \ roman_numerals_reverse = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\"\
    , \"l\" => \"L\", \"c\" => \"C\")\n    roman_numerals_reverse = ", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input: number must be between\
    \ 1 and 1000\")\n    else \n        roman = \"\"\n        roman_digits = \"\"\n\
    \        roman_digits = roman_digits * number\n        roman_digits = roman_digits\
    \ - Int(roman_digits)\n        roman_digits = roman_digits * 1000\n        roman_digits\
    \ = roman_digits - Int(roman_digits)\n        roman_digits = roman_digits * 100\n\
    \        roman_digits = roman_digits - Int(roman_digits)\n        roman_digits\
    \ = roman_digits * 10\n        roman_digits = roman_digits - Int(roman_digits)\n\
    \        roman_digits = roman_digits * 1\n        roman_digits = roman_digits\
    \ - Int(roman_digits)\n        roman_digits = roman_digits * 1\n        roman_digits\
    \ = roman_digits - Int(roman_digits)\n        roman_digits = roman_digits * 1\n\
    \        roman_digits = roman_digits - Int(roman_digits)\n        roman_digits\
    \ = roman_digits * 1\n        roman_digits = roman_digits - Int(roman_digits)\n\
    \        roman_digits = roman_digits * 1\n        roman_digits = roman_digits\
    \ - Int(roman_digits)\n        roman_digits = roman_digits * 1\n        roman_digits\
    \ = roman_digits - Int(roman_digits)\n        roman_digits = roman_digits * 1\n\
    \        roman_digits = roman_digits - Int(roman_digits)\n        roman_digits\
    \ = roman_digits * 1\n        roman_digits = roman_digits - Int(roman_digits)\n\
    \        roman_digits = roman_digits * 1\n        roman_digits = roman_digits\
    \ - Int(roman_digits)\n        roman_digits = roman_digits * 1\n        roman_digits\
    \ = roman_digits - Int(roman_digits)\n        roman_digits = roman_digits * 1\n\
    \        roman_digits = roman_digits - Int(roman_digits)\n        roman_digits\
    \ = roman_digits * 1\n        roman_digits = roman_digits - Int(roman_digits)\n\
    \        roman_digits = roman_digits * 1\n        roman_digits = roman_digits\
    \ - Int(roman_digits)\n        roman_digits = roman_digits * 1\n        roman_digits\
    \ = roman_digits - Int(roman_digits)\n        roman_digits = roman_digits * ",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_numeral(number)\n        roman = roman.lower()\n   \
    \     return roman\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if\
    \ number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n   \
    \ roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\"\
    \ => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"\
    C\" => \"c\", \"L\" => \"l\", \"X\" => \"x\", \"V\" => \"v\", \"I\" => \"i\",\
    \ \"D\" => \"d\", \"C\" => \"c\", \"M\" => \"m\", \"M\" => \"m\", \"D\" => \"\
    d\", \"C\" => \"c\", \"L\" => \"l\", \"X\" => \"x\", \"M\" => \"m\", \"M\" =>\
    \ \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\", \"d\" => \"D\", \"m\" => \"M\", \"m\" => \"M\", \"c\" => \"C\", \"\
    l\" => \"L\", \"x\" => \"X\", \"v\" => \"V\", \"i\" => \"I\", \"d\" => \"D\",\
    \ \"c\" => \"C\", \"m\" => \"M\", \"m\" => \"M\", \"d\" => \"D\", \"c\" => \"\
    C\", \"l\" => \"L\", \"x\" => \"X\", \"m\" => \"M\", \"m\" => \"M\", \"i\" =>\
    \ \"I\", \"v\" => \"V\", \"x\" => \"X\")\n    roman_numerals_reverse = Dict(\"\
    I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\",\
    \ \"D\" => \"d\", \"M\" => \"m\", \"M\" => \"m\", \"C\" => \"c\", \"L\" => \"\
    l\", \"X\" => \"x\", \"V\" => \"v\", \"I\" => \"i\", \"D\" => \"d\", \"C\" =>\
    \ \"c\", \"M\" => \"m\", \"M\" => \"m\", \"D\" => \"d\", \"C\" => \"c\", \"L\"\
    \ => \"l\", \"X\" => \"x\", \"M\" => \"m\", \"M\" => \"m\", \"I\" => \"i\", \"\
    V\" => \"v\", \"X\" => \"x\")\n    roman_numerals_reverse = Dict(\"i\" => \"I\"\
    , \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\", \"d\" => \"\
    D\", \"m\" => \"M\", \"m\" => \"M\", \"c\" => \"C\", \"l\" => \"L\", \"x\" =>\
    \ \"X\", \"v\" => \"V\", \"i\" => \"I\", \"d\" => \"D\", \"c\" => \"C\", \"m\"\
    \ => \"M\", \"m\" => \"M\", \"", "    roman = \"\"\n    roman_digits = \"\"\n\
    \    \n    if number < 1 \n        error(\"number must be positive\")\n    \n\
    \    if number < 100\n        roman = \"M\"\n        roman_digits = string(\"\
    M\", number)\n    \n    elseif number < 1000\n        roman = \"CM\"\n       \
    \ roman_digits = string(\"CM\", number)\n    \n    elseif number < 10000\n   \
    \     roman = \"D\"\n        roman_digits = string(\"D\", number)\n    \n    elseif\
    \ number < 100000\n        roman = \"CD\"\n        roman_digits = string(\"CD\"\
    , number)\n    \n    elseif number < 1000000\n        roman = \"C\"\n        roman_digits\
    \ = string(\"C\", number)\n    \n    elseif number < 10000000\n        roman =\
    \ \"XC\"\n        roman_digits = string(\"XC\", number)\n    \n    elseif number\
    \ < 100000000\n        roman = \"L\"\n        roman_digits = string(\"L\", number)\n\
    \    \n    elseif number < 1000000000\n        roman = \"XL\"\n        roman_digits\
    \ = string(\"XL\", number)\n    \n    elseif number < 10000000000\n        roman\
    \ = \"X\"\n        roman_digits = string(\"X\", number)\n    \n    elseif number\
    \ < 100000000000\n        roman = \"IX\"\n        roman_digits = string(\"IX\"\
    , number)\n    \n    elseif number < 1000000000000\n        roman = \"V\"\n  \
    \      roman_digits = string(\"V\", number)\n    \n    elseif number < 10000000000000\n\
    \        roman = \"IV\"\n        roman_digits = string(\"IV\", number)\n    \n\
    \    elseif number < 100000000000000\n        roman = \"I\"\n        roman_digits\
    \ = string(\"I\", number)\n    \n    else\n        error(\"number too large\"\
    )\n    end\n    \n    return roman_digits + roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\n\
    \        roman = roman_numerals(number)\n        roman = roman.map(&lowercase)\n\
    \        roman = roman.join(\"\")\n        return roman\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman_numerals = Dict(\"M\"=>\"M\", \"CM\"=>\"\
    C\", \"D\"=>\"D\", \"CD\"=>\"C\", \"C\"=>\"C\", \"XC\"=>\"XC\", \"L\"=>\"L\",\
    \ \"XL\"=>\"X\", \"X\"=>\"X\", \"IX\"=>\"IX\", \"V\"=>\"V\", \"IV\"=>\"I\", \"\
    I\"=>\"I\")\n    roman_numerals_reverse = Dict(\"M\"=>\"M\", \"CM\"=>\"D\", \"\
    D\"=>\"D\", \"CD\"=>\"C\", \"C\"=>\"C\", \"XC\"=>\"L\", \"L\"=>\"L\", \"XL\"=>\"\
    X\", \"X\"=>\"X\", \"IX\"=>\"V\", \"V\"=>\"V\", \"IV\"=>\"I\", \"I\"=>\"I\")\n\
    \    roman_numerals_reverse[\"M\"] = roman_numerals[\"M\"]\n    roman_numerals_reverse[\"\
    CM\"] = roman_numerals[\"CM\"]\n    roman_numerals_reverse[\"D\"] = roman_numerals[\"\
    D\"]\n    roman_numerals_reverse[\"CD\"] = roman_numerals[\"CD\"]\n    roman_numerals_reverse[\"\
    C\"] = roman_numerals[\"C\"]\n    roman_numerals_reverse[\"XC\"] = roman_numerals[\"\
    XC\"]\n    roman_numerals_reverse[\"L\"] = roman_numerals[\"L\"]\n    roman_numerals_reverse[\"\
    XL\"] = roman_numerals[\"XL\"]\n    roman_numerals_reverse[\"X\"] = roman_numerals[\"\
    X\"]\n    roman_numerals_reverse[\"IX\"] = roman_numerals[\"IX\"]\n    roman_numerals_reverse[\"\
    V\"] = roman_numerals[\"V\"]\n    roman_numerals_reverse[\"IV\"] = roman_numerals[\"\
    IV\"]\n    roman_numerals_reverse[\"I\"] = roman_numerals[\"I\"]\n    roman_numerals_reverse[\"\
    VI\"] = roman_numerals[\"VI\"]\n    roman_numerals_reverse[\"IU\"] = roman_numerals[\"\
    IU\"]\n    roman_numerals_reverse[\"UU\"] = roman_numerals[\"UU\"]\n    roman_numerals_reverse[\"\
    UUU\"] = roman_numerals[\"UUU\"]\n    roman_numerals_reverse[\"MU\"] = roman_numerals[\"\
    MU\"]\n    roman_numerals_reverse[\"M", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its decimal equivalent as a string,\n    and return it in lowercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000\n  \
    \      error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    return roman.join(\"\")\nend", "    if\
    \ number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n   \
    \ roman = roman_numerals(number)\n    roman = roman.map(&:first)\n    roman =\
    \ roman.map(&:join)\n    roman = roman.map(&:downcase)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:upcase)\n    roman = roman.map(&:join)\n    roman = roman.map(&:capitalize)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n    roman = roman.map(&:join)\n\
    \    ro", "    roman = roman_to_int(number)\n    roman_str = int_to_roman(roman)\n\
    \    return roman_str.lower()\nend\n</cell>\n<code language=julia-1.5>", "   \
    \ if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    for roman_numeral\
    \ in roman_numerals\n        if number >= roman_numeral\n            roman = roman_numeral\
    \ + roman\n            number -= roman_numeral\n        end\n    end\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = String.empty\n\
    \    roman = roman.concat [\n        roman.concat [\n            roman.concat\
    \ [\n                roman.concat [\n                    roman.concat [\n    \
    \                    roman.concat [\n                            roman.concat\
    \ [\n                                roman.concat [\n                        \
    \            roman.concat [\n                                        roman.concat\
    \ [\n                                            roman.concat [\n            \
    \                                    roman.concat [\n                        \
    \                            roman.concat [\n                                \
    \                        roman.concat [\n                                    \
    \                        roman.concat [\n                                    \
    \                            roman.concat [\n                                \
    \                                    roman.concat [\n                        \
    \                                                roman.concat [\n            \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \        roman.concat [\n                                                    \
    \                                roman.concat [\n                            \
    \                                                            roman.concat [\n\
    \                                                                            \
    \                roman.concat [\n                                            \
    \                                                    roman.concat [\n        \
    \                                                                            \
    \                roman.concat [\n                                            \
    \                                                            roman.concat [\n\
    \                                                                            \
    \                                roman.concat [\n                            \
    \                                                                            \
    \        roman.concat [\n                                                    \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \                                                roman.concat [\n            \
    \                                                                            \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \                                                roman.concat [\n            \
    \                                                                            \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \                                                                            \
    \        roman.concat [\n                                                    \
    \                                                                            \
    \                                roman.concat [\n                            \
    \                                                                            \
    \                                                            roman.concat [\n\
    \                                                                            \
    \                                                                            \
    \                roman.concat [\n                                            \
    \                                                                            \
    \                                                    roman.concat [\n        \
    \                                                                            \
    \                                                                            \
    \                roman.concat [\n                                            \
    \                                                                            \
    \                                                            roman.concat [\n\
    \                                                                            \
    \                                                                            \
    \                                roman.concat [\n                            \
    \                                                                            \
    \                                                                            \
    \        roman.concat [\n                                                    \
    \                                                                            \
    \                                                                roman.concat\
    \ [\n                                                                        \
    \                                                                            \
    \                                                roman.concat [\n            \
    \                                                                            \
    \                                                                            \
    \                                    roman.concat [\n                        \
    \                                                                            \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                                                                            \
    \                        roman.concat [\n                                    \
    \                                                                            \
    \                                                                            \
    \                            roman.concat [\n                                \
    \                                                                            \
    \                                                                            \
    \                                    ", "    if number < 1 || number > 1000 \n\
    \        error(\"Invalid input\")\n    else\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"MCMXCIV\"\
    )\n        roman = roman * number % 100\n        roman = roman_to_int(\"M", " \
    \   if number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ < 1000 \n        return int_to_mini_roman(number//10) + int_to_mini_roman(number%10)\n\
    \    else \n        error(\"number too large\")\nend", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input: number must be between 1 and 1000\"\
    )\n    else \n        roman = roman_numeral(number)\n        roman = roman.lower()\n\
    \        return roman\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    Given a positive integer, obtain its roman numeral equivalent as a string,\n\
    \    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n\
    \        roman = roman_numerals(number)\n        roman = roman.map(&lowercase)\n\
    \        roman = roman.map(&char.upcase)\n        roman = roman.map(&char.downcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.swapcase)\n\
    \        roman = roman.", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else \n        roman_numerals = roman_numerals(number)\n\
    \        roman_numerals = roman_numerals[1..end]\n        roman_numerals = roman_numerals.join(\"\
    \")\n        return roman_numerals\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = roman_numerals(number)\n    return roman[1]\nend", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_table = roman_numerals[number]\n\
    \    roman_numerals_table\nend", "    if number < 1 || number > 1000 \n      \
    \  error(\"Invalid input\")\n    end\n    roman = romans[number]\n    roman =\
    \ roman.split(\".\").map(&:to_i)\n    roman = roman.map(&:to_s)\n    roman = roman.join\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(19)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(152)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(426)\n</cell>\n<text>\nProblem 3\nWrite a function that converts\
    \ a positive integer to a binary string.", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\")\n    else \n        roman = roman_to_int(roman_to_str(int_to_roman(number)))\n\
    \        mini_roman = int_to_mini_roman(roman)\n        return mini_roman\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 \n        error(\"number\
    \ must be positive\")\n    else if number < 1000 \n        error(\"number too\
    \ small\")\n    else if number > 1000 \n        error(\"number too large\")\n\
    \    else \n        roman_numerals = roman_numerals(number)\n        roman_numerals_str\
    \ = roman_numerals.join(\"\")\n        return roman_numerals_str.lower()\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 \n        error(\"The\
    \ number must be positive\")\n    else if number < 1000 \n        return roman_to_mini_roman(number)\n\
    \    else \n        error(\"The number must be between 1 and 1000\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman_numerals = Dict(\"I\" => 1, \"V\" => 5, \"\
    X\" => 10, \"L\" => 50,\n        \"C\" => 100, \"D\" => 500, \"M\" => 1000)\n\
    \    roman_numerals_reverse = Dict(\"I\" => 1, \"V\" => 5, \"X\" => 10,\n    \
    \    \"L\" => 50, \"C\" => 100, \"D\" => 1000, \"M\" => 1000)\n    roman_numerals_reverse[\"\
    XII\"] = roman_numerals[\"XII\"]\n    roman_numerals_reverse[\"IV\"] = roman_numerals[\"\
    IV\"]\n    roman_numerals_reverse[\"III\"] = roman_numerals[\"III\"]\n    roman_numerals_reverse[\"\
    II\"] = roman_numerals[\"II\"]\n    roman_numerals_reverse[\"I\"] = roman_numerals[\"\
    I\"]\n    roman_numerals_reverse[\"VII\"] = roman_numerals[\"VII\"]\n    roman_numerals_reverse[\"\
    VI\"] = roman_numerals[\"VI\"]\n    roman_numerals_reverse[\"V\"] = roman_numerals[\"\
    V\"]\n    roman_numerals_reverse[\"IX\"] = roman_numerals[\"IX\"]\n    roman_numerals_reverse[\"\
    XIII\"] = roman_numerals[\"XIII\"]\n    roman_numerals_reverse[\"XIV\"] = roman_numerals[\"\
    XIV\"]\n    roman_numerals_reverse[\"XV\"] = roman_numerals[\"XV\"]\n    roman_numerals_reverse[\"\
    X\"] = roman_numerals[\"X\"]\n    roman_numerals_reverse[\"XL\"] = roman_numerals[\"\
    XL\"]\n    roman_numerals_reverse[\"L\"] = roman_numerals[\"L\"]\n    roman_numerals_reverse[\"\
    XC\"] = roman_numerals[\"XC\"]\n    roman_numerals_reverse[\"C\"] = roman_numerals[\"\
    C\"]\n    roman_numerals_reverse[\"CD\"] = roman_numerals[\"CD\"]\n    roman_numerals_reverse[\"\
    D\"] = roman_numerals[\"D\"]\n    roman_numerals_reverse[\"CM\"] = roman_numerals[\"\
    CM\"]\n    roman_numerals_reverse[\"M\"] = roman_numerals[\"M\"]\n    roman_numerals_reverse[\"\
    MN\"] = ro", "    if number < 1 || number > 1000\n        error(\"Invalid input\"\
    )\n    end\n    roman = romans[number]\n    roman = roman.substring(0,roman.length-1)\n\
    \    return roman\nend", "    if number < 1 \n        error(\"The number must\
    \ be positive\")\n    else if number < 1000 \n        return roman_to_mini_roman(number)\n\
    \    else \n        error(\"The number must be less than 1000\")\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its mini\
    \ roman numeral equivalent as a string,\n    and return it in uppercase.\n   \
    \ Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000 \n    \
    \    error(\"Invalid input\") \n    else \n        roman_numerals = roman_numerals_list(number)\n\
    \        roman_numerals_str = roman_numerals.join(\"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\" \", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    ,\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"-\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"+\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"'\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"\\\"\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    (\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\")\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"[\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"]\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"{\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    }\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"!\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\"?\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\":\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\";\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    <\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\">\", \"\"\
    )\n        roman_numerals_str = roman_numerals_str.replace(\",\", \"\")\n    \
    \    roman_numerals_str = roman_numerals_str.replace(\"-\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"+\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\
    '\", \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"\\\"\",\
    \ \"\")\n        roman_numerals_str = roman_numerals_str.replace(\"(\", \"\")\n\
    \        roman_numerals_str = roman_numerals_str.replace(\")\", \"\")\n      \
    \  roman_numerals_str = roman_numerals_str.replace(\"[\", \"\")\n        roman_numerals_str\
    \ = roman_numerals_str.replace(\"]\", \"\")\n        roman_", "    roman_numerals\
    \ = roman_numerals()\n    roman_numerals_lower = roman_numerals.lower()\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\" \", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"\
    ,\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"'\", \"\"\
    )\n    roman_numerals_lower = roman_numerals_lower.replace(\"(\", \"\")\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\")\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"\
    [\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"]\", \"\"\
    )\n    roman_numerals_lower = roman_numerals_lower.replace(\"{\", \"\")\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\"}\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"\
    !\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"?\", \"\"\
    )\n    roman_numerals_lower = roman_numerals_lower.replace(\":\", \"\")\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\";\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"\
    ,\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"<\", \"\"\
    )\n    roman_numerals_lower = roman_numerals_lower.replace(\">\", \"\")\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\"?\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"\
    !\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\",\", \"\"\
    )\n    roman_numerals_lower = roman_numerals_lower.replace(\"(\", \"\")\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\")\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"\
    [\", \"\")\n    roman_numerals_lower = roman_numerals_lower.replace(\"]\", \"\"\
    )\n    roman_numerals_lower = roman_numerals_lower.replace(\"{\", \"\")\n    roman_numerals_lower\
    \ = roman_numerals_lower.replace(\"}\", \"\")\n    roman_numerals_lower = ", " \
    \   roman = roman_to_int(number)\n    roman = roman.to_string()\n    roman = roman.chars()\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.join()\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    return roman[1]\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman\
    \ = romans[number]\n    roman = roman.substring(1,roman.length)\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = roman_to_int(number)\n\
    \    roman = roman.to_string()\n    roman = roman.chars()\n    roman = roman.map(&:to_lowercase)\n\
    \    roman = roman.join()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals(number)\n        mini_roman = roman_numerals[1]\n\
    \        for i in roman_numerals[2:end]\n            mini_roman += i\n       \
    \ return mini_roman\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number < 1 || number > 1000\n        error(\"number must be between 1 and 1000\"\
    )\n    end\n    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"\
    D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\
    \n    ]\n    for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman = roman_numeral + roman\n            number -= roman_numeral\n\
    \            break\n        end\n    end\n    return roman\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else\n        roman = roman_numeral(number)\n        roman\
    \ = roman.lower()\n        return roman\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Number must be between 1 and\
    \ 1000\")\n    else\n        roman_numerals = roman_numerals_table()\n       \
    \ roman_numerals_string = roman_numerals[number]\n        roman_numerals_string\
    \ = roman_numerals_string.lower()\n        return roman_numerals_string\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 1000 \n        then return int_to_mini_roman(number/100) + int_to_mini_roman(number%100)\n\
    \    else \n        roman_numerals = roman_numerals(number)\n        roman_numerals\
    \ = roman_numerals[roman_numerals.len()-1]\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n        roman_numerals = roman_numerals.reverse()\n\
    \        roman_numerals = roman_numerals.reverse()\n", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input: number must be between 1 and 1000\"\
    )\n    end\n    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" =>\
    \ \"x\", \"L\" => \"l\", \"C\" => \"c\")\n    roman_numerals_reverse = Dict(\"\
    i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\" => \"C\")\n\
    \    roman_numerals_reverse[\"I\"] = \"i\"\n    roman_numerals_reverse[\"V\"]\
    \ = \"v\"\n    roman_numerals_reverse[\"X\"] = \"x\"\n    roman_numerals_reverse[\"\
    L\"] = \"l\"\n    roman_numerals_reverse[\"C\"] = \"c\"\n    roman_numerals_reverse[\"\
    D\"] = \"d\"\n    roman_numerals_reverse[\"M\"] = \"m\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"M\"] = \"m\"\n    roman_numerals_reverse[\"\
    D\"] = \"d\"\n    roman_numerals_reverse[\"C\"] = \"c\"\n    roman_numerals_reverse[\"\
    L\"] = \"l\"\n    roman_numerals_reverse[\"X\"] = \"x\"\n    roman_numerals_reverse[\"\
    V\"] = \"v\"\n    roman_numerals_reverse[\"I\"] = \"i\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"C\"] = \"c\"\n    roman_numerals_reverse[\"\
    M\"] = \"m\"\n    roman_numerals_reverse[\"D\"] = \"d\"\n    roman_numerals_reverse[\"\
    C\"] = \"c\"\n    roman_numerals_reverse[\"L\"] = \"l\"\n    roman_numerals_reverse[\"\
    X\"] = \"x\"\n    roman_numerals_reverse[\"V\"] = \"v\"\n    roman_numerals_reverse[\"\
    I\"] = \"i\"\n    roman_numerals_reverse[\"M\"] = \"m\"\n    roman_numerals_reverse[\"\
    V\"] = \"v\"\n    roman_numerals_reverse[\"X\"] = \"x\"\n    roman_", "    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_length = length(roman_numerals)\n\
    \    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numerals_length = roman_numerals_length\
    \ - 1\n    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length - 1\n    roman_numer", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input: number must be between 1 and 1000\")\n\
    \    end\n    roman = roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n\
    \    return roman.join(\"\")\nend\n</cell>\n<code language=julia-1.5>", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n\
    \        roman = roman_numeral(number)\n        roman = roman.lower()\n      \
    \  return roman\n    end\nend\n</cell>\n<code language=julia-1.5>", "    roman\
    \ = \"\"\n    roman_digits = \"\"\n    roman_digits = roman_digits + \"M\"\n \
    \   roman_digits = roman_digits + \"CM\"\n    roman_digits = roman_digits + \"\
    D\"\n    roman_digits = roman_digits + \"CD\"\n    roman_digits = roman_digits\
    \ + \"C\"\n    roman_digits = roman_digits + \"XC\"\n    roman_digits = roman_digits\
    \ + \"L\"\n    roman_digits = roman_digits + \"XL\"\n    roman_digits = roman_digits\
    \ + \"X\"\n    roman_digits = roman_digits + \"IX\"\n    roman_digits = roman_digits\
    \ + \"V\"\n    roman_digits = roman_digits + \"IV\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"IU\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = roman_digits + \"I\"\n    roman_digits = roman_digits\
    \ + \"I\"\n    roman_digits = ro", "    if number == 0 \n        then return \"\
    0\"\n    else if number < 0 \n        then return \"-\"\n    else if number <\
    \ 10 \n        then return \"M\"\n    else if number < 100 \n        then return\
    \ \"CM\"\n    else if number < 1000 \n        then return \"D\"\n    else if number\
    \ < 10000 \n        then return \"CD\"\n    else if number < 100000 \n       \
    \ then return \"C\"\n    else if number < 1000000 \n        then return \"XC\"\
    \n    else if number < 10000000 \n        then return \"L\"\n    else if number\
    \ < 100000000 \n        then return \"XL\"\n    else if number < 1000000000 \n\
    \        then return \"X\"\n    else if number < 10000000000 \n        then return\
    \ \"IX\"\n    else if number < 100000000000 \n        then return \"V\"\n    else\
    \ if number < 1000000000000 \n        then return \"IV\"\n    else if number <\
    \ 10000000000000 \n        then return \"I\"\n    else if number < 100000000000000\
    \ \n        then return \"II\"\n    else if number < 1000000000000000 \n     \
    \   then return \"III\"\n    else if number < 10000000000000000 \n        then\
    \ return \"IV\"\n    else if number < 100000000000000000 \n        then return\
    \ \"V\"\n    else if number < 1000000000000000000 \n        then return \"IX\"\
    \n    else if number < 10000000000000000000 \n        then return \"X\"\n    else\
    \ if number < 100000000000000000000 \n        then return \"XL\"\n    else if\
    \ number < 1000000000000000000000 \n        then return \"L\"\n    else if number\
    \ < 10000000000000000000000 \n        then return \"XC\"\n    else if number <\
    \ 100000000000000000000000 \n        then return \"C\"\n    else if number < 1000000000000000000000000\
    \ \n        then return \"CD\"\n    else if number < 10000000000000000000000000\
    \ \n        then return \"D\"\n    else if number < 100000000000000000000000000\
    \ \n        then return \"CM\"\n    else if number < 1000000000000000000000000000\
    \ \n        then return \"M\"\n    else if number < 10000000000000000000000000000\
    \ \n        then return \"MM\"\n    else if number < 100000000000000000000000000000\
    \ \n        then return \"MMM\"\n    else if number < 1000000000000000000000000000000\
    \ \n        then return \"MMMM\"\n    else if number ", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_table()\n        roman_numerals_string = \"\"\n        for\
    \ roman_numeral in roman_numerals \n            if roman_numerals[roman_numeral]\
    \ == number \n                roman_numerals_string += roman_numeral\n       \
    \ roman_numerals_string = roman_numerals_string.lower()\n        return roman_numerals_string\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer,\
    \ obtain its decimal equivalent as a string,\n    and return it in lowercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000\n  \
    \      error(\"Invalid input\")\n    end\n    roman_numerals = Dict(\"I\" => 1,\
    \ \"V\" => 5, \"X\" => 10, \"L\" => 50,\n                         \"C\" => 100,\
    \ \"D\" => 500, \"M\" => 1000)\n    roman_numerals_reverse = Dict(\"I\" => 1,\
    \ \"V\" => 5, \"X\" => 10,\n                                  \"L\" => 50, \"\
    C\" => 100, \"D\" => 500,\n                                  \"M\" => 1000)\n\
    \    roman_numerals_reverse[\"XII\"] = 5\n    roman_numerals_reverse[\"XIV\"]\
    \ = 5\n    roman_numerals_reverse[\"XIX\"] = 10\n    roman_numerals_reverse[\"\
    XXV\"] = 10\n    roman_numerals_reverse[\"XXI\"] = 10\n    roman_numerals_reverse[\"\
    XXX\"] = 100\n    roman_numerals_reverse[\"XL\"] = 50\n    roman_numerals_reverse[\"\
    XC\"] = 100\n    roman_numerals_reverse[\"CD\"] = 500\n    roman_numerals_reverse[\"\
    CM\"] = 1000\n    roman_numerals_reverse[\"M\"] = 1000\n    roman_numerals_reverse[\"\
    MM\"] = 1000\n    roman_numerals_reverse[\"MMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMM\"] = 1000\n   \
    \ roman_numerals_reverse[\"MMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMMMMM\"] = 1000\n\
    \    roman_numerals_reverse[\"MMMMMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMMMMMMMM\"]\
    \ = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"\
    MMMMMMMMMMMMMMMMMMM\"] = 1000\n    roman_numerals_reverse[\"MMMMMMMMMMMMMMMMMMMM\"\
    ] = 1000\n    ", "    if number < 1 \n        error(\"Invalid input: number must\
    \ be positive\")\n    else if number < 1000 \n        return int_to_mini_roman(number\
    \ * 100) + int_to_mini_roman(number % 100)\n    else \n        error(\"Invalid\
    \ input: number must be less than 1000\")\nend", "    if number == 0 \n      \
    \  then return \"0\"\n    else if number < 0 \n        then return \"-\"\n   \
    \ else if number < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_numerals\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    for roman_numeral in roman_numerals\n\
    \        if number >= roman_numeral\n            roman = roman_numeral + roman\n\
    \            number -= roman_numeral\n        end\n    end\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 1000 \n        then return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100)\n    else \n        roman_numerals = [\"I\", \"II\", \"III\", \"IV\"\
    , \"V\", \"VI\", \"VII\", \"VIII\", \"IX\", \"X\", \"XI\", \"XII\", \"XIII\",\
    \ \"XIV\", \"XV\", \"XVI\", \"XVII\", \"XVIII\", \"XIX\", \"XX\", \"XXI\", \"\
    XXII\", \"XXIII\", \"XXIV\", \"XXV\", \"XXVI\", \"XXVII\", \"XXVIII\", \"XXIX\"\
    , \"XXX\", \"XXXI\", \"XXXII\", \"XXXIII\", \"XXXIV\", \"XXXV\", \"XXXVI\", \"\
    XXXVII\", \"XXXVIII\", \"XXXIX\", \"XL\", \"L\", \"LI\", \"LII\", \"LIII\", \"\
    LIIII\", \"LIIV\", \"LIV\", \"LIVI\", \"LIVII\", \"LIVIII\", \"LIVIV\", \"LIVV\"\
    , \"LIVVI\", \"LIVVII\", \"LIVVIII\", \"LIVVIV\", \"LIVVV\", \"LIVVI\", \"LIVVII\"\
    , \"LIVVIII\", \"LIVIX\", \"LX\", \"L\", \"LXI\", \"LXII\", \"LXIII\", \"LXIV\"\
    , \"LXV\", \"LXVI\", \"LXVII\", \"LXVIII\", \"LXIX\", \"LXX\", \"LXXI\", \"LXXII\"\
    , \"LXXIII\", \"LXXIV\", \"LXXV\", \"LXXVI\", \"LXXVII\", \"LXXVIII\", \"LXXIX\"\
    , \"LXXX\", \"LXXXI\", \"LXXXII\", \"LXXXIII\", \"LXXXIV\", \"LXXXV\", \"LXXXVI\"\
    , \"LXXXVII\", \"LXXXVIII\", \"LXXXIX\", \"XC\", \"C\", \"CI\", \"CII\", \"CIII\"\
    , \"CIIII\", \"CIV\", \"CV\", \"CVI\", \"CVII\", \"CVIII\", \"CIX\", \"CX\", \"\
    CXI\", \"CXII\", \"CXIII\", \"CXIV\", \"CXV\", \"CXVI\", \"CXVII\", \"CXVIII\"\
    , \"CXIX\", \"CXX\", \"CXXI\", \"CXXII\", \"CXXIII\", \"CXXIV\", \"CXXV\", \"\
    CXXVI\", \"CXXV", "    if number < 1 \n        error(\"Invalid input\")\n    else\
    \ if number < 1000 \n        return roman_to_mini_roman(number)\n    else \n \
    \       error(\"Invalid input\")\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = [\"M\"\
    , \"D\", \"C\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = reverse(roman_numerals_reverse)\n\
    \    roman_numerals_reverse = reverse(roman_numerals_reverse)\n    roman_numerals_reverse\
    \ = reverse(roman_numerals_reverse)\n    roman_numerals_reverse = ", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman = roman_to_int(roman_to_str(int_to_roman(number)))\n        return roman_to_str(roman)\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 1000 \n        then return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100)\n    else if number < 1000000 \n        then return int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number / 1000000)\
    \ + int_to_mini_roman(number % 1000000)\n    else if number < 1000000000 \n  \
    \      then return int_to_mini_roman(number / 10000000) + int_to_mini_roman(number\
    \ % 10000000) + int_to_mini_roman(number / 100000000) + int_to_mini_roman(number\
    \ % 100000000) + int_to_mini_roman(number / 1000000000) + int_to_mini_roman(number\
    \ % 1000000000) + int_to_mini_roman(number / 100000000000) + int_to_mini_roman(number\
    \ % 100000000000) + int_to_mini_roman(number / 1000000000000) + int_to_mini_roman(number\
    \ % 1000000000000)\n    else if number < 1000000000000000 \n        then return\
    \ int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number % 1000000000000000)\
    \ + int_to_mini_roman(number / 10000000000000000) + int_to_mini_roman(number %\
    \ 10000000000000000) + int_to_mini_roman(number / 100000000000000000) + int_to_mini_roman(number\
    \ % 100000000000000000) + int_to_mini_roman(number / 10000000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000000) + int_to_mini_roman(number / 100000000000000000000)\
    \ + int_to_mini_roman(number % 100000000000000000000)\n    else if number < 100000000000000000\
    \ \n        then return int_to_mini_roman(number / 100000000000000000) + int_to_mini_roman(number\
    \ % 100000000000000000) + int_to_mini_roman(number / 100000000000000000) + int_to_mini_roman(number\
    \ % 100000000000000000) + int_to_mini_roman(number / 10000000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000000) + int_to_mini_roman(number / 100000000000000000000)\
    \ + int_to_mini_roman(number % 100000000000000000000)\n    else ", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input: number must be between\
    \ 1 and 1000\")\n    else \n        roman_numerals = roman_numerals_table()\n\
    \        roman_numerals_len = length(roman_numerals)\n        roman_numerals_len\
    \ = roman_numerals_len - roman_numerals_len % 3\n        roman_numerals_len =\
    \ roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len + 2\n\
    \        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = roman_numerals_len + 2\n        roman_numerals_len = roman_numerals_len +\
    \ 2\n        roman_numerals_len = roman_numerals_len + 2\n        roman_numerals_len\
    \ = ", "    if number == 0 \n        return \"0\"\n    \n    roman = roman_to_int(number)\n\
    \    roman = roman.to_string()\n    roman = roman.chars()\n    roman = roman.map(&:to_lowercase)\n\
    \    roman = roman.join()\n    return roman\nend", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = roman_numerals_list(number)\n        mini_roman = roman_numerals[0]\n    \
    \    for roman_numeral in roman_numerals[1:] \n            mini_roman += roman_numeral\
    \ \n        return mini_roman\n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals_list(number)\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numerals.reverse()\n        roman_numerals.reverse()\n\
    \        roman_numerals.reverse()\n        roman_numer", "    if number < 1 ||\
    \ number > 1000\n        error(\"Invalid input\")\n    end\n    roman = String[]\n\
    \    roman[1] = roman[2] = roman[3] = roman[4] = roman[5] = roman[6] = roman[7]\
    \ = roman[8] = roman[9] = roman[10] = roman[11] = roman[12] = roman[13] = roman[14]\
    \ = roman[15] = roman[16] = roman[17] = roman[18] = roman[19] = roman[20] = roman[21]\
    \ = roman[22] = roman[23] = roman[24] = roman[25] = roman[26] = roman[27] = roman[28]\
    \ = roman[29] = roman[30] = roman[31] = roman[32] = roman[33] = roman[34] = roman[35]\
    \ = roman[36] = roman[37] = roman[38] = roman[39] = roman[40] = roman[41] = roman[42]\
    \ = roman[43] = roman[44] = roman[45] = roman[46] = roman[47] = roman[48] = roman[49]\
    \ = roman[50] = roman[51] = roman[52] = roman[53] = roman[54] = roman[55] = roman[56]\
    \ = roman[57] = roman[58] = roman[59] = roman[60] = roman[61] = roman[62] = roman[63]\
    \ = roman[64] = roman[65] = roman[66] = roman[67] = roman[68] = roman[69] = roman[70]\
    \ = roman[71] = roman[72] = roman[73] = roman[74] = roman[75] = roman[76] = roman[77]\
    \ = roman[78] = roman[79] = roman[80] = roman[81] = roman[82] = roman[83] = roman[84]\
    \ = roman[85] = roman[86] = roman[87] = roman[88] = roman[89] = roman[90] = roman[91]\
    \ = roman[92] = roman[93] = roman[94] = roman[95] = roman[96] = roman[97] = roman[98]\
    \ = roman[99] = roman[100] = roman[101] = roman[102] = roman[103] = roman[104]\
    \ = ", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman = String[]\n    roman[1] = roman[2] = roman[3] = roman[4]\
    \ = roman[5] = roman[6] = roman[7] = roman[8] = roman[9] = roman[10] = roman[11]\
    \ = roman[12] = roman[13] = roman[14] = roman[15] = roman[16] = roman[17] = roman[18]\
    \ = roman[19] = roman[20] = roman[21] = roman[22] = roman[23] = roman[24] = roman[25]\
    \ = roman[26] = roman[27] = roman[28] = roman[29] = roman[30] = roman[31] = roman[32]\
    \ = roman[33] = roman[34] = roman[35] = roman[36] = roman[37] = roman[38] = roman[39]\
    \ = roman[40] = roman[41] = roman[42] = roman[43] = roman[44] = roman[45] = roman[46]\
    \ = roman[47] = roman[48] = roman[49] = roman[50] = roman[51] = roman[52] = roman[53]\
    \ = roman[54] = roman[55] = roman[56] = roman[57] = roman[58] = roman[59] = roman[60]\
    \ = roman[61] = roman[62] = roman[63] = roman[64] = roman[65] = roman[66] = roman[67]\
    \ = roman[68] = roman[69] = roman[70] = roman[71] = roman[72] = roman[73] = roman[74]\
    \ = roman[75] = roman[76] = roman[77] = roman[78] = roman[79] = roman[80] = roman[81]\
    \ = roman[82] = roman[83] = roman[84] = roman[85] = roman[86] = roman[87] = roman[88]\
    \ = roman[89] = roman[90] = roman[91] = roman[92] = roman[93] = roman[94] = roman[95]\
    \ = roman[96] = roman[97] = roman[98] = roman[99] = roman[100] = roman[101] =\
    \ roman[102] = roman[103] = roman[104] = ", "    if number < 1 || number > 1000\n\
    \        error(\"number must be between 1 and 1000\")\n    end\n    roman_numerals\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed = reverse(roman_numerals)\n\
    \    roman_numerals_reversed[1] = roman_numerals_reversed[1][1..1]\n    roman_numerals_reversed[2]\
    \ = roman_numerals_reversed[2][1..1]\n    roman_numerals_reversed[3] = roman_numerals_reversed[3][1..1]\n\
    \    roman_numerals_reversed[4] = roman_numerals_reversed[4][1..1]\n    roman_numerals_reversed[5]\
    \ = roman_numerals_reversed[5][1..1]\n    roman_numerals_reversed[6] = roman_numerals_reversed[6][1..1]\n\
    \    roman_numerals_reversed[7] = roman_numerals_reversed[7][1..1]\n    roman_numerals_reversed[8]\
    \ = roman_numerals_reversed[8][1..1]\n    roman_numerals_reversed[9] = roman_numerals_reversed[9][1..1]\n\
    \    roman_numerals_reversed[10] = roman_numerals_reversed[10][1..1]\n    roman_numerals_reversed[11]\
    \ = roman_numerals_reversed[11][1..1]\n    roman_numerals_reversed[12] = roman_numerals_reversed[12][1..1]\n\
    \    roman_numerals_reversed[13] = roman_numerals_reversed[13][1..1]\n    roman_numerals_reversed[14]\
    \ = roman_numerals_reversed[14][1..1]\n    roman_numerals_reversed[15] = roman_numerals_reversed[15][1..1]\n\
    \    roman_numerals_reversed[16] = roman_numerals_reversed[16][1..1]\n    roman_numerals_reversed[17]\
    \ = roman_numerals_reversed[17][1..1]\n    roman_numerals_reversed[18] = roman_numerals_reversed[18][1..1]\n\
    \    roman_numerals_reversed[19] = roman_numerals_reversed[19][1..1]\n    roman_numerals_",
  "    roman = \"\"\n    roman_numerals = roman_numerals(number)\n    for roman_numeral\
    \ in roman_numerals:\n        roman_numeral_digit = roman_numerals[roman_numeral]\n\
    \        if roman_numeral_digit < 10:\n            roman += roman_numeral_digit\n\
    \        else:\n            roman += roman_numeral_digit.to_string(2)\n    return\
    \ roman.lower()\nend\n</cell>\n<code language=julia-1.5>\nint_to_mini_roman(19)\n\
    </cell>\n<code language=julia-1.5>\nint_to_mini_roman(152)\n</cell>\n<code language=julia-1.5>\n\
    int_to_mini_roman(426)\n</cell>\n<text>\nExercise 2\nWrite a function that converts\
    \ a positive integer to a binary string, and returns the string in lowercase.",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    else\n\
    \        roman = roman_numerals(number)\n        roman = roman.map(&:to_lowercase)\n\
    \        roman = roman.join\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that converts a positive integer to a roman numeral. \nThe input\
    \ will be a positive integer between 1 and 3999.\nThe output will be a string\
    \ containing one to three characters, each representing a roman numeral.\nThe\
    \ output will be in lowercase.\nThe output will always have at least three characters\
    \ (the largest roman numeral is 999).\nThe output will always have at least two\
    \ characters (the smallest roman numeral is 1).\nThe output will always have at\
    \ least two characters (the largest roman numeral is 1000).\nThe output will always\
    \ have at least two characters (the smallest roman numeral is 1).\nThe output\
    \ will always have at least two characters (the largest roman numeral is 3999).\n\
    The output will always have at least two characters (the smallest roman numeral\
    \ is 1).\nThe output will always have at least two characters (the largest roman\
    \ numeral is 4000).\nThe output will always have at least two characters (the\
    \ smallest roman numeral is 1).\nThe output will always have at least two characters\
    \ (the largest roman numeral is 5000).\nThe output will always have at least two\
    \ characters (the smallest roman numeral is 1).\nThe output will always have at\
    \ least two characters (the largest roman numeral is 6999).\nThe output will always\
    \ have at least two characters (the smallest roman numeral is 1).\nThe output\
    \ will always have at least two characters (the largest roman numeral is 7999).\n\
    The output will always have at least two characters (the smallest roman numeral\
    \ is 1).\nThe output will always have at least two characters (the largest roman\
    \ numeral is 8999).\nThe output will always have at least two characters (the\
    \ smallest roman numeral is 1).\nThe output will always have at least two characters\
    \ (the largest roman numeral is 9999).\nThe output will always have at least two\
    \ characters (the smallest roman numeral is 1).\nThe output will always have at\
    \ least two characters (the largest roman numeral is 10000).\nThe output will\
    \ always have at least two characters (the smallest roman numeral is 1).\nThe\
    \ output will always have at least two characters (the largest roman numeral is\
    \ 100000).\nThe output will always have ", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    roman = roman.map(&:join)\n    roman\
    \ = roman.map(&:capitalize)\n    roman = roman.join(\"\")\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = \"\"\n    roman_digits\
    \ = Int64[]\n    roman_digits[1] = \"I\"\n    roman_digits[2] = \"II\"\n    roman_digits[3]\
    \ = \"III\"\n    roman_digits[4] = \"IV\"\n    roman_digits[5] = \"V\"\n    roman_digits[6]\
    \ = \"VI\"\n    roman_digits[7] = \"VII\"\n    roman_digits[8] = \"VIII\"\n  \
    \  roman_digits[9] = \"IX\"\n    roman_digits[10] = \"X\"\n    roman_digits[11]\
    \ = \"XI\"\n    roman_digits[12] = \"XII\"\n    roman_digits[13] = \"XIII\"\n\
    \    roman_digits[14] = \"XIV\"\n    roman_digits[15] = \"XV\"\n    roman_digits[16]\
    \ = \"XVI\"\n    roman_digits[17] = \"XVII\"\n    roman_digits[18] = \"XVIII\"\
    \n    roman_digits[19] = \"XIX\"\n    roman_digits[20] = \"XX\"\n    roman_digits[21]\
    \ = \"XXI\"\n    roman_digits[22] = \"XXII\"\n    roman_digits[23] = \"XXIII\"\
    \n    roman_digits[24] = \"XXIV\"\n    roman_digits[25] = \"XXV\"\n    roman_digits[26]\
    \ = \"XXVI\"\n    roman_digits[27] = \"XXVII\"\n    roman_digits[28] = \"XXVIII\"\
    \n    roman_digits[29] = \"XXIX\"\n    roman_digits[30] = \"XXX\"\n    roman_digits[31]\
    \ = \"XXXI\"\n    roman_digits[32] = \"XXXII\"\n    roman_digits[33] = \"XXXIII\"\
    \n    roman_digits[34] = \"XXXIV\"\n    roman_digits[35] = \"XXXV\"\n    roman_digits[36]\
    \ = \"XXXVI\"\n    roman_digits[37] = \"XXXVII\"\n    roman_digits[38] = \"XXXVIII\"\
    \n    roman_digits[39] = \"XXXIX\"\n    roman_digits[40] = \"XXXXX\"\n    roman_digits[41]\
    \ = \"XXXXXI\"\n    roman_digits[42] = \"XXXXXII\"\n    roman_digits[43] = \"\
    XXXXXII", "    if number < 1 || number > 1000 \n        error(\"Invalid input\"\
    )\n    else\n        roman = roman_numerals(number)\n        roman = roman.map(&:to_lowercase)\n\
    \        roman = roman.join(\"\")\n        return roman\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    end\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed\
    \ = roman_numerals[0..(length(roman_numerals)-1)]\n    roman_numerals_reversed[1]\
    \ = roman_numerals_reversed[1].reverse()\n    roman_numerals_reversed[2] = roman_numerals_reversed[2].reverse()\n\
    \    roman_numerals_reversed[3] = roman_numerals_reversed[3].reverse()\n    roman_numerals_reversed[4]\
    \ = roman_numerals_reversed[4].reverse()\n    roman_numerals_reversed[5] = roman_numerals_reversed[5].reverse()\n\
    \    roman_numerals_reversed[6] = roman_numerals_reversed[6].reverse()\n    roman_numerals_reversed[7]\
    \ = roman_numerals_reversed[7].reverse()\n    roman_numerals_reversed[8] = roman_numerals_reversed[8].reverse()\n\
    \    roman_numerals_reversed[9] = roman_numerals_reversed[9].reverse()\n    roman_numerals_reversed[10]\
    \ = roman_numerals_reversed[10].reverse()\n    roman_numerals_reversed[11] = roman_numerals_reversed[11].reverse()\n\
    \    roman_numerals_reversed[12] = roman_numerals_reversed[12].reverse()\n   \
    \ roman_numerals_reversed[13] = roman_numerals_reversed[13].reverse()\n    roman_numerals_reversed[14]\
    \ = roman_numerals_reversed[14].reverse()\n    roman_numerals_reversed[15] = roman_numerals_reversed[15].reverse()\n\
    \    roman_numerals_reversed[16] = roman_numerals_reversed[16].reverse()\n   \
    \ roman_numerals_reversed[17] = roman_numerals_reversed[17].reverse()\n    roman_numerals_reversed[18]\
    \ = roman_numerals_reversed[18].reverse()\n    roman_numerals_reversed[19] = roman_numerals_reversed[19].reverse()\n\
    \    roman_numerals_reversed[20] = roman_numerals_reversed[20].reverse()\n   \
    \ roman_numerals_reversed", "    if number == 0 \n        then return \"0\"\n\
    \    else if number < 0 \n        then return \"-\"\n    else if number < 10 \n\
    \        then return \"M\"\n    else if number < 100 \n        then return \"\
    CM\"\n    else if number < 1000 \n        then return \"D\"\n    else if number\
    \ < 10000 \n        then return \"CD\"\n    else if number < 100000 \n       \
    \ then return \"C\"\n    else if number < 1000000 \n        then return \"XC\"\
    \n    else if number < 10000000 \n        then return \"L\"\n    else if number\
    \ < 100000000 \n        then return \"XL\"\n    else if number < 1000000000 \n\
    \        then return \"X\"\n    else if number < 10000000000 \n        then return\
    \ \"IX\"\n    else if number < 100000000000 \n        then return \"V\"\n    else\
    \ if number < 1000000000000 \n        then return \"IV\"\n    else if number <\
    \ 10000000000000 \n        then return \"I\"\n    else if number < 100000000000000\
    \ \n        then return \"II\"\n    else if number < 1000000000000000 \n     \
    \   then return \"III\"\n    else if number < 10000000000000000 \n        then\
    \ return \"IV\"\n    else if number < 100000000000000000 \n        then return\
    \ \"V\"\n    else if number < 1000000000000000010 \n        then return \"VI\"\
    \n    else if number < 1000000000000000010 \n        then return \"VII\"\n   \
    \ else if number < 1000000000000000010 \n        then return \"VIII\"\n    else\
    \ if number < 1000000000000000010 \n        then return \"IX\"\n    else if number\
    \ < 1000000000000000010 \n        then return \"X\"\n    else if number < 1000000000000000010\
    \ \n        then return \"XI\"\n    else if number < 1000000000000000010 \n  \
    \      then return \"XII\"\n    else if number < 1000000000000000010 \n      \
    \  then return \"XIII\"\n    else if number < 1000000000000000010 \n        then\
    \ return \"XIV\"\n    else if number < 1000000000000000010 \n        then return\
    \ \"XV\"\n    else if number < 1000000000000000010 \n        then return \"XVI\"\
    \n    else if number < 1000000000000000010 \n        then return \"XVII\"\n  \
    \  else if number ", "    roman = roman_numeral(number)\n    roman = roman.lower()\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>", "    roman = roman_numeral(number)\n\
    \    roman = roman.lower()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Number must be between 1 and\
    \ 1000\")\n    end\n    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"\
    D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\
    ]\n    for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman = roman_numeral + roman\n            number -= roman_numeral\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 \n        error(\"The number must be positive\")\n    else if\
    \ number < 1000 \n        return mini_roman(number)\n    else \n        error(\"\
    The number must be less than 1000\")\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman_numerals = roman_numerals_helper(number)\n        roman_numerals\
    \ = roman_numerals[1..end]\n        roman_numerals = roman_numerals.join(\"\"\
    )\n        roman_numerals = roman_numerals.lower()\n        return roman_numerals\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    return roman[1]\nend", "    roman = roman_numerals(number)\n    roman = roman.map(&lowercase)\n\
    \    roman = roman.map(&char(\"0\"))\n    roman = roman.map(&char(\"1\"))\n  \
    \  roman = roman.map(&char(\"2\"))\n    roman = roman.map(&char(\"3\"))\n    roman\
    \ = roman.map(&char(\"4\"))\n    roman = roman.map(&char(\"5\"))\n    roman =\
    \ roman.map(&char(\"6\"))\n    roman = roman.map(&char(\"7\"))\n    roman = roman.map(&char(\"\
    8\"))\n    roman = roman.map(&char(\"9\"))\n    roman = roman.map(&char(\"x\"\
    ))\n    roman = roman.map(&char(\"v\"))\n    roman = roman.map(&char(\"l\"))\n\
    \    roman = roman.map(&char(\"c\"))\n    roman = roman.map(&char(\"d\"))\n  \
    \  roman = roman.map(&char(\"m\"))\n    roman = roman.map(&char(\"n\"))\n    roman\
    \ = roman.map(&char(\"d\"))\n    roman = roman.map(&char(\"m\"))\n    roman =\
    \ roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"\
    v\"))\n    roman = roman.map(&char(\"c\"))\n    roman = roman.map(&char(\"l\"\
    ))\n    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"v\"))\n\
    \    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"c\"))\n  \
    \  roman = roman.map(&char(\"d\"))\n    roman = roman.map(&char(\"m\"))\n    roman\
    \ = roman.map(&char(\"n\"))\n    roman = roman.map(&char(\"d\"))\n    roman =\
    \ roman.map(&char(\"m\"))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"\
    x\"))", "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n\
    \    end\n    roman_numerals = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"\
    vi\", \"vii\", \"viii\", \"ix\", \"x\", \"xi\", \"xii\", \"xiii\", \"xiv\", \"\
    xv\", \"xvi\", \"xvii\", \"xviii\", \"xix\", \"xx\", \"xxi\", \"xxii\", \"xxiii\"\
    , \"xxiv\", \"xxv\", \"xxvi\", \"xxvii\", \"xxviii\", \"xxix\", \"xxx\"]\n   \
    \ roman_numerals_reversed = [\"\", \"i\", \"ii\", \"iii\", \"iv\", \"v\", \"vi\"\
    , \"vii\", \"viii\", \"ix\", \"x\", \"xi\", \"xii\", \"xiii\", \"xiv\", \"xv\"\
    , \"xvi\", \"xvii\", \"xviii\", \"xix\", \"xx\", \"xxi\", \"xxii\", \"xxiii\"\
    , \"xxiv\", \"xxv\", \"xxvi\", \"xxvii\", \"xxviii\", \"xxix\", \"xxx\"]\n   \
    \ roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals_reversed.length - 1] = roman_numerals[roman_numerals_reversed.length\
    \ - roman_numerals_reversed.length - 1]\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed[roman_numerals_reversed.length - roman_numerals_reversed.length\
    \ - 1] = roman_numerals[roman_numerals_reversed.length - roman_numerals_reversed.length\
    \ - 1]\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals_reversed.length - 1] = roman_numerals[roman_numerals_reversed.length\
    \ - roman_numerals_reversed.length - 1]\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n\
    \    roman_numerals_reversed[roman_numerals_reversed.length - roman_numerals_reversed.length\
    \ - 1] = roman_numerals[roman_numerals_reversed.length - roman_numerals_reversed.length\
    \ - 1]\n    roman_numerals_reversed = reverse(roman_numerals_reversed)\n    roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals_reversed.length - 1] = roman_numerals[roman_", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ romans[number]\n    roman = roman.split(\"i\")\n    roman[1] = roman[1].split(\"\
    x\")\n    roman[1] = roman[1][1]\n    return roman[1]\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"number must be between 1 and\
    \ 1000\")\n    end\n    roman = \"\"\n    roman_digits = Int64[]\n    for n in\
    \ 1:number\n        roman_digits.push(roman)\n        roman = roman_digits[roman_digits.length\
    \ - 1] + roman_digits[roman_digits.length - 2]\n    end\n    return roman\nend",
  "    roman = roman_to_int(number)\n    mini_roman = int_to_mini_roman(roman)\n \
    \   return mini_roman\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ == 0 \n        then return \"0\"\n    else if number < 0 \n        then return\
    \ \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else \n        then return \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    roman = roman_to_int(number)\n    roman_str = int_to_roman(roman)\n    return\
    \ roman_str\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    else \n        roman = romans[number]\n\
    \        roman = roman.substring(0,roman.length-1)\n        return roman\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    roman_numerals = roman_numerals(number)\n\
    \    mini_roman = \"\"\n    for roman_numeral in roman_numerals\n        mini_roman\
    \ += roman_numeral\n    return mini_roman\nend", "    if number < 1 || number\
    \ > 1000 \n        error(\"number must be between 1 and 1000\")\n    else \n \
    \       roman = roman_numerals(number)\n        roman = roman.map(&lowercase)\n\
    \        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = roman.map(&char.method(|_|\
    \ \"\"))\n        roman = roman.map(&char.method(|_| \"\"))\n        roman = ro",
  "    if number < 1 || number > 1000 \n        error(\"number must be between 1 and\
    \ 1000\")\n    else \n        roman = roman_numeral(number)\n        roman = roman.lower()\n\
    \        return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    end\n    roman\
    \ = roman_numerals(number)\n    roman = roman.map(&:to_lowercase)\n    return\
    \ roman.join(\"\")\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman_num = \"\"\n        roman_num += int_to_roman(number)\n        roman_num\
    \ += int_to_mini_roman(number / 10)\n        roman_num += int_to_mini_roman(number\
    \ % 10)\n        return roman_num\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = romans[number]\n    return roman\nend", "    if number < 1 || number\
    \ > 1000\n        error(\"Number must be between 1 and 1000\")\n    end\n    roman_numerals\
    \ = roman_numerals_table()\n    roman_numerals_string = \"\"\n    for roman_numeral\
    \ in roman_numerals\n        if roman_numerals[roman_numeral] == number\n    \
    \        roman_numerals_string += roman_numeral\n        end\n    end\n    return\
    \ roman_numerals_string\nend\n</cell>\n<code language=julia-1.5>", "    if number\
    \ < 1 \n        error(\"Invalid input: number must be positive\")\n    else if\
    \ number < 1000 \n        return roman_to_mini_roman(number)\n    else \n    \
    \    error(\"Invalid input: number must be <= 1000\")\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"\
    L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\",\
    \ \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"\
    d\", \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" =>\
    \ \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\", \"V\"\
    \ => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"\
    M\" => \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\",\
    \ \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"\
    v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" =>\
    \ \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\"\
    \ => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"v\", \"\
    X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\",\
    \ \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"\
    c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" =>\
    \ \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\"\
    \ => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"\
    D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\",\
    \ \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"\
    i\", \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" =>\
    \ \"d\", \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"v\", \"X\" => \"x\", \"L\"\
    \ => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"I\" => \"i\", \"\
    V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\",\
    \ \"M\" => \"m\", \"I\" => \"i\", \"V\" => \"", "    if number < 1 || number >\
    \ 1000\n        error(\"Invalid input\")\n    else\n        roman = roman_to_int(roman_to_str(int_to_mini_roman(number\
    \ - 1)) + roman_to_str(number))\n        return roman_to_str(roman)\n    end\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = \"\"\n    roman = roman.concat(int_to_roman(number))\n\
    \    roman = roman.concat(int_to_mini_roman(number / 1000))\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = String.empty\n    roman\
    \ = roman.concat [\n        String.fromCharCode((number % 100) * 10),\n      \
    \  String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.fromCharCode((number % 100) * 10),\n        String.fromCharCode((number\
    \ % 100) * 10),\n        String.", "    if number < 1 || number > 1000 \n    \
    \    error(\"Invalid input\")\n    else \n        roman = roman_numeral(number)\n\
    \        roman = roman.lower()\n        return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\") \n    else\
    \ \n        roman = roman_to_mini_roman(number)\n        roman = roman.lower()\n\
    \        return roman\n    end\nend\n</cell>\n<code language=julia-1.5>", "  \
    \  roman = \"\"\n    roman_numerals = roman_numerals()\n    \n    for numeral\
    \ in roman_numerals\n        if number >= numeral[1]\n            roman = roman.(numeral[2])\n\
    \            number -= numeral[1]\n        end\n    end\n    \n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 \n        error(\"\
    number must be positive\")\n    else if number == 1 \n        return \"x\"\n \
    \   else if number == 2 \n        return \"ix\"\n    else if number == 3 \n  \
    \      return \"xii\"\n    else if number == 4 \n        return \"xiii\"\n   \
    \ else if number == 5 \n        return \"xiv\"\n    else if number == 6 \n   \
    \     return \"xix\"\n    else if number == 7 \n        return \"xi\"\n    else\
    \ if number == 8 \n        return \"xii\"\n    else if number == 9 \n        return\
    \ \"xiii\"\n    else if number == 10 \n        return \"xiv\"\n    else if number\
    \ == 11 \n        return \"xix\"\n    else if number == 12 \n        return \"\
    xi\"\n    else if number == 13 \n        return \"xii\"\n    else if number ==\
    \ 14 \n        return \"xiii\"\n    else if number == 15 \n        return \"xiv\"\
    \n    else if number == 16 \n        return \"xix\"\n    else if number == 17\
    \ \n        return \"xi\"\n    else if number == 18 \n        return \"xii\"\n\
    \    else if number == 19 \n        return \"xiii\"\n    else if number == 20\
    \ \n        return \"xiv\"\n    else if number == 21 \n        return \"xix\"\n\
    \    else if number == 22 \n        return \"xi\"\n    else if number == 23 \n\
    \        return \"xii\"\n    else if number == 24 \n        return \"xiii\"\n\
    \    else if number == 25 \n        return \"xiv\"\n    else if number == 26 \n\
    \        return \"xix\"\n    else if number == 27 \n        return \"xi\"\n  \
    \  else if number == 28 \n        return \"xii\"\n    else if number == 29 \n\
    \        return \"xiii\"\n    else if number == 30 \n        return \"xiv\"\n\
    \    else if number == 31 \n        return \"xix\"\n    else if number == 32 \n\
    \        return \"xi\"\n    else if number == 33 \n        return \"xii\"\n  \
    \  else if number == 34 \n        return \"xiii\"\n    else if number == 35 \n\
    \        return \"xiv\"\n    else if number == 36 \n        return \"xix\"\n \
    \   else if number == 37 \n        return \"xi\"\n    else if number == 38 \n\
    \        return \"xii\"\n    else if number == 39 \n        return \"xiii\"\n\
    \    else if number == 40 \n        return \"xiv\"\n    else if number == 41 \n\
    \        return \"xix\"\n    else if number == 42 \n        return \"xi\"\n",
  "    roman = String.empty\n    roman = roman.concat [\n        \"M\",\n        \"\
    CM\",\n        \"D\",\n        \"CD\",\n        \"C\",\n        \"XC\",\n    \
    \    \"L\",\n        \"XL\",\n        \"X\",\n        \"IX\",\n        \"V\",\n\
    \        \"IV\",\n        \"I\",\n    ]\n    roman = roman.concat [\n        \"\
    I\",\n        \"II\",\n        \"III\",\n        \"IV\",\n        \"V\",\n   \
    \     \"VI\",\n        \"VII\",\n        \"VIII\",\n        \"IX\",\n        \"\
    X\",\n        \"XI\",\n        \"XII\",\n        \"XIII\",\n        \"XIV\",\n\
    \        \"XV\",\n        \"XVI\",\n        \"XVII\",\n        \"XVIII\",\n  \
    \      \"XIX\",\n        \"XX\",\n        \"XXI\",\n        \"XXII\",\n      \
    \  \"XXIII\",\n        \"XXIV\",\n        \"XXV\",\n        \"XXVI\",\n      \
    \  \"XXVII\",\n        \"XXVIII\",\n        \"XXIX\",\n        \"XXX\",\n    \
    \    \"XXXI\",\n        \"XXXII\",\n        \"XXXIII\",\n        \"XXXIV\",\n\
    \        \"XXXV\",\n        \"XXXVI\",\n        \"XXXVII\",\n        \"XXXVIII\"\
    ,\n        \"XXXIX\",\n        \"XL\",\n        \"L\",\n        \"L\",\n     \
    \   \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n \
    \       \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\"\
    ,\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"\
    L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n       \
    \ \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n   \
    \     \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n\
    \        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\"\
    ,\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"\
    L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n       \
    \ \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n   \
    \     \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n        \"L\",\n\
    \        \"L\",", "    if number < 1 \n        error(\"Invalid input: number must\
    \ be positive\")\n    else if number < 1000 \n        return roman_to_mini_roman(number)\n\
    \    else \n        error(\"Invalid input: number too large\")\nend", "    if\
    \ number < 1 || number > 1000 \n        return \"Invalid input\"\n    roman =\
    \ \"\"\n    digits = \"\"\n    \n    if number == 1 \n        roman = \"I\"\n\
    \    else \n        roman = \"V\"\n    \n    for i = 2 to number \n        digits\
    \ = digits + roman\n        roman = roman * i\n    \n    roman = digits + roman\n\
    \    roman = roman.substring(0,roman.length-1)\n    return roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    roman = roman_to_int(number)\n    roman = roman.to_string()\n\
    \    roman = roman.chars.to_list()\n    roman = roman.map(&:to_lowercase)\n  \
    \  roman = roman.join()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"\
    L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed\
    \ = [\n        \"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"\
    X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = roman_numerals_reversed[::-1]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[::-1]\n    roman_numerals_reversed = roman_numerals_reversed[::-1]\n\
    \    roman_numerals_reversed = ", "    if number < 1 \n        error(\"The number\
    \ must be positive\")\n    else if number < 1000 \n        return int_to_mini_roman(number\
    \ - 1)\n    else \n        roman = roman_to_int(\"MCMXCIV\")\n        roman =\
    \ roman * number // 1000\n        roman = roman_to_int(\"M\") + roman\n      \
    \  roman = roman * number % 1000\n        roman = roman_to_int(\"C\") + roman\n\
    \        roman = roman * number % 1000\n        roman = roman_to_int(\"X\") +\
    \ roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    V\") + roman\n        roman = roman * number % 1000\n        roman = roman_to_int(\"\
    I\") + roman\n        return int_to_mini_roman(number - 1) + roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Number must be between 1 and 1000\")\n    end\n    roman_numerals = Dict(\"M\"\
    =>1000, \"CM\"=>900, \"D\"=>500, \"CD\"=>400, \"C\"=>100, \"XC\"=>90, \"L\"=>50,\
    \ \"XL\"=>40, \"X\"=>10, \"IX\"=>9, \"V\"=>5, \"IV\"=>4, \"I\"=>1)\n    roman_numerals_reverse\
    \ = Dict(\"M\"=>1000, \"CM\"=>900, \"D\"=>500, \"CD\"=>400, \"C\"=>100, \"XC\"\
    =>90, \"L\"=>50, \"XL\"=>40, \"X\"=>10, \"IX\"=>9, \"V\"=>5, \"IV\"=>4, \"I\"\
    =>1)\n    roman_numerals_reverse[\"M\"] = 1000\n    roman_numerals_reverse[\"\
    CM\"] = 900\n    roman_numerals_reverse[\"D\"] = 500\n    roman_numerals_reverse[\"\
    CD\"] = 400\n    roman_numerals_reverse[\"C\"] = 100\n    roman_numerals_reverse[\"\
    XC\"] = 90\n    roman_numerals_reverse[\"L\"] = 50\n    roman_numerals_reverse[\"\
    XL\"] = 40\n    roman_numerals_reverse[\"X\"] = 10\n    roman_numerals_reverse[\"\
    IX\"] = 9\n    roman_numerals_reverse[\"V\"] = 5\n    roman_numerals_reverse[\"\
    IV\"] = 4\n    roman_numerals_reverse[\"I\"] = 1\n    roman_numerals_reverse[\"\
    VI\"] = 4\n    roman_numerals_reverse[\"IU\"] = 4\n    roman_numerals_reverse[\"\
    UU\"] = 4\n    roman_numerals_reverse[\"UUU\"] = 4\n    roman_numerals_reverse[\"\
    MU\"] = 4\n    roman_numerals_reverse[\"MUU\"] = 4\n    roman_numerals_reverse[\"\
    CU\"] = 4\n    roman_numerals_reverse[\"CUU\"] = 4\n    roman_numerals_reverse[\"\
    CUUU\"] = 4\n    roman_numerals_reverse[\"CUUV\"] = 4\n    roman_numerals_reverse[\"\
    CUUV\"] = 4\n    roman_numerals_reverse[\"CUUV\"] = 4\n    roman_numerals_reverse[\"\
    CUUV\"] = 4\n    roman_numerals_reverse[\"CUUV\"] = 4", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\")\n    else \n        roman_numerals\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n        roman_numerals_reverse = [\"M\", \"CM\", \"D\"\
    , \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n        roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n        roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \        roman_numerals_reverse = roman_numerals_reverse.reverse()\n", "    if\
    \ number == 0 \n        then return \"0\"\n    else if number < 0 \n        then\
    \ return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number/10)\
    \ + int_to_mini_roman(number%10)\n    else if number < 500\n        then return\
    \ int_to_mini_roman(number/100) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000\n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000\n        then return int_to_mini_roman(number/10000)\
    \ + int_to_mini_roman(number%10000) + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100)\
    \ + int_to_mini_roman(number%10)\n    else if number < 100000\n        then return\
    \ int_to_mini_roman(number/100000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 1000000\n        then return int_to_mini_roman(number/1000000) + int_to_mini_roman(number%1000000)\
    \ + int_to_mini_roman(number%1000) + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n\
    \    else if number < 10000000\n        then return int_to_mini_roman(number/10000000)\
    \ + int_to_mini_roman(number%10000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 100000000\n        then return int_to_mini_roman(number/100000000)\
    \ + int_to_mini_roman(number%100000000) + int_to_mini_roman(number%100000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if\
    \ number < 100", "    if number < 1 || number > 1000\n        error(\"Invalid\
    \ input\")\n    end\n    roman = String[]\n    roman[1] = roman[2] = roman[3]\
    \ = roman[4] = roman[5] = roman[6] = roman[7] = roman[8] = roman[9] = roman[10]\
    \ = roman[11] = roman[12] = roman[13] = roman[14] = roman[15] = roman[16] = roman[17]\
    \ = roman[18] = roman[19] = roman[20] = roman[21] = roman[22] = roman[23] = roman[24]\
    \ = roman[25] = roman[26] = roman[27] = roman[28] = roman[29] = roman[30] = roman[31]\
    \ = roman[32] = roman[33] = roman[34] = roman[35] = roman[36] = roman[37] = roman[38]\
    \ = roman[39] = roman[40] = roman[41] = roman[42] = roman[43] = roman[44] = roman[45]\
    \ = roman[46] = roman[47] = roman[48] = roman[49] = roman[50] = roman[51] = roman[52]\
    \ = roman[53] = roman[54] = roman[55] = roman[56] = roman[57] = roman[58] = roman[59]\
    \ = roman[60] = roman[61] = roman[62] = roman[63] = roman[64] = roman[65] = roman[66]\
    \ = roman[67] = roman[68] = roman[69] = roman[70] = roman[71] = roman[72] = roman[73]\
    \ = roman[74] = roman[75] = roman[76] = roman[77] = roman[78] = roman[79] = roman[80]\
    \ = roman[81] = roman[82] = roman[83] = roman[84] = roman[85] = roman[86] = roman[87]\
    \ = roman[88] = roman[89] = roman[90] = roman[91] = roman[92] = roman[93] = roman[94]\
    \ = roman[95] = roman[96] = roman[97] = roman[98] = roman[99] = roman[100] = roman[101]\
    \ = roman[102] = roman[103] = roman[104] = ", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\")\n    end\n    roman_numerals = [\"M\", \"\
    CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\"\
    , \"I\"]\n    roman_numerals_reversed = [\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed\
    \ = roman_numerals_reversed[roman_numerals_reversed.length - roman_numerals.length\
    \ : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.length\
    \ - roman_numerals.length : end]\n    roman_numerals_reversed = roman_numerals_reversed[roman_numerals_reversed.",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    else \n        roman_numerals = roman_numerals(number)\n\
    \        roman_numerals = roman_numerals.map(&lowercase)\n        roman_numerals\
    \ = roman_numerals.map(&char.method(:ord))\n        roman_numerals = roman_numerals.map(&char.method(:chr))\n\
    \        roman_numerals = roman_numerals.map(&char.method(:upcase))\n        roman_numerals\
    \ = roman_numerals.map(&char.method(:downcase))\n        roman_numerals = roman_numerals.map(&char.method(:capitalize))\n\
    \        roman_numerals = roman_numerals.map(&char.method(:reverse))\n       \
    \ roman_numerals = roman_numerals.map(&char.method(:reverse))\n        roman_numerals\
    \ = roman_numerals.map(&char.method(:reverse))\n        roman_numerals = roman_numerals.map(&char.method(:reverse))\n\
    \        roman_numerals = roman_numerals.map(&char.method(:reverse))\n       \
    \ roman_numerals = roman_numerals.map(&char.method(:reverse))\n        roman_numerals\
    \ = roman_numerals.map(&char.method(:reverse))\n        roman_numerals = roman_numerals.map(&char.method(:reverse))\n\
    \        roman_numerals = roman_numerals.map(&char.method(:reverse))\n       \
    \ roman_numerals = roman_numerals.map(&char.method(:reverse))\n        roman_numerals\
    \ = roman_numerals.map(&char.method(:reverse))\n        roman_numerals = roman_numerals.map(&char.method(:reverse))\n\
    \        roman_numerals = roman_numerals.map(&char.method(:reverse))\n       \
    \ roman_numerals = roman_numerals.map(&char.method(:reverse))\n        roman_numerals\
    \ = roman_numerals.map(&char.method(:reverse))\n        roman_numerals = roman_numerals.map(&char.method(:reverse))\n\
    \        roman_numerals = roman_numerals.map(&char.method(:reverse))\n       \
    \ roman_numerals = roman_numerals.map(&char.method(:reverse", "    roman_numerals\
    \ = roman_numerals()\n    roman_numerals_map = roman_numerals_map()\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(|x|)\n\
    \    roman_numerals_map.values.map(|x|)\n    roman_numerals_map.keys.map(", " \
    \   if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"\
    XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reversed = roman_numerals[0..6].map(&:reverse)\n\
    \    roman_numerals_reversed[1] = roman_numerals_reversed[1].to_s\n    roman_numerals_reversed[2]\
    \ = roman_numerals_reversed[2].to_s\n    roman_numerals_reversed[3] = roman_numerals_reversed[3].to_s\n\
    \    roman_numerals_reversed[4] = roman_numerals_reversed[4].to_s\n    roman_numerals_reversed[5]\
    \ = roman_numerals_reversed[5].to_s\n    roman_numerals_reversed[6] = roman_numerals_reversed[6].to_s\n\
    \    roman_numerals_reversed[7] = roman_numerals_reversed[7].to_s\n    roman_numerals_reversed[8]\
    \ = roman_numerals_reversed[8].to_s\n    roman_numerals_reversed[9] = roman_numerals_reversed[9].to_s\n\
    \    roman_numerals_reversed[10] = roman_numerals_reversed[10].to_s\n    roman_numerals_reversed[11]\
    \ = roman_numerals_reversed[11].to_s\n    roman_numerals_reversed[12] = roman_numerals_reversed[12].to_s\n\
    \    roman_numerals_reversed[13] = roman_numerals_reversed[13].to_s\n    roman_numerals_reversed[14]\
    \ = roman_numerals_reversed[14].to_s\n    roman_numerals_reversed[15] = roman_numerals_reversed[15].to_s\n\
    \    roman_numerals_reversed[16] = roman_numerals_reversed[16].to_s\n    roman_numerals_reversed[17]\
    \ = roman_numerals_reversed[17].to_s\n    roman_numerals_reversed[18] = roman_numerals_reversed[18].to_s\n\
    \    roman_numerals_reversed[19] = roman_numerals_reversed[19].to_s\n    roman_numerals_reversed[20]\
    \ = roman_numerals_reversed[20].to_s\n    roman_numer", "    if number < 1 ||\
    \ number > 1000\n        error(\"Invalid input\")\n    else\n        roman = romans[number]\n\
    \        roman = roman.substring(1,roman.length)\n        return roman\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    roman = roman_to_int(number)\n    mini_roman\
    \ = int_to_mini_roman(roman)\n    return mini_roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = romans[number]\n    roman = roman.substring(roman.startIndex, roman.endIndex)\n\
    \    return roman\nend\n</cell>\n<text>\nProblem 3\nWrite a function that converts\
    \ a positive integer to a binary string.", "    if number < 1 \n        error(\"\
    Number must be positive\")\n    else if number < 1000 \n        return int_to_mini_roman(number\
    \ - 1)\n    else \n        roman = roman_numerals(number)\n        roman = roman.map(&lowercase)\n\
    \        roman = roman.map(&char.upcase)\n        roman = roman.map(&char.downcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.upcase)\n\
    \        roman = roman.map(&char.downcase)\n        roman = roman.map(&char.capitalize)\n\
    \        roman = roman.map(&char.upcase)\n        roman = roman.map(&char.downcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.upcase)\n\
    \        roman = roman.map(&char.downcase)\n        roman = roman.map(&char.capitalize)\n\
    \        roman = roman.map(&char.upcase)\n        roman = roman.map(&char.downcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.upcase)\n\
    \        roman = roman.map(&char.downcase)\n        roman = roman.map(&char.capitalize)\n\
    \        roman = roman.map(&char.upcase)\n        roman = roman.map(&char.downcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.upcase)\n\
    \        roman = roman.map(&char.downcase)\n        roman = roman.map(&char.capitalize)\n\
    \        roman = roman.map(&char.upcase)\n        roman = roman.map(&char.downcase)\n\
    \        roman = roman.map(&char.capitalize)\n        roman = roman.map(&char.upcase)\n\
    \        roman = roman.map(&char.downcase)\n        roman = roman.map(&char.capitalize)\n\
    \        roman = roman.map(&char.upcase)\n", "    if number == 0 \n        then\
    \ return \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if\
    \ number < 100\n        then return int_to_mini_roman(number / 10) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 500\n        then return int_to_mini_roman(number\
    \ / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number / 10) +\
    \ int_to_mini_roman(number % 10)\n    else if number < 1000\n        then return\
    \ int_to_mini_roman(number / 1000) + int_to_mini_roman(number % 1000)\n    else\
    \ return \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ \"\"\n    roman_digits = Int64[]\n    roman_digits[1] = \"M\"\n    roman_digits[2]\
    \ = \"CM\"\n    roman_digits[3] = \"D\"\n    roman_digits[4] = \"CD\"\n    roman_digits[5]\
    \ = \"C\"\n    roman_digits[6] = \"XC\"\n    roman_digits[7] = \"L\"\n    roman_digits[8]\
    \ = \"XL\"\n    roman_digits[9] = \"X\"\n    roman_digits[10] = \"IX\"\n    roman_digits[11]\
    \ = \"V\"\n    roman_digits[12] = \"IV\"\n    roman_digits[13] = \"I\"\n    roman_digits[14]\
    \ = \"IU\"\n    roman_digits[15] = \"U\"\n    roman_digits[16] = \"UU\"\n    roman_digits[17]\
    \ = \"U\"\n    roman_digits[18] = \"UU\"\n    roman_digits[19] = \"M\"\n    roman_digits[20]\
    \ = \"MM\"\n    roman_digits[21] = \"MMM\"\n    roman_digits[22] = \"MMMM\"\n\
    \    roman_digits[23] = \"MMMMM\"\n    roman_digits[24] = \"MMMMMM\"\n    roman_digits[25]\
    \ = \"MMMMMMM\"\n    roman_digits[26] = \"MMMMMMMM\"\n    roman_digits[27] = \"\
    MMMMMMMMM\"\n    roman_digits[28] = \"MMMMMMMMMM\"\n    roman_digits[29] = \"\
    MMMMMMMMMMM\"\n    roman_digits[30] = \"MMMMMMMMMMMM\"\n    roman_digits[31] =\
    \ \"MMMMMMMMMMMMM\"\n    roman_digits[32] = \"MMMMMMMMMMMMMM\"\n    roman_digits[33]\
    \ = \"MMMMMMMMMMMMMMM\"\n    roman_digits[34] = \"MMMMMMMMMMMMMMMM\"\n    roman_digits[35]\
    \ = \"MMMMMMMMMMMMMMMMM\"\n    roman_digits[36] = \"MMMMMMMMMMMMMMMMMM\"\n   \
    \ roman_digits[37] = \"MMMMMMMMMMMMMMMMMMM\"\n    roman_digits[38] = \"MMMMMMMMMMMMMMMMMMMM\"\
    \n    roman_digits[39] = \"MMMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[40] = \"\
    MMMMMMMMMMMMMMMMMMMMMM\"\n    roman_digits[41] = \"MMMMMMMMMMMMMMMMMMMMMMM\"\n\
    \    roman_digits[42] = \"MMMMMMMMMMMMMMMMMMMMMMMM\"", "    if number < 1 || number\
    \ > 1000 \n        error(\"Invalid input\")\n    end\n    roman_numerals = Dict(\"\
    I\"=>\"i\", \"V\"=>\"v\", \"X\"=>\"x\", \"L\"=>\"l\", \"C\"=>\"c\",\n        \"\
    D\"=>\"d\", \"M\"=>\"m\", \"Q\"=>\"q\", \"K\"=>\"k\")\n    roman_numerals_reverse\
    \ = Dict(\"i\"=>\"I\", \"v\"=>\"V\", \"x\"=>\"X\", \"l\"=>\"L\",\n        \"c\"\
    =>\"C\", \"d\"=>\"D\", \"m\"=>\"M\", \"q\"=>\"Q\", \"k\"=>\"K\")\n    roman_numerals_reverse\
    \ = Dict(\"I\"=>\"i\", \"V\"=>\"v\", \"X\"=>\"x\", \"L\"=>\"l\",\n        \"C\"\
    =>\"c\", \"D\"=>\"d\", \"M\"=>\"m\", \"Q\"=>\"q\", \"K\"=>\"k\")\n    roman_numerals_reverse\
    \ = Dict(\"i\"=>\"I\", \"v\"=>\"V\", \"x\"=>\"X\", \"l\"=>\"L\",\n        \"c\"\
    =>\"C\", \"d\"=>\"D\", \"m\"=>\"M\", \"q\"=>\"Q\", \"k\"=>\"K\")\n    roman_numerals_reverse\
    \ = Dict(\"I\"=>\"i\", \"V\"=>\"v\", \"X\"=>\"x\", \"L\"=>\"l\",\n        \"C\"\
    =>\"c\", \"D\"=>\"d\", \"M\"=>\"m\", \"Q\"=>\"q\", \"K\"=>\"k\")\n    roman_numerals_reverse\
    \ = Dict(\"i\"=>\"I\", \"v\"=>\"V\", \"x\"=>\"X\", \"l\"=>\"L\",\n        \"c\"\
    =>\"C\", \"d\"=>\"D\", \"m\"=>\"M\", \"q\"=>\"Q\", \"k\"=>\"K\")\n    roman_numerals_reverse\
    \ = Dict(\"I\"=>\"i\", \"V\"=>\"v\", \"X\"=>\"x\", \"L\"=>\"l\",\n        \"C\"\
    =>\"c\", \"D\"=>\"d\", \"M\"=>\"m\", \"Q\"=>\"q\", \"K\"=>\"k\")\n    roman_numerals_reverse\
    \ = Dict(\"i\"=>\"I\", \"v\"=>\"V\", \"x\"=>\"X\", \"l\"=>\"L\",\n        \"c\"\
    =>\"C\", \"d\"=>\"D\", \"m\"=>\"M\", \"q\"=>\"Q\", \"k\"=>\"K\")\n    roman_numerals_reverse\
    \ = Dict(\"I\"=>\"i\", \"V\"=>\"v\", \"X\"=>\"x\", \"L\"=>\"l\",\n        \"C\"\
    =>\"c\", \"D\"=>\"d\", \"M\"=>\"m\", \"Q\"=>\"q\", \"K\"=>\"k\")", "    roman\
    \ = roman_to_int(number)\n    roman_str = int_to_roman(roman)\n    return roman_str.lower()",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    end\n    roman = roman_numeral(number)\n    return\
    \ roman.lower()\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a\
    \ positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = roman_to_ints(number)\n\
    \    mini_roman = roman_to_mini_roman(roman)\n    return mini_roman\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman_numerals = Dict(\"I\" => \"i\", \"V\" =>\
    \ \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\")\n    roman_numerals_reverse[\"I\"] = \"I\"\n    roman_numerals_reverse[\"\
    V\"] = \"V\"\n    roman_numerals_reverse[\"X\"] = \"X\"\n    roman_numerals_reverse[\"\
    L\"] = \"L\"\n    roman_numerals_reverse[\"C\"] = \"C\"\n    roman_numerals_reverse[\"\
    D\"] = \"D\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    D\"] = \"D\"\n    roman_numerals_reverse[\"C\"] = \"C\"\n    roman_numerals_reverse[\"\
    M\"] = \"M\"\n    roman_numerals_reverse[\"D\"] = \"D\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    D\"] = \"D\"\n    roman_numerals_reverse[\"C\"] = \"C\"\n    roman_numerals_reverse[\"\
    M\"] = \"M\"\n    roman_numerals_reverse[\"D\"] = \"D\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    D\"] = \"D\"\n    roman_numerals_reverse[\"C\"] = \"C\"\n    roman_numerals_reverse[\"\
    M\"] = \"M\"\n    roman_numerals_reverse[\"D\"] = \"D\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"M\"] = \"M\"\n    roman_numerals_reverse[\"\
    D\"] = \"D\"\n    roman_numerals_reverse[\"C\"] = \"C\"\n    roman_numerals_reverse[\"\
    M\"] = \"M\"\n    roman_numerals_reverse[\"D\"] = \"D\"\n    roman_numerals_reverse[\"\
    C\"] = \"C\"\n    roman_numerals_reverse[\"M\"] = \"M\"", "    if number == 0\
    \ \n        then return \"0\"\n    else if number < 0 \n        then return \"\
    -\"\n    else if number < 1000 \n        then return int_to_mini_roman(number/100)\
    \ + int_to_mini_roman(number%100)\n    else \n        roman = int_to_mini_roman(number/10)\n\
    \        roman = roman.substring(0,1) + int_to_mini_roman(number%10)\n       \
    \ return roman\nend\n</code>\n<|/ a tags=julia,roman-numerals |>\n<| a tags=julia,roman-numerals\
    \ |>\n<code>", "    if number < 1 \n        error(\"Invalid input: number must\
    \ be positive\")\n    else if number == 1 \n        return \"x\"\n    else if\
    \ number == 2 \n        return \"x\"\n    else if number == 3 \n        return\
    \ \"l\"\n    else if number == 4 \n        return \"c\"\n    else if number ==\
    \ 5 \n        return \"l\"\n    else if number == 6 \n        return \"x\"\n \
    \   else if number == 7 \n        return \"l\"\n    else if number == 8 \n   \
    \     return \"c\"\n    else if number == 9 \n        return \"x\"\n    else if\
    \ number == 10 \n        return \"l\"\n    else if number == 11 \n        return\
    \ \"c\"\n    else if number == 12 \n        return \"l\"\n    else if number ==\
    \ 13 \n        return \"x\"\n    else if number == 14 \n        return \"l\"\n\
    \    else if number == 15 \n        return \"c\"\n    else if number == 16 \n\
    \        return \"l\"\n    else if number == 17 \n        return \"x\"\n    else\
    \ if number == 18 \n        return \"l\"\n    else if number == 19 \n        return\
    \ \"c\"\n    else if number == 20 \n        return \"l\"\n    else if number ==\
    \ 21 \n        return \"x\"\n    else if number == 22 \n        return \"l\"\n\
    \    else if number == 23 \n        return \"c\"\n    else if number == 24 \n\
    \        return \"l\"\n    else if number == 25 \n        return \"x\"\n    else\
    \ if number == 26 \n        return \"l\"\n    else if number == 27 \n        return\
    \ \"c\"\n    else if number == 28 \n        return \"l\"\n    else if number ==\
    \ 29 \n        return \"x\"\n    else if number == 30 \n        return \"l\"\n\
    \    else if number == 31 \n        return \"c\"\n    else if number == 32 \n\
    \        return \"l\"\n    else if number == 33 \n        return \"x\"\n    else\
    \ if number == 34 \n        return \"l\"\n    else if number == 35 \n        return\
    \ \"c\"\n    else if number == 36 \n        return \"l\"\n    else if number ==\
    \ 37 \n        return \"x\"\n    else if number == 38 \n        return \"l\"\n\
    \    else if number == 39 \n        return \"c\"\n    else if number == 40 \n\
    \        return \"l\"\n    else if number == 41 \n        return \"x\"\n    else\
    \ if number == 42 \n        return \"l\"\n    else if number == 43 \n        return\
    \ \"c\"\n    else if number == 44 \n        return \"l\"\n    else if number ==\
    \ 45 \n", "    roman = roman_to_int(number)\n    roman_str = int_to_roman(roman)\n\
    \    return roman_str.lower()\nend", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 \n  \
    \      error(\"The number must be positive\")\n    else if number < 1000 \n  \
    \      return roman_to_mini_roman(number)\n    else \n        error(\"The number\
    \ must be less than 1000\")\nend", "    if number < 1 || number > 1000\n     \
    \   error(\"Invalid input\")\n    end\n    roman_numerals = roman_numerals(number)\n\
    \    roman_numerals = roman_numerals[roman_numerals.lenght-1]\n    return roman_numerals\n\
    end", "    if number == 0\n        \"\"\n    elseif number < 0 || number > 1000\n\
    \        \"\"\n    else\n        roman = roman_numerals(number)\n        roman\
    \ = roman[roman.length-1]\n        roman = roman.substring(0,roman.length-1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        roman = roman.substring(0,1)\n\
    \        roman = roman.substring(0,1)\n        ro", "    roman = String.empty\n\
    \    roman = roman.concat [\n        String.fromCharCode((number % 100) * 4),\n\
    \        String.fromCharCode((number % 100) * 4 + 4),\n        String.fromCharCode((number\
    \ % 100) * 4 + 8),\n        String.fromCharCode((number % 100) * 4 + 12),\n  \
    \      String.fromCharCode((number % 100) * 4 + 16),\n        String.fromCharCode((number\
    \ % 100) * 4 + 20),\n        String.fromCharCode((number % 100) * 4 + 24),\n \
    \       String.fromCharCode((number % 100) * 4 + 28),\n        String.fromCharCode((number\
    \ % 100) * 4 + 32),\n        String.fromCharCode((number % 100) * 4 + 36),\n \
    \       String.fromCharCode((number % 100) * 4 + 40),\n        String.fromCharCode((number\
    \ % 100) * 4 + 44),\n        String.fromCharCode((number % 100) * 4 + 48),\n \
    \       String.fromCharCode((number % 100) * 4 + 52),\n        String.fromCharCode((number\
    \ % 100) * 4 + 56),\n        String.fromCharCode((number % 100) * 4 + 60),\n \
    \       String.fromCharCode((number % 100) * 4 + 64),\n        String.fromCharCode((number\
    \ % 100) * 4 + 68),\n        String.fromCharCode((number % 100) * 4 + 72),\n \
    \       String.fromCharCode((number % 100) * 4 + 76),\n        String.fromCharCode((number\
    \ % 100) * 4 + 80),\n        String.fromCharCode((number % 100) * 4 + 84),\n \
    \       String.fromCharCode((number % 100) * 4 + 88),\n        String.fromCharCode((number\
    \ % 100) * 4 + 92),\n        String.fromCharCode((number % 100) * 4 + 96),\n \
    \       String.fromCharCode((number % 100) * 4 + 100),\n        String.fromCharCode((number\
    \ % 100) * 4 + 104),\n        String.fromCharCode((number % 100) * 4 + 108),\n\
    \        String.fromCharCode((number % 100) * 4 + 112),\n        String.fromCharCode((number\
    \ % 100) * 4 + 116),\n        String.fromCharCode((number % 100) * 4 + 120),\n\
    \        String.fromCharCode((number % 100) * 4 + 124),\n        String.fromCharCode((number\
    \ % 100) * 4 + 128),\n        String.fromCharCode((number % 100) * 4 + 132),\n\
    \        String.fromCharCode((number % 100) * 4 + 136),\n        String.fromCharCode((number\
    \ % 100", "    roman = roman_to_int(number)\n    roman = roman.to_string()\n \
    \   roman = roman.chars.to_list()\n    roman = roman.map(&:to_lowercase)\n   \
    \ roman = roman.join()\n    return roman\nend", "    if number < 1 \n        error(\"\
    Invalid input: number must be positive\")\n    else if number < 1000 \n      \
    \  error(\"Invalid input: number must be less than 1000\")\n    else if number\
    \ == 1 \n        return \"x\"\n    else \n        roman = roman_numeral(number)\n\
    \        roman = roman.substring(0,roman.length-1)\n        return roman\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number < 1 || number > 1000\n   \
    \     error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:to_lowercase)\n    return roman.join(\"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = romans[number]\n    roman = roman.substring(1,roman.length)\n\
    \    return roman\nend", "    if number == 0 \n        then return \"0\"\n   \
    \ else if number < 0 \n        then return \"-\"\n    else if number < 1000 \n\
    \        then return int_to_mini_roman(number / 100) + int_to_mini_roman(number\
    \ % 100)\n    else if number < 1000000 \n        then return int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number / 1000000)\
    \ + int_to_mini_roman(number % 1000000)\n    else if number < 1000000000 \n  \
    \      then return int_to_mini_roman(number / 1000000) + int_to_mini_roman(number\
    \ % 1000000) + int_to_mini_roman(number / 1000000000) + int_to_mini_roman(number\
    \ % 1000000000)\n    else if number < 1000000000000 \n        then return int_to_mini_roman(number\
    \ / 1000000000) + int_to_mini_roman(number % 1000000000) + int_to_mini_roman(number\
    \ / 1000000000000) + int_to_mini_roman(number % 1000000000000)\n    else if number\
    \ < 1000000000000000 \n        then return int_to_mini_roman(number / 1000000000000)\
    \ + int_to_mini_roman(number % 1000000000000) + int_to_mini_roman(number / 1000000000000000)\
    \ + int_to_mini_roman(number % 1000000000000000)\n    else if number < 1000000000000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000) + int_to_mini_roman(number / 1000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000)\n    else if number < 1000000000000000000000 \n     \
    \   then return int_to_mini_roman(number / 1000000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000000) + int_to_mini_roman(number / 1000000000000000000000000)\
    \ + int_to_mini_roman(number % 1000000000000000000000000)\n    else if number\
    \ < 10000000000000000000000000 \n        then return int_to_mini_roman(number\
    \ / 10000000000000000000000000) + int_to_mini_roman(number % 10000000000000000000000000)\
    \ + int_to_mini_roman(number / 10000000000000000000000000000) + int_to_mini_roman(number\
    \ % 10000000000000000000000000000)\n    else if number < 10000000000000000000000000000000\
    \ \n        then return int_to_mini_", "    if number < 1 \n        error(\"number\
    \ must be positive\")\n    else if number < 1000 \n        error(\"number too\
    \ small\")\n    else if number > 1000 \n        error(\"number too large\")\n\
    \    else \n        roman_numerals = roman_numerals(number)\n        roman_numerals_string\
    \ = roman_numerals.join(\"\")\n        roman_numerals_string = roman_numerals_string.lower()\n\
    \        return roman_numerals_string\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number == 0 \n        then return \"0\"\n    else if number < 0 \n     \
    \   then return \"-\"\n    else if number < 10 \n        then return \"i\"\n \
    \   else if number < 100 \n        then return \"c\"\n    else if number < 1000\
    \ \n        then return \"x\"\n    else if number < 10000 \n        then return\
    \ \"l\"\n    else if number < 100000 \n        then return \"c\"\n    else if\
    \ number < 1000000 \n        then return \"d\"\n    else if number < 10000000\
    \ \n        then return \"m\"\n    else if number < 100000000 \n        then return\
    \ \"c\"\n    else if number < 1000000000 \n        then return \"d\"\n    else\
    \ if number < 10000000000 \n        then return \"m\"\n    else if number < 100000000000\
    \ \n        then return \"b\"\n    else if number < 1000000000000 \n        then\
    \ return \"m\"\n    else if number < 10000000000000 \n        then return \"b\"\
    \n    else if number < 100000000000000 \n        then return \"m\"\n    else if\
    \ number < 1000000000000000 \n        then return \"b\"\n    else if number <\
    \ 10000000000000000 \n        then return \"m\"\n    else if number < 100000000000000000\
    \ \n        then return \"b\"\n    else if number < 1000000000000000000 \n   \
    \     then return \"m\"\n    else if number < 10000000000000000000 \n        then\
    \ return \"b\"\n    else if number < 100000000000000000000 \n        then return\
    \ \"m\"\n    else if number < 1000000000000000000000 \n        then return \"\
    b\"\n    else if number < 10000000000000000000000 \n        then return \"m\"\n\
    \    else if number < 100000000000000000000000 \n        then return \"b\"\n \
    \   else if number < 1000000000000000000000000 \n        then return \"m\"\n \
    \   else if number < 10000000000000000000000000 \n        then return \"b\"\n\
    \    else if number < 100000000000000000000000000 \n        then return \"m\"\n\
    \    else if number < 1000000000000000000000000000 \n        then return \"b\"\
    \n    else if number < 10000000000000000000000000000 \n        then return \"\
    m\"\n    else if number < 100000000000000000000000000000 \n        then return\
    \ \"b\"\n    else if number < 1000000000000000000000000000000 \n        then return\
    \ \"m\"\n    else if number < 10000000000000000000000000000000 \n        then\
    \ return \"b\"\n    else if number < 100000000000000000000000000000000 \n    \
    \    then return ", "    if number < 1 \n        error(\"Invalid input: number\
    \ must be positive\")\n    else if number == 1 \n        return \"I\"\n    else\
    \ if number == 2 \n        return \"II\"\n    else if number == 3 \n        return\
    \ \"III\"\n    else if number == 4 \n        return \"IV\"\n    else if number\
    \ == 5 \n        return \"V\"\n    else if number == 6 \n        return \"VI\"\
    \n    else if number == 7 \n        return \"VII\"\n    else if number == 8 \n\
    \        return \"VIII\"\n    else if number == 9 \n        return \"IX\"\n  \
    \  else if number == 10 \n        return \"X\"\n    else if number == 11 \n  \
    \      return \"XI\"\n    else if number == 12 \n        return \"XII\"\n    else\
    \ if number == 13 \n        return \"XIII\"\n    else if number == 14 \n     \
    \   return \"XIV\"\n    else if number == 15 \n        return \"XV\"\n    else\
    \ if number == 16 \n        return \"XVI\"\n    else if number == 17 \n      \
    \  return \"XVII\"\n    else if number == 18 \n        return \"XVIII\"\n    else\
    \ if number == 19 \n        return \"XIX\"\n    else if number == 20 \n      \
    \  return \"XX\"\n    else if number == 21 \n        return \"XXI\"\n    else\
    \ if number == 22 \n        return \"XXII\"\n    else if number == 23 \n     \
    \   return \"XXIII\"\n    else if number == 24 \n        return \"XXIV\"\n   \
    \ else if number == 25 \n        return \"XXV\"\n    else if number == 26 \n \
    \       return \"XXVI\"\n    else if number == 27 \n        return \"XXVII\"\n\
    \    else if number == 28 \n        return \"XXVIII\"\n    else if number == 29\
    \ \n        return \"XXIX\"\n    else if number == 30 \n        return \"XXX\"\
    \n    else if number == 31 \n        return \"XXXI\"\n    else if number == 32\
    \ \n        return \"XXXII\"\n    else if number == 33 \n        return \"XXXIII\"\
    \n    else if number == 34 \n        return \"XXXIV\"\n    else if number == 35\
    \ \n        return \"XXXV\"\n    else if number == 36 \n        return \"XXXVI\"\
    \n    else if number == 37 \n        return \"XXXVII\"\n    else if number ==\
    \ 38 \n        return \"XXXVIII\"\n    else if number == 39 \n        return \"\
    XXXIX\"\n    else if number == 40 \n        return \"XL\"\n    else if number\
    \ == 41 \n", "    if number < 1 || number > 1000 \n        error(\"Number must\
    \ be between 1 and 1000\")\n    end\n    roman_numerals = Dict(\"I\" => \"i\"\
    , \"V\" => \"v\", \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\")\n    roman_numerals_reverse = roman_numerals_reverse.reverse\n   \
    \ roman_numerals_reverse = roman_numerals_reverse.keys\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse\n    roman_numerals_reverse = roman_numerals_reverse.keys\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys\n    roman_numerals_reverse = roman_numerals_reverse.reverse\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse\n    roman_numerals_reverse = roman_numerals_reverse.keys\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys\n    roman_numerals_reverse = roman_numerals_reverse.reverse\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse\n    roman_numerals_reverse = roman_numerals_reverse.keys\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys\n    roman_numerals_reverse = roman_numerals_reverse.reverse\n\
    \    roman_numerals_reverse = roman_numerals_reverse.keys\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse\n    roman_numerals_reverse = roman_numerals_reverse.keys\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.keys\n    roman_numerals_reverse = roman_numerals_reverse.reverse\n\
    \    roman_numerals_reverse = roman_numerals_", "    if number < 1 \n        error(\"\
    The number must be positive\")\n    else if number < 1000 \n        return roman_to_mini_roman(number)\n\
    \    else \n        error(\"The number must be less than 1000\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000\n        error(\"\
    Invalid input\")\n    end\n    roman = romans[number]\n    roman = roman.substring(1,roman.length)\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given\
    \ a positive integer, obtain its roman numeral equivalent as a string,\n    and\
    \ return it in uppercase.\n    Restrictions: 1 <= num <= 1000", "    roman = roman_to_int(number)\n\
    \    roman = roman.to_string()\n    roman = roman.chars()\n    roman = roman.map(&:to_lowercase)\n\
    \    roman = roman.join()\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"M\", \"CM\", \"D\", \"CD\", \"C\",\
    \ \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = [\"M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\"\
    , \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    for n in roman_numerals\n\
    \        if number >= n\n            roman = roman.(roman_numerals_reverse[n])\n\
    \            number = number - n\n        end\n    end\n    return roman\nend\n\
    </cell>\n<code language=julia-1.5>", "    if number == 0 \n        then return\
    \ \"0\"\n    else if number < 0 \n        then return \"-\"\n    else if number\
    \ < 1000 \n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 1000000 \n        then return int_to_mini_roman(number/1000)\
    \ + int_to_mini_roman(number%1000) + \"k\"\n    else if number < 1000000000 \n\
    \        then return int_to_mini_roman(number/1000000) + int_to_mini_roman(number%1000000)\
    \ + \"M\"\n    else if number < 1000000000000 \n        then return int_to_mini_roman(number/1000000000)\
    \ + int_to_mini_roman(number%1000000000) + \"B\"\n    else if number < 1000000000000000\
    \ \n        then return int_to_mini_roman(number/1000000000000) + int_to_mini_roman(number%1000000000000)\
    \ + \"T\"\n    else if number < 1000000000000000000 \n        then return int_to_mini_roman(number/1000000000000000)\
    \ + int_to_mini_roman(number%1000000000000000) + \"P\"\n    else if number < 1000000000000000000000\
    \ \n        then return int_to_mini_roman(number/100000000000000000000) + int_to_mini_roman(number%100000000000000000000)\
    \ + \"E\"\n    else if number < 100000000000000000000000 \n        then return\
    \ int_to_mini_roman(number/100000000000000000000000) + int_to_mini_roman(number%100000000000000000000000)\
    \ + \"Z\"\n    else if number < 1000000000000000000000000000 \n        then return\
    \ int_to_mini_roman(number/10000000000000000000000000000) + int_to_mini_roman(number%10000000000000000000000000000)\
    \ + \"Y\"\n    else if number < 10000000000000000000000000000000 \n        then\
    \ return int_to_mini_roman(number/10000000000000000000000000000000) + int_to_mini_roman(number%10000000000000000000000000000000)\
    \ + \"X\"\n    else if number < 1000000000000000000000000000000000 \n        then\
    \ return int_to_mini_roman(number/100000000000000000000000000000000) + int_to_mini_roman(number%100000000000000000000000000000000)\
    \ + \"W\"\n    else if number < 1000000000000000000000000000000000\n        then\
    \ return int_to_mini_roman(number/1000000000000000000000000000000000) + int_to_mini_roman(number%1000000000000000000000000000000000)\
    \ + \"V\"\n", "    if number < 1 \n        error(\"Invalid input: number must\
    \ be positive\")\n    else if number < 1000 \n        return mini_roman_to_int(mini_roman_to_str(number))\n\
    \    else \n        error(\"Invalid input: number too large\")\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain its roman\
    \ numeral equivalent as a string,\n    and return it in uppercase.\n    Restrictions:\
    \ 1 <= num <= 1000", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input: number must be between 1 and 1000\")\n    else \n        roman = roman_numeral(number)\n\
    \        return roman.lower()\nend\n</cell>\n<text>\nProblem 7\nWrite a Julia\
    \ function that takes a positive integer and returns the number of digits in it.",
  "    roman = roman_numeral(number)\n    roman = roman.lower()\n    return roman\n\
    end\n</cell>\n<code language=julia-1.5>", "    roman = roman_to_int()\n    roman\
    \ = roman[number]\n    return roman\nend", "    if number < 1 || number > 1000\
    \ \n        error(\"Invalid input\")\n    else \n        roman_numerals = roman_numerals_of(number)\n\
    \        roman_numerals_str = roman_numerals.join(\"\")\n        return roman_numerals_str.lower()\n\
    end\n</cell>\n<code language=julia-1.5>", "    if number < 1 \n        error(\"\
    number must be positive\")\n    else if number == 1 \n        return \"x\"\n \
    \   else if number == 2 \n        return \"x\"\n    else if number == 3 \n   \
    \     return \"l\"\n    else if number == 4 \n        return \"c\"\n    else if\
    \ number == 5 \n        return \"l\"\n    else if number == 6 \n        return\
    \ \"x\"\n    else if number == 7 \n        return \"l\"\n    else if number ==\
    \ 8 \n        return \"c\"\n    else if number == 9 \n        return \"x\"\n \
    \   else if number == 10 \n        return \"l\"\n    else if number == 11 \n \
    \       return \"c\"\n    else if number == 12 \n        return \"x\"\n    else\
    \ if number == 13 \n        return \"l\"\n    else if number == 14 \n        return\
    \ \"c\"\n    else if number == 15 \n        return \"l\"\n    else if number ==\
    \ 16 \n        return \"x\"\n    else if number == 17 \n        return \"l\"\n\
    \    else if number == 18 \n        return \"c\"\n    else if number == 19 \n\
    \        return \"l\"\n    else if number == 20 \n        return \"c\"\n    else\
    \ if number == 21 \n        return \"l\"\n    else if number == 22 \n        return\
    \ \"x\"\n    else if number == 23 \n        return \"l\"\n    else if number ==\
    \ 24 \n        return \"c\"\n    else if number == 25 \n        return \"l\"\n\
    \    else if number == 26 \n        return \"x\"\n    else if number == 27 \n\
    \        return \"l\"\n    else if number == 28 \n        return \"c\"\n    else\
    \ if number == 29 \n        return \"l\"\n    else if number == 30 \n        return\
    \ \"c\"\n    else if number == 31 \n        return \"l\"\n    else if number ==\
    \ 32 \n        return \"x\"\n    else if number == 33 \n        return \"l\"\n\
    \    else if number == 34 \n        return \"c\"\n    else if number == 35 \n\
    \        return \"l\"\n    else if number == 36 \n        return \"x\"\n    else\
    \ if number == 37 \n        return \"l\"\n    else if number == 38 \n        return\
    \ \"c\"\n    else if number == 39 \n        return \"l\"\n    else if number ==\
    \ 40 \n        return \"c\"\n    else if number == 41 \n        return \"l\"\n\
    \    else if number == 42 \n        return \"x\"\n    else if number == 43 \n\
    \        return \"l\"\n    else if number == 44 \n        return \"c\"\n    else\
    \ if number == 45 \n        return \"l\"", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = romans[number]\n    return\
    \ roman\nend", "    if number < 1 || number > 1000\n        error(\"Invalid input\"\
    )\n    end\n    roman_numerals = Dict(\"I\" => \"i\", \"V\" => \"v\", \"X\" =>\
    \ \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"m\", \"M\"\
    \ => \"m\", \"Q\" => \"q\", \"N\" => \"n\", \"D\" => \"d\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\", \"d\" => \"D\", \"m\" => \"M\", \"q\" => \"Q\", \"n\" => \"N\", \"\
    d\" => \"D\")\n    roman_numerals_reverse = Dict(\"I\" => \"i\", \"V\" => \"v\"\
    , \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"\
    m\", \"M\" => \"m\", \"Q\" => \"q\", \"N\" => \"n\", \"D\" => \"d\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\", \"d\" => \"D\", \"m\" => \"M\", \"q\" => \"Q\", \"n\" => \"N\", \"\
    d\" => \"D\")\n    roman_numerals_reverse = Dict(\"I\" => \"i\", \"V\" => \"v\"\
    , \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"\
    m\", \"M\" => \"m\", \"Q\" => \"q\", \"N\" => \"n\", \"D\" => \"d\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\", \"d\" => \"D\", \"m\" => \"M\", \"q\" => \"Q\", \"n\" => \"N\", \"\
    d\" => \"D\")\n    roman_numerals_reverse = Dict(\"I\" => \"i\", \"V\" => \"v\"\
    , \"X\" => \"x\", \"L\" => \"l\", \"C\" => \"c\", \"D\" => \"d\", \"M\" => \"\
    m\", \"M\" => \"m\", \"Q\" => \"q\", \"N\" => \"n\", \"D\" => \"d\")\n    roman_numerals_reverse\
    \ = Dict(\"i\" => \"I\", \"v\" => \"V\", \"x\" => \"X\", \"l\" => \"L\", \"c\"\
    \ => \"C\", \"d\" => \"D\", \"m\" => \"M\", \"q\" => \"Q\", \"n\" => \"N\", \"\
    d\" => \"D\")\n    roman_numerals_", "    roman_numerals = roman_numerals()\n\
    \    roman_numerals_reversed = reverse(roman_numerals)\n    roman_numerals_reversed[1]\
    \ = roman_numerals_reversed[1][1]\n    roman_numerals_reversed[2] = roman_numerals_reversed[2][1]\n\
    \    roman_numerals_reversed[3] = roman_numerals_reversed[3][1]\n    roman_numerals_reversed[4]\
    \ = roman_numerals_reversed[4][1]\n    roman_numerals_reversed[5] = roman_numerals_reversed[5][1]\n\
    \    roman_numerals_reversed[6] = roman_numerals_reversed[6][1]\n    roman_numerals_reversed[7]\
    \ = roman_numerals_reversed[7][1]\n    roman_numerals_reversed[8] = roman_numerals_reversed[8][1]\n\
    \    roman_numerals_reversed[9] = roman_numerals_reversed[9][1]\n    roman_numerals_reversed[10]\
    \ = roman_numerals_reversed[10][1]\n    roman_numerals_reversed[11] = roman_numerals_reversed[11][1]\n\
    \    roman_numerals_reversed[12] = roman_numerals_reversed[12][1]\n    roman_numerals_reversed[13]\
    \ = roman_numerals_reversed[13][1]\n    roman_numerals_reversed[14] = roman_numerals_reversed[14][1]\n\
    \    roman_numerals_reversed[15] = roman_numerals_reversed[15][1]\n    roman_numerals_reversed[16]\
    \ = roman_numerals_reversed[16][1]\n    roman_numerals_reversed[17] = roman_numerals_reversed[17][1]\n\
    \    roman_numerals_reversed[18] = roman_numerals_reversed[18][1]\n    roman_numerals_reversed[19]\
    \ = roman_numerals_reversed[19][1]\n    roman_numerals_reversed[20] = roman_numerals_reversed[20][1]\n\
    \    roman_numerals_reversed[21] = roman_numerals_reversed[21][1]\n    roman_numerals_reversed[22]\
    \ = roman_numerals_reversed[22][1]\n    roman_numerals_reversed[23] = roman_numerals_reversed[23][1]\n\
    \    roman_numerals_reversed[24] = roman_numerals_reversed[24][1]\n    roman_numerals_reverse",
  "    roman_numerals = roman_numerals_table()\n    roman_numerals_length = length(roman_numerals)\n\
    \    roman_numerals_length = roman_numerals_length - 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numerals_length = roman_numerals_length\
    \ + 1\n    roman_numerals_length = roman_numerals_length + 1\n    roman_numerals_length\
    \ = roman_numerals_length + 1\n    roman_numer", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(|x| x.to_lowercase())\n    roman = roman.map(|x| x.chars.to_a).flatten\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.map(|x| x.chars.to_a)\n\
    \    roman = roman.map(|x| x.chars.to_a)\n    roman = roman.", "    if number\
    \ < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n       \
    \ roman_numerals = roman_numerals(number)\n        roman_numerals = roman_numerals.map(|x|\
    \ x.to_lowercase())\n        roman_numerals = roman_numerals.filter(|x| x != \"\
    \")\n        roman_numerals = roman_numerals.join(\"\")\n        roman_numerals\
    \ = roman_numerals.to_lowercase()\n        return roman_numerals\nend", "    if\
    \ number == 0 \n        then return \"0\"\n    else if number < 0 \n        then\
    \ return \"-\"\n    else if number < 100\n        then return int_to_mini_roman(number\
    \ / 10) + int_to_mini_roman(number % 10)\n    else if number < 500\n        then\
    \ return int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100) + int_to_mini_roman(number\
    \ % 10)\n    else if number < 1000\n        then return int_to_mini_roman(number\
    \ / 1000) + int_to_mini_roman(number % 1000) + int_to_mini_roman(number % 100)\n\
    \    else if number < 5000\n        then return int_to_mini_roman(number / 5000)\
    \ + int_to_mini_roman(number % 5000) + int_to_mini_roman(number % 1000)\n    else\
    \ if number < 10000\n        then return int_to_mini_roman(number / 10000) + int_to_mini_roman(number\
    \ % 10000) + int_to_mini_roman(number % 5000)\n    else if number < 100000\n \
    \       then return int_to_mini_roman(number / 100000) + int_to_mini_roman(number\
    \ % 100000) + int_to_mini_roman(number % 100000)\n    else if number < 1000000\n\
    \        then return int_to_mini_roman(number / 1000000) + int_to_mini_roman(number\
    \ % 1000000) + int_to_mini_roman(number % 100000)\n    else if number < 50000000\n\
    \        then return int_to_mini_roman(number / 50000000) + int_to_mini_roman(number\
    \ % 50000000) + int_to_mini_roman(number % 1000000)\n    else if number < 100000000\n\
    \        then return int_to_mini_roman(number / 100000000) + int_to_mini_roman(number\
    \ % 100000000) + int_to_mini_roman(number % 50000000)\n    else if number < 5000000000\n\
    \        then return int_to_mini_roman(number / 5000000000) + int_to_mini_roman(number\
    \ % 5000000000) + int_to_mini_roman(number % 100000000)\n    else if number <\
    \ 10000000000\n        then return int_to_mini_roman(number / 10000000000) + int_to_mini_roman(number\
    \ % 10000000000) + int_to_mini_roman(number % 5000000000)\n    else if ", "  \
    \  roman = roman_to_int(number)\n    mini_roman = int_to_mini_roman(roman)\n \
    \   return mini_roman\nend\n</cell>\n<code language=julia-1.5>", "    roman =\
    \ roman_numerals(number)\n    roman = roman.map(&lowercase)\n    roman = roman.map(&char(\"\
    0\"))\n    roman = roman.map(&char(\"1\"))\n    roman = roman.map(&char(\"2\"\
    ))\n    roman = roman.map(&char(\"3\"))\n    roman = roman.map(&char(\"4\"))\n\
    \    roman = roman.map(&char(\"5\"))\n    roman = roman.map(&char(\"6\"))\n  \
    \  roman = roman.map(&char(\"7\"))\n    roman = roman.map(&char(\"8\"))\n    roman\
    \ = roman.map(&char(\"9\"))\n    roman = roman.map(&char(\"x\"))\n    roman =\
    \ roman.map(&char(\"v\"))\n    roman = roman.map(&char(\"l\"))\n    roman = roman.map(&char(\"\
    c\"))\n    roman = roman.map(&char(\"d\"))\n    roman = roman.map(&char(\"m\"\
    ))\n    roman = roman.map(&char(\"n\"))\n    roman = roman.map(&char(\"d\"))\n\
    \    roman = roman.map(&char(\"x\"))\n    roman = roman.map(&char(\"i\"))\n  \
    \  roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"))\n    roman\
    \ = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"))\n    roman =\
    \ roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"\
    i\"))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"\
    ))\n    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"))\n\
    \    roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"))\n  \
    \  roman = roman.map(&char(\"i\"))\n    roman = roman.map(&char(\"i\"))", "  \
    \  if number < 1 || number > 1000\n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    end\n    roman = romans[number]\n    roman = roman.substring(1,roman.length)\n\
    \    return roman\nend", "    if number < 1 || number > 1000 \n        error(\"\
    Invalid input\")\n    else \n        roman = roman_numeral(number)\n        roman\
    \ = roman.lower()\n        return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"number must be between 1 and\
    \ 1000\")\n    elseif number == 1 \n        return \"x\"\n    elseif number ==\
    \ 2 \n        return \"ix\"\n    elseif number == 3 \n        return \"xii\"\n\
    \    elseif number == 4 \n        return \"vi\"\n    elseif number == 5 \n   \
    \     return \"vii\"\n    elseif number == 6 \n        return \"ix\"\n    elseif\
    \ number == 7 \n        return \"xii\"\n    elseif number == 8 \n        return\
    \ \"ix\"\n    elseif number == 9 \n        return \"xii\"\n    elseif number ==\
    \ 10 \n        return \"xii\"\n    elseif number == 11 \n        return \"xii\"\
    \n    elseif number == 12 \n        return \"xii\"\n    elseif number == 13 \n\
    \        return \"xii\"\n    elseif number == 14 \n        return \"xii\"\n  \
    \  elseif number == 15 \n        return \"vi\"\n    elseif number == 16 \n   \
    \     return \"vii\"\n    elseif number == 17 \n        return \"viii\"\n    elseif\
    \ number == 18 \n        return \"ix\"\n    elseif number == 19 \n        return\
    \ \"xix\"\n    elseif number == 20 \n        return \"xx\"\n    elseif number\
    \ == 21 \n        return \"xxi\"\n    elseif number == 22 \n        return \"\
    xxii\"\n    elseif number == 23 \n        return \"xxiii\"\n    elseif number\
    \ == 24 \n        return \"xxiv\"\n    elseif number == 25 \n        return \"\
    xxv\"\n    elseif number == 26 \n        return \"xxvi\"\n    elseif number ==\
    \ 27 \n        return \"xxvii\"\n    elseif number == 28 \n        return \"xxviii\"\
    \n    elseif number == 29 \n        return \"xxix\"\n    elseif number == 30 \n\
    \        return \"xxi\"\n    elseif number == 31 \n        return \"xxii\"\n \
    \   elseif number == 32 \n        return \"xxiii\"\n    elseif number == 33 \n\
    \        return \"xxiv\"\n    elseif number == 34 \n        return \"xxv\"\n \
    \   elseif number == 35 \n        return \"xxvi\"\n    elseif number == 36 \n\
    \        return \"xxvii\"\n    elseif number == 37 \n        return \"xxviii\"\
    \n    elseif number == 38 \n        return \"xxix\"\n    elseif number == 39 \n\
    \        return \"xxi\"\n    elseif number == 40 \n        return \"xxii\"\n \
    \   elseif number == 41 \n        return \"xxiii\"\n    elseif number == 42 \n\
    \        return \"xxiv\"\n    elseif number == 43 \n        return \"xxv\"\n \
    \   elseif number == 44 \n        return \"xxvi\"\n    elseif number == 45 \n",
  "    if number < 1 \n        error(\"number must be positive\")\n    else if number\
    \ > 1000 \n        error(\"number must be less than 1000\")\n    else if number\
    \ == 1 \n        return \"x\"\n    else \n        roman = roman_numeral(number)\n\
    \        roman = roman.substring(1,roman.length)\n        return roman\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive integer, obtain\
    \ its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000\n  \
    \      error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&lowercase)\n    return roman.join(\"\")\nend\n</cell>\n\
    <code language=julia-1.5>", "    if number < 1 || number > 1000 \n        error(\"\
    number must be between 1 and 1000\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman[end]\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\"\", \"c\", \"l\", \"x\", \"i\"]\n \
    \   roman_numerals_reversed = [\"\", \"x\", \"i\", \"l\", \"c\"]\n    roman_numerals_reversed[1]\
    \ = roman_numerals[1]\n    roman_numerals_reversed[2] = roman_numerals[2]\n  \
    \  roman_numerals_reversed[3] = roman_numerals[3]\n    roman_numerals_reversed[4]\
    \ = roman_numerals[4]\n    roman_numerals_reversed[5] = roman_numerals[5]\n  \
    \  roman_numerals_reversed[6] = roman_numerals[6]\n    roman_numerals_reversed[7]\
    \ = roman_numerals[7]\n    roman_numerals_reversed[8] = roman_numerals[8]\n  \
    \  roman_numerals_reversed[9] = roman_numerals[9]\n    roman_numerals_reversed[10]\
    \ = roman_numerals[10]\n    roman_numerals_reversed[11] = roman_numerals[11]\n\
    \    roman_numerals_reversed[12] = roman_numerals[12]\n    roman_numerals_reversed[13]\
    \ = roman_numerals[13]\n    roman_numerals_reversed[14] = roman_numerals[14]\n\
    \    roman_numerals_reversed[15] = roman_numerals[15]\n    roman_numerals_reversed[16]\
    \ = roman_numerals[16]\n    roman_numerals_reversed[17] = roman_numerals[17]\n\
    \    roman_numerals_reversed[18] = roman_numerals[18]\n    roman_numerals_reversed[19]\
    \ = roman_numerals[19]\n    roman_numerals_reversed[20] = roman_numerals[20]\n\
    \    roman_numerals_reversed[21] = roman_numerals[21]\n    roman_numerals_reversed[22]\
    \ = roman_numerals[22]\n    roman_numerals_reversed[23] = roman_numerals[23]\n\
    \    roman_numerals_reversed[24] = roman_numerals[24]\n    roman_numerals_reversed[25]\
    \ = roman_numerals[25]\n    roman_numerals_reversed[26] = roman_numerals[26]\n\
    \    roman_numeral", "    if number < 1 || number > 1000 \n        error(\"Invalid\
    \ input\")\n    else \n        roman = roman_numerals(number)\n        roman =\
    \ roman.map(&:to_lowercase)\n        roman = roman.map(&:capitalize)\n       \
    \ roman = roman.join\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = String[]\n    roman[1] = roman[2] = roman[3] = roman[4] = roman[5]\
    \ = roman[6] = roman[7] = roman[8] = roman[9] = roman[10] = roman[11] = roman[12]\
    \ = roman[13] = roman[14] = roman[15] = roman[16] = roman[17] = roman[18] = roman[19]\
    \ = roman[20] = roman[21] = roman[22] = roman[23] = roman[24] = roman[25] = roman[26]\
    \ = roman[27] = roman[28] = roman[29] = roman[30] = roman[31] = roman[32] = roman[33]\
    \ = roman[34] = roman[35] = roman[36] = roman[37] = roman[38] = roman[39] = roman[40]\
    \ = roman[41] = roman[42] = roman[43] = roman[44] = roman[45] = roman[46] = roman[47]\
    \ = roman[48] = roman[49] = roman[50] = roman[51] = roman[52] = roman[53] = roman[54]\
    \ = roman[55] = roman[56] = roman[57] = roman[58] = roman[59] = roman[60] = roman[61]\
    \ = roman[62] = roman[63] = roman[64] = roman[65] = roman[66] = roman[67] = roman[68]\
    \ = roman[69] = roman[70] = roman[71] = roman[72] = roman[73] = roman[74] = roman[75]\
    \ = roman[76] = roman[77] = roman[78] = roman[79] = roman[80] = roman[81] = roman[82]\
    \ = roman[83] = roman[84] = roman[85] = roman[86] = roman[87] = roman[88] = roman[89]\
    \ = roman[90] = roman[91] = roman[92] = roman[93] = roman[94] = roman[95] = roman[96]\
    \ = roman[97] = roman[98] = roman[99] = roman[100] = roman[101] = roman[102] =\
    \ roman[103] = roman[104] = ", "    roman = roman_numerals(number)\n    roman\
    \ = roman.map(|x| x.to_lowercase())\n    roman = roman.join()\n    return roman\n\
    end", "    if number == 0 \n        then return \"0\"\n    else if number < 0\
    \ \n        then return \"-\"\n    else if number < 1000 \n        then return\
    \ int_to_mini_roman(number / 100) + int_to_mini_roman(number % 100)\n    else\
    \ if number < 1000000 \n        then return int_to_mini_roman(number / 1000) +\
    \ int_to_mini_roman(number % 1000) + int_to_mini_roman(number / 1000000) + int_to_mini_roman(number\
    \ % 1000000)\n    else if number < 1000000000 \n        then return int_to_mini_roman(number\
    \ / 1000000) + int_to_mini_roman(number % 1000000) + int_to_mini_roman(number\
    \ / 1000000000) + int_to_mini_roman(number % 1000000000)\n    else if number <\
    \ 1000000000000 \n        then return int_to_mini_roman(number / 1000000000) +\
    \ int_to_mini_roman(number % 1000000000) + int_to_mini_roman(number / 1000000000000)\
    \ + int_to_mini_roman(number % 1000000000000)\n    else if number < 1000000000000000\
    \ \n        then return int_to_mini_roman(number / 1000000000000) + int_to_mini_roman(number\
    \ % 1000000000000) + int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000)\n    else if number < 1000000000000000000 \n        then\
    \ return int_to_mini_roman(number / 1000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000) + int_to_mini_roman(number / 1000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000)\n    else if number < 1000000000000000000000 \n     \
    \   then return int_to_mini_roman(number / 1000000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000000) + int_to_mini_roman(number / 10000000000000000000000)\
    \ + int_to_mini_roman(number % 10000000000000000000000)\n    else if number <\
    \ 10000000000000000000000000 \n        then return int_to_mini_roman(number /\
    \ 1000000000000000000000000) + int_to_mini_roman(number % 1000000000000000000000000)\
    \ + int_to_mini_roman(number / 1000000000000000000000000000) + int_to_mini_roman(number\
    \ % 1000000000000000000000000000)\n    else if number < 1000000000000000000000000000000\
    \ \n        then return int_to_mini_roman(", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:capitalize)\n    roman = roman.join(\"\")\n    return\
    \ roman\nend\n</cell>\n<code language=julia-1.5>", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman_numerals = [\"\
    M\", \"CM\", \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\"\
    , \"IV\", \"I\"]\n    roman_numerals_reverse = [\"M\", \"CM\", \"D\", \"CD\",\
    \ \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"]\n    roman_numerals_reverse\
    \ = roman_numerals[0..(length(roman_numerals) - 1)]\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numerals_reverse.reverse()\n    roman_numerals_reverse\
    \ = roman_numerals_reverse.reverse()\n    roman_numerals_reverse = roman_numerals_reverse.reverse()\n\
    \    roman_numerals_reverse = roman_numer", "    if number < 1 || number > 1000\n\
    \        error(\"Invalid input\")\n    end\n    roman = String[]\n    roman[1]\
    \ = roman[2] = roman[3] = roman[4] = roman[5] = roman[6] = roman[7] = roman[8]\
    \ = roman[9] = roman[10] = roman[11] = roman[12] = roman[13] = roman[14] = roman[15]\
    \ = roman[16] = roman[17] = roman[18] = roman[19] = roman[20] = roman[21] = roman[22]\
    \ = roman[23] = roman[24] = roman[25] = roman[26] = roman[27] = roman[28] = roman[29]\
    \ = roman[30] = roman[31] = roman[32] = roman[33] = roman[34] = roman[35] = roman[36]\
    \ = roman[37] = roman[38] = roman[39] = roman[40] = roman[41] = roman[42] = roman[43]\
    \ = roman[44] = roman[45] = roman[46] = roman[47] = roman[48] = roman[49] = roman[50]\
    \ = roman[51] = roman[52] = roman[53] = roman[54] = roman[55] = roman[56] = roman[57]\
    \ = roman[58] = roman[59] = roman[60] = roman[61] = roman[62] = roman[63] = roman[64]\
    \ = roman[65] = roman[66] = roman[67] = roman[68] = roman[69] = roman[70] = roman[71]\
    \ = roman[72] = roman[73] = roman[74] = roman[75] = roman[76] = roman[77] = roman[78]\
    \ = roman[79] = roman[80] = roman[81] = roman[82] = roman[83] = roman[84] = roman[85]\
    \ = roman[86] = roman[87] = roman[88] = roman[89] = roman[90] = roman[91] = roman[92]\
    \ = roman[93] = roman[94] = roman[95] = roman[96] = roman[97] = roman[98] = roman[99]\
    \ = roman[100] = roman[101] = roman[102] = roman[103] = roman[104] = ", "    if\
    \ number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else \n\
    \        roman_nums = roman_numerals(number)\n        roman_nums = roman_nums[0..(length(roman_nums)-1)]\n\
    \        roman_nums = join(roman_nums, \"\")\n        return lower(roman_nums)\n\
    end\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    Given a positive integer,\
    \ obtain its roman numeral equivalent as a string,\n    and return it in uppercase.\n\
    \    Restrictions: 1 <= num <= 1000", "    if number < 1 || number > 1000 \n \
    \       error(\"Invalid input\")\n    end\n    roman_numerals = [\"M\", \"CM\"\
    , \"D\", \"CD\", \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"\
    I\"]\n    roman_numerals_reversed = roman_numerals[0..(length(roman_numerals)\
    \ - 2)]\n    roman_numerals_reversed[1] = roman_numerals_reversed[1] * 10\n  \
    \  roman_numerals_reversed[2] = roman_numerals_reversed[2] * 10\n    roman_numerals_reversed[3]\
    \ = roman_numerals_reversed[3] * 10\n    roman_numerals_reversed[4] = roman_numerals_reversed[4]\
    \ * 10\n    roman_numerals_reversed[5] = roman_numerals_reversed[5] * 10\n   \
    \ roman_numerals_reversed[6] = roman_numerals_reversed[6] * 10\n    roman_numerals_reversed[7]\
    \ = roman_numerals_reversed[7] * 10\n    roman_numerals_reversed[8] = roman_numerals_reversed[8]\
    \ * 10\n    roman_numerals_reversed[9] = roman_numerals_reversed[9] * 10\n   \
    \ roman_numerals_reversed[10] = roman_numerals_reversed[10] * 10\n    roman_numerals_reversed[11]\
    \ = roman_numerals_reversed[11] * 10\n    roman_numerals_reversed[12] = roman_numerals_reversed[12]\
    \ * 10\n    roman_numerals_reversed[13] = roman_numerals_reversed[13] * 10\n \
    \   roman_numerals_reversed[14] = roman_numerals_reversed[14] * 10\n    roman_numerals_reversed[15]\
    \ = roman_numerals_reversed[15] * 10\n    roman_numerals_reversed[16] = roman_numerals_reversed[16]\
    \ * 10\n    roman_numerals_reversed[17] = roman_numerals_reversed[17] * 10\n \
    \   roman_numerals_reversed[18] = roman_numerals_reversed[18] * 10\n    roman_numerals_reversed[19]\
    \ = roman_numerals_reversed[19] * 10\n    roman_numerals_reversed[20] = roman_numerals_reversed[20]\
    \ * 10\n    roman_numerals_reversed[21] = roman_numerals_reversed[21] * 10", " \
    \   if number < 1 || number > 1000 \n        error(\"Invalid input: number must\
    \ be between 1 and 1000\")\n    elseif number == 1 \n        return \"x\"\n  \
    \  elseif number == 2 \n        return \"ix\"\n    elseif number == 3 \n     \
    \   return \"xii\"\n    elseif number == 4 \n        return \"vi\"\n    elseif\
    \ number == 5 \n        return \"vii\"\n    elseif number == 6 \n        return\
    \ \"ix\"\n    elseif number == 7 \n        return \"xii\"\n    elseif number ==\
    \ 8 \n        return \"ix\"\n    elseif number == 9 \n        return \"xii\"\n\
    \    elseif number == 10 \n        return \"xii\"\n    elseif number == 11 \n\
    \        return \"xii\"\n    elseif number == 12 \n        return \"xii\"\n  \
    \  elseif number == 13 \n        return \"xii\"\n    elseif number == 14 \n  \
    \      return \"xii\"\n    elseif number == 15 \n        return \"vi\"\n    elseif\
    \ number == 16 \n        return \"vii\"\n    elseif number == 17 \n        return\
    \ \"vi\"\n    elseif number == 18 \n        return \"vii\"\n    elseif number\
    \ == 19 \n        return \"vi\"\n    elseif number == 20 \n        return \"vii\"\
    \n    elseif number == 21 \n        return \"vi\"\n    elseif number == 22 \n\
    \        return \"vii\"\n    elseif number == 23 \n        return \"vi\"\n   \
    \ elseif number == 24 \n        return \"vii\"\n    elseif number == 25 \n   \
    \     return \"vi\"\n    elseif number == 26 \n        return \"vii\"\n    elseif\
    \ number == 27 \n        return \"vi\"\n    elseif number == 28 \n        return\
    \ \"vii\"\n    elseif number == 29 \n        return \"vi\"\n    elseif number\
    \ == 30 \n        return \"vii\"\n    elseif number == 31 \n        return \"\
    vi\"\n    elseif number == 32 \n        return \"vii\"\n    elseif number == 33\
    \ \n        return \"vi\"\n    elseif number == 34 \n        return \"vii\"\n\
    \    elseif number == 35 \n        return \"vi\"\n    elseif number == 36 \n \
    \       return \"vii\"\n    elseif number == 37 \n        return \"vi\"\n    elseif\
    \ number == 38 \n        return \"vii\"\n    elseif number == 39 \n        return\
    \ \"vi\"\n    elseif number == 40 \n        return \"vii\"\n    elseif number\
    \ == 41 \n        return \"vi\"\n    elseif number == 42 \n        return \"vii\"\
    \n    elseif number == 43 \n        return \"vi\"\n    elseif number == 44 \n\
    \        return \"vii\"\n    elseif number == 45 \n        return \"vi\"\n   \
    \ elseif number == 46 \n        return \"vii\"\n", "    if number == 0 \n    \
    \    then return \"0\"\n    else if number < 0 \n        then return \"-\"\n \
    \   else if number < 100\n        then return int_to_mini_roman(number/10) + int_to_mini_roman(number%10)\n\
    \    else if number < 500\n        then return int_to_mini_roman(number/100) +\
    \ int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else if number\
    \ < 1000\n        then return int_to_mini_roman(number/1000) + int_to_mini_roman(number%1000)\
    \ + int_to_mini_roman(number%100) + int_to_mini_roman(number%10)\n    else return\
    \ \"Error\"\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    Given a positive\
    \ integer, obtain its roman numeral equivalent as a string,\n    and return it\
    \ in uppercase.\n    Restrictions: 1 <= num <= 1000", "    if number < 1 || number\
    \ > 1000\n        error(\"Invalid input\")\n    end\n    roman = roman_numerals(number)\n\
    \    roman = roman.map(&:first)\n    roman = roman.map(&:capitalize)\n    roman\
    \ = roman.join\n    return roman\nend\n</cell>\n<code language=julia-1.5>", " \
    \   if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_numeral(number)\n        roman = roman.lower()\n   \
    \     return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number <\
    \ 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman = Int64[]\n\
    \    roman[1] = convert(number/10)\n    roman[2] = convert(number%10)\n    return\
    \ join(roman)\nend", "    roman_numerals = roman_numerals()\n    roman_numerals_map\
    \ = Dict(roman_numerals)\n    roman_numerals_map[\"i\"] = roman_numerals_map[\"\
    I\"]\n    roman_numerals_map[\"v\"] = roman_numerals_map[\"V\"]\n    roman_numerals_map[\"\
    x\"] = roman_numerals_map[\"X\"]\n    roman_numerals_map[\"l\"] = roman_numerals_map[\"\
    L\"]\n    roman_numerals_map[\"c\"] = roman_numerals_map[\"C\"]\n    roman_numerals_map[\"\
    d\"] = roman_numerals_map[\"D\"]\n    roman_numerals_map[\"m\"] = roman_numerals_map[\"\
    M\"]\n    roman_numerals_map[\"n\"] = roman_numerals_map[\"N\"]\n    roman_numerals_map[\"\
    p\"] = roman_numerals_map[\"P\"]\n    roman_numerals_map[\"q\"] = roman_numerals_map[\"\
    Q\"]\n    roman_numerals_map[\"k\"] = roman_numerals_map[\"K\"]\n    roman_numerals_map[\"\
    b\"] = roman_numerals_map[\"B\"]\n    roman_numerals_map[\"m\"] = roman_numerals_map[\"\
    M\"]\n    roman_numerals_map[\"o\"] = roman_numerals_map[\"O\"]\n    roman_numerals_map[\"\
    f\"] = roman_numerals_map[\"F\"]\n    roman_numerals_map[\"v\"] = roman_numerals_map[\"\
    V\"]\n    roman_numerals_map[\"x\"] = roman_numerals_map[\"X\"]\n    roman_numerals_map[\"\
    c\"] = roman_numerals_map[\"C\"]\n    roman_numerals_map[\"d\"] = roman_numerals_map[\"\
    D\"]\n    roman_numerals_map[\"m\"] = roman_numerals_map[\"M\"]\n    roman_numerals_map[\"\
    n\"] = roman_numerals_map[\"N\"]\n    roman_numerals_map[\"p\"] = roman_numerals_map[\"\
    P\"]\n    roman_numerals_map[\"q\"] = roman_numerals_map[\"Q\"]\n    roman_numerals_map[\"\
    k\"] = roman_numerals_map[\"K\"]\n    roman_numerals_", "    if number < 1 ||\
    \ number > 1000 \n        error(\"Invalid input\") \n    else \n        roman\
    \ = roman_numerals(number)\n        roman = roman.map(&:to_lowercase)\n      \
    \  roman = roman.map(&:capitalize)\n        roman = roman.join\n        return\
    \ roman\n    end\nend\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>", "    if number\
    \ < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n    roman =\
    \ roman_numerals(number)\n    roman = roman.map(&:capitalize)\n    roman = roman.map(&:join)\n\
    \    roman = roman.join\n    return roman\nend", "    roman = roman_numerals(number)\n\
    \    roman = roman.map(|x| x.to_lowercase())\n    roman = roman.filter(|x| x !=\
    \ \"\")\n    roman = roman.join()\n    return roman\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000\n        error(\"Invalid input\")\n    end\n\
    \    roman = \"\"\n    roman_numerals = [\n        \"M\", \"CM\", \"D\", \"CD\"\
    , \"C\", \"XC\", \"L\", \"XL\", \"X\", \"IX\", \"V\", \"IV\", \"I\"\n    ]\n \
    \   for roman_numeral in roman_numerals\n        if number >= roman_numeral\n\
    \            roman = roman_numeral + roman\n            number -= roman_numeral\n\
    \        end\n    end\n    return roman\nend\n</cell>\n<code language=julia-1.5>",
  "    if number < 1 || number > 1000 \n        error(\"Number must be between 1 and\
    \ 1000\")\n    else \n        roman = roman_to_int(roman_to_str(int_to_mini_roman(number\
    \ - 1)) + roman_to_str(number))\n        roman = roman_to_str(roman)\n       \
    \ roman = roman_to_lower(roman)\n        return roman\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    Given a positive integer, obtain its roman numeral equivalent as a\
    \ string,\n    and return it in uppercase.\n    Restrictions: 1 <= num <= 1000",
  "    if number < 1 || number > 1000 \n        error(\"Invalid input\")\n    else\
    \ \n        roman = roman_numeral(number)\n        roman = roman.lower()\n   \
    \     return roman\nend\n</cell>\n<code language=julia-1.5>", "    if number ==\
    \ 0 \n        return \"0\"\n    roman = roman_numeral(number)\n    roman = roman.substring(0,roman.length-1)\n\
    \    return roman\nend\n</cell>\n<code language=julia-1.5>"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
