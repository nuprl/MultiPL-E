name: HumanEval_130_tri
language: julia
prompt: "\"\"\"Everyone knows Fibonacci sequence, it was studied deeply by mathematicians\
  \ in \n    the last couple centuries. However, what people don't know is Tribonacci\
  \ sequence.\n    Tribonacci sequence is defined by the recurrence:\n    tri(1) =\
  \ 3\n    tri(n) = 1 + n / 2, if n is even.\n    tri(n) =  tri(n - 1) + tri(n - 2)\
  \ + tri(n + 1), if n is odd.\n    For example:\n    tri(2) = 1 + (2 / 2) = 2\n \
  \   tri(4) = 3\n    tri(3) = tri(2) + tri(1) + tri(4)\n           = 2 + 3 + 3 =\
  \ 8 \n    You are given a non-negative integer number n, you have to a return a\
  \ list of the \n    first n + 1 numbers of the Tribonacci sequence.\n    Examples:\n\
  \    tri(3) = [1, 3, 2, 8]\n    \"\"\"\nfunction tri(n::Int64)::Vector{Int64} \n"
tests: "using Test\n\n@testset begin\n\ncandidate = tri;\n\t@test(candidate(3) ==\
  \ [1, 3, 2, 8])\n\t@test(candidate(4) == [1, 3, 2, 8, 3])\n\t@test(candidate(5)\
  \ == [1, 3, 2, 8, 3, 15])\n\t@test(candidate(6) == [1, 3, 2, 8, 3, 15, 4])\n\t@test(candidate(7)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24])\n\t@test(candidate(8) == [1, 3, 2, 8, 3, 15, 4,\
  \ 24, 5])\n\t@test(candidate(9) == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35])\n\t@test(candidate(20)\
  \ == [1, 3, 2, 8, 3, 15, 4, 24, 5, 35, 6, 48, 7, 63, 8, 80, 9, 99, 10, 120, 11])\n\
  \t@test(candidate(0) == [1])\n\t@test(candidate(1) == [1, 3])\nend\n"
completions: ["    if n == 1 \n        [1]\n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(3)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the factorial of\
    \ a given number. \nExamples:\nfactorial(3) = 6 \nfactorial(5) = 24\nfactorial(7)\
    \ = 5040\nfactorial(9) = 1036050\nfactorial(11) = 121\nfactorial(13) = 479001600\n\
    factorial(15) = 1.8446744e+19\nfactorial(17) = 5.208060e+21\nfactorial(19) = 1.20703e+23\n\
    factorial(21) = 2.613177e+27\nfactorial(23) = 5.208060e+21\nfactorial(25) = 1.20703e+23\n\
    factorial(27) = 2.613177e+27\nfactorial(29) = 5.76e+24\nfactorial(31) = 1.44e+21\n\
    factorial(33) = 2.82e+20\nfactorial(35) = 5.76e+24\nfactorial(37) = 1.44e+21\n\
    factorial(39) = 2.82e+20\nfactorial(41) = 5.76e+24\nfactorial(43) = 1.44e+21\n\
    factorial(45) = 2.82e+20\nfactorial(47) = 5.76e+24\nfactorial(49) = 1.44e+21\n\
    factorial(51) = 2.82e+20\nfactorial(53) = 5.76e+24\nfactorial(55) = 1.44e+21\n\
    factorial(57) = 2.82e+20\nfactorial(59) = 5.76e+24\nfactorial(61) = 1.44e+21\n\
    factorial(63) = 2.82e+20\nfactorial(65) = 5.76e+24\nfactorial(67) = 1.44e+21\n\
    factorial(69) = 2.82e+20\nfactorial(71) = 5.76e+24\nfactorial(73) = 1.44e+21\n\
    factorial(75) = 2.82e+20\nfactorial(77) = 5.76e+24\nfactorial(79) = 1.44e+21\n\
    factorial(81) = 2.82e+20\nfactorial(83) = 5.76e+24\nfactorial(85) = 1.44e+21\n\
    factorial(87) = 2.82e+20\nfactorial(89) = 5.76e+24\nfactorial(91) = 1.44e+21\n\
    factorial(93) = 2.82e+20\nfactorial(95) = 5.76e+24\nfactorial(97) = 1.44e+21\n\
    factori", "    if n == 1 \n        return [1]\n    else if n == 2 \n        return\
    \ [1, 2]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive implementation\
    \ of Fibonacci sequence\n    \n    Arguments:\n    \n    - `n`: non-negative integer\n\
    \    \n    Returns:\n    \n    - `Vector{Int64}`\n    \n    Examples:\n    \n\
    \    fib(1) = [1]\n    fib(2) = [1, 1]\n    fib(3) = [1, 1, 2]\n    \n    fib(0)\
    \ = []\n    fib(-1) = []\n    fib(-2) = []\n    \"\"\"", "    if n == 1 \n   \
    \     return [1]\n    else if n == 2 \n        return [1, 1]\n    else if n %\
    \ 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n  \
    \      return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) +\
    \ tri(n - 5) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   fib(n::Int64)", "    if n == 1 \n        return [1]\n    elseif n == 2 \n\
    \        return [1, 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n\
    \ + 1) + tri(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    fib(n::Int64)::Int64", "    if n == 1 \n        return [1]\n    else if n\
    \ == 2 \n        return [1, 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the\
    \ n-th number of the Fibonacci sequence. \nThe Fibonacci sequence is defined by\
    \ the recurrence:\nfibonacci(1) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nFor example:\nfibonacci(2) = 1\nfibonacci(3) = fibonacci(2)\
    \ + fibonacci(1)\n           = 1 + 1 + 1\nfibonacci(4) = fibonacci(3) + fibonacci(2)\
    \ + fibonacci(1)\n           = 1 + 1 + 1 + 2\nfibonacci(5) = fibonacci(4) + fibonacci(3)\
    \ + fibonacci(2) + fibonacci(1)\n           = 1 + 1 + 1 + 2 + 3\nfibonacci(6)\
    \ = fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n\
    \           = 1 + 1 + 1 + 2 + 3 + 5\nfibonacci(7) = fibonacci(6) + fibonacci(5)\
    \ + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1\
    \ + 1 + 1 + 2 + 3 + 5 + 8\nfibonacci(8) = fibonacci(7) + fibonacci(6) + fibonacci(5)\
    \ + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = 1\
    \ + 1 + 1 + 2 + 3 + 5 + 8 + 13\nfibonacci(9) = fibonacci(8) + fibonacci(7) + fibonacci(6)\
    \ + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1)\n\
    \           = 1 + 1 + 1 + 2 + 3 + 5 + 8 + 13 + 21\nfibonacci(10) = fibonacci(9)\
    \ + fibonacci(8) + fi", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers in the Fibonacci sequence up to n.", "    if n == 1 \n\
    \        Vector{Int64}([3])\n    elseif n == 2 \n        Vector{Int64}([1,2])\n\
    \    elseif n % 2 == 0 \n        Vector{Int64}([tri(n - 1) + tri(n - 2), tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)])\n    else\n        Vector{Int64}([tri(n - 1)\
    \ + tri(n - 2), tri(n - 1) + tri(n - 2) + tri(n + 1), tri(n - 1) + tri(n - 2)\
    \ + tri(n + 2)])\n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n \
    \   fib(n)\n    \n    Recursive function that returns the nth number of the Fibonacci\
    \ sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2),\
    \ if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), if n is odd.\n \
    \   \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n+1) + fib(n+2), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1)\
    \ + fib(n+2) + fib(n+3), if n is odd.\n    \"\"\"", "    if n == 0 \n        return\
    \ Vector{Int64}()\n    else if n == 1 \n        return Vector{Int64}(3)\n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Calculates\
    \ the nth number of the Fibonacci sequence\n    \n    Arguments:\n    \n    -\
    \ `n::Int64`: number of the Fibonacci sequence to calculate\n    \n    Returns:\n\
    \    \n    - `Vector{Int64}`: nth number of the Fibonacci sequence\n    \n   \
    \ Examples:\n    \n    ```julia\n    julia> fib(3)\n    8\n    ```\n\"\"\"", " \
    \   if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that calculates the sum of all numbers from\
    \ 1 to n that are divisible by 3\nand 5 using recursion.", "    if n == 0 \n \
    \       Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) \n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Recursive Fibonacci function\n    \n    Arguments:\n    \n    n - an\
    \ integer\n    \n    Returns:\n    \n    Fibonacci number - an integer\n    \n\
    \    Examples:\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    \n \
    \   fib(n) = fib(n-1) + fib(n-2) \n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n  \
    \  \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6)\
    \ + ... + fib(n-n)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6) + ... + fib(n-n)\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n    \n    fib(n)\
    \ = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n\
    \    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6)\
    \ + ... + fib(n-n)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6) + ... + fib(n-n)\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n    \n    fib(n)\
    \ = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + ... + fib(n-n)\n\
    \    \n    fib(n) = fib(n-1) + fib", "    if n == 1 \n        return [1]\n   \
    \ else if n == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n ==\
    \ 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n-1) + tri(n-2)\n\
    \    else\n        return tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\n\
    end\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n    Recursive\
    \ function that returns the nth number of the Fibonacci sequence. \n    \n   \
    \ fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\
    \    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1) +\
    \ fib(n-2) + fib(n+1) + fib(n+2), if n is odd.\n    \"\"\"", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64",
  "    if n == 0 \n        return Vector{Int64}()\n    else if n == 1 \n        return\
    \ Vector{Int64}(3)\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function that returns the nth number of the Fibonacci sequence.\
    \ \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if\
    \ n is odd.\n    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is odd.\n    \"\"\"", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 1]\n    else \n        tri_1 =\
    \ tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 2) + tri(n - 1)\n        tri_3\
    \ = tri(n - 1) + tri(n - 2) + tri(n - 3)\n        tri_4 = tri(n - 1) + tri(n -\
    \ 2) + tri(n - 3) + tri(n - 4)\n        tri_5 = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5)\n        tri_6 = tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6)\n        tri_7 = tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7)\n    \
    \    tri_8 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) + tri(n - 5) +\
    \ tri(n - 6) + tri(n - 7) + tri(n - 8)\n        tri_9 = tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\
    \ + tri(n - 9)\n        tri_10 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n\
    \ - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n\
    \ - 10)\n        tri_11 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n - 4) +\
    \ tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10)\
    \ + tri(n - 11)\n        tri_12 = tri(n - 1) + tri(n - 2) + tri(n - 3) + tri(n\
    \ - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n - 9) + tri(n\
    \ - 10) + tri(n - 11) + tri(n - 12)\n        tri_13 = tri(n - 1) + tri(n - 2)\
    \ + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\
    \ + tri(n - 9) + tri(n - 10) + tri(n - 11) + tri(n - 12) + tri(n - 13)\n     \
    \   tri_14 = tri(n - 1) + tri(n - 2) + ", "    if n == 1 \n        return [1]\n\
    \    else if n == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function that returns the nth number of the Fibonacci sequence.\
    \ \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if\
    \ n is even.\n    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n\"\"\"", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a positive integer $n$ and returns\
    \ the $n$th Fibonacci number.", "    if n == 0 \n        Vector{Int64}() \n  \
    \  else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes as input a non-negative integer\
    \ n and returns the nth number of the Fibonacci sequence. \nExamples:\nfib(3)\
    \ = 1\nfib(4) = 1\nfib(5) = 2\nfib(6) = 3\nfib(7) = 5\nfib(8) = 8 \nfib(9) = 2\n\
    fib(10) = 5\nfib(11) = 8\nfib(12) = 13\nfib(13) = 21\nfib(14) = 42\nfib(15) =\
    \ 67\nfib(16) = 109\nfib(17) = 177\nfib(18) = 286\nfib(19) = 369\nfib(20) = 514\n\
    fib(21) = 647\nfib(22) = 828\nfib(23) = 1041\nfib(24) = 1213\nfib(25) = 1441\n\
    fib(26) = 1621\nfib(27) = 1809\nfib(28) = 1987\nfib(29) = 2177\nfib(30) = 2367\n\
    fib(31) = 2557\nfib(32) = 2741\nfib(33) = 2921\nfib(34) = 3109\nfib(35) = 3291\n\
    fib(36) = 3581\nfib(37) = 4181\nfib(38) = 4611\nfib(39) = 4921\nfib(40) = 5211\n\
    fib(41) = 5521\nfib(42) = 5921\nfib(43) = 6311\nfib(44) = 6721\nfib(45) = 7111\n\
    fib(46) = 7621\nfib(47) = 8121\nfib(48) = 8621\nfib(49) = 9221\nfib(50) = 9721\n\
    fib(51) = 10321\nfib(52) = 10821\nfib(53) = 11221\nfib(54) = 11721\nfib(55) =\
    \ 12321\nfib(56) = 12821\nfib(57) = 13421 \nfib(58) = 13921 \nfib(59) = 14521\
    \ \nfib(60) = 15121 \nfib(61) = 15722 \nfib(62) = 16321 \nfib(63) = 16821 \nfib(64)\
    \ = 17421 \nfib(65) = 17921 \nfib(", "    if n == 1 \n        return [1]\n   \
    \ else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end", "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n\
    \        return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n  \
    \  fib(n)\n    \n    Recursive function that returns the nth number of the Fibonacci\
    \ sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2),\
    \ if n is even.\n    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n\"\"\"", "    if n == 0\n        Vector{Int64}()\n\
    \    elseif n == 1\n        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that returns the factorial\
    \ of a given number. \nExamples:\nfactorial(0) = 1\nfactorial(1) = 1\nfactorial(2)\
    \ = 2\nfactorial(3) = 6\nfactorial(4) = 24\nfactorial(5) = 120\nfactorial(6) =\
    \ 720\nfactorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nfactorial(11) = 39916800\nfactorial(12) = 479001600\nfactorial(13)\
    \ = 6227020800\nfactorial(14) = 87178291200\nfactorial(15) = 1307674368000\nfactorial(16)\
    \ = 20922789888000\nfactorial(17) = 355687428096000\nfactorial(18) = 6402373705728000\n\
    factorial(19) = 121645100408832000\nfactorial(20) = 2432902008176640000\nfactorial(21)\
    \ = 51090942171709440000\nfactorial(22) = 1124000727777607680000\nfactorial(23)\
    \ = 25852016738884976640000\nfactorial(24) = 620448401733239439360000\nfactorial(25)\
    \ = 15511210043330985984000000\nfactorial(26) = 403291461126605635584000000\n\
    factorial(27) = 10888869450418352160768000000\nfactorial(28) = 304888344611713860501504640000000\n\
    factorial(29) = 8841761993739701954543616000000\nfactorial(30) = 265252859812191058636308480000000\n\
    factorial(31) = 8222838654177922817725562880000000\nfactorial(32) = 263130836933693530167218012160000000\n\
    factorial(33) = 694065894665699891737878078188480000000\nfactorial(34) = 25862324151989817483806449791679840000000\n\
    factorial(35", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that calculates the n-th Fibonacci\
    \ number using recursion.", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\
    end", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n == 1 \n        tri = [3]\n\
    \    else if n % 2 == 0 \n        tri = tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        tri = tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    \    end\n    return tri\nend\n</cell>\n<code language=julia-1.5>", "    if n\
    \ == 1 \n        Vector{Int64}(1)\n    elseif n == 2 \n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nProblem 7\nWrite a function\
    \ that returns the number of prime numbers less than or equal to n.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend", "    if n == 0 \n        Vector{Int64}() \n  \
    \  else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 1 \n        return [1]\n    elseif n\
    \ == 2 \n        return [1, 1]\n    elseif n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        return tri(n -\
    \ 1) + tri(n + 1) + tri(n - 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive Fibonacci function.\n    \n    Arguments:\n\
    \    \n    - `n` - a positive integer\n    \n    Returns:\n    \n    - The nth\
    \ Fibonacci number\n    \n    Examples:\n    \n    ```julia\n    julia> fib(0)\n\
    \    \n    ```\n    \n    ```julia\n    julia> fib(10)\n    \n    ```\n    \n\
    \    ```julia\n    julia> fib(100)\n    \n    ```\n    \n    ```julia\n    julia>\
    \ fib(1000)\n    \n    ```\n    \n    ```julia\n    julia> fib(10000)\n    \n\
    \    ```\n    \n    ```julia\n    julia> fib(100000)\n    \n    ```\n    \n  \
    \  ```julia\n    julia> fib(1000000)\n    \n    ```\n    \n    ```julia\n    julia>\
    \ fib(10000000)\n    \n    ```\n    \n    ```julia\n    julia> fib(100000000)\n\
    \    \n    ```\n    \n    ```julia\n    julia> fib(1000000000)\n    \n    ```\n\
    \    \n    ```julia\n    julia> fib(10000000000)\n    \n    ```\n    \n    ```julia\n\
    \    julia> fib(100000000000)\n    \n    ```\n    \n    ```julia\n    julia> fib(1000000000000)\n\
    \    \n    ```\n    \n    ```julia\n    julia> fib(10000000000000)\n    \n   \
    \ ```\n    \n    ```julia\n    julia> fib(100000000000000)\n    \n    ```\n  \
    \  \n    ```julia\n    julia> fib(1000000000000000)\n    \n    ```\n    \n   \
    \ ```julia\n    julia> fib(10000000000000000)\n    \n    ```\n    \n    ```julia\n\
    \    julia> fib(100000000000000000)\n    \n    ```\n    \n", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 2]\n    else \n \
    \       tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the first n numbers of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor\
    \ example:\nfibonacci(2) = [1, 1, 2, 3]\nfibonacci(3) = [1, 1, 2, 3, 5, 8, 13]\n\
    You are given a non-negative integer number n, you have to a return a list of\
    \ the first n numbers of the Fibonacci sequence.\nExamples:\nfibonacci(3) = [1,\
    \ 1, 2, 3, 5, 8, 13]\nfibonacci(4) = [1, 1, 2, 3, 5, 8, 13, 21]\nfibonacci(5)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34]\nfibonacci(6) = [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55]\nfibonacci(7) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89]\nfibonacci(8)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144]\nfibonacci(9) = [1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55, 89, 144, 233]\nfibonacci(10) = [1, 1, 2, 3, 5, 8, 13, 21,\
    \ 34, 55, 89, 144, 233, 376]\nfibonacci(11) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 376, 613]\nfibonacci(12) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55,\
    \ 89, 144, 233, 376, 613, 987]\nfibonacci(13) = [1, 1, 2, 3, 5, 8, 13, 21, 34,\
    \ 55, 89, 144, 233, 376, 613, 987, 1593]\nfibonacci(14) = [1, 1, 2, 3, 5, 8, 13,\
    \ 21, 34, 55, 89, 144, 233, 376, 613, 987, 1593, 2584]\nfibonacci(15) = [1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 376, 613, 987, 1593, 2584, 4181]\n\
    fibonacci(16) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 14", "    if n == 1 \n\
    \        return [1]\n    elseif n == 2 \n        return [1, 1]\n    elseif n %\
    \ 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-0.6>\n\"\"\"\n    fib(n::Int64)::Int64",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n\
    \ - 7) + tri(n - 8) + tri(n - 9) + tri(n - 10)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2)\n    \n    Examples:\n    fib(0) = 0\n    fib(1) = 1\n \
    \   fib(2) = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2)\n    \"\"\"",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1)\nend", "    if n == 1 \n        return [1]\n    else if n == 2 \n\
    \        return [1, 2]\n    else \n        tri_1 = tri(n - 1)\n        tri_2 =\
    \ tri(n - 2)\n        tri_3 = tri(n + 1) + tri(n + 2) + tri(n - 1)\n        return\
    \ tri_1 + tri_2 + tri_3\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the sum of the numbers from 1 to n.", "    if n == 1 \n        return\
    \ [1]\n    else if n == 2 \n        return [1, 2]\n    else \n        tri(n-1)\
    \ = tri(n-1) + tri(n-2) + tri(n+1)\n        return tri(n-1) + tri(n-2)\nend\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n)\n    \n    Recursive function\
    \ that returns the nth number of the Fibonacci sequence. \n    \n    fib(0) =\
    \ 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    \n \
    \   Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2),\
    \ if n is even.\n\"\"\"", "    if n == 0\n        return Vector{Int64}()\n   \
    \ elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 1 \n\
    \        tri_vec = [3]\n    else if n % 2 == 0 \n        tri_vec = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        tri_vec = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n - 3)\n    end\n    return tri_vec\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2) + tri(n+1)\
    \ + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive Fibonacci function \n    \n    Arguments:\n    \n    - `n`:\
    \ non-negative integer\n    \n    Returns:\n    \n    - `list`: list of Fibonacci\
    \ numbers, starting from 0\n    \n    Examples:\n    \n    fib(0) = 0\n    fib(1)\
    \ = 1\n    fib(2) = 1\n    \n    fib(3) = [1, 1, 2]\n    \n    fib(n) = fib(n-1)\
    \ + fib(n-2), if n is even\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1),\
    \ if n is odd\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1) + fib(n+2), if\
    \ n is even\n    \n    \"\"\"", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the nth number of the Fibonacci sequence. \nThe\
    \ Fibonacci sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n + 1), if n is odd.\nExamples:\n\
    fibonacci(3) = 3\nfibonacci(4) = 5 \nfibonacci(5) = 8 \nfibonacci(6) = 13\nfibonacci(7)\
    \ = 21\nfibonacci(8) = 34 \nfibonacci(9) = 55 \nfibonacci(10) = 89\nfibonacci(11)\
    \ = 144\nfibonacci(12) = 233\nfibonacci(13) = 377\nfibonacci(14) = 610\nfibonacci(15)\
    \ = 987\nfibonacci(16) = 1597\nfibonacci(17) = 2584\nfibonacci(18) = 4181\nfibonacci(19)\
    \ = 6765\nfibonacci(20) = 10946\nfibonacci(21) = 17711\nfibonacci(22) = 28657\n\
    fibonacci(23) = 46368\nfibonacci(24) = 75025\nfibonacci(25) = 121393\nfibonacci(26)\
    \ = 196418\nfibonacci(27) = 317811\nfibonacci(28) = 514229\nfibonacci(29) = 832040\n\
    fibonacci(30) = 1346269\nfibonacci(31) = 2178309\nfibonacci(32) = 3524578\nfibonacci(33)\
    \ = 5702887\nfibonacci(34) = 9227465\nfibonacci(35) = 14930352\nfibonacci(36)\
    \ = 24157817\nfibonacci(37) = 39", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n Fibonacci numbers. \n    Fibonacci numbers are defined\
    \ as:\n    fibonacci(1) = 1\n    fibonacci(2) = 1\n    fibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2), if n is even.\n    For example:\n    fibonacci(3) =\
    \ [1, 1, 2]\n    Fibonacci numbers are defined by recurrence:\n    fibonacci(1)\
    \ = 1\n    fibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\n\
    \    Examples:\n    fibonacci(3) = [1, 1, 2]\n    \n</text>\n<code language=julia-1.0>",
  "    if n == 1 \n        tri_vec = [1]\n    else \n        tri_vec = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    end\n    return tri_vec\nend", "    if n == 0\
    \ \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that returns the factorial of a given number. \n\
    Examples:\nfactorial(3) = 6 \nfactorial(5) = 24\nfactorial(10) = 5040\nfactorial(13)\
    \ = 10130432\nHint: use recursion.", "    if n == 1\n        [1]\n    elseif n\
    \ == 2\n        [1, 2]\n    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n \
    \       return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"\n    fib(n)\n    \n    Recursive function that returns the nth number of the\
    \ Fibonacci sequence\n    \n    Arguments:\n    n -- an integer\n    \n    Returns:\n\
    \    n th number of the Fibonacci sequence\n    \n    Examples:\n    fib(0) =\
    \ 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(4) = 3\n    \n  \
    \  fib(n) = fib(n-1) + fib(n-2)\n\"\"\"", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else if n % 2 ==\
    \ 0 \n        return tri(n-1) + tri(n-2) \n    else \n        return tri(n-1)\
    \ + tri(n-2) + tri(n+1) + tri(n+2) \nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n    Recursive\
    \ function that returns the nth number of the Fibonacci sequence.\n    \n    fib(0)\
    \ = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    \n\
    \    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n+1) + fib(n+2), if n is odd.\n\"\"\"", "    if n == 0\n        Vector{Int64}()\n\
    \    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the nth number of the Fibonacci\
    \ sequence. \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1)\
    \ = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if\
    \ n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ - 3), if n is odd.\nFor example:\nfibonacci(3) = 3\nfibonacci(4) = 5 \nfibonacci(5)\
    \ = 8 \nYou are given a non-negative integer number n, you have to a return the\
    \ nth number of the Fibonacci sequence.\nExamples:\nfibonacci(3) = 1\nfibonacci(4)\
    \ = 1\nfibonacci(5) = 2\nfibonacci(6) = 3\nfibonacci(7) = 5\nfibonacci(8) = 8\
    \ \nfibonacci(9) = 13\nfibonacci(10) = 21\nfibonacci(11) = 55\nfibonacci(12) =\
    \ 89\nfibonacci(13) = 144\nfibonacci(14) = 233\nfibonacci(15) = 377\nfibonacci(16)\
    \ = 610\nfibonacci(17) = 987\nfibonacci(18) = 1597\nfibonacci(19) = 2584\nfibonacci(20)\
    \ = 4181\nfibonacci(21) = 6765\nfibonacci(22) = 10946\nfibonacci(23) = 17711\n\
    fibonacci(24) = 28657\nfibonacci(25) = 46368\nfibonacci(26) = 75025\nfibonacci(27)\
    \ = 121393\nfibonacci(28) = 196418\nfibonacci(29) = 317811\nfibonacci(30) = 514229\n\
    fibonacci(31) = 832040\nfibonacci(32) = 1346269\nfibonacci(33) = 2178309\nfibonacci(34)\
    \ = 3524578\nfibonacci(35) = 5702887\n", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ return tri(n-1) + tri(n-2) + tri(n+1), \n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nProblem 7\nWrite a Julia function which takes a positive\
    \ integer $n$ and returns the $n$th Fibonacci number.", "    if n == 1 \n    \
    \    return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns\
    \ the sum of all even numbers in a given list.", "    if n == 1 \n        return\
    \ [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8)\nend\n\
    </cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nProblem 3\nWrite\
    \ a function that returns the sum of the squares of the first n positive integers.",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend", "    if n == 1 \n        return [1]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64", " \
    \   if n == 1\n        [1]\n    elseif n == 2\n        [1, 2]\n    else\n    \
    \    tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n    Recursive function that\
    \ returns the nth number of the Fibonacci sequence.\n    \n    fib(0) = 0\n  \
    \  fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    \n    Examples:\n    fib(0)\
    \ = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(4) = 3\n    fib(n)\
    \ = fib(n-1) + fib(n-2)\n    \"\"\"", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>",
  "    if n == 1 \n        [1]\n    elseif n == 2 \n        [3]\n    elseif n % 2\
    \ == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive function that calculates\
    \ Fibonacci number\n    \n    Arguments:\n    \n    - `n`: positive integer\n\
    \    \n    Returns:\n    \n    - Fibonacci number `n`\n    \n    Examples:\n \
    \   \n    ```julia\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    ```\n\"\
    \"\"", "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number. \nExamples:\nfactorial(3) = 6 \nfactorial(5) = 24\nfactorial(10)\
    \ = 5040\nfactorial(13) = 1013120\nfactorial(20) = 2432902008176640000\nfactorial(100)\
    \ = inf\nHint: use recursion.", "    if n == 0\n        Vector{Int64}()\n    elseif\
    \ n == 1\n        Vector{Int64}(3)\n    elseif n % 2 == 0\n        tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<text>\nExercise 2\nWrite a function that returns the factorial of a\
    \ given number. \nExamples:\nfactorial(0) = 1\nfactorial(5) = 5\nfactorial(10)\
    \ = 5040\nHint: use factorial function in Julia Base package.", "    if n == 1\
    \ \n        [1]\n    elseif n == 2 \n        [3]\n    elseif n % 2 == 0 \n   \
    \     tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a positive integer $n$ and returns the\
    \ $n$th Fibonacci number.", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntri(10)\n</cell>\n<text>\nProblem 9\nThe Fibonacci sequence\
    \ is defined by the formula:\nFn = F(n-1) + F(n-2), where F(0) = 0 and F(1) =\
    \ 1. \nWrite a Julia function that returns the nth number of the Fibonacci sequence.\n\
    Examples:\nF(0) = 0\nF(1) = 1\nF(2) = 1\nF(3) = 2\nF(4) = 3\nF(5) = 5\nF(6) =\
    \ 8 \nF(7) = 13\nF(8) = 21\nF(9) = 34\nF(10) = 55\nF(11) = 89\nF(12) = 144\nF(13)\
    \ = 233\nF(14) = 377\nF(15) = 610\nF(16) = 987\nF(17) = 1597\nF(18) = 2584\nF(19)\
    \ = 3979\nF(20) = 6150\nF(21) = 12229\nF(22) = 19341\nF(23) = 31781\nF(24) = 51474\n\
    F(25) = 83201\nF(26) = 134621\nF(27) = 217830\nF(28) = 418331\nF(29) = 676362\n\
    F(30) = 1094633\nF(31) = 1774937\nF(32) = 2584461\nF(33) = 3978697\nF(34) = 6153972\n\
    F(35) = 12230589\nF(36) = 19323921\nF(37) = 31775647\nF(38) = 51422967\nF(39)\
    \ = 83194247\nF(40) = 134626577\nF(41) = 217752335\nF(42) = 418289591\nF(43) =\
    \ 676194881\nF(44) = 1094574171\nF(45) = 1774953567\nF(46) = 2584449591\nF(47)\
    \ = 3978665771\nF(48) = 6153956577\nF(49) = 12230455671\nF(50) = 19323941671\n\
    F(51) = 317753318671\nF(", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n-1) + tri(n-2) + tri(n+1) + 1\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Int64", "    if n == 1 \n        return [1]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Recursive function for calculating Fibonacci number\n    \n    Arguments:\n\
    \    \n    n - an integer, the number for which Fibonacci number will be calculated\n\
    \    \n    Returns:\n    \n    Fibonacci number for n\n    \n    Examples:\n \
    \   \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(n) = fib(n-1) +\
    \ fib(n-2) for n > 2\n    \n    \"\"\"", "    if n == 1 \n        return [1]\n\
    \    else if n == 2 \n        return [1, 1]\n    else if n % 2 == 0 \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that calculates the factorial of a given number. \n\
    Examples:\nfactorial(5) = 5 * 5 * 4 * 3 * 2 = 120\nfactorial(10) = factorial(9)\
    \ * 10 = 9 * 10 * 8 * 7 * 6 * 5 = 5040\nfactorial(100) = factorial(99) * 100 =\
    \ 99 * 98 * 97 * 96 * 95 * 94 * 93 * 92 * 91 * 90 * 89 * 88 * 87 * 86 * 85 * 84\
    \ * 83 * 82 * 81 * 80 * 79 * 78 * 77 * 76 * 75 * 74 * 73 * 72 * 71 * 70 * 69 *\
    \ 68 * 67 * 66 * 65 * 64 * 63 * 62 * 61 * 60 * 59 * 58 * 57 * 56 * 55 * 54 * 53\
    \ * 52 * 51 * 50 * 49 * 48 * 47 * 46 * 45 * 44 * 43 * 42 * 41 * 40 * 39 * 38 *\
    \ 37 * 36 * 35 * 34 * 33 * 32 * 31 * 30 * 29 * 28 * 27 * 26 * 25 * 24 * 23 * 22\
    \ * 21 * 20 * 19 * 18 * 17 * 16 * 15 * 14 * 13 * 12 * 11 * 10 * 9 * 8 * 7 * 6\
    \ * 5 * 4 * 3 * 2 * 1\nSolution\nThe factorial of a number $n$ is defined as:\n\
    $$ n! = n \\times n-1 \\times n-2 \\times ... \\times 1 $$\nThe factorial of a\
    \ number $n$ is defined as:\n$$ n! = n \\times n-1 \\times n-2 \\times ... \\\
    times 1 $$\nThe factorial of a number $n$ is defined as:\n$$ n! = n \\times n-1\
    \ \\times n-2 \\times ... \\times 1 $$\nThe factorial of a number $n$ is defined\
    \ as:\n$$ n! = n \\times n-1 \\times n-2 \\times ... \\times 1 $$\nThe factorial\
    \ of a number $n$ is defined as:\n$$ n! = n \\times n-1 \\times n-2 \\times ...\
    \ \\times 1 $$\nThe factorial of a number $n$ is defined as:\n$$ n! = n \\times ",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n == 2\
    \ \n        return [1, 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)::Int64",
  "    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n \
    \   else\n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri(n + 2)\n        return tri_1 + tri_2 + tri_3\n    end\nend\n\
    </cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that returns the factorial of a given number. \nExamples:\nfactorial(5)\
    \ = 5 * 5 * 4 * 3 * 2 = 120\nfactorial(3) = 3 * 2 * 1 = 6\nfactorial(4) = 24\n\
    factorial(6) = 720\nfactorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) =\
    \ 362880\nfactorial(10) = 3628800 \nfactorial(11) = 39916800\nfactorial(12) =\
    \ 479001600\nfactorial(13) = 6227020800\nfactorial(14) = 87178291200\nfactorial(15)\
    \ = 1307674368000\nfactorial(16) = 20922789888000\nfactorial(17) = 355687428096000\n\
    factorial(18) = 6402373705728000\nfactorial(19) = 121645100408832000\nfactorial(20)\
    \ = 2432902008176640000\nfactorial(21) = 51090942171709440000\nfactorial(22) =\
    \ 1124000727777607680000\nfactorial(23) = 25852016738884976640000\nfactorial(24)\
    \ = 620448401733239439360000\nfactorial(25) = 15511210043330985984000000\nfactorial(26)\
    \ = 403291461126605635584000000\nfactorial(27) = 10888869450418352160768000000\n\
    factorial(28) = 304888344611713860501504000000\nfactorial(29) = 8841761993739701954543616000000\n\
    factorial(30) = 265252859812191058636308480000000\nfactorial(31) = 8222838654177922817725562880000000\n\
    factorial(32) = 263130836933693530167218012160000000\nfactorial(33) = 69406589466563459243774414062500000000\n\
    factorial(34) = 252149039173168730371588410572800000000\nfactorial(35) = 455842504910672534362395876489",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Fibonacci sequence up to\
    \ a number n.", "    if n == 1 \n        return [1]\n    else if n == 2 \n   \
    \     return [1, 1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n) \n    returns the nth number\
    \ in the Fibonacci sequence\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n\
    \    fib(n) = fib(n-1) + fib(n-2)\n    For example:\n    fib(2) = 2\n    fib(3)\
    \ = 3\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2)\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1", "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence. \n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2)\n    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n \
    \   fib(n) = fib(n-1) + fib(n-2)\n\"\"\"", "    if n == 1 \n        Vector{Int64}(1)\n\
    \    elseif n == 2 \n        Vector{Int64}(3)\n    elseif n % 2 == 0 \n      \
    \  tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ntri(10)\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the n-th Fibonacci number.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", " \
    \   if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend",
  "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.5>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that takes in two numbers\
    \ and returns the sum of the squares of the first n numbers of the Fibonacci sequence.\
    \ \nExamples:\nfib(5) = 55\nfib(10) = 144\nfib(15) = 810\nfib(20) = 120\nHint:\
    \ Remember that Fibonacci sequence is defined as:\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2)\nExamples:\nfib(5) = 55\nfib(10) = 144\nfib(15) = 810\n\
    fib(20) = 120\nHint: Remember that Fibonacci sequence is defined as:\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2)\nExamples:\nfib(5) = 55\nfib(10) = 144\n\
    fib(15) = 810\nfib(20) = 120\nHint: Remember that Fibonacci sequence is defined\
    \ as:\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2)\nExamples:\nfib(5) =\
    \ 55\nfib(10) = 144\nfib(15) = 810\nfib(20) = 120\nHint: Remember that Fibonacci\
    \ sequence is defined as:\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2)\n\
    Examples:\nfib(5) = 55\nfib(10) = 144\nfib(15) = 810\nfib(20) = 120\nHint: Remember\
    \ that Fibonacci sequence is defined as:\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2)\nExamples:\nfib(5) = 55\nfib(10) = 144\nfib(15) = 810\nfib(20) = 120\n\
    Hint: Remember that Fibonacci sequence is defined as:\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2)\nExamples:\nfib(5) = 55\nfib(10) = 144\nfib(15) = 810\n\
    fib(20) = 120\nHint: Remember ", "    if n == 0\n        return Vector{Int64}()\n\
    \    else if n == 1\n        return Vector{Int64}(3)\n    else\n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n<text>\n\
    Problem 7\nWrite a function that returns the number of ways to choose k items\
    \ from n items. \nFor example, given n = 5 and k = 3, the function should return\
    \ 7.", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    tri(10)\n</cell>\n<text>\nExercise 3\nWrite a function that returns the first\
    \ n Fibonacci numbers. \n    That is, a function that returns the first n Fibonacci\
    \ numbers. \n    For example, tri(3) should return [1, 2, 3, 8].\n    You have\
    \ to return a list of integers, not a single integer.\n    Examples:\n    tri(3)\
    \ = [1, 2, 3, 8]\n    tri(10) = [1, 1, 2, 3, 5, 8, 13, 21, 34, 55]\n    \"\"\"",
  "    if n == 1 \n        tri_vec = [3]\n    else \n        tri_vec = tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    end\n    return tri_vec\nend\n</cell>\n<code\
    \ language=julia-1.0>\ntri(10)\n</cell>\n<text>\nProblem 7\nWrite a function that\
    \ returns the first n Fibonacci numbers. \n    Fibonacci numbers are defined by\
    \ the recurrence:\n    fibonacci(1) = 1\n    fibonacci(2) = 1\n    fibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\n    For example:\n   \
    \ fibonacci(3) = fibonacci(1) + fibonacci(2) + fibonacci(3)\n               =\
    \ 1 + 1 + 2\n    You are given a non-negative integer number n, you have to a\
    \ return a list of the \n    first n Fibonacci numbers.\n    Examples:\n    fibonacci(3)\
    \ = [1, 1, 2]\n    \"\"\"", "    if n == 0 \n        return Vector{Int64}() \n\
    \    else if n == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n numbers of the Fibonacci sequence \n\
    \    starting from 1.\n    Examples:\n    fib(1) = 1\n    fib(2) = 1\n    fib(3)\
    \ = 2\n    fib(n) = fib(n-1) + fib(n-2), if n > 0\n    For example:\n    fib(1)\
    \ = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ > 0\n    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n   \
    \     tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    tri(10)\n</cell>\n<code language=julia-1.4>\n\"\"\"\n    fib(n)\n    \n    Recursive\
    \ function that calculates nth Fibonacci number\n    \n    Arguments\n    ---------\n\
    \    n : Integer\n        Fibonacci number to calculate\n    \n    Returns\n \
    \   -------\n    Integer\n        Fibonacci number\n    \n    Raises\n    ------\n\
    \    ArgumentError\n        If n is less than 0\n\"\"\"", "    if n == 1 \n  \
    \      return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n   \
    \     tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3 = tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n        return tri_1 + tri_2 + tri_3\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.3>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer $n$ and returns the $n$th Fibonacci number.", "    if\
    \ n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n  \
    \  else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the n-th number of the Fibonacci sequence.\
    \ \nExamples:\nfib(3) = 3\nfib(4) = 5\nfib(5) = 8, etc.\nHint: Use recursion.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the Fibonacci sequence up to n.\nExamples:\nfibonacci(0) = [0,\
    \ 1]\nfibonacci(1) = [0, 1]\nfibonacci(2) = [0, 1, 1]\nfibonacci(3) = [0, 1, 1,\
    \ 2]\nfibonacci(4) = [0, 1, 1, 2, 3, 5]\nfibonacci(5) = [0, 1, 1, 2, 3, 5, 8,\
    \ 13]\nfibonacci(10) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, 144, 233, 377,\
    \ 610, 987, 1597, 2584]\nHint: Use a while loop to keep track of the current number\
    \ in the sequence.", "    if n == 0 \n        Vector{Int64}() \n    else \n  \
    \      tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2), if n is even\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), if n\
    \ is odd\n    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n+1), if n is even\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1)\
    \ + fib(n+2), if n is odd\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1),\
    \ if n is odd\n    \"\"\"", "    if n == 0 \n        return Vector{Int64}() \n\
    \    else if n == 1 \n        return Vector{Int64}(1) \n    else if n % 2 == 0\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4) + tri(n + 2)\
    \ \nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\
    end\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the nth number of the Fibonacci sequence. \nFor\
    \ example, fib(3) = 5.", "    if n == 1 \n        return [1]\n    else if n %\
    \ 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n \
    \   fib(n)\n    \n    Recursive function that returns the nth number of the Fibonacci\
    \ sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2),\
    \ if n is even.\n    \n    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    \n\
    \    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(n) =\
    \ fib(n-1) + fib(n-2), if n is even.\n    \n    fib(0) = 0\n    fib(1) = 1\n \
    \   fib(2) = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n    \n    fib(0) = 0\n    fib(1) = 1\n\
    \    fib(2) = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n    \n    fib(0) = 0\n    fib(1) = 1\n\
    \    fib(2) = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    fib(n)\
    \ = fib(n-1) + fib(n-2), if n is even.\n    \n    fib(0) = 0\n    fib(1) = 1\n\
    \    fib(2) = 1\n    fib(3) = 2\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3) = 2\n    ",
  "    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 2]\n \
    \   elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n \
    \   else\n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n \
    \   end\nend\n</cell>\n<code language=julia-1.5>", "    if n == 0 \n        return\
    \ Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1) \n  \
    \  else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \nend", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>", "    if n\
    \ == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\n\
    \    fib(n)\n    \n    Recursive function that returns the nth number of the Fibonacci\
    \ sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2),\
    \ if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n \
    \   \n    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3)\
    \ = 2\n    fib(4) = 3\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n\
    \ is odd.\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4), if n\
    \ is even.\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5),\
    \ if n is odd.\n    \"\"\"", "    if n == 1 \n        return [1]\n    else if\
    \ n == 2 \n        return [1, 2]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive Fibonacci function.\n  \
    \  \n    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Returns:\n\
    \    \n    - `Int64`: Fibonacci number\n    \n    Examples:\n    \n    ```julia\n\
    \    fib(0)\n    ```\n    \n    ```julia\n    fib(1)\n    ```\n    \n    ```julia\n\
    \    fib(2)\n    ```\n    \n    ```julia\n    fib(3)\n    ```\n    \"\"\"", " \
    \   if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) +\
    \ tri(n - 4)\nend", "    if n == 1 \n        return [1]\n    else if n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that calculates the n-th Fibonacci number.", "    if n ==\
    \ 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    fib(n::Int64)::Int64", "    if n == 1 \n        return [1]\n    elseif n\
    \ == 2 \n        return [1, 2]\n    elseif n % 2 == 0 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        return tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n\
    \ == 2 \n        return [1, 1]\n    else \n        tri(n-1) = tri(n-1) + tri(n-2)\
    \ + tri(n+2)\n        return tri(n-1) + tri(n-2)\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive Fibonacci function.\n    \n    Arguments:\n\
    \    \n    - `n`: An integer greater than or equal to 1.\n    \n    Returns:\n\
    \    \n    - The `n`th Fibonacci number.\n    \n    Examples:\n    \n    ```julia\n\
    \    julia> fib(0)\n    ```\n    \n    ```julia\n    julia> fib(10)\n    ```\n\
    \    \n    ```julia\n    julia> fib(100)\n    ```\n    \n    ```julia\n    julia>\
    \ fib(1000)\n    ```\n    \n    ```julia\n    julia> fib(10000)\n    ```\n   \
    \ \n    ```julia\n    julia> fib(100000)\n    ```\n    \n    ```julia\n    julia>\
    \ fib(1000000)\n    ```\n    \n    ```julia\n    julia> fib(10000000)\n    ```\n\
    \    \n    ```julia\n    julia> fib(100000000)\n    ```\n    \n    ```julia\n\
    \    julia> fib(1000000000)\n    ```\n    \n    ```julia\n    julia> fib(10000000000)\n\
    \    ```\n    \n    ```julia\n    julia> fib(100000000000)\n    ```\n    \n  \
    \  ```julia\n    julia> fib(1000000000000)\n    ```\n    \n    ```julia\n    julia>\
    \ fib(10000000000000)\n    ```\n    \n    ```julia\n    julia> fib(100000000000000)\n\
    \    ```\n    \n    ```julia\n    julia> fib(1000000000000000)\n    ```\n    \n\
    \    ```julia\n    julia> fib(10000000000000000)\n    ```\n    \n    ```julia\n\
    \    julia> fib(100000000000000000)\n    ```\n    \n    ```julia\n    julia> fib(1000000000000000000)\n\
    \    ```\n    \n    ```julia\n    julia> fib(10000000000000000000)\n    ```\n\
    \    \n    ```", "    if n == 1 \n        Vector{Int64}(1)\n    elseif n == 2\
    \ \n        Vector{Int64}(3)\n    elseif n % 2 == 0 \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3)\n    elseif n % 2 == 1 \n        tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a\
    \ function that returns the factorial of a given number. \nExamples:\nfactorial(0)\
    \ = 1\nfactorial(5) = 120\nfactorial(10) = 3,628,800\nfactorial(100) = 1,610,400\n\
    factorial(1000) = 1,610,400,945,680,000\nfactorial(10000) = 1,610,400,945,680,000,000,000\n\
    factorial(100000) = 1,610,400,945,680,000,000,000,000\nfactorial(1000000) = 1,610,400,945,680,000,000,000,000,000\n\
    factorial(10000000) = 1,610,400,945,680,000,000,000,000,000,000\nfactorial(100000000)\
    \ = 1,610,400,945,680,000,000,000,000,000,000,000\nfactorial(1000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000\n\
    factorial(10000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(100000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(1000000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(10000000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(100000000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(1000000000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(10000000000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000,000\n\
    factorial(100000000000000000) = 1,610,400,945,680,000,000,000,000,000,000,000,000,",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if n == 1 \n        Vector{Int64}([3])\n    else if n % 2 == 0 \n        tri(n-1)\
    \ + tri(n-2) + tri(n+2)\n    else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that returns the factorial of a given number. \n\
    Examples:\nfactorial(3) = 6 \nfactorial(5) = 24\nfactorial(10) = 5040\nfactorial(13)\
    \ = 13441\nfactorial(20) = 121645817763926480000\nHint: use factorial function.",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the number\
    \ of ways to write n as a sum of two positive integers. \nExamples:\n    count_ways(3)\
    \ = 2\n    count_ways(4) = 3\n    count_ways(5) = 5\n    count_ways(6) = 7\n \
    \   count_ways(7) = 12\n    count_ways(8) = 24\n    count_ways(9) = 60\n    count_ways(10)\
    \ = 720\n    count_ways(11) = 1230\n    count_ways(12) = 1860\n    count_ways(13)\
    \ = 2420\n    count_ways(14) = 4120\n    count_ways(15) = 5640\n    count_ways(16)\
    \ = 8240\n    count_ways(17) = 13120\n    count_ways(18) = 19640\n    count_ways(19)\
    \ = 25120\n    count_ways(20) = 41860\n    count_ways(21) = 67840\n    count_ways(22)\
    \ = 1040320\n    count_ways(23) = 1512016\n    count_ways(24) = 2046008\n    count_ways(25)\
    \ = 2764800\n    count_ways(26) = 418608\n    count_ways(27) = 678408\n    count_ways(28)\
    \ = 10403208\n    count_ways(29) = 151201600\n    count_ways(30) = 2046008000\n\
    \    count_ways(31) = 276480008\n    count_ways(32) = 4186080000\n    count_ways(33)\
    \ = 6784080000\n    count_ways(34) = 104032080000\n    count_ways(35) = 15120160000\n\
    \    count_ways(36) = 204600800000\n    count_ways(37) = 276480008000\n    count_ways(38)\
    \ = 418608000000\n    count_ways(39) = 6784080000000\n    count_ways(40) = 104032080000000\n\
    \    count_ways(41) = 151201600000000\n    count_ways(42) = 204600800000000\n\
    \    count_ways(43) = 2764800080000000\n    count_ways(44) = 418608000000000\n\
    \    count_ways(45) = 678408000000000\n    count_ways(46) = ", "    if n == 0\n\
    \        return Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n\
    \    else\n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 3)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a positive integer $n$ and returns the $n$th Fibonacci number.", "   \
    \ if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n\
    </cell>\n<text>\nProblem 9\nWrite a function that returns the sum of the squares\
    \ of the first n positive integers. \nExamples:\nsumsq(1) = 1\nsumsq(2) = 2\n\
    sumsq(3) = 9\nsumsq(4) = 25\nsumsq(5) = 81\nsumsq(6) = 243\nsumsq(7) = 2520\n\
    sumsq(8) = 2520\nsumsq(9) = 2520\nsumsq(10) = 2520\nsumsq(11) = 2520\nsumsq(12)\
    \ = 2520\nsumsq(13) = 2520\nsumsq(14) = 2520\nsumsq(15) = 2520\nsumsq(16) = 2520\n\
    sumsq(17) = 2520\nsumsq(18) = 2520\nsumsq(19) = 2520\nsumsq(20) = 2520\nsumsq(21)\
    \ = 2520\nsumsq(22) = 2520\nsumsq(23) = 2520\nsumsq(24) = 2520\nsumsq(25) = 2520\n\
    sumsq(26) = 2520\nsumsq(27) = 2520\nsumsq(28) = 2520\nsumsq(29) = 2520\nsumsq(30)\
    \ = 2520\nsumsq(31) = 2520\nsumsq(32) = 2520\nsumsq(33) = 2520\nsumsq(34) = 2520\n\
    sumsq(35) = 2520\nsumsq(36) = 2520\nsumsq(37) = 2520\nsumsq(38) = 2520\nsumsq(39)\
    \ = 2520\nsumsq(40) = 2520\nsumsq(41) = 2520\nsumsq(42) = 2520\nsumsq(43) = 2520\n\
    sumsq(44) = 2520\nsumsq(45) = 2520\nsumsq(46) = 2520\nsumsq(47) = 2520\nsumsq(48)\
    \ = 2520\nsumsq(49) = 2520\nsumsq(50) = 2520\nsumsq(51) = 2520\nsumsq(52) = 2520\n\
    sumsq(53) = 2520\nsumsq(54) = 2520\nsum", "    if n == 1 \n        return [1]\n\
    \    else if n == 2 \n        return [1, 2]\n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function\
    \ that returns the nth term of the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\nfibonacci(3)\
    \ = 2\nfibonacci(4) = 3\nfibonacci(6) = 13\nfibonacci(8) = 21\nfibonacci(10) =\
    \ 55\nfibonacci(12) = 89\nfibonacci(15) = 144\nfibonacci(20) = 233\nfibonacci(25)\
    \ = 418\nfibonacci(30) = 673\nfibonacci(35) = 1093\nfibonacci(50) = 1771\nfibonacci(55)\
    \ = 28657\nfibonacci(60) = 46368\nfibonacci(65) = 75025\nfibonacci(75) = 121393\n\
    fibonacci(100) = 196418\nfibonacci(125) = 3276755\nfibonacci(150) = 644045\nfibonacci(200)\
    \ = 102334155\nfibonacci(225) = 165580141\nfibonacci(250) = 327675009\nfibonacci(300)\
    \ = 490095303\nfibonacci(350) = 806514673\nfibonacci(400) = 1304969545\nfibonacci(451)\
    \ = 2119902323\nfibonacci(500) = 2748779069\nfibonacci(550) = 5452595809\nfibonacci(600)\
    \ = 1025312511\nfibonacci(650) = 1637751467\nfibonacci(700) = 2540540167\nfibonacci(750)\
    \ = 403291461\nfibonacci(800", "    if n == 1 \n        return [1]\n    else if\
    \ n == 2 \n        return [1, 1]\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\nend", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n-1) + tri(n-2) + tri(n+1) \n    end\nend\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that returns the Fibonacci sequence up to n.\nExamples:\n\
    fib(3) = [1, 1, 2]\nfib(4) = [1, 1, 2, 3]\nfib(5) = [1, 1, 2, 3, 5]\nfib(6) =\
    \ [1, 1, 2, 3, 5, 8]\nfib(7) = [1, 1, 2, 3, 5, 8, 13]\nfib(8) = [1, 1, 2, 3, 5,\
    \ 8, 13, 21]\nfib(9) = [1, 1, 2, 3, 5, 8, 13, 21, 34]\nfib(10) = [1, 1, 2, 3,\
    \ 5, 8, 13, 21, 34, 55]\nHint: Use a while loop.", "    if n == 0\n        return\
    \ Vector{Int64}()\n    elseif n == 1\n        return Vector{Int64}(3)\n    elseif\
    \ n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n\
    </cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n == 0\
    \ \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return\
    \ [1]\n    elseif n == 2 \n        return [1, 2]\n    elseif n % 2 == 0 \n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 0\n        return Vector{Int64}()\n \
    \   elseif n == 1\n        return Vector{Int64}(3)\n    elseif n % 2 == 0\n  \
    \      return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    \"\"\"\n    fib(n)\n    \n    Recursive function that returns the nth number of\
    \ the Fibonacci sequence\n    \n    Arguments:\n    \n    - `n`: non-negative\
    \ integer\n    \n    Returns:\n    \n    - `n` th number of the Fibonacci sequence\n\
    \    \n    Examples:\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n \
    \   \n    fib(3) = 3\n    \n    fib(n) = fib(n-1) + fib(n-2)\n    \n    \"\"\"",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\
    \n    fib(n::Int64)", "    if n == 1 \n        [1]\n    elseif n == 2 \n     \
    \   [1, 2]\n    elseif n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1)\n    elseif n % 2 == 1 \n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ + 2)\n    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns\
    \ the sum of the numbers from 1 to n.\nExamples:\nsum1to2(3) = 1 + 2 + 3 = 6\n\
    sum1to2(5) = 1 + 2 + 3 + 4 + 5 = 15\nsum1to2(10) = 1 + 2 + 3 + 4 + 5 + 6 + 7 +\
    \ 8 + 9 + 10 = 55\nHint: You can use a for loop to do this.", "    if n == 1 \n\
    \        Vector{Int64}(1) \n    else \n        tri(n-1) + tri(n-2) + tri(n+1)\
    \ \n    end\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the number of ways to choose k items\
    \ from n items. \nThe function should return an Int64 number.", "    if n == 1\
    \ \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n\
    \        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\
    \"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive Fibonacci function \n  \
    \  \n    Arguments:\n    \n    n - an integer\n    \n    Returns:\n    \n    Fibonacci\
    \ number \n    \n    Examples:\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(2)\
    \ = 1\n    \n    fib(n) = fib(n-1) + fib(n-2) \n    \n    fib(n) = fib(n-1) +\
    \ fib(n-2) + fib(n-3) \n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ \n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) \n\
    \    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6)\
    \ \n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) +\
    \ fib(n-6) + fib(n-7) \n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) \n    \n    fib(n) = fib(n-1) +\
    \ fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) +\
    \ fib(n-9) \n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5)\
    \ + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) \n    \n    fib(n) =\
    \ fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) +\
    \ fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11) \n    \n    fib(n) = fib(n-1) +\
    \ fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) +\
    \ fib(n-9) + fib(n-10) + fib(n-11) + fib(n-12) \n    \n    fib(n) = fib(n", " \
    \   if n == 0\n        return Vector{Int64}()\n    elseif n == 1\n        return\
    \ Vector{Int64}(3)\n    elseif n % 2 == 0\n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    else\n        return tri(n - 1) + tri(n - 2) + tri(n +\
    \ 1) + tri(n + 2)\n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function\
    \ that returns the nth number of the Fibonacci sequence. \nThe Fibonacci sequence\
    \ is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor example:\nfibonacci(3)\
    \ = 3\nfibonacci(4) = fibonacci(3) + fibonacci(2)\n           = fibonacci(3) +\
    \ fibonacci(4) + fibonacci(2)\n           = fibonacci(3) + fibonacci(5) + fibonacci(4)\
    \ + fibonacci(2) + fibonacci(1)\n           = fibonacci(6) + fibonacci(5) + fibonacci(4)\
    \ + fibonacci(3) + fibonacci(2) + fibonacci(1)\n           = fibonacci(6) + fibonacci(7)\
    \ + fibonacci(6) + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) +\
    \ fibonacci(1)\n           = fibonacci(8) + fibonacci(7) + fibonacci(6) + fibonacci(5)\
    \ + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1) + fibonacci(0)\n\
    \           = fibonacci(8) + fibonacci(9) + fibonacci(8) + fibonacci(7) + fibonacci(6)\
    \ + fibonacci(5) + fibonacci(4) + fibonacci(3) + fibonacci(2) + fibonacci(1) +\
    \ fibonacci(0)\n           = fibonacci(9) + fibonacci(10) + fibonacci(9", "  \
    \  if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n\
    end\n</cell>\n<text>\nExercise 2\nWrite a function that returns the nth number\
    \ of the Fibonacci sequence. \nThe Fibonacci sequence is defined by the recurrence:\n\
    fibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n\
    \ - 2), if n is even.\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n\
    \ + 1), if n is odd.\nFor example:\nfibonacci(3) = 3\nfibonacci(4) = 5 \nfibonacci(5)\
    \ = 8 \nYou are given a non-negative integer number n, you have to a return a\
    \ list of the \nnth number of the Fibonacci sequence.\nExamples:\nfibonacci(3)\
    \ = [1, 1, 3] \nfibonacci(4) = [1, 1, 5, 1] \nfibonacci(5) = [1, 1, 8, 3, 1]\n\
    Hint: You can use the function fibonacci defined above.", "    if n == 1 \n  \
    \      return [1]\n    else if n % 2 == 0 \n        return tri(n-1) + tri(n-2)\
    \ + tri(n+2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n\
    end\n</cell>\n<text>\nProblem 3\nWrite a function that checks if a number is prime\
    \ or not. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nA prime number is called a prime number if\
    \ all prime factors are greater than 1.\nExamples:\n    prime(2) \u2260 true\n\
    \    prime(3) \u2260 true\n    prime(4) \u2260 true\n    prime(5) \u2260 true\n\
    \    prime(6) \u2260 true\n    prime(7) \u2260 true\n    prime(8) \u2260 true\n\
    \    prime(9) \u2260 true\n    prime(10) \u2260 true\n    prime(11) \u2260 true\n\
    \    prime(12) \u2260 true\n    prime(13) \u2260 true\n    prime(14) \u2260 true\n\
    \    prime(15) \u2260 true\n    prime(16) \u2260 true\n    prime(17) \u2260 true\n\
    \    prime(18) \u2260 true\n    prime(19) \u2260 true\n    prime(20) \u2260 true\n\
    \    prime(21) \u2260 true\n    prime(22) \u2260 true\n    prime(23) \u2260 true\n\
    \    prime(24) \u2260 true\n    prime(25) \u2260 true\n    prime(26) \u2260 true\n\
    \    prime(27) \u2260 true\n    prime(28) \u2260 true\n    prime(29) \u2260 true\n\
    \    prime(30) \u2260 true\n    prime(31) \u2260 true\n    prime(32) \u2260 true\n\
    \    prime(33) \u2260 true\n    prime(34) \u2260 true\n    prime(35) \u2260 true\n\
    \    prime(36) \u2260 true\n    prime(37) \u2260 true\n    prime(38) \u2260 true\n\
    \    prime(39) \u2260", "    if n == 1 \n        Vector{Int64}([3])\n    else\
    \ if n % 2 == 0 \n        tri(n-1) + tri(n-2) + tri(n+1)\n    else \n        tri(n-1)\
    \ + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n<code language=julia-1.4>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n\
    \ % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n - 4)\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64\n  \
    \  \n    Recursive function that calculates nth number of the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    \n\
    \    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9)\
    \ + fib(n-10) + fib(n-11) + fib(n-12) + fib(n-13) + fib(n-14) + fib(n-15) + fib(n-16)\
    \ + fib(n-17) + fib(n-18) + fib(n-19) + fib(n-20) + fib(n-21) + fib(n-22) + fib(n-23)\
    \ + fib(n-24) + fib(n-25) + fib(n-26) + fib(n-27) + fib(n-28) + fib(n-29) + fib(n-30)\
    \ + fib(n-31) + fib(n-32) + fib(n-33) + fib(n-34) + fib(n-35) + fib(n-36) + fib(n-37)\
    \ + fib(n-38) + fib(n-39) + fib(n-40) + fib(n-41) + fib(n-42) + fib(n-43) + fib(n-44)\
    \ + fib(n-45) + fib(n-46) + fib(n-47) + fib(n-48) + fib(n-49) + fib(n-50) + fib(n-51)\
    \ + fib(n-52) + fib(n-53) + fib(n-54) + fib(n-55) + fib(n-56) + fib(n-57) + fib(n-58)\
    \ + fib(n-59) + fib(n-60) + fib(n-61) + fib(n-62) + fib(n-63) + fib(n-64) + fib(n-65)\
    \ + fib(n-66) + fib(n-67) + fib(n-68) + fib(n-69) + fib(n-70) + fib(n-71) + fib(n-72)\
    \ + fib(n-73) + fib(n-74) + fib(n", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n\
    \        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        return tri(n-1) + tri(n-2) + tri(n+1)\
    \ + [1]\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n \
    \   Recursive function that returns the nth number of the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    \n    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) =\
    \ fib(n-1) + fib(n-2) + fib(n+1), if n is odd.\n    \"\"\"", "    if n == 1 \n\
    \        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n \
    \       return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that returns the sum of the numbers in the Fibonacci sequence\
    \ up to n.\nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2) = 1\n\
    fibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nfibonacci(6) = 8 \nfibonacci(7)\
    \ = 13\nfibonacci(8) = 21\nfibonacci(9) = 55\nfibonacci(10) = 89\nfibonacci(11)\
    \ = 144\nfibonacci(12) = 233\nfibonacci(13) = 418\nfibonacci(14) = 675\nfibonacci(15)\
    \ = 1093\nfibonacci(16) = 1771\nfibonacci(17) = 2584\nfibonacci(18) = 4181\nfibonacci(19)\
    \ = 6765\nfibonacci(20) = 10946\nfibonacci(21) = 17711\nfibonacci(22) = 25847\n\
    fibonacci(23) = 41816\nfibonacci(24) = 67656\nfibonacci(25) = 109461\nfibonacci(26)\
    \ = 177111\nfibonacci(27) = 258471\nfibonacci(28) = 418162\nfibonacci(29) = 676561\n\
    fibonacci(30) = 1094611\nfibonacci(31) = 1771111\nfibonacci(32) = 2584711\nfibonacci(33)\
    \ = 4181621\nfibonacci(34) = 6765612\nfibonacci(35) = 10946112\nfibonacci(36)\
    \ = 17711113\nfibonacci(37) = 25847112\nfibonacci(38) = 41816212\nfibonacci(39)\
    \ = 67656123\nfibonacci(40) = 109461123\nfibonacci(41) = 17711113\nfibonacci(42)\
    \ = 258471123\nfibonacci(43) = 418162123\nfibonacci(44) = 67656", "    if n ==\
    \ 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n\
    \ - 2)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n\
    \ - 2) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 2]\n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n\
    \    end\nend\n</cell>\n<text>\nExercise 3\nWrite a function that returns the\
    \ factorial of a given number. \nExamples:\nfactorial(3) = 6 \nfactorial(5) =\
    \ 24\nfactorial(10) = 720\nfactorial(13) = 5040\nfactorial(20) = 40320\nfactorial(100)\
    \ =  362880\nfactorial(1000) = 2432902008176640000\nfactorial(10000) = 121645100408832000\n\
    factorial(100000) = 72057594037927936000\nfactorial(1000000) = 40320838860837760000\n\
    factorial(1000000000) = 362880746450587120000\nfactorial(1000000000000) = 243290200817664000000\n\
    factorial(1000000000000000) = 12164510040883200000000\nfactorial(1000000000000000000)\
    \ = 7205759403792793600000000\nfactorial(100000000000000000000) = 40320838860837760000000000\n\
    factorial(100000000000000000000000) = 3628807464505871200000000000\nfactorial(100000000000000000000000000)\
    \ = 2432902008176640000000000000\nfactorial(100000000000000000000000000000) =\
    \ 1216451004088320000000000000000\nfactorial(10000000000000000000000000000000)\
    \ = 720575940379279360000000000000000\nfactorial(100000000000000000000000000000000)\
    \ = 40320838860837760000000000000000000\nfactorial(1000000000000000000000000000000000)\
    \ =  3628807464505871200000000000000000000\nfactorial(1000000000000000000000000000000000)\
    \ = 2432902008176640000000000000000000000\nfactorial(10000000000000000000000000000000001)\
    \ = 121645100408832000000000000000000000000\nfactorial(10000000000000000000000000000000010)\
    \ = 720575940379279360000000000000000000000000\nfactorial(10000000000000000000000000000000011)\
    \ = 403208388608377600000000000000000000000000\nfactorial(10000000000000000000000000000000012)\
    \ = 36288074645058712000000000000000000000000000\nfactorial(10000000000000000000000000000000013)\
    \ = 2432902008176640000000000000000000000000000\nfactorial(10000000000000000000000000000000014)\
    \ = 12164510040883200000000000000000000000000000\nfactorial(10000000000000000000000000000000015)\
    \ = 72057594037927936000000000000000000000000000000\nfactorial(10000000000000000000000000000000016)\
    \ = 40320838860837760000000000000000000000000000000\nfactorial(10000000000000000000000000000000017)\
    \ = 36", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n -\
    \ 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that returns the factorial of a number.", "    if n == 0 \n     \
    \   Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    end\nend\n</cell>\n<text>\nProblem 3\nWrite a function that returns the\
    \ sum of all even numbers in a given list.", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    fib(n)\n    \n    Recursive function that\
    \ returns the nth number of the Fibonacci sequence\n    \n    Arguments:\n   \
    \ n -- an integer\n    \n    Returns:\n    n th number of the Fibonacci sequence\n\
    \    \n    Examples:\n    fib(0) = 0\n    fib(1) = 1\n    fib(2) = 1\n    fib(3)\
    \ = 2\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2)\n    \n    fib(n) = 3 + fib(n-1)\
    \ + fib(n-2) + fib(n-3)\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4)\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5)\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6)\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7)\n    \n    fib(n) = 3 + fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8)\n\
    \    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) +\
    \ fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9)\n    \n    fib(n) = 3 + fib(n-1) +\
    \ fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) +\
    \ fib(n-9) + fib(n-10)\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10)\
    \ + fib(n-11)\n    \n    fib(n) = 3 + fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\
    \ + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11)\
    \ + fib(n-12)", "    if n == 1 \n        return [1]\n    else if n == 2 \n   \
    \     return [1, 1]\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the sum of the squares of the first n positive\
    \ integers. \nExamples:\nsumsq(1) = 1\nsumsq(2) = 2\nsumsq(3) = 9\nsumsq(4) =\
    \ 25\nsumsq(5) = 25\nsumsq(6) = 50\nsumsq(7) = 81\nsumsq(8) = 25\nsumsq(9) = 125\n\
    sumsq(10) = 25\nsumsq(11) = 125\nsumsq(12) = 25\nsumsq(13) = 125\nsumsq(14) =\
    \ 25\nsumsq(15) = 125\nsumsq(16) = 25\nsumsq(17) = 125\nsumsq(18) = 25\nsumsq(19)\
    \ = 125\nsumsq(20) = 25\nsumsq(21) = 125\nsumsq(22) = 25\nsumsq(23) = 125\nsumsq(24)\
    \ = 25\nsumsq(25) = 125\nsumsq(26) = 25\nsumsq(27) = 125\nsumsq(28) = 25\nsumsq(29)\
    \ = 125\nsumsq(30) = 25\nsumsq(31) = 125\nsumsq(32) = 25\nsumsq(33) = 125\nsumsq(34)\
    \ = 25\nsumsq(35) = 125\nsumsq(36) = 25\nsumsq(37) = 125\nsumsq(38) = 25\nsumsq(39)\
    \ = 125\nsumsq(40) = 25\nsumsq(41) = 125\nsumsq(42) = 25\nsumsq(43) = 125\nsumsq(44)\
    \ = 25\nsumsq(45) = 125\nsumsq(46) = 25\nsumsq(47) = 125\nsumsq(48) = 25\nsumsq(49)\
    \ = 125\nsumsq(50) = 25\nsumsq(51) = 125\nsumsq(52) = 25\nsumsq(53) = 125\nsumsq(54)\
    \ = 25\nsumsq(55) = 125\nsumsq(56) = 25\nsumsq(57) = 125\nsumsq(58) = 25\nsumsq(59)\
    \ = 125\nsumsq(60) = 25\nsumsq(61) = 125\nsumsq(62) = 25\nsumsq(63) = 125\n",
  "    if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return\
    \ Vector{Int64}(1) \n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that returns the first n numbers of the Fibonacci sequence.\
    \ \nThe Fibonacci sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor\
    \ example:\nfibonacci(2) = fibonacci(1) + fibonacci(2)\nfibonacci(3) = fibonacci(1)\
    \ + fibonacci(2) + fibonacci(3)\n           = 1 + 1 + 2 = 4\nYou are given a non-negative\
    \ integer number n, you have to a return a list of the \nfirst n + 1 numbers of\
    \ the Fibonacci sequence.\nExamples:\nfibonacci(3) = [1, 1, 2]\nfibonacci(4) =\
    \ [1, 1, 2, 3]\nfibonacci(5) = [1, 1, 2, 3, 5]\nfibonacci(10) = [1, 1, 2, 3, 5,\
    \ 8, 13, 21, 34, 55]\nHint: Use a while loop.", "    if n == 1 \n        [1]\n\
    \    else if n % 2 == 0 \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<text>\nExercise 5\nWrite a function that returns\
    \ the sum of all the numbers from 1 to n that are divisible by 3.", "    if n\
    \ == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.4>\n\
    tri(10)\n</cell>\n<text>\nExercise 3\nWrite a function that calculates the n-th\
    \ Fibonacci number using recursion.", "    if n == 1 \n        return [1]\n  \
    \  else if n == 2 \n        return [1, 1]\n    else \n        tri(n-1) + tri(n-2)\
    \ + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes an integer $n$ and returns the $n$th Fibonacci number.", "    if\
    \ n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2)\
    \ + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the Fibonacci number at a given index in the Fibonacci sequence. \n\
    The Fibonacci sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\n\
    fibonacci(3) = 3\nfibonacci(4) = 5 \nfibonacci(6) = 8 \nfibonacci(7) = 13 \nfibonacci(8)\
    \ = 21\nfibonacci(10) = 55\nfibonacci(100) = 1346269\nYou are given a non-negative\
    \ integer number n, you have to return the nth number in the Fibonacci sequence.\n\
    Examples:\nfibonacci(3) = 1\nfibonacci(4) = 2\nfibonacci(6) = 5\nfibonacci(7)\
    \ = 13\nfibonacci(8) = 21\nfibonacci(10) = 55\nfibonacci(100) = 1346269\nHint:\
    \ You may use fibonacci(n) function defined above.", "    if n == 0 \n       \
    \ Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that calculates the n-th Fibonacci number.", "  \
    \  if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1)\
    \ + tri(n - 2) + tri(n - 3)\n        return tri_1 + tri_2\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that calculates the factorial of a given number. \nExamples:\nfactorial(1) =\
    \ 1\nfactorial(2) = 2\nfactorial(3) = 6\nfactorial(4) = 24\nfactorial(5) = 120\n\
    factorial(6) = 720\nfactorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) =\
    \ 362880\nfactorial(10) = 3628800 \nfactorial(11) = 39916800\nfactorial(12) =\
    \ 479001600\nfactorial(13) = 6227020800\nfactorial(14) = 87178291200\nfactorial(15)\
    \ = 1307674368000\nfactorial(16) = 20922789888000\nfactorial(17) = 355687428096000\n\
    factorial(18) = 6402373705728000\nfactorial(19) = 121645100408832000\nfactorial(20)\
    \ = 2432902008176640000\nfactorial(21) = 51090942171709440000\nfactorial(22) =\
    \ 1124000727777607680000\nfactorial(23) = 25852016738884976640000\nfactorial(24)\
    \ = 620448401733239439360000\nfactorial(25) = 15511210043330985984000000\nfactorial(26)\
    \ = 403291461126605635584000000\nfactorial(27) = 10888869450418352160768000000\n\
    factorial(28) = 304888344611713860501504000000\nfactorial(29) = 8841761993739701954543616000000\n\
    factorial(30) = 265252859812191058636308480000000\nfactorial(31) = 8222838654177922817725562880000000\n\
    factorial(32) = 263130836933693530167218012160000000\nfactorial(33) = 6940200710187247417498731682400000000\n\
    factorial(34) = 2586232415125633717066955566400000000\nfactorial(35) = 1216451004088320006419073443200000000\n\
    factorial(36", "    if n == 1 \n        return [1]\n    elseif n == 2 \n     \
    \   return [1, 1]\n    elseif n % 2 == 0 \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n    elseif n % 2 == 1 \n        return tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    fib(n)\n    \n    Recursive function that returns\
    \ the nth number of the Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1)\
    \ = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n+1), if n is odd.\n    \n    Examples:\n    fib(2) = 2\n \
    \   fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), if n is odd.\n  \
    \  \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is\
    \ even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), if n is odd.\n    \"\"\"",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n\
    \        Vector{Int64}() \n    else if n == 1 \n        Vector{Int64}(1) \n  \
    \  else \n        tri(n-1) + tri(n-2) + tri(n+1) + tri(n+2)\n    end\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the Fibonacci sequence up to\
    \ n.\nExamples:\nfib(3) = [0, 1, 1, 2, 3, 5, 8, 13]\nfib(4) = [0, 1, 1, 2, 3,\
    \ 5, 8, 13, 21]\nfib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nfib(6) = [0, 1, 1,\
    \ 2, 3, 5, 8, 13, 21, 34, 55]\nHint: Remember that Fibonacci sequence is defined\
    \ by the recurrence:\nfib(n) = fib(n-1) + fib(n-2), if n is even.\nfib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n+1), if n is odd.", "    if n == 0 \n        return Vector{Int64}()\n\
    \    else if n == 1 \n        return Vector{Int64}(3)\n    else \n        return\
    \ tri(n - 1) + tri(n - 2) + tri(n + 1)\nend\n</cell>\n<text>\nExercise 3\nWrite\
    \ a function that takes a positive integer $n$ and returns the $n$th Fibonacci\
    \ number.", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 3\n\
    Write a function that returns the first n numbers of the Fibonacci sequence. \n\
    The Fibonacci sequence is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(n) = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nFor\
    \ example:\nfibonacci(3) = [1, 1, 2, 3]\nfibonacci(4) = [1, 1, 2, 3, 5, 8]\nfibonacci(5)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21]\nYou are given a non-negative integer number n,\
    \ you have to a return a list of the \nfirst n + 1 numbers of the Fibonacci sequence.\n\
    Examples:\nfibonacci(3) = [1, 1, 2, 3]\nfibonacci(4) = [1, 1, 2, 3, 5, 8]\nfibonacci(5)\
    \ = [1, 1, 2, 3, 5, 8, 13, 21]\n\"\"\"", "    if n == 1 \n        return [1]\n\
    \    else if n == 2 \n        return [1, 2]\n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a positive integer $n$ and returns the $n$th Fibonacci number.",
  "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    fib(n::Int64)::Int64\n    \n    Recursive implementation of Fibonacci sequence\n\
    \    \n    Arguments:\n    \n    - `n`: non-negative integer\n    \n    Returns:\n\
    \    \n    - `n` - Fibonacci number\n    \n    Examples:\n    \n    fib(0) = 0\n\
    \    fib(1) = 1\n    fib(2) = 1\n    \n    fib(n) = 3 * fib(n-1) + fib(n-2)\n\
    \    \n    fib(n) = 3 * fib(n-1) + fib(n-2) + fib(n-3)\n    \n    fib(n) = 3 *\
    \ fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n    \n    fib(n) = 3 * fib(n-1) +\
    \ fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5)\n    \n    fib(n) = 3 * fib(n-1) +\
    \ fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6)\n    \n    fib(n) = 3 *\
    \ fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7)\n\
    \    \n    fib(n) = 3 * fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) +\
    \ fib(n-6) + fib(n-7) + fib(n-8)\n    \n    fib(n) = 3 * fib(n-1) + fib(n-2) +\
    \ fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9)\n\
    \    \n    fib(n) = 3 * fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) +\
    \ fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10)\n    \n    fib(n) = 3\
    \ * fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7)\
    \ + fib(n-8) + fib(n-9) + fib(n-10) + fib(n-11)\n    \n    fib(n) = 3 * fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8)\
    \ + fib(n-9) + fib(n-10) + fib(n-11) + ", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64", "    if n == 0 \n\
    \        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>", "    if n == 0 \n        return Vector{Int64}() \n\
    \    else if n == 1 \n        return Vector{Int64}(1) \n    else \n        return\
    \ Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nend\n</cell>\n<code language=julia-1.5>\n\
    tri(10)\n</cell>\n<code language=julia-1.5>", "    if n == 1 \n        Vector{Int64}(1)\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the nth number of the Fibonacci\
    \ sequence. \nExamples:\nfib(3) = 1\nfib(4) = 2\nfib(5) = 3\nfib(6) = 5\nfib(7)\
    \ = 8 \nfib(8) = 13\nfib(9) = 21 \nfib(10) = 6765\nHint: use fibonacci function\
    \ defined above", "    if n == 1 \n        Vector{Int64}(1) \n    else \n    \
    \    tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(3) == [1, 3, 2, 8]\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the first n Fibonacci numbers. \nExamples:\nfib(3) = [1, 1, 2]\n\
    fib(4) = [1, 1, 2, 3]\nfib(5) = [1, 1, 2, 3, 5]\nHint: Use a recursive function\
    \ and store the Fibonacci numbers in a vector.", "    if n == 1 \n        return\
    \ [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4) + tri(n - 5) + tri(n - 6) + tri(n - 7) + tri(n - 8) + tri(n\
    \ - 9)\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nProblem\
    \ 7\nWrite a function that calculates the sum of all even numbers in a given list.",
  "    if n == 1\n        return [1]\n    elseif n == 2\n        return [1, 3]\n \
    \   elseif n % 2 == 0\n        return tri(n - 1) + tri(n - 2) + tri(n - 1)\n \
    \   else\n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 3)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)",
  "    if n == 0\n        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n\
    \    else\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n\
    <code language=julia-1.0>\ntri(10)\n</cell>\n<code language=julia-1.0>\n\"\"\"\
    \n    fib(n::Int64)::Int64\n    Fibonacci number\n    \n    Arguments:\n    \n\
    \    - `n`: non-negative integer\n    \n    Returns:\n    \n    - `n` Fibonacci\
    \ number\n    \n    Examples:\n    \n    ```julia\n    fib(0)\n    ```\n    \n\
    \    ```julia\n    fib(1)\n    ```\n    \n    ```julia\n    fib(2)\n    ```\n\
    \    \n    ```julia\n    fib(3)\n    ```\n    \n    ```julia\n    fib(4)\n   \
    \ ```\n    \n    ```julia\n    fib(5)\n    ```\n    \n    ```julia\n    fib(6)\n\
    \    ```\n    \n    ```julia\n    fib(7)\n    ```\n    \n    ```julia\n    fib(8)\n\
    \    ```\n    \n    ```julia\n    fib(9)\n    ```\n    \n    ```julia\n    fib(10)\n\
    \    ```\n    \n    ```julia\n    fib(11)\n    ```\n    \n    ```julia\n    fib(12)\n\
    \    ```\n    \n    ```julia\n    fib(13)\n    ```\n    \n    ```julia\n    fib(14)\n\
    \    ```\n    \n    ```julia\n    fib(15)\n    ```\n    \n    ```julia\n    fib(16)\n\
    \    ```\n    \n    ```julia\n    fib(17)\n    ```\n    \n    ```julia\n    fib(18)\n\
    \    ```\n    \n    ```julia\n    fib(19)\n    ```\n    \n    ```julia\n    fib(20)\n\
    \    ```\n    \n    ```julia\n    fib(21)\n    ```\n    \n    ```julia\n    fib(22)\n\
    \    ```\n    \n    ```julia\n    fib(23)\n    ```\n    \n    ```julia\n    fib(24)\n\
    \    ```\n    \n    ```julia\n    fib(25)\n    ```\n", "    if n == 1 \n     \
    \   return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else if n % 2 ==\
    \ 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    else \n      \
    \  return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2) \nend\n</cell>\n<code\
    \ language=julia-1.0>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the sum of the elements of a vector. \nExamples:\nsum([1, 2, 3])\
    \ = 1 + 2 + 3 = 6\nsum([1, 2, 3, 4]) = 1 + 2 + 3 + 4 = 10\nsum([1, 2, 3, 4, 5])\
    \ = 1 + 2 + 3 + 4 + 5 = 15\nsum([1, 2, 3, 4, 5, 6]) = 1 + 2 + 3 + 4 + 5 + 6 =\
    \ 21\nsum([1, 2, 3, 4, 5, 6, 7]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28\nsum([1, 2,\
    \ 3, 4, 5, 6, 7, 8]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 = 42\nsum([1, 2, 3, 4, 5,\
    \ 6, 7, 8, 9]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 = 57\nsum([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 = 70\nsum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 = 84\n\
    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 +\
    \ 9 + 10 + 11 + 12 = 100\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13]) = 1\
    \ + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 = 121\nsum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10\
    \ + 11 + 12 + 13 + 14 = 144\nsum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14,\
    \ 15]) = 1 + 2 + 3 + 4 + 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 = 169\n\
    sum([1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16]) = 1 + 2 + 3 + 4 +\
    \ 5 + 6 + 7 + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 = 196\nsum([1, 2, 3, 4,\
    \ 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17]) = 1 + 2 + 3 + 4 + 5 + 6 + 7\
    \ + 8 + 9 + 10 + 11 + 12 + 13 + 14 + 15 + 16 + 17 = 228\nsum([1, 2, 3, 4, 5, 6,\
    \ 7, 8, 9, 10, 11, 12, 13, 14, ", "    if n == 1 \n        return [1]\n    else\
    \ if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\
    \ \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n - 3) + tri(n -\
    \ 4)\nend", "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n - 1)\n    else \n        return tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n\
    \ - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + ", " \
    \   if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.0>", "   \
    \ if n == 0 \n        Vector{Int64}() \n    else \n        tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.4>\n\"\"\"\
    \n    fib(n::Int64)::Int64", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", "    if n ==\
    \ 0 \n        return Vector{Int64}() \n    else if n == 1 \n        return Vector{Int64}(1)\
    \ \n    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 1 \n     \
    \   [1]\n    elseif n == 2 \n        [1, 2]\n    elseif n % 2 == 0 \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1)\n    else\n        tri(n - 1) + tri(n - 2) +\
    \ tri(n + 1) + tri(n - 3) + tri(n - 4)\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nWrite a function that takes a positive integer $n$ and returns the $n$th\
    \ Fibonacci number.\nExamples:\nfib(3) = 3\nfib(4) = 5\nfib(5) = 8 \nfib(6) =\
    \ 13\nfib(7) = 21\nfib(8) = 34 \nfib(9) = 55 \nfib(10) = 89 \nfib(11) = 144 \n\
    fib(12) = 233 \nfib(13) = 462 \nfib(14) = 729 \nfib(15) = 1094 \nfib(16) = 1771\
    \ \nfib(17) = 2860 \nfib(18) = 4634 \nfib(19) = 7103 \nfib(20) = 10907 \nfib(21)\
    \ = 17640 \nfib(22) = 36774 \nfib(23) = 64253 \nfib(24) = 121393 \nfib(25) = 196418\
    \ \nfib(26) = 254058 \nfib(27) = 405376 \nfib(28) = 562943 \nfib(29) = 832040\
    \ \nfib(30) = 1346269 \nfib(31) = 2178309 \nfib(32) = 2924578 \nfib(33) = 3446950\
    \ \nfib(34) = 6343801 \nfib(35) = 10946673 \nfib(36) = 16558014 \nfib(37) = 26791429\
    \ \nfib(38) = 43349447 \nfib(39) = 70140879 \nfib(40) = 113490317 \nfib(41) =\
    \ 183631199 \nfib(42) = 297121507 \nfib(43) = 48685280 \nfib(44) = 76441753 \n\
    fib(45) = 126964577 \nfib(46) = 203565571 \nfib(47) = 290216436 \nfib(48) = 418628393\
    \ \nfib(49) = 592785760 \nfib(50) = 923873247 \nfib(51) = 1548008719 \nfib(52)\
    \ = 2305843003 \nfib(", "    if n == 1 \n        return [1]\n    else if n % 2\
    \ == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else \n    \
    \    return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the factorial of a given number.\
    \ \nExamples:\nfactorial(3) = 3\nfactorial(5) = 720\nfactorial(10) = 3,6,9,12,15,20\n\
    factorial(\u221E) = \u221E\nfactorial(0) = 1\nExercise 4\nWrite a function that\
    \ returns the Fibonacci number at a given index. \nExamples:\nfibonacci(0) = 0\n\
    fibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5)\
    \ = 5\nfibonacci(6) = 8\nfibonacci(7) = 14\nfibonacci(8) = 21\nfibonacci(9) =\
    \ 28\nfibonacci(10) = 55\nExercise 5\nWrite a function that returns the Fibonacci\
    \ number at a given index. \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2)\
    \ = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nfibonacci(6) = 8\n\
    fibonacci(7) = 14\nfibonacci(8) = 21\nfibonacci(9) = 28\nfibonacci(10) = 55\n\
    Exercise 6\nWrite a function that returns the Fibonacci number at a given index.\
    \ \nExamples:\nfibonacci(0) = 0\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3)\
    \ = 2\nfibonacci(4) = 3\nfibonacci(5) = 5\nfibonacci(6) = 8\nfibonacci(7) = 14\n\
    fibonacci(8) = 21\nfibonacci(9) = 28\nfibonacci(10) = 55\nExercise 7\nWrite a\
    \ function that returns the Fibonacci number at a given index. \nExamples:\nfibonacci(0)\
    \ = 0\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\n\
    fibonacci(5) = 5\nfibonacci(6) = 8\nfibonacci(7) = 14\nfibonacci(8) = ", "   \
    \ if n == 1 \n        return [1]\n    else if n % 2 == 0 \n        return tri(n-1)\
    \ + tri(n-2)\n    else \n        return tri(n-1) + tri(n-2) + tri(n-3)\nend\n\
    </cell>\n<code language=julia-1.0>", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend", " \
    \   if n == 0 \n        return Vector{Int64}() \n    else if n == 1 \n       \
    \ return Vector{Int64}(1) \n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that calculates the factorial of a given\
    \ number. \nExamples:\nfactorial(0) = 1\nfactorial(1) = 1\nfactorial(2) = 2\n\
    factorial(3) = 6\nfactorial(4) = 24\nfactorial(5) = 120\nfactorial(6) = 720\n\
    factorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nfactorial(11) = 39916800\nfactorial(12) = 479001600\nfactorial(13)\
    \ = 6227020800\nfactorial(14) = 87178291200\nfactorial(15) = 1307674368000\nfactorial(16)\
    \ = 20922789888000\nfactorial(17) = 355687428096000\nfactorial(18) = 6402373705728000\n\
    factorial(19) = 121645100408832000\nfactorial(20) = 2432902008176640000\nfactorial(21)\
    \ = 51090942171709440000\nfactorial(22) = 1124000727777607680000\nfactorial(23)\
    \ = 25852016738884976640000\nfactorial(24) = 620448401733239439360000\nfactorial(25)\
    \ = 15511210043330985984000000\nfactorial(26) = 403291461126605635584000000\n\
    factorial(27) = 10888869450418352160768000000\nfactorial(28) = 304888344611713860501504640000000\n\
    factorial(29) = 8841761993739701954543616000000\nfactorial(30) = 265252859812191058636308480000000\n\
    factorial(31) = 8222838654177922817725562880000000\nfactorial(32) = 263130836933693530167218012160000000\n\
    factorial(33) = 69406589466566422876755916320800000000\nfactorial(34) = 258623241519898175936394963520000000000\n\
    factorial(35) = 1033415289561885441047253776640000000000\nfactorial(36", "   \
    \ if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 2]\n\
    \    else \n        tri_1 = tri(n - 1)\n        tri_2 = tri(n - 2)\n        tri_3\
    \ = tri(n + 1) + tri(n + 2) + tri(n - 1)\n        return tri_1 + tri_2 + tri_3\n\
    end\n</cell>\n<code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nProblem 7\n\
    Write a function that returns the number of ways to choose k items from n items.\
    \ \nFor example, there are 3 ways to choose 3 items from 4 items: \n[A, B, C],\
    \ [A, B, D], [A, C, D], [B, C, D]. \nWrite a function that returns the number\
    \ of ways to choose k items from n items. \nFor example, there are 3 ways to choose\
    \ 3 items from 4 items: \n[A, B, C], [A, B, D], [A, C, D], [B, C, D]. \nWrite\
    \ a function that returns the number of ways to choose k items from n items. \n\
    For example, there are 3 ways to choose 3 items from 4 items: \n[A, B, C], [A,\
    \ B, D], [A, C, D], [B, C, D]. \nWrite a function that returns the number of ways\
    \ to choose k items from n items. \nFor example, there are 3 ways to choose 3\
    \ items from 4 items: \n[A, B, C], [A, B, D], [A, C, D], [B, C, D]. \nWrite a\
    \ function that returns the number of ways to choose k items from n items. \n\
    For example, there are 3 ways to choose 3 items from 4 items: \n[A, B, C], [A,\
    \ B, D], [A, C, D], [B, C, D]. \nWrite a function that returns the number of ways\
    \ to choose k items from n items. \nFor example, there are 3 ways to choose 3\
    \ items from 4 items: \n[A, B, C], [A, B, D], [A, C, D], [B, C, D]. \nWrite a\
    \ function that returns the number of ways to choose k items from n items. \n\
    For example, there are 3 ways to choose 3 items from 4 items: \n[A, B, C], [A,\
    \ B, D], [A, C, D], [B, C, D]. \nWrite a function that returns the number of ways\
    \ to choose k items from n items. \nFor example, there are 3 ways to choose 3\
    \ items from 4 items: \n[A, B, C], [A, B, D], [A, C, D], [B, C, D]. \nWrite a\
    \ function that returns the number of ways to choose k items from n items. \n\
    For example, there are 3 ways to choose 3 items from 4 items: \n[A, B, C], [A,\
    \ B, D], [A, C, D], [B, C, D]. \nWrite a function that returns the number of ways\
    \ to choose k items from n items. \nFor example, there are ", "    if n == 1 \n\
    \        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n + 2)\nend", "    if n == 0 \n        return Vector{Int64}() \n\
    \    else if n == 1 \n        return Vector{Int64}(1) \n    else \n        tri(n\
    \ - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\nExercise 2\n\
    Write a function that returns the first n numbers of the Fibonacci sequence. \n\
    Examples:\nfib(3) = [0, 1, 1, 2, 3, 5, 8, 13]\nfib(4) = [0, 1, 1, 2, 3, 5, 8,\
    \ 13, 21]\nfib(5) = [0, 1, 1, 2, 3, 5, 8, 13, 21, 34]\nHint: Use a for loop to\
    \ iterate over all numbers from 1 to n.", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ return Vector{Int64}(tri(n - 1) + tri(n - 2) + tri(n + 1))\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 1 \n        return\
    \ [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n\
    \ - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\ntri(10)\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the factorial of a given number.\
    \ \nExamples:\nfactorial(5) = 5 * 5 * 4 * 3 * 2 = 120\nfactorial(10) = 10 \xD7\
    \ 9 \xD7 8 \xD7 7 \xD7 6 \xD7 5 \xD7 4 \xD7 3 \xD7 2 \xD7 1\nfactorial(100) =\
    \ 100! \xD7 99! \xD7 98! \xD7 97! \xD7 96! \xD7 95! \xD7 94! \xD7 93! \xD7 92!\
    \ \xD7 91! \xD7 90! \xD7 89! \xD7 88! \xD7 87! \xD7 86! \xD7 85! \xD7 84! \xD7\
    \ 83! \xD7 82! \xD7 81! \xD7 80! \xD7 79! \xD7 78! \xD7 77! \xD7 76! \xD7 75!\
    \ \xD7 74! \xD7 73! \xD7 72! \xD7 71! \xD7 70! \xD7 69! \xD7 68! \xD7 67! \xD7\
    \ 66! \xD7 65! \xD7 64! \xD7 63! \xD7 62! \xD7 61! \xD7 60! \xD7 59! \xD7 58!\
    \ \xD7 57! \xD7 56! \xD7 55! \xD7 54! \xD7 53! \xD7 52! \xD7 51! \xD7 50! \xD7\
    \ 49! \xD7 48! \xD7 47! \xD7 46! \xD7 45! \xD7 44! \xD7 43! \xD7 42! \xD7 41!\
    \ \xD7 40! \xD7 39! \xD7 38! \xD7 37! \xD7 36! \xD7 35! \xD7 34! \xD7 33! \xD7\
    \ 32! \xD7 31! \xD7 30! \xD7 29! \xD7 28! \xD7 27", "    if n == 1 \n        return\
    \ [1]\n    elseif n == 2 \n        return [1, 2]\n    elseif n % 2 == 0 \n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n + 1)\n    elseif n % 2 == 1 \n  \
    \      return tri(n - 1) + tri(n + 1) + tri(n - 2)\n    end\nend\n</cell>\n<text>\n\
    Problem 3\nWrite a function that returns the sum of the numbers from 1 to n.\n\
    Examples:\nsum1(1) = 1\nsum1(2) = 2\nsum1(3) = 3\nsum1(4) = 4\nsum1(5) = 5\nsum1(6)\
    \ = 6\nsum1(7) = 7\nsum1(8) = 8\nsum1(9) = 9\nsum1(10) = 10\nsum1(11) = 11\nsum1(12)\
    \ = 12\nsum1(13) = 13\nsum1(14) = 14\nsum1(15) = 15\nsum1(16) = 16\nsum1(17) =\
    \ 17\nsum1(18) = 18\nsum1(19) = 19\nsum1(20) = 20\nsum1(21) = 21\nsum1(22) = 22\n\
    sum1(23) = 23\nsum1(24) = 24\nsum1(25) = 25\nsum1(26) = 26\nsum1(27) = 27\nsum1(28)\
    \ = 28\nsum1(29) = 29\nsum1(30) = 30\nsum1(31) = 31\nsum1(32) = 32\nsum1(33) =\
    \ 33\nsum1(34) = 34\nsum1(35) = 35\nsum1(36) = 36\nsum1(37) = 37\nsum1(38) = 38\n\
    sum1(39) = 39\nsum1(40) = 40\nsum1(41) = 41\nsum1(42) = 42\nsum1(43) = 43\nsum1(44)\
    \ = 44\nsum1(45) = 45\nsum1(46) = 46\nsum1(47) = 47\nsum1(48) = 48\nsum1(49) =\
    \ 49\nsum1(50) = 50\nsum1(51) = 51\nsum1(52) = 52\nsum1(53) = 53\nsum1(54) = 54\n\
    sum1(55) = 55\nsum1(56) = 56\nsum1(57) = 57\nsum1(58) = 58\nsum1(59) = 59\nsum1(60)\
    \ = 60\nsum1(61) = 61\nsum1(62) = 62\nsum1(63) = 63\nsum1(64) = 64\nsum1(65) =\
    \ 65\nsum1(66) = 66\nsum1(67) = 67\nsum1(68) = 68\nsum1(69) = 69\nsum1(70) = 70\n\
    sum1(71) = 71\nsum1(72)", "    if n == 0 \n        Vector{Int64}() \n    else\
    \ \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes an integer $n$ and returns the $n$th Fibonacci\
    \ number.", "    if n == 1 \n        return [1]\n    else if n % 2 == 0 \n   \
    \     return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1)\n\
    \    else \n        return tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) +\
    \ tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2) + tri(n - 1) + tri(n - 2)\
    \ + ", "    if n == 1 \n        return [1]\n    else if n == 2 \n        return\
    \ [1, 1]\n    else \n        tri(n-1) = tri(n-1) + tri(n-2) + tri(n+2)\n     \
    \   return tri(n-1) + tri(n-2)\nend\n</cell>\n<code language=julia-1.5>\ntri(10)\n\
    </cell>\n<code language=julia-1.5>\n\"\"\"\n    fib(n::Int64)", "    if n == 1\
    \ \n        return [1]\n    else if n == 2 \n        return [1, 1]\n    else \n\
    \        tri_1 = tri(n - 1) + tri(n - 2)\n        tri_2 = tri(n - 1) + tri(n -\
    \ 2) + tri(n + 1)\n        return tri_1 + tri_2\nend\n</cell>\n<text>\nProblem\
    \ 4\nWrite a function that returns the sum of the squares of the first n positive\
    \ integers. \nExamples:\nsquare_sum(3) = 9 \nsquare_sum(5) = 25 \nsquare_sum(10)\
    \ = 5040\nsquare_sum(100) = 252040\nsquare_sum(1000) = 252040\nsquare_sum(10000)\
    \ = 252040\nsquare_sum(100000) = 252040\nsquare_sum(1000000) = 252040\nsquare_sum(10000000)\
    \ = 252040\nsquare_sum(100000000) = 252040\nsquare_sum(1000000000) = 252040\n\
    square_sum(10000000000) = 252040\nsquare_sum(100000000000) = 252040\nsquare_sum(1000000000000)\
    \ = 252040\nsquare_sum(10000000000000) = 252040\nsquare_sum(100000000000000) =\
    \ 252040\nsquare_sum(1000000000000000) = 252040\nsquare_sum(10000000000000000)\
    \ = 252040\nsquare_sum(100000000000000000) = 252040\nsquare_sum(1000000000000000000)\
    \ = 252040\nsquare_sum(10000000000000000000) = 252040\nsquare_sum(100000000000000000000)\
    \ = 252040\nsquare_sum(1000000000000000000000) = 252040\nsquare_sum(10000000000000000000000)\
    \ = 252040\nsquare_sum(100000000000000000000000) = 252040\nsquare_sum(1000000000000000000000000)\
    \ = 252040\nsquare_sum(10000000000000000000000000) = 252040\nsquare_sum(100000000000000000000000000)\
    \ = 252040\nsquare_sum(1000000000000000000000000000) = 252040\nsquare_sum(10000000000000000000000000000)\
    \ = 252040\nsquare_sum(100000000000000000000000000000) = 252040\nsquare_sum(1000000000000000000000000000000)\
    \ = 252040\nsquare_sum(10000000000000000000000000000000) = 252040\nsquare_sum(100000000000000000000000000000000)\
    \ = 252040\nsquare_sum(1000000000000000000000000000000000) = 252040\nsquare_sum(10000000000000000000000000000000000)\
    \ = 252040\nsquare_sum(100000000000000000000000000000000000) = 252040\nsquare_sum(1000000000000000000000000000000000000)\
    \ = 252040\nsquare_sum(10000000000000000000000000000000000000) = 252040\n", " \
    \   if n == 0\n        Vector{Int64}()\n    elseif n == 1\n        Vector{Int64}(3)\n\
    \    elseif n % 2 == 0\n        tri(n - 1) + tri(n - 2) + tri(n + 1)\n    else\n\
    \        tri(n - 1) + tri(n - 2) + tri(n + 1) + tri(n + 2)\n    end\nend\n</cell>\n\
    <text>\nProblem 3\nWrite a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\nFor instance:\n6 is a prime number.\n7 is not a prime\
    \ number.\n9 is also not a prime number.\nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nFor instance:\n6 is a prime number.\n\
    7 is not a prime number.\n9 is also not a prime number.\nWrite a function that\
    \ checks if a number is prime or not. \nA prime number is a natural number greater\
    \ than 1 that has no positive divisors other than 1 and itself.\nFor instance:\n\
    6 is a prime number.\n7 is not a prime number.\n9 is also not a prime number.\n\
    Write a function that checks if a number is prime or not. \nA prime number is\
    \ a natural number greater than 1 that has no positive divisors other than 1 and\
    \ itself.\nFor instance:\n6 is a prime number.\n7 is not a prime number.\n9 is\
    \ also not a prime number.\nWrite a function that checks if a number is prime\
    \ or not. \nA prime number is a natural number greater than 1 that has no positive\
    \ divisors other than 1 and itself.\nFor instance:\n6 is a prime number.\n7 is\
    \ not a prime number.\n9 is also not a prime number.\nWrite a function that checks\
    \ if a number is prime or not. \nA prime number is a natural number greater than\
    \ 1 that has no positive divisors other than 1 and itself.\nFor instance:\n6 is\
    \ a prime number.\n7 is not a prime number.\n9 is also not a prime number.\nWrite\
    \ a function that checks if a number is prime or not. \nA prime number is a natural\
    \ number greater than 1 that has no positive divisors other than 1 and itself.\n\
    For instance:\n6 is a prime number.\n7 is not a prime number.\n9 is also not a\
    \ prime number.\nWrite a function that checks if a number is prime or not. \n\
    A prime number is a natural number greater than 1 that has no positive divisors\
    \ other than 1 and itself.\nFor instance:\n6 is a prime number.\n7 is not a prime\
    \ number.\n9 is also not a prime number.\nWrite a function that checks if a number\
    \ is prime or not. \nA prime number is a natural number greater than 1 that has\
    \ no positive divisors other than 1 and itself.\nFor instance:\n6 is a prime ",
  "    if n == 1 \n        return [1]\n    else if n == 2 \n        return [1, 1]\n\
    \    else \n        tri(n-1) + tri(n-2) + tri(n+2)\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\ntri(10)\n</cell>\n<code language=julia-1.5>\n\"\"\"\n \
    \   fib(n) returns the nth number in the Fibonacci sequence\n    fib(0) = 0\n\
    \    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n    fib(n) =\
    \ fib(n-1) + fib(n-2) + fib(n+1), if n is odd.\n    Examples:\n    fib(2) = 2\n\
    \    fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2) + fib(n+1), if n is odd.\n\"\
    \"\"", "    if n == 0\n        Vector{Int64}()\n    else\n        tri(n - 1) +\
    \ tri(n - 2) + tri(n + 1)\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    tri(10)\n</cell>\n<text>\nExercise 2\nWrite a function that calculates the factorial\
    \ of a given number. \nThe factorial of a number $n$ is defined as:\n$$n! = n\
    \ \\times n-1 \\times n-2 \\times .... 1 \\times 1$$\nExamples:\n$$1! = 1$$\n\
    $$2! = 2$$\n$$3! = 6$$\n$$4! = 24$$\n$$5! = 120$$\n$$6! = 720$$\n$$7! = 5040$$\n\
    $$8! = 40320$$\n$$9! = 362880$$\n$$10! = 3628800 $$\n$$11! = 39916800$$\n$$12!\
    \ = 6227020800$$\n$$13! = 87178291200$$\n$$14! = 1307674368000$$\n$$15! = 20922789888000$$\n\
    $$16! = 296979174736000 $$\n$$17! = 4503599627372000$$\n$$18! = 67510912896340000$$\n\
    $$19! = 121645100408832000$$\n$$20! = 2432902008176640000$$\n$$21! = 37517675699840640000$$\n\
    $$22! = 614891469123651720000$$\n$$23! = 996147170054451376000$$\n$$24! = 172236451639264256000$$\n\
    $$25! = 32767425536864288000$$\n$$26! = 64355740536059875200$$\n$$27! = 128721270360540816800$$\n\
    $$28! = 251722038923747161600$$\n$$29! = 510909421717094435200$$\n$$30! = 1208925819614629145600$$\n\
    $$31! = 2199023255552329129600$$\n$$32! = 4291912314561669734400$$\n$$33! = 8388607645054740243200$$\n\
    $$34! = 16777216004959476761600$$\n$$35! = 3145728000", "    if n == 0 \n    \
    \    Vector{Int64}() \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1)\
    \ \n    end\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ factorial of a given number. \nExamples:\nfactorial(1) = 1\nfactorial(2) = 2\n\
    factorial(3) = 6\nfactorial(4) = 24\nfactorial(5) = 120\nfactorial(6) = 720\n\
    factorial(7) = 5040\nfactorial(8) = 40320\nfactorial(9) = 362880\nfactorial(10)\
    \ = 3628800 \nfactorial(11) = 39916800\nfactorial(12) = 479001600\nfactorial(13)\
    \ = 6227020800\nfactorial(14) = 87178291200\nfactorial(15) = 1307674368000\nfactorial(16)\
    \ = 20922789888000\nfactorial(17) = 355687428096000\nfactorial(18) = 6402373705728000\n\
    factorial(19) = 121645100408832000\nfactorial(20) = 2432902008176640000\nfactorial(21)\
    \ = 51090942171709440000\nfactorial(22) = 1124000727777607680000\nfactorial(23)\
    \ = 25852016738884976640000\nfactorial(24) = 620448401733239439360000\nfactorial(25)\
    \ = 15511210043330985984000000\nfactorial(26) = 403291461126605635584000000\n\
    factorial(27) = 10888869450418352160768000000\nfactorial(28) = 304888344611713860501504000000\n\
    factorial(29) = 8841761993739701954543616000000\nfactorial(30) = 265252859812191058636308480000000\n\
    factorial(31) = 8222838654177922817725562880000000\nfactorial(32) = 171798691848745910125732364828L\n\
    factorial(33) = 4790016001600L\nfactorial(34) = 107374182400000000L\nfactorial(35)\
    \ = 2147483648L\nfactorial(36) = 4294967296L\nfactorial(37) = 8589934592L\nfactorial(38)\
    \ = 17179869184L\nfactorial(39) = 4398046511104L\nfactorial(40) = 8796093022208L\n\
    factorial(41) = 17592186044416", "    if n == 0 \n        return Vector{Int64}()\
    \ \n    else if n == 1 \n        return Vector{Int64}(1) \n    else \n       \
    \ return tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    \"\"\"\n    fib(n::Int64)::Vector{Int64}\n    \n    Fibonacci sequence is defined\
    \ by the recurrence:\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n is\
    \ even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    For example:\n\
    \    fib(2) = 1 + 1 = 2\n    fib(3) = fib(2)+fib(1)+fib(2)\n           = 2 + 1\
    \ + 2 = 5 \n    You are given a non-negative integer number n, you have to a return\
    \ a list of the \n    first n numbers of the Fibonacci sequence.\n    Examples:\n\
    \    fib(3) = [1, 1, 2]\n    fib(0) = []\n    fib(1) = [1]\n    fib(2) = [1, 1]\n\
    \    \"\"\"", "    if n == 0 \n        Vector{Int64}() \n    else \n        tri(n-1)\
    \ + tri(n-2) + tri(n+1) \n    end\nend\n</cell>\n<code language=julia-1.5>\n\"\
    \"\"\n    fib(n::Int64)", "    if n == 1 \n        return [1]\n    else if n ==\
    \ 2 \n        return [1, 1]\n    else \n        tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1)\n    end\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    fib(n::Int64)::Int64\n\
    \    \n    Recursive Fibonacci function\n    \n    Arguments:\n    \n    - `n`:\
    \ non-negative integer\n    \n    Returns:\n    \n    - `n` Fibonacci number\n\
    \    \n    Examples:\n    \n    fib(1) = 0\n    fib(2) = 1\n    \n    fib(3) =\
    \ 3\n    \n    fib(n) = fib(n-1) + fib(n-2)\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4)\n \
    \   \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5)\n    \n\
    \    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6)\n\
    \    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6)\
    \ + fib(n-7)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5)\
    \ + fib(n-6) + fib(n-7) + fib(n-8)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3)\
    \ + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9)\n    \n  \
    \  fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) +\
    \ fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10)\n    \n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9)\
    \ + fib(n-10) + fib(n-11)\n    \n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) +\
    \ fib(n-4) + fib(n-5) + fib(n-6) + fib(n-7) + fib(n-8) + fib(n-9) + fib(n-10)\
    \ + fib(n-11) + fib(n-12)\n    \n", "    if n == 0 \n        Vector{Int64}() \n\
    \    else \n        tri(n-1) + tri(n-2) + tri(n+1) \n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\n\"\"\"\n    fib(n::Int64)::Int64\n    \n    Recursive function\
    \ that returns the nth number in the Fibonacci sequence\n    \n    Arguments:\n\
    \    \n    - `n::Int64`: non-negative integer number\n    \n    Returns:\n   \
    \ \n    - `n::Int64`: nth number in the Fibonacci sequence\n    \n    Examples:\n\
    \    \n    ```julia\n    julia> fib(3)\n    8\n    julia> fib(4)\n    13\n   \
    \ julia> fib(5)\n    34\n    ```\n\"\"\"", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.5>\ntri(10)\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that returns the Fibonacci number at a given index. \nThe Fibonacci sequence\
    \ is defined by the recurrence:\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(n)\
    \ = fibonacci(n - 1) + fibonacci(n - 2), if n is even.\nfibonacci(n) = fibonacci(n\
    \ - 1) + fibonacci(n - 2) + fibonacci(n - 3), if n is odd.\nExamples:\nfibonacci(0)\
    \ = 1\nfibonacci(1) = 1\nfibonacci(2) = 1\nfibonacci(3) = 2\nfibonacci(4) = 3\n\
    fibonacci(5) = 5\nfibonacci(6) = 8 \nfibonacci(7) = 13\nfibonacci(8) = 21\nfibonacci(9)\
    \ = 55\nfibonacci(10) = 89\nfibonacci(11) = 144\nfibonacci(12) = 233\nfibonacci(13)\
    \ = 418\nfibonacci(14) = 673\nfibonacci(15) = 1093\nfibonacci(16) = 1771\nfibonacci(17)\
    \ = 2584\nfibonacci(18) = 4181\nfibonacci(19) = 6765\nfibonacci(20) = 10946\n\
    fibonacci(21) = 17711\nfibonacci(22) = 25847\nfibonacci(23) = 41816\nfibonacci(24)\
    \ = 67647\nfibonacci(25) = 109456\nfibonacci(26) = 177117\nfibonacci(27) = 258477\n\
    fibonacci(28) = 418162\nfibonacci(29) = 676477\nfibonacci(30) = 1094557\nfibonacci(31)\
    \ = 1771178\nfibonacci(32) = 2584774\nfibonacci(33) = 4181623\nfibonacci(34) =\
    \ 6764777\nfibonacci(35) = 10945578\n", "    if n == 0 \n        Vector{Int64}()\
    \ \n    else \n        tri(n - 1) + tri(n - 2) + tri(n + 1) \n    end\nend\n</cell>\n\
    <code language=julia-1.0>\n\"\"\"\n    fib(n::Int64)", "    if n == 1\n      \
    \  [1]\n    elseif n == 2\n        [1,2]\n    else\n        tri(n-1) + tri(n-2)\
    \ + tri(n+1)\n    end\nend", "    if n == 1 \n        return [1]\n    else if\
    \ n == 2 \n        return [1, 1]\n    else \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\"\n    fib(n)\n\
    \    \n    Recursive function that returns the nth number of the Fibonacci sequence.\n\
    \    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) + fib(n-2), if n\
    \ is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3), if n is odd.\n    \n\
    \    Examples:\n    fib(2) = 2\n    fib(3) = 3\n    fib(n) = fib(n-1) + fib(n-2)\
    \ + fib(n-3), if n is even.\n    fib(n) = fib(n-1) + fib(n-2) + fib(n-3) + fib(n-4),\
    \ if n is odd.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1) +\
    \ fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5), if n is even.\n    fib(n) = fib(n-1)\
    \ + fib(n-2) + fib(n-3) + fib(n-4) + fib(n-5) + fib(n-6), if n is odd.\n    \"\
    \"\"", "    if n == 1 \n        tri = [3]\n    else \n        tri = [tri(n - 1)\
    \ + tri(n - 2) + tri(n + 1)]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    @assert tri(3) == [1, 3, 2, 8]\n</cell>\n<text>\nExercise 3\nWrite a function\
    \ that returns the first n Fibonacci numbers. \nExamples:\nfib(3) = [1, 1, 2]\n\
    fib(4) = [1, 1, 2, 3, 5]\nfib(5) = [1, 2, 3, 5, 8, 13]\nHint: Use a for loop and\
    \ a variable that stores the previous two Fibonacci numbers.", "    if n == 1\
    \ \n        return [1]\n    else if n == 2 \n        return [1, 2]\n    else \n\
    \        return tri(n - 1) + tri(n - 2) + tri(n + 1)\nend", "    if n == 1 \n\
    \        return [1]\n    else if n % 2 == 0 \n        return tri(n - 1) + tri(n\
    \ - 2) + tri(n + 1)\n    else \n        return tri(n - 1) + tri(n - 2) + tri(n\
    \ + 1) + tri(n - 3) + tri(n - 4)\nend\n</cell>\n<code language=julia-1.0>\n\"\"\
    \"\n    fib(n)\n    \n    Recursive function that returns the nth number of the\
    \ Fibonacci sequence.\n    \n    fib(0) = 0\n    fib(1) = 1\n    fib(n) = fib(n-1)\
    \ + fib(n-2), if n is even.\n    \n    Examples:\n    fib(2) = 2\n    fib(3) =\
    \ 3\n    fib(n) = fib(n-1) + fib(n-2), if n is even.\n\"\"\""]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
