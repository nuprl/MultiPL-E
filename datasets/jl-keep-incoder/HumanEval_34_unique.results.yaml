name: HumanEval_34_unique
language: julia
results:
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).keys\nunique(l::Vector{Float64}) = unique(l).keys\nunique(l::Vector{String})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique(l).keys\nunique(l::Vector{Any}) = unique(l).keys\nunique(l::Vector{Any})\
    \ = unique\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpxuieyqky.jl:56\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] unique(::Array{Int64,1}) at /tmp/tmpxuieyqky.jl:14\
    \ (repeats 79984 times)\n  \nTest Summary: | Error  Total\ntest set      |   \
    \  1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpxuieyqky.jl:53\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !haskey(seen,\
    \ x)\n            push!(unique, x)\n            seen[x] = true\n        end\n\
    \    end\n    return unique\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpln6nay_x.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpln6nay_x.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm644w11_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm644w11_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            unique.add(i)\n            seen.add(i)\n        end\n   \
    \ end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmsjysd25.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmsjysd25.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_7vq6j8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_7vq6j8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            unique.add(i)\n            seen.add(i)\n        end\n   \
    \ end\n    return unique\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprgqhpl7p.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprgqhpl7p.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis does not work if you have a `Vector{Int}`,\
    \ as `Set` does not have a `add` method.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with `Vector{Int}`.\n<|/ c |>\n<| a dscore=3 |>\n<code>\njulia> using\
    \ Statistics\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7vnd9_lw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7vnd9_lw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\nThis should be the accepted answer. `unique` should\
    \ be used instead of `sort!`\n<|/ c |>\n<| a dscore=3 |>\nI believe that Julia\
    \ has a built-in function for this, unique.\n<|/ a tags=julia,arrays |>\n<| c\
    \ |>\nThis should be the accepted answer. `unique` should be used instead of `sort!`\n\
    <|/ c |>\n<| a tags=julia,arrays |>\nI believe that Julia has a built-in function\
    \ for this, unique.\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element\
    \ Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=3 |>\n<| a\
    \ dscore=3 |>\nThe function unique is now deprecated in Julia 1.0 and will be\
    \ removed in Julia 1.0.1. Use unique! instead.\n<|/ a tags=julia,arrays |>\n<|\
    \ a tags=julia,arrays |>\nThe function unique is now deprecated in Julia 1.0 and\
    \ will be removed in Julia 1.0.1. Use unique! instead.\n<|/ a dscore=3 |>\n<|\
    \ a tags=julia,arrays |>\nI believe that Julia has a built-in function for this,\
    \ unique.\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,arrays\
    \ |>\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays\
    \ |>\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzp9t83l2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzp9t83l2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    unique.update(l)\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd8be83re.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd8be83re.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe45hakt8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe45hakt8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  unique\nend\n</cell>\n<text>\nThe function unique returns a sorted unique list\
    \ of integers. We can test it by comparing the output with the expected output.\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfl09b23q.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfl09b23q.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis is not the fastest solution. `unique` uses `Set` internally,\
    \ so it's O(n) instead of O(n log n).\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ But the question was about a solution that is faster than the one I posted.\
    \ I think this solution is more readable and easy to understand.\n<|/ c |>\n<|\
    \ c |>\nI agree that it's more readable, but it's also less efficient. `unique`\
    \ uses `Set` internally, so it's O(n) instead of O(n log n). `unique` also uses\
    \ `sort`, which also uses `Set` internally, so it's O(n) instead of O(n log n).\
    \ `unique` also uses `sort`, which also uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ uses `sort`, which uses `sort`, which uses `sort`, which uses `sort`, which\
    \ \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu7j9ig3p.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu7j9ig3p.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</code>\n<|/ a |>\n\
    <| c |>\nThis doesn't work if you have a vector of strings or other types that\
    \ aren't Int64\n<|/ c |>\n<| a tags=julia,unique,sorting |>\nI like using Sets:\n\
    <code>\njulia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp45_hbe2i.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp45_hbe2i.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            unique.add(i)\n            seen.add(i)\n        end\n   \
    \ end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjp_ppg8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjp_ppg8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns the number\
    \ of unique elements in the vector. For example, unique([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) should return 4.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxhb5_8ej.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxhb5_8ej.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| c |>\nI believe this should be `if !haskey(unique,\
    \ x)` instead of `if !haskey(unique, x)` as `haskey` returns `nothing` if the\
    \ key is not in the set.\n<|/ c |>\n<| c |>\nThanks for pointing that out. I've\
    \ fixed the answer.\n<|/ c |>\n<| c |>\n`unique = Set()` is unnecessary, `Set()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `unique = Set{Int}()` is also unnecessary, `Set{Int}()`\
    \ already creates an empty set. `\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuq9yxf2y.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuq9yxf2y.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    return\
    \ unique\nend\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp2gkuij33.jl:17\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Set has no field add\n  Stacktrace:\n   [1] getproperty(::Set{Any}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] unique(::Array{Int64,1}) at /tmp/tmp2gkuij33.jl:8\n\
    \   [3] top-level scope at /tmp/tmp2gkuij33.jl:17\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmp2gkuij33.jl:16\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp2gkuij33.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=julia,arrays |>\nI like using Sets to remove duplicates:\n<code>\njulia>\
    \ a = [1,2,2,3,3,4,5,5,5,6,7,8,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,9,\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt7lvcsfj.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt7lvcsfj.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique(unique(unique))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo1mkwfi8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1mkwfi8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis does not answer the question. `unique`\
    \ does not remove duplicates.\n<|/ c |>\n<| a tags=julia,arrays |>\nThe function\
    \ unique in Julia does not remove duplicates. \n<code>\njulia> unique([1,1,2,3])\n\
    1-element Array{Int64,1}:\n 1\n</code>\nTo remove duplicates, you can use Sets:\n\
    <code>\njulia> Set([1,1,2,3])\nSet{Int64}([1,2,3])\n</code>\n<|/ a dscore=4 |>\n\
    <| c |>\nThis does not answer the question. `unique` does not remove duplicates.\n\
    <|/ c |>\n<| c |>\nThe question was about removing duplicates, not about removing\
    \ duplicates in general. `unique` removes duplicates from an array. `Set` removes\
    \ duplicates from sets. `Set` does not remove duplicates from arrays.\n<|/ c |>\n\
    <| c |>\n`unique` removes duplicates from an array. `Set` removes duplicates from\
    \ sets. `Set` does not remove duplicates from arrays.\n<|/ c |>\n<| c |>\nThe\
    \ question was about removing duplicates, not about removing duplicates in general.\
    \ `unique` removes duplicates from an array. `Set` removes duplicates from sets.\
    \ `Set` does not remove duplicates from arrays.\n<|/ c |>\n<| c |>\nThe question\
    \ was about removing duplicates, not about removing duplicates in general. `unique`\
    \ removes duplicates from an array. `Set` removes duplicates from sets. `Set`\
    \ does not remove duplicates from arrays.\n<|/ c |>\n<| a dscore=4 |>\nThe function\
    \ unique in Julia does not remove duplicates. \n<code>\njulia> unique([1,1,2,3])\n\
    1-element Array{Int64,1}:\n 1\n</code>\nTo remove duplicates, you can use Sets:\n\
    <code>\njulia> Set([1,1,2,3])\nSet{Int64}([1,2,3])\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| c |>\nThis does not answer the question. `unique` does not remove duplicates.\n\
    <|/ c |>\n<| a |>\nThe function unique in Julia does not remove duplicates. \n\
    <code>\njulia> unique([1,1,2,3])\n1-element Array{Int64,1}:\n 1\n</code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ro7gu68.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ro7gu68.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpegfsyjpa.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpegfsyjpa.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmppz53uegr.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.Iterators.Pairs, ::Any) at iterators.jl:247\n\
    \    haskey(!Matched::Dict, ::Any) at dict.jl:545\n    haskey(!Matched::Base.ImmutableDict,\
    \ ::Any) at dict.jl:765\n    ...\n  Stacktrace:\n   [1] unique(::Array{Int64,1})\
    \ at /tmp/tmppz53uegr.jl:8\n   [2] top-level scope at /tmp/tmppz53uegr.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmppz53uegr.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmppz53uegr.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if !haskey(seen,\
    \ i)\n            push!(unique, i)\n            push!(seen, i)\n        end\n\
    \    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    This does not answer the question. The question asks for an efficient way to remove\
    \ duplicates from a vector, while this answer does not.\n<|/ c |>\n<| c |>\nThe\
    \ question asks for an efficient way to remove duplicates from a vector, while\
    \ this answer does not.\n<|/ c |>\n<| c |>\nThe question asks for an efficient\
    \ way to remove duplicates from a vector, while this answer does not.\n<|/ c |>\n\
    <| c |>\nThe question asks for an efficient way to remove duplicates from a vector,\
    \ while this answer does not.\n<|/ c |>\n<| c |>\nThe question asks for an efficient\
    \ way to remove duplicates from a vector, while this answer does not.\n<|/ c |>\n\
    <| a dscore=4 |>\nA simple and efficient solution is to use Sets.jl:\n<code>\n\
    julia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7vfzcvo.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7vfzcvo.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    return\
    \ unique\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia,set |>\nI like using\
    \ Sets to do this. \n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsjm9w41j.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsjm9w41j.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            unique = unique + [i]\n            seen = seen + [i]\n  \
    \      end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1wsktdge.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1wsktdge.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmp330g06am.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.Iterators.Pairs, ::Any) at iterators.jl:247\n\
    \    haskey(!Matched::Dict, ::Any) at dict.jl:545\n    haskey(!Matched::Base.ImmutableDict,\
    \ ::Any) at dict.jl:765\n    ...\n  Stacktrace:\n   [1] unique(::Array{Int64,1})\
    \ at /tmp/tmp330g06am.jl:8\n   [2] top-level scope at /tmp/tmp330g06am.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmp330g06am.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmp330g06am.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        unique += [x]\n    end\n    return\
    \ unique(unique(unique))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoz1qdz4s.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoz1qdz4s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = 1\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpux3my3fh.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpux3my3fh.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpia4rggp8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpia4rggp8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if you have a `Vector{Int}`, because\
    \ `Set` doesn't have a `haskey` method.\n<|/ c |>\n<| a tags=julia |>\nI came\
    \ up with this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate =\
    \ unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9,\
    \ 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4lu7eyhx.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4lu7eyhx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo4pt3tvq.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo4pt3tvq.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphgt5tp8m.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphgt5tp8m.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nI like your solution, but I wonder if there\
    \ is a way to avoid the for loop. Maybe some kind of Julia magic?\n<|/ c |>\n\
    <| c |>\nI added a solution that avoids the for loop, but I still think it's better\
    \ to use a for loop. Maybe someone else can come up with a better solution.\n\
    <|/ c |>\n<| c |>\nI added a solution that avoids the for loop, but I still think\
    \ it's better to use a for loop. Maybe someone else can come up with a better\
    \ solution.\n<|/ c |>\n<| c |>\nI added a solution that avoids the for loop, but\
    \ I still think it's better to use a for loop. Maybe someone else can come up\
    \ with a better solution.\n<|/ c |>\n<| a tags=julia,arrays |>\nI came up with\
    \ this solution:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrhkoljq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrhkoljq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmsu9d7pz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmsu9d7pz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if !seen.add(i)\n\
    \            unique.add(i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps_tz1qd6.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps_tz1qd6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdtzjikpy.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdtzjikpy.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| a tags=julia,set |>\nHere is a solution that uses Julia's built-in\
    \ Sets:\n<code>\njulia> function unique(x::Vector{Int64})\n           return Set(x...)\n\
    \       end\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk6lpd_iw.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk6lpd_iw.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=julia |>\nI wrote a package called UniqueArray.jl that does this for\
    \ you:\n<code>\njulia> using UniqueArray\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp26mti0l8.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp26mti0l8.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpivldqng4.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpivldqng4.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique.value\nend\n\
    </cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpye2jdlen.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpye2jdlen.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = 1\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis should be the accepted answer. `unique`\
    \ function already exists in Julia. No need to reinvent the wheel.\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nA simple solution using Sets:\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> unique(a)\n10-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n\
    <|/ a dscore=5 |>\n<| c |>\nThis should be the accepted answer. `unique` function\
    \ already exists in Julia. No need to reinvent the wheel.\n<|/ c |>\n<| c |>\n\
    This should be the accepted answer. `unique` function already exists in Julia.\
    \ No need to reinvent the wheel.\n<|/ c |>\n<| a dscore=5 |>\nIn Julia 1.1, you\
    \ can use the function unique to remove duplicates from an array:\n<code>\njulia>\
    \ a = [5,3,5,2,3,3,9,0,123]\njulia> unique(a)\n10-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis should\
    \ be the accepted answer. `unique` function already exists in Julia. No need to\
    \ reinvent the wheel.\n<|/ c |>\n<| c |>\nThis should be the accepted answer.\
    \ `unique` function already exists in Julia. No need to reinvent the wheel.\n\
    <|/ c |>\n<| a tags=julia,arrays |>\nIn Julia 1.1, you can use the function unique\
    \ to remove duplicates from an array:\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> unique(a)\n10-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n\
    <|/ a dscore=5 |>\n<| a dscore=5 |>\nIn Julia 1.1, you can use the function unique\
    \ to remove duplicates from an array:\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> unique(a)\n10-element Array{\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1x9v433j.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1x9v433j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that returns the number of unique elements\
    \ in a list\n    >>> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n    6\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvx79bc7j.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvx79bc7j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjm5jaidx.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjm5jaidx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppesw574l.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppesw574l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like this solution, but I wonder if it would be\
    \ faster to use `Set` instead of `Dict`?\n<|/ c |>\n<| c |>\nI haven't tested\
    \ it, but I suspect that `Set` would be faster, since it uses hash tables to store\
    \ the elements. `Dict` would have to iterate over the entire dictionary to find\
    \ the element to remove (which would be O(n) in the worst case).\n<|/ c |>\n<|\
    \ c |>\nI tested it and it seems that `Set` is faster. `Dict` was slower for me.\
    \ `Dict` was faster when `unique` was called multiple times. I wonder why `Set`\
    \ was faster when `unique` was called multiple times.\n<|/ c |>\n<| c |>\nI suspect\
    \ that `Set` was faster because `Set` uses hash tables to store the elements.\
    \ `Dict` would have to iterate over the entire dictionary to find the element\
    \ to remove (which would be O(n) in the worst case).\n<|/ c |>\n<| c |>\nI tested\
    \ it and it seems that `Set` is faster. `Dict` was slower for me. `Dict` was faster\
    \ when `unique` was called multiple times. I wonder why `Set` was faster when\
    \ `unique` was called multiple times.\n<|/ c |>\n<| a dscore=2 |>\nI suggest you\
    \ to use Sets.\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2krczn3g.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2krczn3g.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = 1\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe83_fsl5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe83_fsl5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        unique.add(x)\n    end\n    return\
    \ unique\nend\n</code>\n<|/ a tags=julia,unique,list |>\n<| c |>\nThis does not\
    \ answer the question. `unique` does not remove duplicates.\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe easiest way is to use Sets:\n<code>\njulia> Set([1,2,3,4,5,6,7,8,9])\n\
    Set{Int64}([1,2,3,4,5,6,7,8,9])\n</code>\n<|/ a tags=julia,unique,list |>\n<|\
    \ c |>\nThis does not answer the question. `unique` does not remove duplicates.\n\
    <|/ c |>\n<| c |>\nThis answer does answer the question. `unique` removes duplicates.\n\
    <|/ c |>\n<| c |>\nThis answer does answer the question. `unique` removes duplicates.\n\
    <|/ c |>\n<| a tags=julia,unique,list |>\nThe most efficient way is to use Sets:\n\
    <code>\njulia> Set([1,2,3,4,5,6,7,8,9])\nSet{Int64}([1,2,3,4,5,6,7,8,9])\n</code>\n\
    <|/ a dscore=4 |>\n<| a dscore=3 |>\nA simple way is to use Sets:\n<code>\njulia>\
    \ Set([1,2,3,4,5,6,7,8,9])\nSet{Int64}([1,2,3,4,5,6,7,8,9])\n</code>\n<|/ a tags=julia,unique,list\
    \ |>\n<| c |>\nThis does not answer the question. `unique` does not remove duplicates.\n\
    <|/ c |>\n<| a dscore=3 |>\nA simple way is to use Sets:\n<code>\njulia> Set([1,2,3,4,5,6,7,8,9])\n\
    Set{Int64}([1,2,3,4,5,6,7,8,9])\n</code>\n<|/ a tags=julia,unique,list |>\n<|\
    \ c |>\nThis does not answer the question. `unique` does not remove duplicates.\n\
    <|/ c |>\n<| a |>\nA simple way is to use Sets:\n<code>\njulia> Set([1,2,3,4,5,6,7,8,9])\n\
    Set{Int64}([1,2,3,4,5,6,7,8,9])\n</code>\n<|/ a tags=julia,unique,list dscore=3\
    \ |>\n<| a dscore=3 |>\nThe most efficient way is to use Sets:\n<code>\njulia>\
    \ Set([1,2,3,4,5,6,\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0xn_8fsn.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xn_8fsn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjo357z9p.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjo357z9p.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not the most efficient solution. `unique`\
    \ will have to traverse the entire list to find out if an element has been seen\
    \ before. `sort` will have to traverse the entire list to sort it, then traverse\
    \ the list again to remove duplicates. `sort!` will have to traverse the list\
    \ to sort it, then traverse the list again to remove duplicates. `unique!` will\
    \ have to traverse the list to sort it, then traverse the list again to remove\
    \ duplicates. `unique!` will have to traverse the list to sort it, then traverse\
    \ the list again to remove duplicates. `unique!` will have to traverse the list\
    \ to sort it, then traverse the list again to remove duplicates. `unique!` will\
    \ have to traverse the list to sort it, then traverse the list again to remove\
    \ duplicates. `unique!` will have to traverse the list to sort it, then traverse\
    \ the list again to remove duplicates. `unique!` will have to traverse the list\
    \ to sort it, then traverse the list again to remove duplicates. `unique!` will\
    \ have to traverse the list to sort it, then traverse the list again to remove\
    \ duplicates. `unique!` will have to traverse the list to sort it, then traverse\
    \ the list again to remove duplicates. `unique!` will have to traverse the list\
    \ to sort it, then traverse the list again to remove duplicates. `unique!` will\
    \ have to traverse the list to sort it, then traverse the list again to remove\
    \ duplicates. `unique!` will have to traverse the list to sort it, then traverse\
    \ the list again to remove duplicates. `unique!` will have to traverse the list\
    \ to sort it, then traverse the list again to remove duplicates. `unique!` will\
    \ have to traverse the list to sort it, then traverse the list again to remove\
    \ duplicates. `unique!` will have to traverse the list to sort it, then traverse\
    \ the list again to remove duplicates. `unique!` will have to traverse the list\
    \ to sort it, then traverse the list again to remove duplicates. `unique!` will\
    \ have to traverse the list to sort it, then traverse the list again to remove\
    \ duplicates. `unique!` will have to traverse the list to sort it, then traverse\
    \ the list again to remove duplicates. `\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0iwxug0l.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0iwxug0l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    unique\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have\
    \ a vector of strings. `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])` returns `[\"\
    a\", \"b\", \"c\"]` instead of `[\"a\", \"a\", \"c\"]`.\n<|/ c |>\n<| c |>\nThis\
    \ doesn't work if you have a vector of strings. `unique([\"a\", \"a\", \"b\",\
    \ \"a\", \"c\"])` returns `[\"a\", \"b\", \"c\"]` instead of `[\"a\", \"a\", \"\
    c\"]`.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a vector of strings.\
    \ `unique([\"a\", \"a\", \"b\", \"a\", \"c\"])` returns `[\"a\", \"b\", \"c\"\
    ]` instead of `[\"a\", \"a\", \"c\"]`.\n<|/ c |>\n<| a tags=julia,arrays |>\n\
    The easiest way is to use Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptpbpw80t.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptpbpw80t.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| a dscore=2 |>\nI like using Julia's built-in Sets to do this:\n<code>\n\
    julia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps9i8flsi.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps9i8flsi.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis does not answer the question. `unique`\
    \ does not sort the array, it just removes duplicates.\n<|/ c |>\n<| c |>\nIt\
    \ does answer the question. `unique` removes duplicates, not sorting. `unique`\
    \ returns a new vector with unique elements. `unique([5,3,5,2,3,9,0,123])` returns\
    \ `[5,3,9,123]`\n<|/ c |>\n<| c |>\nIt does answer the question. `unique` removes\
    \ duplicates, not sorting. `unique` returns a new vector with unique elements.\
    \ `unique([5,3,5,2,3,9,0,123])` returns `[5,3,9,123]`\n<|/ c |>\n<| c |>\nThe\
    \ question was about sorting and removing duplicates. `unique` does not do that.\
    \ `unique` returns a new vector with unique elements. `unique([5,3,5,2,3,9,0,123])`\
    \ returns `[5,3,9,123]`\n<|/ c |>\n<| c |>\nIt does answer the question. `unique`\
    \ removes duplicates, not sorting. `unique` returns a new vector with unique elements.\
    \ `unique([5,3,5,2,3,9,0,123])` returns `[5,3,9,123]`\n<|/ c |>\n<| a dscore=4\
    \ |>\nThe answer by is correct and should be accepted as the correct answer. \n\
    However, I wanted to add some additional information to it for those who are new\
    \ to Julia. \nThe unique function returns a new vector with unique elements. \n\
    <code>\njulia> unique([5,3,5,2,3,9,0,123])\n5-element Array{Int64,1}:\n 5\n 3\n\
    \ 9\n 123\n</code>\nThe unique function does not sort the array, it just removes\
    \ duplicates. \n<code>\njulia> unique([5,3,5,2,3,9,0,123])\n5-element Array{Int64,1}:\n\
    \ 5\n 3\n 9\n 123\n</code>\nThe unique function returns a new vector with unique\
    \ elements. \n<code>\njulia> unique([5,3,5,2,3,9,0,123])\n5-element Array{Int64,1}:\n\
    \ 5\n 3\n 9\n 123\n</code>\nThe unique function returns a new vector \nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8m0s_je1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8m0s_je1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays,unique,sorting |>\n<| a dscore=2 |>\nI wanted to add this\
    \ as a comment to the accepted answer, but I don't have enough reputation to do\
    \ so. \nThe accepted answer does not work for me. \n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\nERROR: MethodError: no method matching unique(::Array{Int64,1})\n\
    </code>\nI changed it slightly to make it work:\n<code>\njulia> unique([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) |> sort\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n\
    \ 9\n 123\n</code>\n<|/ a tags=julia,arrays,unique,sorting |>\n<| a |>\nThe accepted\
    \ answer does not work for me. \n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\nERROR: MethodError: no method matching unique(::Array{Int64,1})\n</code>\n\
    I changed it slightly to make it work:\n<code>\njulia> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]) |> sort\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia,arrays,unique,sorting dscore=2 |>\n<| a |>\nThe accepted\
    \ answer does not work for me. \n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0,\
    \ 123])\nERROR: MethodError: no method matching unique(::Array{Int64,1})\n</code>\n\
    I changed it slightly to make it work:\n<code>\njulia> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123]) |> sort\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia,arrays,unique,sorting dscore=2 |>\n<| a tags=julia,arrays,unique,sorting\
    \ dscore=1 |>\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) |> sort\n\
    5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a |>\n<| c |>\n\
    This does not provide an answer to the question. To critique or request clari\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp10b_3orb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp10b_3orb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpad7n48ns.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpad7n48ns.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a vector and returns a vector\
    \ where each element is the product of all the elements in the original vector.\
    \ For example, if the input vector is [1,2,3], the output vector should be [1,2,3].\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxo4rw04n.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxo4rw04n.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l \n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<text>\nExercise 10\n\
    Write a function that takes a vector and returns the number of unique elements\
    \ in the vector. Test it on a list of integers and on a list of strings.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpesnpt74e.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpesnpt74e.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a vector\
    \ where each element is the sum of the squares of the elements in the original\
    \ vector. For example, if the input vector is [1,2,3,4,5], the output vector would\
    \ be [1,2,3,4,5].\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptnbwea9i.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptnbwea9i.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a |>\n<| a tags=julia,arrays\
    \ |>\nA simple and efficient solution is to use Sets:\n<code>\njulia> using Sets\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxvoqhvhf.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxvoqhvhf.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nThis is not the fastest solution, since it requires O(n^2) memory and\
    \ O(n^2) time.\n<|/ c |>\n<| c |>\nYes, I agree. My solution was meant to be a\
    \ simple solution that doesn't require much memory and time.\n<|/ c |>\n<| a dscore=1\
    \ |>\nI believe that this is what you are looking for:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9br_8f18.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9br_8f18.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpha0ro849.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpha0ro849.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThe `unique` function above is wrong. `unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 123]` instead of `[0, 2, 3, 5,\
    \ 9, 123]`.\n<|/ c |>\n<| c |>\nThanks, I fixed the bug. Now it works as expected.\n\
    <|/ c |>\n<| a |>\nA simple and efficient solution using Julia's built-in Sets:\n\
    <code>\njulia> using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2wi9a0nm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2wi9a0nm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            unique.add(i)\n            seen.add(i)\n        end\n   \
    \ end\n    return unique\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't answer\
    \ the question. OP asked for unique elements in a vector, not unique elements\
    \ in a set.\n<|/ c |>\n<| c |>\nI believe this does answer the question. OP asked\
    \ for unique elements in a vector, not unique elements in a set. `unique` returns\
    \ a vector with unique elements. `unique!` modifies the vector in-place.\n<|/\
    \ c |>\n<| c |>\nThis doesn't answer the question. OP asked for unique elements\
    \ in a vector, not unique elements in a set.\n<|/ c |>\n<| a dscore=5 |>\nThe\
    \ most efficient way is to use Sets:\n<code>\njulia> using Sets\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc0rz4e28.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc0rz4e28.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| c |>\n`unique` doesn't sort the input vector. `unique` returns\
    \ a new vector with unique elements. `unique!` modifies the input vector in-place.\n\
    <|/ c |>\n<| c |>\n`unique!` modifies the input vector in-place and returns a\
    \ new vector with unique elements. `unique` returns a new vector with unique elements.\n\
    <|/ c |>\n<| c |>\n`unique!` modifies the input vector in-place and returns a\
    \ new vector with unique elements. `unique` returns a new vector with unique elements.\
    \ `unique!` modifies the input vector in-place and returns a new vector with unique\
    \ elements. `unique` returns a new vector with unique elements. `unique!` modifies\
    \ the input vector in-place and returns a new vector with unique elements. `unique`\
    \ returns a new vector with unique elements. `unique!` modifies the input vector\
    \ in-place and returns a new vector with unique elements. `unique` returns a new\
    \ vector with unique elements. `unique!` modifies the input vector in-place and\
    \ returns a new vector with unique elements. `unique` returns a new vector with\
    \ unique elements. `unique!` modifies the input vector in-place and returns a\
    \ new vector with unique elements. `unique` returns a new vector with unique elements.\
    \ `unique!` modifies the input vector in-place and returns a new vector with unique\
    \ elements. `unique` returns a new vector with unique elements. `unique!` modifies\
    \ the input vector in-place and returns a new vector with unique elements. `unique`\
    \ returns a new vector with unique elements. `unique!` modifies the input vector\
    \ in-place and returns a new vector with unique elements. `unique` returns a new\
    \ vector with unique elements. `unique!` modifies the input vector in-place and\
    \ returns a new vector with unique elements. `unique` returns a new vector with\
    \ unique elements. `unique!` modifies the input vector in-place and returns a\
    \ new vector with unique elements. `unique` returns a new vector with unique elements.\
    \ `unique!` modifies the input vector in-place and returns a new vector with unique\
    \ elements. `unique` returns a new vector with unique elements. `unique!` modifies\
    \ the input vector in-place and returns a new vector with unique elements. `unique`\
    \ returns a new vector with unique elements. `unique!` modifies the input vector\
    \ in-place and returns a new vector with unique elements. `unique` returns a \n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvg5q6uyq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvg5q6uyq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdi2wrq8h.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdi2wrq8h.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have repeated elements. For\
    \ example, `unique([1,1,2,2])` returns `[1,1,2]` instead of `[1,2,2]`.\n<|/ c\
    \ |>\n<| c |>\nI added a version that works with repeated elements.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have repeated elements. For example, `unique([1,1,2,2])`\
    \ returns `[1,1,2]` instead of `[1,2,2]`.\n<|/ c |>\n<| c |>\nI added a version\
    \ that works with repeated elements.\n<|/ c |>\n<| c |>\nThis doesn't work if\
    \ you have repeated elements. For example, `unique([1,1,2,2])` returns `[1,1,2]`\
    \ instead of `[1,2,2]`.\n<|/ c |>\n<| a tags=julia,arrays |>\n<code>\njulia> using\
    \ Statistics\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2z3aiv5u.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2z3aiv5u.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        unique.add(x)\n    end\n    return\
    \ unique\nend\nunique\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpldo68obw.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Set has no field add\n  Stacktrace:\n   [1] getproperty(::Set{Any}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] unique(::Array{Int64,1}) at /tmp/tmpldo68obw.jl:8\n\
    \   [3] top-level scope at /tmp/tmpldo68obw.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpldo68obw.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpldo68obw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6p0122k2.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6p0122k2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpns65f0he.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpns65f0he.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps8dyt05j.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps8dyt05j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a list.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf2dg4487.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf2dg4487.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpjcmdhrot.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(::Array{Int64,1})\
    \ at /tmp/tmpjcmdhrot.jl:6\n   [2] top-level scope at /tmp/tmpjcmdhrot.jl:14\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpjcmdhrot.jl:13\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpjcmdhrot.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo1z5ywe5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo1z5ywe5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplv1notjm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplv1notjm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !seen.add(i)\n            push!(unique, i)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9otk2oex.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9otk2oex.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis is not the most efficient solution,\
    \ since it requires O(n^2) memory and O(n^2) time.\n<|/ c |>\n<| c |>\nYes, I\
    \ agree with you. But the question was about Julia. So, I thought it would be\
    \ better to give a Julia solution. Of course, your solution is more efficient.\n\
    <|/ c |>\n<| c |>\nI agree with you. But the question was about Julia. So, I thought\
    \ it would be better to give a Julia solution. Of course, your solution is more\
    \ efficient.\n<|/ c |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1_kuys0l.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1_kuys0l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a |>\n<| c |>\nThis is not the fastest solution, since it requires O(n^2)\
    \ time complexity to sort the unique elements. A better solution would be to sort\
    \ the array and remove duplicates in O(nlogn) time.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, however I believe that sorting is O(nlogn) complexity and removing\
    \ duplicates is O(n) complexity. Thus, sorting and removing duplicates is O(nlogn)\
    \ complexity. Of course, there are other ways to do this, but I believe that sorting\
    \ and removing duplicates is one of the most efficient ways to do this.\n<|/ c\
    \ |>\n<| c |>\nYes, you are right. Sorting can be done in O(nlogn) time, but removing\
    \ duplicates requires O(n) time. Thus, sorting and removing duplicates is O(nlogn)\
    \ complexity. Of course, there are other ways to do this, but I believe that sorting\
    \ and removing duplicates is one of the most efficient ways to do this.\n<|/ c\
    \ |>\n<| c |>\nI agree with you, however I believe that sorting is O(nlogn) complexity\
    \ and removing duplicates is O(n) complexity. Thus, sorting and removing duplicates\
    \ is O(nlogn) complexity. Of course, there are other ways to do this, but I believe\
    \ that sorting and removing duplicates is one of the most efficient ways to do\
    \ this.\n<|/ c |>\n<| c |>\nI agree with you, however I believe that sorting is\
    \ O(nlogn) complexity and removing duplicates is O(n) complexity. Thus, sorting\
    \ and removing duplicates is O(nlogn) complexity. Of course, there are other ways\
    \ to do this, but I believe that sorting and removing duplicates is one of the\
    \ most efficient ways to do this.\n<|/ c |>\n<| a dscore=5 |>\nI believe that\
    \ Julia has some built-in functions for this, but I haven't used them myself.\n\
    <code>\njulia> unique(vec)\n5-element Array{Int64,1}:\n 0\n 1\n 2\n 3\n 4\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work for me. `unique(vec)` returns\
    \ `ERROR: MethodError: no method matching unique(::Array{Int64,1})`\n<|/ c |>\n\
    <|\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkjs8kz9u.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkjs8kz9u.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nI wrote a package called UniqueArray.jl\
    \ that does this for you:\n<code>\njulia> using UniqueArray\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpycrdd3tn.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpycrdd3tn.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| a dscore=0 |>\nI wrote a package for Julia that does this\
    \ for you:\nhttps://github.com/jrm/unique\n<code>\njulia> using Unique\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbo2nmghg.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbo2nmghg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !haskey(seen,\
    \ x)\n            push!(unique, x)\n            seen[x] = true\n        end\n\
    \    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\nunique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of unique elements in a vector. \nFor example, unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) should return 5.\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpztfe23n7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpztfe23n7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0_vy2vfw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0_vy2vfw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a tags=julia |>\n\
    <| a tags=julia |>\nI came up with a solution which uses no loops and is also\
    \ faster than the other solutions proposed:\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgez8s_a9.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgez8s_a9.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = 1\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays,unique |>\n<| c |>\nThis doesn't work for me. `unique([1,\
    \ 1, 2, 3])` returns `[1, 2]` instead of `[1]`.\n<|/ c |>\n<| c |>\nThis doesn't\
    \ work for me either. `unique([1, 1, 2, 3])` returns `[1, 2]` instead of `[1]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me either. `unique([1, 1, 2, 3])` returns\
    \ `[1, 2]` instead of `[1]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me either.\
    \ `unique([1, 1, 2, 3])` returns `[1, 2]` instead of `[1]`.\n<|/ c |>\n<| c |>\n\
    This doesn't work for me either. `unique([1, 1, 2, 3])` returns `[1, 2]` instead\
    \ of `[1]`.\n<|/ c |>\n<| a tags=julia,arrays,unique |>\nI came up with this solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4kqn_r8b.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4kqn_r8b.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpq45cg6_6.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.Iterators.Pairs, ::Any) at iterators.jl:247\n\
    \    haskey(!Matched::Dict, ::Any) at dict.jl:545\n    haskey(!Matched::Base.ImmutableDict,\
    \ ::Any) at dict.jl:765\n    ...\n  Stacktrace:\n   [1] unique(::Array{Int64,1})\
    \ at /tmp/tmpq45cg6_6.jl:8\n   [2] top-level scope at /tmp/tmpq45cg6_6.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpq45cg6_6.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpq45cg6_6.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis does not answer the question. OP asked for a\
    \ solution that does not require a library and does not require a for loop. Your\
    \ solution requires two for loops.\n<|/ c |>\n<| c |>\nThe question was \"How\
    \ to remove duplicates from a vector?\" The answer is \"Use a library that does\
    \ it for you.\"\n<|/ c |>\n<| c |>\nThe question was \"How to remove duplicates\
    \ from a vector?\" The answer is \"Use a library that does it for you.\"\n<|/\
    \ c |>\n<| c |>\nThe question was \"How to remove duplicates from a vector?\"\
    \ The answer is \"Use a library that does it for you.\"\n<|/ c |>\n<| c |>\nThe\
    \ question was \"How to remove duplicates from a vector?\" The answer is \"Use\
    \ a library that does it for you.\"\n<|/ c |>\n<| a tags=julia,duplicates,vector,unique\
    \ |>\n<code>\njulia> using Statistics\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoqksvik8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoqksvik8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis does not answer the question. `unique`\
    \ does not remove duplicates.\n<|/ c |>\n<| c |>\nI agree, this is an answer to\
    \ the question \"how to remove duplicates from an array\"\n<|/ c |>\n<| c |>\n\
    This does not answer the question. `unique` does not remove duplicates.\n<|/ c\
    \ |>\n<| a tags=julia,arrays |>\nThe easiest way is to use the unique function\
    \ from Base (which also works on DataFrames):\n<code>\njulia> using Base\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpijgwsyem.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpijgwsyem.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    uniques = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(uniques, i)\n            seen[i] = true\n\
    \        end\n    end\n    return uniques\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzu2157oa.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzu2157oa.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpvgn_xum9.jl:20\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  MethodError: no method matching haskey(::Set{Any}, ::Int64)\n  Closest candidates\
    \ are:\n    haskey(!Matched::Base.Iterators.Pairs, ::Any) at iterators.jl:247\n\
    \    haskey(!Matched::Dict, ::Any) at dict.jl:545\n    haskey(!Matched::Base.ImmutableDict,\
    \ ::Any) at dict.jl:765\n    ...\n  Stacktrace:\n   [1] unique(::Array{Int64,1})\
    \ at /tmp/tmpvgn_xum9.jl:8\n   [2] top-level scope at /tmp/tmpvgn_xum9.jl:20\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpvgn_xum9.jl:19\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpvgn_xum9.jl:17\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk4izdj6z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk4izdj6z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n\
    \    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\n\
    unique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n\
    \    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\n\
    unique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n\
    \    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\n\
    unique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n\
    \    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\n\
    unique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64}\
    \ =\n    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n\
    \    unique(unique(sort(l)))\nunique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\n\
    unique(l::Vector{Int64})::Vector{Int64} =\n    unique(unique(sort(l)))\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpwmku8xs0.jl:59\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  StackOverflowError:\n  Stacktrace:\n   [1] Array at ./boot.jl:405 [inlined]\n\
    \   [2] similar at ./array.jl:356 [inlined]\n   [3] copymutable at ./abstractarray.jl:898\
    \ [inlined]\n   [4] #sort#8 at ./sort.jl:763 [inlined]\n   [5] sort at ./sort.jl:763\
    \ [inlined]\n   [6] unique(::Array{Int64,1}) at /tmp/tmpwmku8xs0.jl:52 (repeats\
    \ 74740 times)\n   [7] top-level scope at /tmp/tmpwmku8xs0.jl:59\n   [8] top-level\
    \ scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [9] top-level scope at /tmp/tmpwmku8xs0.jl:58\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpwmku8xs0.jl:56\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = 1\n        end\n    end\n    return unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuzbtu0wr.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuzbtu0wr.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    unique.update(l)\n    return unique\nend\n</cell>\n\
    <code language=julia-1.4>\nunique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a vector of integers and returns the number\
    \ of unique elements in the vector. Test it on some vectors.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1qfwrv7r.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1qfwrv7r.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=1 |>\nI came up with this:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjaiso24e.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjaiso24e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nI believe this should be `if !haskey(unique, x)`\
    \ instead of `if !haskey(unique, x)`\n<|/ c |>\n<| c |>\nThanks, I fixed it.\n\
    <|/ c |>\n<| a dscore=3 |>\nIn Julia 1.2 you can use the function unique to remove\
    \ duplicates from a vector:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia\
    \ |>\n<| c |>\nThis should be the accepted answer. Julia 1.2 has added this functionality\
    \ to the base library\n<|/ c |>\n<| a tags=julia |>\nIn Julia 1.2 you can use\
    \ the function unique to remove duplicates from a vector:\n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n\
    \ 123\n</code>\n<|/ a dscore=3 |>\n<| a |>\nIn Julia 1.2 you can use the function\
    \ unique to remove duplicates from a vector:\n<code>\njulia> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia dscore=3 |>\n<| a dscore=2 |>\nIn Julia 1.2 you can\
    \ use the function unique to remove duplicates from a vector:\n<code>\njulia>\
    \ unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n\
    \ 5\n 9\n 123\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia 1.2\
    \ you can use the function unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=2 |>\n<| a tags=julia |>\nIn Julia\
    \ 1.2 you can use the \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpll31zelq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpll31zelq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis does not answer the question. The question\
    \ asks for an efficient way to remove duplicates from a vector, not to sort the\
    \ vector.\n<|/ c |>\n<| c |>\nThe question asks for an efficient way to remove\
    \ duplicates from a vector, not to sort the vector. That's why I posted this answer.\
    \ My answer does not sort the vector. My answer does not sort the vector either.\
    \ My answer does not sort the vector. My answer does not sort the vector. My answer\
    \ does not sort the vector. My answer does not sort the vector. My answer does\
    \ not sort the vector. My answer does not sort the vector. My answer does not\
    \ sort the vector. My answer does not sort the vector. My answer does not sort\
    \ the vector. My answer does not sort the vector. My answer does not sort the\
    \ vector. My answer does not sort the vector. My answer does not sort the vector.\
    \ My answer does not sort the vector. My answer does not sort the vector. My answer\
    \ does not sort the vector. My answer does not sort the vector. My answer does\
    \ not sort the vector. My answer does not sort the vector. My answer does not\
    \ sort the vector. My answer does not sort the vector. My answer does not sort\
    \ the vector. My answer does not sort the vector. My answer does not sort the\
    \ vector. My answer does not sort the vector. My answer does not sort the vector.\
    \ My answer does not sort the vector. My answer does not sort the vector. My answer\
    \ does not sort the vector. My answer does not sort the vector. My answer does\
    \ not sort the vector. My answer does not sort the vector. My answer does not\
    \ sort the vector. My answer does not sort the vector. My answer does not sort\
    \ the vector. My answer does not sort the vector. My answer does not sort the\
    \ vector. My answer does not sort the vector. My answer does not sort the vector.\
    \ My answer does not sort the vector. My answer does not sort the vector. My answer\
    \ does not sort the vector. My answer does not sort the vector. My answer does\
    \ not sort the vector. My answer does not sort the vector. My answer does not\
    \ sort the vector. My answer does not sort the vector. My answer does not sort\
    \ the vector. My answer does not sort the vector. My answer does not sort the\
    \ vector. My answer does not sort the vector. My answer does not sort the vector.\
    \ My answer does not sort the vector. My answer does not sort the vector. My answer\
    \ does not sort the vector. My answer does not sort the vector. \nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeqdlg8l6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeqdlg8l6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        push!(unique, i)\n    end\n  \
    \  return unique\nend\n</code>\n<|/ a dscore=3 |>\n<| c |>\nThis should be the\
    \ accepted answer. `unique` function already exists in Julia and it works like\
    \ a charm. No need to reinvent the wheel.\n<|/ c |>\n<| a tags=julia,unique,sorting\
    \ |>\nThe answer by is correct but is missing a couple of details. \nThe function\
    \ unique is defined in the Base package. \n<code>\njulia> Base.unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\nThe function unique is defined in the Statistics package. \n<code>\n\
    julia> Statistics.unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\nThe function unique is defined in the Statistics\
    \ package but is missing a couple of details. \nThe function unique is defined\
    \ in the Base package but is missing a couple of details. \nThe function unique\
    \ is defined in the Base package but is missing a couple of details. \nThe function\
    \ unique is defined in the Base package but is missing a couple of details. \n\
    The function unique is defined in the Base package but is missing a couple of\
    \ details. \nThe function unique is defined in the Base package but is missing\
    \ a couple of details. \nThe function unique is defined in the Base package but\
    \ is missing a couple of details. \nThe function unique is defined in the Base\
    \ package but is missing a couple of details. \nThe function unique is defined\
    \ in the Base package but is missing a couple of details. \nThe function unique\
    \ is defined in the Base package but is missing a couple of details. \nThe function\
    \ unique is defined in the Base package but is missing a couple of details. \n\
    The function unique is defined in the Base package but is missing a couple of\
    \ details. \nThe function unique is defined in the Base package but is missing\
    \ a couple of details. \nThe function unique is defined in the Base package but\
    \ is missing a couple of details. \nThe function unique is defined in the Base\
    \ package but is missing a couple of details. \nThe function unique is defined\
    \ in the Base package but is missing a couple of details. \nThe function unique\
    \ is defined in the Base package but is missing a couple of details. \nThe function\
    \ unique is defined in the Base package but is missing a co\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpst_j5khi.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpst_j5khi.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question, which is about sorting\
    \ and removing duplicates.\n<|/ c |>\n<| a tags=julia,sorting |>\nThe answer by\
    \ is correct but can be improved by using Julia's built-in function unique:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=2 |>\n<| a |>\nI believe that\
    \ in Julia 1.x the function unique was moved from the Base package to the Base\
    \ package's Base package. \n<code>\njulia> using Base: unique\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n\
    \ 123\n</code>\n<|/ a dscore=2 tags=julia,sorting |>\n<| a dscore=1 |>\nThe answer\
    \ by is correct, but can be improved by using Julia's built-in function unique:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,sorting |>\n<| a tags=julia,sorting\
    \ |>\nThe answer by is correct, but can be improved by using Julia's built-in\
    \ function unique:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element\
    \ Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=1 |>\n<| a\
    \ dscore=0 |>\nI believe that in Julia 1.x the function unique was moved from\
    \ the Base package to the Base package's Base package. \n<code>\njulia> using\
    \ Base: unique\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,sorting |>\n<| a dscore=0\
    \ |>\nThe answer by is correct, but can be improved by using Julia's built-in\
    \ function unique:\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1_jui1wu.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1_jui1wu.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\n`unique` will return a `Set` which is not\
    \ ordered. `sort` will return a `Vector` which is ordered. `unique` will return\
    \ a `Set` which is not ordered. `sort` will return a `Vector` which is ordered.\
    \ `unique` will return a `Set` which is not ordered. `sort` will return a `Vector`\
    \ which is ordered. `unique` will return a `Set` which is not ordered. `sort`\
    \ will return a `Vector` which is ordered. `unique` will return a `Set` which\
    \ is not ordered. `sort` will return a `Vector` which is ordered. `unique` will\
    \ return a `Set` which is not ordered. `sort` will return a `Vector` which is\
    \ ordered. `unique` will return a `Set` which is not ordered. `sort` will return\
    \ a `Vector` which is ordered. `unique` will return a `Set` which is not ordered.\
    \ `sort` will return a `Vector` which is ordered. `unique` will return a `Set`\
    \ which is not ordered. `sort` will return a `Vector` which is ordered. `unique`\
    \ will return a `Set` which is not ordered. `sort` will return a `Vector` which\
    \ is ordered. `unique` will return a `Set` which is not ordered. `sort` will return\
    \ a `Vector` which is ordered. `unique` will return a `Set` which is not ordered.\
    \ `sort` will return a `Vector` which is ordered. `unique` will return a `Set`\
    \ which is not ordered. `sort` will return a `Vector` which is ordered. `unique`\
    \ will return a `Set` which is not ordered. `sort` will return a `Vector` which\
    \ is ordered. `unique` will return a `Set` which is not ordered. `sort` will return\
    \ a `Vector` which is ordered. `unique` will return a `Set` which is not ordered.\
    \ `sort` will return a `Vector` which is ordered. `unique` will return a `Set`\
    \ which is not ordered. `sort` will return a `Vector` which is ordered. `unique`\
    \ will return a `Set` which is not ordered. `sort` will return a `Vector` which\
    \ is ordered. `unique` will return a `Set` which is not ordered. `sort` will return\
    \ a `Vector` which is ordered. `unique` will return a `Set` which is not ordered.\
    \ `sort` will return a `Vector` which is ordered. `unique` \nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsc1j6urb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsc1j6urb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if x not in\
    \ seen \n            push!(unique, x)\n            push!(seen, x)\n        end\n\
    \    end\n    return unique\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2\
    \ |>\nThe most efficient way is to use Sets:\n<code>\njulia> a = rand(1:10, 10)\n\
    10-element Array{Int64,1}:\n 7\n 2\n 8\n 3\n 6\n 9\n 8\n 9\n 6\n 3\n 9\n 2\n 8\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn9avvbwa.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn9avvbwa.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 2\nWrite a function that returns the number of unique elements\
    \ in a list\nWrite a function that returns the number of unique elements in a\
    \ vector\nWrite a function that returns the number of unique elements in a set\n\
    Write a function that returns the number of unique elements in a dictionary\n\
    Write a function that returns the number of unique elements in a tuple\nWrite\
    \ a function that returns the number of unique elements in a DataFrame\nWrite\
    \ a function that returns the number of unique elements in a DataFrame\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that returns the number of unique elements in a SparseArray\nWrite\
    \ a function that \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_f_oa90_.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_f_oa90_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplcx192rt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplcx192rt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpp0eq_rhh.jl:14\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  UndefVarError: unique not defined\n  Stacktrace:\n   [1] unique(::Array{Int64,1})\
    \ at /tmp/tmpp0eq_rhh.jl:6\n   [2] top-level scope at /tmp/tmpp0eq_rhh.jl:14\n\
    \   [3] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [4] top-level scope at /tmp/tmpp0eq_rhh.jl:13\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpp0eq_rhh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=julia,arrays |>\nI like using Sets:\n<code>\njulia>\
    \ using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjb9_cx35.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjb9_cx35.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(a)\n\
    </cell>\n<text>\nExercise 3\nWrite a function that takes a vector of integers\
    \ and returns a vector of integers where the values are the absolute values of\
    \ the original vector. For example, if the input vector is [5, 3, -6, 2, 1] then\
    \ the output vector should be [5, 3, 2, 0, 1]. Make sure your function works with\
    \ negative numbers as well.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: a not defined\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmp6dgs9gzl.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmp6dgs9gzl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using Sets for this:\n<code>\njulia>\
    \ using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt3zdzus6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt3zdzus6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique(unique(l)...)\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpijyqy3hr.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpijyqy3hr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk53a1__z.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk53a1__z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])` returns `[5, 3, 9, 0, 123]`.\n<|/ c |>\n<| c |>\nI tested it\
    \ on Julia 0.6.2 and it works. What version of Julia are you using?\n<|/ c |>\n\
    <| c |>\nI'm using 0.6.2. I also tried it on 0.6.2 on Windows and it also works.\
    \ I guess it might be a bug in 0.6.1. I filed a bug report here: https://github.com/JuliaLang/julia/issues/9095\n\
    <|/ c |>\n<| c |>\nThanks for filing the bug! I tested it on 0.6.2 and it works.\
    \ I guess it might be a bug in 0.6.1. I filed a bug report here: https://github.com/JuliaLang/julia/issues/9095\n\
    <|/ c |>\n<| a tags=julia,unique |>\nI wrote a package for this:\nhttps://github.com/jfengli/UniqueArrays.jl\n\
    <code>\nusing UniqueArrays\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1d46vl7j.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1d46vl7j.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnsxz89ot.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnsxz89ot.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nI came up with this:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl4n4577r.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl4n4577r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk_1zr7r4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk_1zr7r4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't answer the question. OP wants to know\
    \ if there is a faster way to do this in Julia. Your solution doesn't even use\
    \ any Julia specific functionality.\n<|/ c |>\n<| c |>\nI believe this answers\
    \ the question, since it shows how to implement a faster version of `unique` using\
    \ Julia specific functionality.\n<|/ c |>\n<| c |>\nI believe this answers the\
    \ question, since it shows how to implement a faster version of `unique` using\
    \ Julia specific functionality.\n<|/ c |>\n<| c |>\nI believe this answers the\
    \ question, since it shows how to implement a faster version of `unique` using\
    \ Julia specific functionality.\n<|/ c |>\n<| c |>\nI believe this answers the\
    \ question, since it shows how to implement a faster version of `unique` using\
    \ Julia specific functionality.\n<|/ c |>\n<| a dscore=2 |>\nI believe this answers\
    \ the question, since it shows how to implement a faster version of unique using\
    \ Julia specific functionality.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmg43uv1m.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmg43uv1m.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique = unique(unique(unique))\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmlyr3r92.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmlyr3r92.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    uniques = Vector{Int64}()\n    for x in l \n       \
    \ if !seen.add(x) \n            push!(uniques, x) \n        end\n    end\n   \
    \ return uniques\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0c5e70t.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr0c5e70t.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy_pl1b4o.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy_pl1b4o.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3sw1nteq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3sw1nteq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph20icnch.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph20icnch.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a vector and returns a new vector\
    \ with unique elements. \nFor example, unique([5, 3, 5, 2, 3, 3, 9, 0, 123]) should\
    \ return [0, 2, 3, 5, 9, 123].\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdhjlf6qb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdhjlf6qb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !unique.contains(x)\n     \
    \       unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbusm5ptl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbusm5ptl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaz8mk6jq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaz8mk6jq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\n`unique` does not preserve order. `unique!`\
    \ does.\n<|/ c |>\n<| c |>\n`unique` does preserve order. `unique!` does not.\n\
    <|/ c |>\n<| c |>\n`unique` does preserve order. `unique!` does not.\n<|/ c |>\n\
    <| c |>\n`unique` does preserve order. `unique!` does not.\n<|/ c |>\n<| c |>\n\
    `unique` does preserve order. `unique!` does not.\n<|/ c |>\n<| a dscore=4 |>\n\
    In Julia 1.5 you can use unique:\n<code>\njulia> unique([1,1,1,2,2,3])\n3-element\
    \ Array{Int64,1}:\n 1\n 2\n 3\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n\
    `unique` does not preserve order. `unique!` does.\n<|/ c |>\n<| c |>\n`unique`\
    \ does preserve order. `unique!` does not.\n<|/ c |>\n<| c |>\n`unique` does preserve\
    \ order. `unique!` does not.\n<|/ c |>\n<| a dscore=4 |>\nIn Julia 1.5 you can\
    \ use unique:\n<code>\njulia> unique([1,1,1,2,2,3])\n3-element Array{Int64,1}:\n\
    \ 1\n 2\n 3\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\n`unique` does not preserve\
    \ order. `unique!` does.\n<|/ c |>\n<| c |>\n`unique` does preserve order. `unique!`\
    \ does not.\n<|/ c |>\n<| a tags=julia,arrays |>\nIn Julia 1.5 you can use unique:\n\
    <code>\njulia> unique([1,1,1,2,2,3])\n3-element Array{Int64,1}:\n 1\n 2\n 3\n\
    </code>\n<|/ a dscore=3 |>\n<| a tags=julia,arrays |>\nIn Julia 1.5 you can use\
    \ unique:\n<code>\njulia> unique([1,1,1,2,2,3])\n3-element Array{Int64,1}:\n 1\n\
    \ 2\n 3\n</code>\n<|/ a dscore=3 |>\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpocwjf_m2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpocwjf_m2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</code>\n<|/ a tags=julia,arrays,unique |>\n<| c |>\nThis doesn't\
    \ work if there are repeated elements in the input array. For example, `unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 123]` instead of `[0, 2, 3, 5,\
    \ 9, 123]`.\n<|/ c |>\n<| c |>\nYes, I realized that after I posted my comment.\
    \ Thanks for pointing that out.\n<|/ c |>\n<| a dscore=2 |>\nI like using Sets\
    \ to do this, as they have O(1) lookup and are very efficient for large sets.\
    \ \n<code>\njulia> function unique(x::Vector{Int})\n           s = Set(x)\n  \
    \         return collect(s)\n       end\nunique (generic function with 1 method)\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4mczlm_8.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4mczlm_8.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not the fastest solution, since it requires\
    \ O(n^2) time complexity to sort the array. Also, `unique` function does not preserve\
    \ the order of the elements in the original array.\n<|/ c |>\n<| c |>\nI agree\
    \ with you, this is just an alternative to `sort` function\n<|/ c |>\n<| c |>\n\
    I agree with you, this is just an alternative to `sort` function\n<|/ c |>\n<|\
    \ c |>\nThe `sort` function does preserve the order of the elements in the original\
    \ array. `unique` function does not preserve the order of the elements in the\
    \ original array.\n<|/ c |>\n<| c |>\nI agree with you, this is just an alternative\
    \ to `sort` function\n<|/ c |>\n<| a dscore=2 |>\nThe fastest solution is to use\
    \ Julia's built-in function sort!:\n<code>\njulia> sort!([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/\
    \ a tags=julia,arrays |>\n<| a dscore=1 |>\nI wrote a function to do this:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpiq36eeiq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpiq36eeiq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nI like this solution, but I wonder if it can be\
    \ made more efficient by using a `Set` instead of a `Dict`?\n<|/ c |>\n<| c |>\n\
    I believe that `Set` would be more efficient than `Dict` since `Set` uses hash\
    \ tables and `Dict` uses binary trees. But I haven't tested it myself.\n<|/ c\
    \ |>\n<| c |>\nI tested it and it turns out that `Set` is actually slower than\
    \ `Dict` when there are many unique elements. I added a benchmark to my answer.\n\
    <|/ c |>\n<| a tags=julia |>\nHere's a solution that doesn't require any packages:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm50pwuk_.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm50pwuk_.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis is not an answer to the question. Also the question\
    \ was about sorting not about uniqueness.\n<|/ c |>\n<| c |>\nI agree with you,\
    \ but I thought it might be useful to someone who wants to sort and remove duplicates.\n\
    <|/ c |>\n<| c |>\nThis does not answer the question. OP asked for sorting and\
    \ removing duplicates.\n<|/ c |>\n<| c |>\nI agree with you, but I thought it\
    \ might be useful to someone who wants to sort and remove duplicates.\n<|/ c |>\n\
    <| c |>\nI agree with you, but I thought it might be useful to someone who wants\
    \ to sort and remove duplicates.\n<|/ c |>\n<| a dscore=2 |>\n<code>\njulia> using\
    \ Statistics\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx18sym2b.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx18sym2b.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique = unique(unique(unique))\n    return unique\n\
    end\n</cell>\n<code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpszl0k2l8.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpszl0k2l8.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_yj7k84_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_yj7k84_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc9qnid_2.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc9qnid_2.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,set |>\n<| c |>\nI believe that `unique` should be `Set` not\
    \ `Dict`\n<|/ c |>\n<| c |>\n`Set` does not allow duplicates. `Dict` does.\n<|/\
    \ c |>\n<| c |>\n`Set` does not allow duplicates. `Dict` does. `Set` does not\
    \ allow duplicates. `Dict` does. `Set` does not allow duplicates. `Dict` does.\
    \ `Set` does not allow duplicates. `Dict` does. `Set` does not allow duplicates.\
    \ `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow\
    \ duplicates. `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set`\
    \ does not allow duplicates. `Dict` does. `Set` does not allow duplicates. `Dict`\
    \ does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow duplicates.\
    \ `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow\
    \ duplicates. `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set`\
    \ does not allow duplicates. `Dict` does. `Set` does not allow duplicates. `Dict`\
    \ does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow duplicates.\
    \ `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow\
    \ duplicates. `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set`\
    \ does not allow duplicates. `Dict` does. `Set` does not allow duplicates. `Dict`\
    \ does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow duplicates.\
    \ `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set` does not allow\
    \ duplicates. `Dict` does. `Set` does not allow duplicates. `Dict` does. `Set`\
    \ does not allow duplicates. `Dict` does. `Set` does not allow duplicates. `Dict`\
    \ does. `Set` does not allow duplicates. `Dict` do\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg964hgbl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg964hgbl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a tags=julia,arrays |>\nThe Julia standard library has many\
    \ useful functions. One of them is unique, which removes duplicates from a given\
    \ array:\n<code>\njulia> a = [1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0rhk5ya6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0rhk5ya6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=3 |>\n<| a |>\nI like using Julia's Sets:\n<code>\njulia> using Sets\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppjz1tie5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppjz1tie5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    uniques = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            uniques.add(x)\n        end\n    end\n    return uniques\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5frw44ji.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5frw44ji.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for i in l\n        if\
    \ !haskey(seen, i)\n            push!(unique, i)\n            seen[i] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a |>\n<| a tags=julia,arrays\
    \ |>\nA simple solution is to use sort!:\n<code>\njulia> a = [5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]\n5-element Array{Int64,1}:\n 5\n 3\n 3\n 2\n 9\n 0\n 123\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_vv07bp6.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_vv07bp6.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</code>\n<|/ a dscore=2 |>\n<|\
    \ c |>\nI believe this should be the accepted answer. Especially since it uses\
    \ `Set` instead of `Dict`.\n<|/ c |>\n<| a dscore=2 |>\nI like using Julia's built-in\
    \ Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0wwbqzz7.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0wwbqzz7.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,unique,sorting |>\n<| a dscore=2 |>\nI wrote a package for this:\n\
    https://github.com/jamiewilson/UniqueArrays.jl\n<code>\nusing UniqueArrays\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxywxi9tp.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxywxi9tp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,unique,sorting,arrays |>\n<| c |>\nI like this solution, but\
    \ I believe it can be improved by using a `Set` instead of a `Vector`. `Set` has\
    \ `haskey` method which makes the code more efficient.\n<|/ c |>\n<| c |>\nYes,\
    \ I agree. `Set` has `haskey` method which makes the code more efficient.\n<|/\
    \ c |>\n<| c |>\nI believe this solution has some issues. For example, `unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 123]` instead of `[0, 2, 3, 5,\
    \ 9, 123]`.\n<|/ c |>\n<| c |>\nI believe this solution has some issues. For example,\
    \ `unique([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 123]` instead of\
    \ `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| c |>\nI believe this solution has some\
    \ issues. For example, `unique([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3,\
    \ 9, 123]` instead of `[0, 2, 3, 5, 9, 123]`.\n<|/ c |>\n<| a tags=julia,unique,sorting,arrays\
    \ |>\nI believe this solution has some issues. For example, unique([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) returns [5, 3, 9, 123] instead of [0, 2, 3, 5, 9, 123].\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbwjb2wrq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbwjb2wrq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    uniques = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(uniques, x)\n        end\n    end\n    return\
    \ uniques\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpeia25cl6.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpeia25cl6.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      push!(unique, x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt5sk3vm4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt5sk3vm4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| c |>\nThis doesn't work if you have a list of strings and\
    \ want to sort them alphabetically. `unique` will remove duplicates, but the order\
    \ of the strings is not guaranteed.\n<|/ c |>\n<| a dscore=1 |>\nI wrote a function\
    \ to do this, which I believe is more efficient than using sets:\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2,\
    \ 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmper6pz6l9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmper6pz6l9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5thb1lj9.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5thb1lj9.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen\n            unique.add(i)\n            seen.add(i)\n        end\n    end\n\
    \    return unique\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps_yipnxa.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps_yipnxa.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoe_wc0q0.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoe_wc0q0.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThanks for your answer. Could you please\
    \ explain why you use `Set` instead of `Dict`? I thought `Dict` was a better choice\
    \ for storing unique elements. Also, could you please explain why you use `push!`\
    \ instead of `push`?\n<|/ c |>\n<| c |>\n`Set` is faster than `Dict`, but `Dict`\
    \ has better memory usage. `push!` adds the element to the end of the vector,\
    \ while `push` adds the element to the beginning of the vector. `push!` is also\
    \ more efficient than `push` because it doesn't have to copy the entire vector\
    \ each time it adds an element.\n<|/ c |>\n<| c |>\nThanks for your explanations.\
    \ I still don't understand why you use `Set` instead of `Dict`. I thought `Dict`\
    \ was a better choice for storing unique elements. Also, could you please explain\
    \ why you use `push!` instead of `push`?\n<|/ c |>\n<| c |>\n`Set` is faster than\
    \ `Dict`, but `Dict` has better memory usage. `push!` adds the element to the\
    \ end of the vector, while `push` adds the element to the beginning of the vector.\
    \ `push!` is also more efficient than `push` because it doesn't have to copy the\
    \ entire vector each time it adds an element.\n<|/ c |>\n<| c |>\nThanks for your\
    \ explanations. I still don't understand why you use `Set` instead of `Dict`.\
    \ I thought `Dict` was a better choice for storing unique elements. Also, could\
    \ you please explain why you use `push!` instead of `push`?\n<|/ c |>\n<| a tags=julia,arrays\
    \ |>\nI wanted to add an answer that uses no loops and is faster than the other\
    \ answers. I used the Julia BenchmarkTools package to test the speed of the different\
    \ methods. I used the code below to test the speed of the different methods:\n\
    <code>\nusing BenchmarkTools\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu58essk7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu58essk7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique.value\nend\n\
    </cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoajwulxg.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoajwulxg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique += [i]\n    end\n    unique\n\
    end\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia |>\nHere is a solution using\
    \ Julia's built-in function unique:\n<code>\njulia> using Statistics\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3ow14h8s.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3ow14h8s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    unique = unique + l\n    unique = unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(unique(\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing comma or ) in argument list\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1q3e0vyf.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1q3e0vyf.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique[unique(unique)==l] = -1\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf8lr29sw.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf8lr29sw.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    unique = unique + l\n    unique = unique - Set()\n\
    \    return unique\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you\
    \ have a `Set` of numbers and want to remove duplicates. `unique` will remove\
    \ duplicates from `Set`s.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a\
    \ `Set` of numbers and want to remove duplicates. `unique` will remove duplicates\
    \ from `Set`s.\n<|/ c |>\n<| c |>\nThis doesn't work if you have a `Set` of numbers\
    \ and want to remove duplicates. `unique` will remove duplicates from `Set`s.\n\
    <|/ c |>\n<| c |>\nThis doesn't work if you have a `Set` of numbers and want to\
    \ remove duplicates. `unique` will remove duplicates from `Set`s.\n<|/ c |>\n\
    <| c |>\nThis doesn't work if you have a `Set` of numbers and want to remove duplicates.\
    \ `unique` will remove duplicates from `Set`s.\n<|/ c |>\n<| a dscore=5 |>\nI\
    \ wrote a function to remove duplicates from a vector:\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6ox0_px4.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6ox0_px4.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI wanted to add my solution to this problem\
    \ which I believe is more efficient than using Sets.\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgkvjv6pb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgkvjv6pb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbnbs5i4z.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbnbs5i4z.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThanks for your answer! I guess I should\
    \ have been more clear in my question: I wanted a function that would return an\
    \ array with unique elements. I ended up writing my own (not very efficient) function\
    \ as I couldn't find anything in the standard library.\n<|/ c |>\n<| c |>\nI added\
    \ my own answer that does exactly that. Thanks for your help though!\n<|/ c |>\n\
    <| a tags=julia,arrays |>\nI ended up writing my own function as I couldn't find\
    \ anything in the standard library:\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqtevw8ix.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqtevw8ix.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique += [i]\n    end\n    return\
    \ unique(unique(unique(unique(l))))\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\n\
    This doesn't work for me. `unique([5,3,5,2,3,9,0,123])` returns `[5,3,9,123]`\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `unique([5,3,5,2,3,9,0,123])` returns\
    \ `[5,3,9,123]`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `unique([5,3,5,2,3,9,0,123])`\
    \ returns `[5,3,9,123]`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `unique([5,3,5,2,3,9,0,123])`\
    \ returns `[5,3,9,123]`\n<|/ c |>\n<| c |>\nThis doesn't work for me. `unique([5,3,5,2,3,9,0,123])`\
    \ returns `[5,3,9,123]`\n<|/ c |>\n<| a dscore=2 |>\nThis should work:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5qctfimp.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5qctfimp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if !seen.add(i)\n\
    \            unique.add(i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8qi5dpsw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8qi5dpsw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  unique\nend\n</cell>\n<text>\nExercise 2\nWrite a function that returns the\
    \ unique elements in a list that do not appear in another list.\nusing Test\n\n\
    @testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmg0n4u2o.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmg0n4u2o.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays\
    \ |>\nThe answer by is correct, but I wanted to add that you can also use the\
    \ built-in function unique.\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    0-element Array{Int64,1}\n</code>\n<|/ a dscore=4 |>\n<| a dscore=4 |>\nIn Julia\
    \ 1.5 you can use the function unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nIn Julia 1.5 you can use\
    \ the function unique to remove duplicates from a vector:\n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a dscore=4\
    \ |>\n<| a tags=julia,arrays |>\nIn Julia 1.5 you can use the function unique\
    \ to remove duplicates from a vector:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a dscore=3 |>\n<| a |>\n\
    In Julia 1.5 you can use the function unique to remove duplicates from a vector:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n\
    </code>\n<|/ a tags=julia,arrays dscore=3 |>\n<| a dscore=3 |>\nIn Julia 1.5 you\
    \ can use the function unique to remove duplicates from a vector:\n<code>\njulia>\
    \ unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/\
    \ a tags=julia,arrays |>\n<| a dscore=3 |>\nIn Julia 1.5 you can use the function\
    \ unique to remove duplicates from a vector:\n<code>\njulia> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a tags=julia,arrays\
    \ |>\n<| a tags=julia,arrays |>\nIn Julia 1.5 you can use the function unique\
    \ to remove duplicates from a vector:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123])\n0-element Array{Int64,1}\n</code>\n<|/ a dscore=3 |>\n<| a tag\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpil5n6u44.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpil5n6u44.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp28pwzoqq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp28pwzoqq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})::Vector{Int64}\n\
    \    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n         \
    \   push!(unique, \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmplrocjkwt.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmplrocjkwt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\nI like using Julia's Sets to do this.\n<code>\n\
    julia> s = Set()\nSet{Int64}\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp20jjvqtq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp20jjvqtq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    unique\n\
    end\n</code>\n<|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have\
    \ a `Vector{Int}`, as `Set` doesn't support `Int` as its type.\n<|/ c |>\n<| c\
    \ |>\nI believe that `Set` does support `Int` as its type. `Set{Int}` is the same\
    \ as `Set{Int64}`.\n<|/ c |>\n<| c |>\n`Set{Int}` is the same as `Set{Int64}`,\
    \ but `Set{Int}` is different from `Set{Int64}`.\n<|/ c |>\n<| c |>\nYes, but\
    \ `Set{Int}` is different from `Set{Int64}`.\n<|/ c |>\n<| c |>\nYes, but `Set{Int}`\
    \ is different from `Set{Int64}`.\n<|/ c |>\n<| a tags=julia,arrays |>\nThe most\
    \ efficient way to do this in Julia is to use Sets:\n<code>\njulia> a = [1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3,\
    \ 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2,\
    \ 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1, 2, 3, 1,\
    \ 2, 3, \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr0auk0fk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr0auk0fk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\nunique(l::Vector{Int64})\
    \ = unique(l).sort()\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64} \n   \
    \ unique = Set()\n    for i in l\n        if !haskey(unique, i)\n            push!(unique,\
    \ i)\n        end\n    end\n    return unique.sort()\nend\nunique(l::Vector{Int64},\
    \ k::Int64)::Vector{Int64} \n    unique = Set()\n    for i in l\n        if !haskey(unique,\
    \ i)\n            push!(unique, i)\n        end\n    end\n    return unique.sort(k)\n\
    end\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64} \n    unique = Set()\n\
    \    for i in l\n        if !haskey(unique, i)\n            push!(unique, i)\n\
    \        end\n    end\n    return unique.sort(k)\nend\nunique(l::Vector{Int64},\
    \ k::Int64)::Vector{Int64} \n    unique = Set()\n    for i in l\n        if !haskey(unique,\
    \ i)\n            push!(unique, i)\n        end\n    end\n    return unique.sort(k)\n\
    end\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64} \n    unique = Set()\n\
    \    for i in l\n        if !haskey(unique, i)\n            push!(unique, i)\n\
    \        end\n    end\n    return unique.sort(k)\nend\nunique(l::Vector{Int64},\
    \ k::Int64)::Vector{Int64} \n    unique = Set()\n    for i in l\n        if !haskey(unique,\
    \ i)\n            push!(unique, i)\n        end\n    end\n    return unique.sort(k)\n\
    end\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64} \n    unique = Set()\n\
    \    for i in l\n        if !haskey(unique, i)\n            push!(unique, i)\n\
    \        end\n    end\n    return unique.sort(k)\nend\nunique(l::Vector{Int64},\
    \ k::Int64)::Vector{Int64} \n    unique = Set()\n    for i in l\n        if !haskey(unique,\
    \ i)\n            push!(unique, i)\n        end\n    end\n    return unique.sort(k)\n\
    end\nunique(l::Vector{Int64}, k::Int64)::Vector{Int64\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: l not defined\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpj2kq6qma.jl:15\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpj2kq6qma.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            unique.add(i)\n            seen.add(i)\n        end\n   \
    \ end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9lx5juyr.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9lx5juyr.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,unique,arrays |>\n<| a dscore=2 |>\nA simple and efficient solution\
    \ is to use Sets:\n<code>\njulia> a = [5, 3, 5, 2, 3, 3, 9, 0, 123]\njulia> Set(a)\n\
    Set{Int64}([5, 3, 9, 0, 123])\n</code>\n<|/ a tags=julia,unique,arrays |>\n<|\
    \ a |>\nA simple and efficient solution is to use Sets:\n<code>\njulia> a = [5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]\njulia> Set(a)\nSet{Int64}([5, 3, 9, 0, 123])\n</code>\n\
    <|/ a tags=julia,unique,arrays dscore=2 |>\n<| a dscore=1 |>\nI wrote a function\
    \ to do this:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t\
    @test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxg36wgeg.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxg36wgeg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpimjl95pd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpimjl95pd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique(unique(unique))\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't\
    \ work for me. `unique([5, 3, 5, 2, 3, 3, 9, 0, 123])` returns `[5, 3, 9, 0, 123]`.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 1.5.2 and it works fine. Maybe you have\
    \ a different version?\n<|/ c |>\n<| c |>\nI tested it on Julia 1.5.2 and it works\
    \ fine. Maybe you have a different version?\n<|/ c |>\n<| c |>\nI tested it on\
    \ Julia 1.5.2 and it works fine. Maybe you have a different version?\n<|/ c |>\n\
    <| c |>\nI tested it on Julia 1.5.2 and it works fine. Maybe you have a different\
    \ version?\n<|/ c |>\n<| a tags=julia,unique,arrays |>\nI wrote a package for\
    \ this:\nhttps://github.com/henriquebastos/UniqueArrays.jl\n<code>\nusing UniqueArrays\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo2tx16ks.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo2tx16ks.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    return\
    \ unique\nend\n</code>\n<|/ a tags=julia,set |>\n<| a tags=julia,set |>\nIn Julia\
    \ 1.5 you can use the function unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=4 |>\n<| a dscore=3 |>\nIn Julia\
    \ 1.5 you can use the function unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,set |>\n<| a |>\nIn Julia 1.5\
    \ you can use the function unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=3 tags=julia,set |>\n<| a tags=julia,set\
    \ |>\nIn Julia 1.5 you can use the function unique to remove duplicates from a\
    \ vector:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=3 |>\n<| a dscore=3 |>\nIn Julia\
    \ 1.5 you can use the function unique to remove duplicates from a vector:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,set |>\n<| a tags=julia,set |>\n\
    In Julia 1.5 you can use the function unique to remove duplicates from a vector:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=3 |>\n<| a tags=julia,set |>\n\
    In Julia 1.5 you can use the function unique to remove duplicates from a vector:\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt110loyv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt110loyv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(l)\n    unique = unique[unique(:) .!= l]\n    return unique\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphcgccy3w.jl:10\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphcgccy3w.jl:10\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    unique.update(l)\n    return unique\nend\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpbt8bl5tv.jl:15\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Set has no field update\n  Stacktrace:\n   [1] getproperty(::Set{Any},\
    \ ::Symbol) at ./Base.jl:33\n   [2] unique(::Array{Int64,1}) at /tmp/tmpbt8bl5tv.jl:7\n\
    \   [3] top-level scope at /tmp/tmpbt8bl5tv.jl:15\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpbt8bl5tv.jl:14\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpbt8bl5tv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like to use this simple one-liner:\n<code>\n\
    unique(sort(collect(1:10)))\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis does\
    \ not answer the question as asked.\n<|/ c |>\n<| c |>\nIt does answer the question\
    \ as asked, because `unique` removes duplicates.\n<|/ c |>\n<| c |>\nThis answer\
    \ does not answer the question as asked. `unique` removes duplicates. `sort` sorts\
    \ the elements. `collect` collects the elements. `sort` sorts the elements. `unique`\
    \ removes duplicates. `sort` sorts the elements. `collect` collects the elements.\
    \ `unique` removes duplicates. `sort` sorts the elements. `collect` collects the\
    \ elements. `unique` removes duplicates. `sort` sorts the elements. `collect`\
    \ collects the elements. `unique` removes duplicates. `sort` sorts the elements.\
    \ `collect` collects the elements. `unique` removes duplicates. `sort` sorts the\
    \ elements. `collect` collects the elements. `unique` removes duplicates. `sort`\
    \ sorts the elements. `collect` collects the elements. `unique` removes duplicates.\
    \ `sort` sorts the elements. `collect` collects the elements. `unique` removes\
    \ duplicates. `sort` sorts the elements. `collect` collects the elements. `unique`\
    \ removes duplicates. `sort` sorts the elements. `collect` collects the elements.\
    \ `unique` removes duplicates. `sort` sorts the elements. `collect` collects the\
    \ elements. `unique` removes duplicates. `sort` sorts the elements. `collect`\
    \ collects the elements. `unique` removes duplicates. `sort` sorts the elements.\
    \ `collect` collects the elements. `unique` removes duplicates. `sort` sorts the\
    \ elements. `collect` collects the elements. `unique` removes duplicates. `sort`\
    \ sorts the elements. `collect` collects the elements. `unique` removes duplicates.\
    \ `sort` sorts the elements. `collect` collects the elements. `unique` removes\
    \ duplicates. `sort` sorts the elements. `collect` collects the elements. `unique`\
    \ removes \nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplwn8qww3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplwn8qww3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| c |>\nThis doesn't work if you have a vector of\
    \ strings and want to sort them alphabetically before removing duplicates.\n<|/\
    \ c |>\n<| c |>\nYes, it does. I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\n\
    I tested it on Julia 0.6.2 and it works. I guess you didn't test it on 0.6.2 because\
    \ I tested it on 0.6.2 and it didn't work. Sorry for the confusion.\n<|/ c |>\n\
    <| c |>\nI tested it on 0.6.2 and it works. I guess you didn't test it on 0.6.2\
    \ because I tested it on 0.6.2 and it didn't work. Sorry for the confusion.\n\
    <|/ c |>\n<| c |>\nI tested it on 0.6.2 and it works. I guess you didn't test\
    \ it on 0.6.2 because I tested it on 0.6.2 and it didn't work. Sorry for the confusion.\n\
    <|/ c |>\n<| a tags=julia,arrays |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbw3h8iea.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbw3h8iea.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0,\
    \ 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcnu70ebx.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcnu70ebx.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique(unique(l)...)\n\
    end\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis is not the fastest solution,\
    \ since it requires O(n^2) memory and O(n^2) time.\n<|/ c |>\n<| c |>\nI agree,\
    \ this is O(n^2) memory and O(n^2) time. However it is the fastest solution that\
    \ I have seen so far.\n<|/ c |>\n<| a dscore=3 |>\nThe most efficient solution\
    \ is to use Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpimsm96zd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpimsm96zd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        unique.add(i)\n    end\n    return\
    \ unique\nend\n</code>\n<|/ a dscore=2 |>\n<| c |>\nI like the idea of using sets,\
    \ but this doesn't seem to work if you have a vector of strings. `unique([\"a\"\
    , \"b\", \"c\", \"a\", \"b\"])` returns `[\"a\", \"b\", \"c\"]`\n<|/ c |>\n<|\
    \ c |>\nYes, I agree with you. My solution was for integers. I edited my answer\
    \ to include a solution for strings as well.\n<|/ c |>\n<| c |>\nI added a solution\
    \ for strings as well.\n<|/ c |>\n<| a dscore=2 |>\nHere's a solution using Julia's\
    \ built-in Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr1p0bc0z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr1p0bc0z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppow7p8vz.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppow7p8vz.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have duplicate elements in\
    \ the list. For example, `unique([1,2,2,3])` returns `[1,2,3]`.\n<|/ c |>\n<|\
    \ c |>\nYes, it does. I tested it before posting. Try it yourself.\n<|/ c |>\n\
    <| c |>\nI tested it and it doesn't work. Try it yourself.\n<|/ c |>\n<| c |>\n\
    I tested it and it works. I edited the answer to show you the code.\n<|/ c |>\n\
    <| c |>\nOh I see, I missed the fact that `unique` was a function. Thanks!\n<|/\
    \ c |>\n<| a dscore=2 |>\nI believe that this is what you are looking for:\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu6yf_5d4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu6yf_5d4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like Julia's solution, but I wanted to\
    \ add that you can also use Julia's built-in function unique.\n<code>\njulia>\
    \ unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Array{Int64,1}:\n 0\n 2\n\
    \ 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,unique |>\n<| a dscore=1 |>\nI like\
    \ to use Sets to do this:\n<code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    10-element Set{Int64}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,unique\
    \ |>\n<| a tags=julia,unique |>\nThe most efficient way is to use Sets:\n<code>\n\
    julia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Set{Int64}:\n 0\n 2\n 3\n\
    \ 5\n 9\n 123\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\nI like to use Sets\
    \ to do this:\n<code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Set{Int64}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,unique |>\n<| a tags=julia,unique\
    \ |>\nI like to use Sets to do this:\n<code>\njulia> Set([5, 3, 5, 2, 3, 3, 9,\
    \ 0, 123])\n10-element Set{Int64}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=julia,unique |>\nI like to use Sets to do this:\n<code>\njulia>\
    \ Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Set{Int64}:\n 0\n 2\n 3\n 5\n\
    \ 9\n 123\n</code>\n<|/ a dscore=1 |>\n<| a tags=julia,unique |>\nI like to use\
    \ Sets to do this:\n<code>\njulia> Set([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element\
    \ Set{Int64}:\n 0\n 2\n 3\n 5\n\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6nr1wgrr.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6nr1wgrr.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=2 |>\nI came up with a solution using\
    \ Julia's built-in function unique:\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> unique(a)\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> sort(unique(a))\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> sort(unique(a))\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a dscore=2 |>\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> sort(unique(a))\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a dscore=1 |>\n<code>\njulia> a = [5,3,5,2,3,3,9,0,123]\n\
    julia> sort(unique(a))\n5-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| c |>\nWhile this code may answer the question,\
    \ providing additional context regarding why and/or how this code answers the\
    \ question improves its long-term value.\n<|/ c |>\n<| a dscore=1 |>\n<code>\n\
    julia> a = [5,3,5,2,3,3,9,0,123]\njulia> sort(unique(a))\n5-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia,arrays |>\n<| a dscore=\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2nww4a40.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2nww4a40.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if !seen.add(i)\n\
    \            unique.add(i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgpxayjgw.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgpxayjgw.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for i in l\n  \
    \      if !haskey(seen, i)\n            push!(unique, i)\n            push!(seen,\
    \ i)\n        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp445kamsv.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp445kamsv.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i not in\
    \ seen \n            push!(unique, i)\n            push!(seen, i)\n        end\n\
    \    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjq3bmr0g.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjq3bmr0g.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThis doesn't work for me. `unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])` returns `[5, 3, 9, 123]`.\n<|/ c |>\n<| c |>\nI tested it on\
    \ Julia 0.6.2 and it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm\
    \ using 0.6.2. I just tried it on 0.6.2 and it works. I must have done something\
    \ wrong the first time I tried. Thanks!\n<|/ c |>\n<| c |>\nI tested it on 0.6.2\
    \ and it works. What version are you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.2.\
    \ I just tried it on 0.6.2 and it works. I must have done something wrong the\
    \ first time I tried. Thanks!\n<|/ c |>\n<| a dscore=2 |>\nA simple solution using\
    \ sort! and unique!:\n<code>\njulia> sort!(unique!([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n\
    0-element Array{Int64,1}\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't\
    \ work for me. `sort!(unique!([5, 3, 5, 2, 3, 3, 9, 0, 123]))` returns `0-element\
    \ Array{Int64,1}`.\n<|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works.\
    \ What version are you using?\n<|/ c |>\n<| c |>\nI'm using 0.6.2. I just tried\
    \ it on 0.6.2 and it works. I must have done something wrong the first time I\
    \ tried. Thanks!\n<|/ c |>\n<| a dscore=2 |>\nA simple solution using sort! and\
    \ unique!:\n<code>\njulia> sort!(unique!([5, 3, 5, 2, 3, 3, 9, 0, 123]))\n0-element\
    \ Array{Int64,1}\n</code>\n<|/ a tags=julia |>\n<| c |>\nThis doesn't work for\
    \ me. `sort!(unique!([5, 3, 5, 2, 3, 3, 9, 0, 123]))` returns `0-element Array{Int64,1}`.\n\
    <|/ c |>\n<| c |>\nI tested it on Julia 0.6.2 and it works. What version are you\
    \ using?\n<|/ c |>\n<| c |>\nI'm using 0.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_asbpw6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi_asbpw6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpumk4h3om.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpumk4h3om.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !seen.add(x)\n            push!(unique, x)\n        end\n    end\n    return\
    \ unique\nend\n</cell>\n<text>\nExercise: Write a function that takes a vector\
    \ of integers and returns a vector of integers where the values are the absolute\
    \ values of the original vector. For example, if the input vector is [5, 3, -2,\
    \ -6, 3, 9], then the output vector should be [5, 3, 9, 6, 3]. Make sure to handle\
    \ negative numbers correctly.\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwtksuiju.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwtksuiju.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = sort(unique(l))\n    unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2ov3batx.jl:9\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2ov3batx.jl:9\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nI like your answer, but I think it would be more efficient\
    \ to just use `Set` instead of `Dict`\n<|/ c |>\n<| c |>\nYes, I agree with you.\
    \ My answer was more to show that `Dict` can be used for this purpose.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nA simple solution is to use Sets:\n<code>\njulia> using\
    \ Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr9ppzg4e.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr9ppzg4e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set{Int64}()\n    unique = Vector{Int64}()\n    for x in l\n  \
    \      if !seen.add(x)\n            push!(unique, x)\n        end\n    end\n \
    \   return unique\nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdrjs1z40.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdrjs1z40.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for x in l\n        if !seen.add(x)\n\
    \            unique.add(x)\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpy2mooqd1.jl:15\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpy2mooqd1.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nIn Julia v0.6 you can use the function unique:\n\
    <code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia |>\n<| a dscore=1 |>\nIn\
    \ Julia v0.6 you can use the function unique:\n<code>\njulia> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n10-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n\
    </code>\n<|/ a tags=julia |>\n<| a |>\nIn Julia v0.6 you can use the function\
    \ unique:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Array{Int64,1}:\n\
    \ 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia dscore=1 |>\n<| a dscore=1\
    \ |>\nIn Julia v0.6 you can use the function unique:\n<code>\njulia> unique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n\
    \ 123\n</code>\n<|/ a tags=julia |>\n<| a dscore=0 |>\nIn Julia v0.6 you can use\
    \ the function unique:\n<code>\njulia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n\
    10-element Array{Int64,1}:\n 0\n 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia\
    \ |>\n<| a dscore=0 |>\nIn Julia v0.6 you can use the function unique:\n<code>\n\
    julia> unique([5, 3, 5, 2, 3, 3, 9, 0, 123])\n10-element Array{Int64,1}:\n 0\n\
    \ 2\n 3\n 5\n 9\n 123\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\nIn Julia\
    \ v0.6 you can use the function unique:\n<code>\njulia> unique([5, 3, 5, 2, 3,\
    \ 3, 9, 0, 123])\n10-element Array{Int64,1}\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvuxi8ziq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvuxi8ziq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| a dscore=2 |>\nI like using Sets to do this:\n<code>\njulia>\
    \ using Sets\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpemb9fiuv.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpemb9fiuv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\n<code>\njulia> using Statistics\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyyiqmvbs.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyyiqmvbs.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a |>\nI wanted to add an answer that uses only\
    \ built-in functions. I wanted to add this answer because I wanted to share my\
    \ solution with others who are new to Julia and want to learn how to solve this\
    \ problem without using any external packages. \n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5wa12w8f.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5wa12w8f.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        push!(unique, x)\n    end\n  \
    \  return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_ae0hwyf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_ae0hwyf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\nunique(a)\n\
    </cell>\n<text>\nExercise 10\nWrite a function that takes a vector and returns\
    \ the number of unique elements in the vector. \nWrite a function that takes a\
    \ vector and returns the number of unique elements in the vector that are less\
    \ than or equal to 10. \nWrite a function that takes a vector and returns the\
    \ number of unique elements in the vector that are greater than 10. \nWrite a\
    \ function that takes a vector and returns the number of unique elements in the\
    \ vector that are less than or equal to 10 and greater than 10. \nusing Test\n\
    \n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3,\
    \ 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: UndefVarError: a not defined\nStacktrace:\n [1] top-level\
    \ scope at /tmp/tmpl699xtcp.jl:14\n [2] include(::Module, ::String) at ./Base.jl:377\n\
    \ [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4] _start() at ./client.jl:484\n\
    in expression starting at /tmp/tmpl699xtcp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if !haskey(seen,\
    \ i)\n            push!(unique, i)\n            seen[i] = 1\n        end\n   \
    \ end\n    return unique\nend\n</cell>\n<code language=julia-1.4>\nunique([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123])\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ returns the number of unique elements in a list\nWrite a function that returns\
    \ the number of unique elements in a vector\nWrite a function that returns the\
    \ number of unique elements in a matrix\nWrite a function that returns the number\
    \ of unique elements in a sparse matrix\nusing Test\n\n@testset begin\n\ncandidate\
    \ = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5,\
    \ 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplwqj62eo.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplwqj62eo.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Set()\n    for i in l\n        if i \u2209\
    \ seen\n            unique.add(i)\n            seen.add(i)\n        end\n    end\n\
    \    return unique\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123])\
    \ == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyyae8oi4.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyyae8oi4.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    unique = unique + l\n    unique = unique(unique(unique))\n\
    \    return unique(unique(unique))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph9rjt_7f.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph9rjt_7f.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        unique.add(x)\n    end\n    unique\n\
    end\nunique\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpn7alv7my.jl:18\n  Test threw exception\n\
    \  Expression: candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123]\n\
    \  type Set has no field add\n  Stacktrace:\n   [1] getproperty(::Set{Any}, ::Symbol)\
    \ at ./Base.jl:33\n   [2] unique(::Array{Int64,1}) at /tmp/tmpn7alv7my.jl:8\n\
    \   [3] top-level scope at /tmp/tmpn7alv7my.jl:18\n   [4] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [5] top-level scope at /tmp/tmpn7alv7my.jl:17\n  \nTest Summary: | Error \
    \ Total\ntest set      |     1      1\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 1 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpn7alv7my.jl:15\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nThe most efficient way\
    \ is to use Sets:\n<code>\njulia> using Sets\nusing Test\n\n@testset begin\n\n\
    candidate = unique;\n\t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2,\
    \ 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9yv3psa1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9yv3psa1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    seen = Set()\n    unique = Vector{Int64}()\n    for x in l\n        if\
    \ !haskey(seen, x)\n            push!(unique, x)\n            seen[x] = true\n\
    \        end\n    end\n    return unique\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5, 3,\
    \ 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_rld06db.jl:16\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_rld06db.jl:16\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique.value\nend\n\
    </code>\n<|/ a tags=julia,arrays |>\n<| a tags=julia,arrays |>\nI came up with\
    \ this:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\t@test(candidate([5,\
    \ 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc7vnnbzx.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc7vnnbzx.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for i in l\n        if !haskey(unique, i)\n      \
    \      push!(unique, i)\n        end\n    end\n    return unique\nend\n</code>\n\
    <|/ a dscore=2 |>\n<| c |>\nThanks for your answer. Could you please explain why\
    \ you used `Set` instead of `Dict`?\n<|/ c |>\n<| c |>\n`Set` does not allow duplicates.\
    \ `Dict` does. `Dict` also has some nice features like `haskey`, `keys` etc.\n\
    <|/ c |>\n<| c |>\nI see. So `Set` has better performance than `Dict` when searching\
    \ for a key?\n<|/ c |>\n<| c |>\nYes, `Set` has better performance than `Dict`\
    \ when searching for a key. `Set` also has some nice features like `haskey`, `keys`\
    \ etc.\n<|/ c |>\n<| c |>\nThanks for your answer. Could you please explain why\
    \ you used `Set` instead of `Dict`?\n<|/ c |>\n<| a |>\nThe most efficient way\
    \ is to use Set. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwm7ht_38.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwm7ht_38.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"Return sorted unique elements in a list\n    >>> unique([5, 3, 5,\
    \ 2, 3, 3, 9, 0, 123])\n    [0, 2, 3, 5, 9, 123]\n    \"\"\"\nfunction unique(l::Vector{Int64})::Vector{Int64}\
    \ \n    unique = Set()\n    for x in l\n        if !haskey(unique, x)\n      \
    \      unique[x] = true\n        end\n    end\n    return unique\nend\n</cell>\n\
    <code language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = unique;\n\
    \t@test(candidate([5, 3, 5, 2, 3, 3, 9, 0, 123]) == [0, 2, 3, 5, 9, 123])\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgubvgm7z.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgubvgm7z.jl:14\n"
  exit_code: 1
  status: Exception
