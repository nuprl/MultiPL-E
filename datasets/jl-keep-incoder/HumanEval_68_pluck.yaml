name: HumanEval_68_pluck
language: julia
prompt: "\"\"\"\n    \"Given an array representing a branch of a tree that has non-negative\
  \ integer nodes\n    your task is to pluck one of the nodes and return it.\n   \
  \ The plucked node should be the node with the smallest even value.\n    If multiple\
  \ nodes with the same smallest even value are found return the node that has smallest\
  \ index.\n\n    The plucked node should be returned in a list, [ smalest_value,\
  \ its index ],\n    If there are no even values or the given array is empty, return\
  \ [].\n\n    Example 1:\n        Input: [4,2,3]\n        Output: [2, 1]\n      \
  \  Explanation: 2 has the smallest even value, and 2 has the smallest index.\n\n\
  \    Example 2:\n        Input: [1,2,3]\n        Output: [2, 1]\n        Explanation:\
  \ 2 has the smallest even value, and 2 has the smallest index. \n\n    Example 3:\n\
  \        Input: []\n        Output: []\n    \n    Example 4:\n        Input: [5,\
  \ 0, 3, 0, 4, 2]\n        Output: [0, 1]\n        Explanation: 0 is the smallest\
  \ value, but  there are two zeros,\n                     so we will choose the first\
  \ zero, which has the smallest index.\n\n    Constraints:\n        * 1 <= nodes.length\
  \ <= 10000\n        * 0 <= node.value\n    \"\"\"\nfunction pluck(arr::Vector{Int64})::Vector{Int64}\
  \ \n"
tests: "using Test\n\n@testset begin\n\ncandidate = pluck;\n\t@test(candidate([4,\
  \ 2, 3]) == [2, 1])\n\t@test(candidate([1, 2, 3]) == [2, 1])\n\t@test(candidate(Vector{Int64}([]))\
  \ == Vector{Int64}([]))\n\t@test(candidate([5, 0, 3, 0, 4, 2]) == [0, 1])\n\t@test(candidate([1,\
  \ 2, 3, 0, 5, 3]) == [0, 3])\n\t@test(candidate([5, 4, 8, 4, 8]) == [4, 1])\n\t\
  @test(candidate([7, 6, 7, 1]) == [6, 1])\n\t@test(candidate([7, 9, 7, 1]) == Vector{Int64}([]))\n\
  end\n"
completions: ["    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if smallest_index == -1 || length(arr) == 0\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4, 2, 3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=", "    even = filter(x -> x % 2 == 0, arr)\n    even = sort(even)\n\
    \    even = even[even.first:end]\n    if even == []\n        return []\n    else\n\
    \        return even\n    end\nend\n</cell>\n<code language=julia-1.5>\narr =\
    \ [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\n", "    even_values = filter(x -> x % 2 ==\
    \ 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = index(even_values,\
    \ smallest_value)\n    \n    if smallest_index == -1 || length(even_values) ==\
    \ 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index + 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n", "    largest = Int64(0)\n    smallest = Int64(0)\n    largestIndex =\
    \ 0\n    smallestIndex = 0\n    largestValue = Int64(0)\n    smallestValue = Int64(0)\n\
    \    largestEvenValue = Int64(0)\n    smallestEvenValue = Int64(0)\n    largestEvenIndex\
    \ = Int64(0)\n    smallestEvenIndex = Int64(0)\n    for node in arr\n        if\
    \ node.even\n            if node.value > largestValue\n                largestValue\
    \ = node.value\n                largestEvenValue = node.even\n               \
    \ largestEvenIndex = node.index\n            end\n            if node.value <\
    \ smallestValue\n                smallestValue = node.value\n                smallestEvenValue\
    \ = node.even\n                smallestEvenIndex = node.index\n            end\n\
    \        end\n    end\n    if largestEvenValue == 0\n        return []\n    else\n\
    \        return [largestEvenValue, largestEvenIndex]\n    end\nend", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    end\n    smallest_value = minimum(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5,0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,3,0,4,2,1,0,5,0,5]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5,0,5,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,5,0,5,0,5]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5,0,5,0,5,0]\n</cell>\n\
    <code language=julia-1.5>", "    \n    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    \n    if length(even_values) == 0\n        return Vector{Int64}()\n    end\n\
    \    \n    smallest_value = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    \n    if smallest_index == nothing\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = arr[smallest_index]\n    \n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nPractice 3", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if smallest_index == 0 \n        return []\
    \ \n    else \n        return [smallest_value, smallest_index]\nend", "    even_values\
    \ = filter(x->mod(x,2)==0, arr)\n    smallest_even_value = min(even_values)\n\
    \    smallest_even_index = index(even_values, smallest_even_value)\n    if smallest_even_index\
    \ == -1 || length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_even_value,smallest_even_index]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nProblem 7: Given a binary tree, return the level order traversal of its\
    \ nodes' values. (i.e., the in-order traversal of its nodes' values.)", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n     \
    \   smallest_index = find(even_values == smallest_value)[1]\n        return Vector{Int64}([smallest_value,\
    \ smallest_index])\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\n4.3 Plucking Elements from an Array", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ [] \n    end\n    smallest_value = minimum(even_values)\n    smallest_index\
    \ = findfirst(x -> x == smallest_value, even_values)\n    return [ smallest_value,\
    \ smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</", "    \n    even_values = unique(arr .% 2)\n  \
    \  \n    if isempty(even_values) || length(even_values) == 0\n        return []\
    \ \n    end", "    largest = arr[1]\n    smallest = arr[1]\n    smallest_index\
    \ = 2\n    for index in 2:length(arr)\n        if arr[index] >= largest\n    \
    \        largest = arr[index]\n        elseif arr[index] < smallest && arr[index]\
    \ % 2 == 0\n            smallest = arr[index]\n            smallest_index = index\n\
    \        end\n    end\n    return smallest_index == 1 ? [smallest, smallest_index]\
    \ : []\nend\n</cell>\n<code language=julia-1.0>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = []\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <text>\nProblem 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        index = find(even_values == smallest_value)[1]\n        return Vector{Int64}([smallest_value,\
    \ index])\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven an array representing\
    \ a binary tree, return the number of nodes in the tree.", "    even_values =\
    \ filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    \n    if smallest_index == 0 \n\
    \        smallest_value = arr[1]\n        smallest_index = 1\n    end\n    \n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nProblem 7: Find all nodes\
    \ with value greater than a given value", "    \n    even_values = filter(x ->\
    \ x % 2 == 0, arr)\n    \n    if length(even_values) == 0\n        return [] \n\
    \    end\n    \n    smallest_even_value = minimum(even_values)\n    smallest_even_index\
    \ = findfirst(x->x==smallest_even_value, even_values)\n    \n    return [smallest_even_value,\
    \ smallest_even_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value =\
    \ min(even_values)\n    smallest_index = find(x -> x == smallest_value, even_values)\n\
    \    \n    if smallest_index == -1 || length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend", "    even_values = Set{Int64}()\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    for node in arr\n        if node % 2 == 0\n            even_values.add(node)\n\
    \            if node < smallest_value\n                smallest_value = node\n\
    \                smallest_index = arr.index(node)\n            end\n        end\n\
    \    end\n    if !isempty(even_values)\n        smallest_value = min(even_values)\n\
    \        smallest_index = arr.index(smallest_value)\n    end\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if length(even_values) == 0 || smallest_value\
    \ == 0\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nPractice Problems", "    even_values = Set{Int64}()\n\
    \    smallest_value = Int64(0)\n    smallest_index = -1\n    for node in arr\n\
    \        if node % 2 == 0\n            even_values.add(node)\n            if smallest_value\
    \ == 0\n                smallest_value = node\n                smallest_index\
    \ = node\n            elseif node < smallest_value\n                smallest_value\
    \ = node\n                smallest_index = node\n            end\n        end\n\
    \    end\n    if !even_values\n        return Vector{Int64}()\n    end\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    return smallest_value, smallest_index\nend", "    even_values = unique(arr\
    \ .% 2)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if length(even_values) == 0 || smallest_value\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    return smallest_value, smallest_index\nend", "    \n    even_values\
    \ = Set()\n    smallest_value = 0\n    smallest_index = 0\n    \n    for node\
    \ in arr\n        if node % 2 == 0\n            even_values.add(node)\n      \
    \      if node < smallest_value\n                smallest_value = node\n     \
    \           smallest_index = node\n            end\n        end\n    end\n   \
    \ \n    if !even_values\n        return Vector{Int64}[]\n    end\n    \n    smallest_value_index\
    \ = Set()\n    for node in even_values\n        if smallest_value == node\n  \
    \          smallest_value_index.add(smallest_index)\n        end\n    end\n  \
    \  \n    return smallest_value_index\nend", "    even_values = filter(x -> x %\
    \ 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if length(even_values) == 0 || smallest_value\
    \ == 0\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=", "    \n    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    \n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = min(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    \n    return Vector{Int64}([smallest_value, smallest_index])\n\
    end", "    \n    even_values = filter(x->mod(x,2) == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x == smallest_value, even_values)\n    \n \
    \   if smallest_index == nothing\n        return Vector{Int64}()\n    end\n  \
    \  \n    return [ smallest_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr", "    \n    even_values = Set()\n   \
    \ smallest_value = 0\n    smallest_index = 0\n    \n    for node in arr\n    \
    \    if node % 2 == 0\n            even_values.add(node)\n            if node\
    \ < smallest_value\n                smallest_value = node\n                smallest_index\
    \ = length(arr)\n            end\n        end\n    end\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = index(even_values, smallest_value)\n    \n    return [ smallest_value,\
    \ smallest_index ]\nend", "    \n    even_values = filter(x->mod(x,2)==0, arr)\n\
    \    if length(even_values) == 0\n        return Vector{Int64}[]\n    end\n  \
    \  \n    smallest_value = min(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n\
    \        return Vector{Int64}()\n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)", "    \n    even_values = Set()\n    smallest_value\
    \ = -Inf \n    smallest_index = 0\n    \n    for node in arr\n        if node.even?\
    \ \n            push!(even_values, node.value)\n            if node.value < smallest_value\n\
    \                smallest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    return\
    \ [ smallest_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [", "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_even_index = find(even_values == smallest_even_value)[1]\n\
    \        return [ smallest_even_value, smallest_even_index ]\n    end\nend", " \
    \   even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_even_value)[0]\n    return\
    \ smallest_even_value,smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice 3", "    largest\
    \ = arr[1]\n    smallest = arr[1]\n    largestIndex = 1\n    smallestIndex = 1\n\
    \    for node in arr[2:end]\n        if node < smallest \n            smallest\
    \ = node\n            smallestIndex = largestIndex\n        elseif node > largest\n\
    \            largest = node\n            largestIndex = smallestIndex\n      \
    \  else\n            smallestIndex = smallestIndex + 1\n        end\n    end\n\
    \    return [ smallest, smallestIndex ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr", "    even_values = Set()\n    smallest_value\
    \ = -1\n    smallest_index = 0\n    for node in arr\n        if node.even?\n \
    \           even_values.add(node.value)\n            if node.value < smallest_value\n\
    \                smallest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    return smallest_value, smallest_index\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if smallest_index == 0 \n        return [] \n    else \n        return\
    \ [smallest_value, smallest_index]\nend", "    \n    even_values = Set()\n   \
    \ smallest_value = -1\n    smallest_index = 0\n    \n    for node in arr\n   \
    \     if node % 2 == 0\n            even_values.add(node)\n            if smallest_value\
    \ == -1 || node < smallest_value\n                smallest_value = node\n    \
    \            smallest_index = length(arr)\n            end\n        end\n    end\n\
    \    \n    if length(even_values) == 0\n        return Vector{Int64}()\n    end\n\
    \    \n    smallest_value = min(even_values)\n    smallest_index = index(even_values,\
    \ smallest_value)\n    \n    return [ smallest_value, smallest_index ]\nend",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n    \
    \    return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\n\
    Problem 4\nGiven a binary tree, return the level order traversal of its nodes'\
    \ values. (ie, from left to right, level by level).", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    smallest_even_value = min(even_values)\n    smallest_even_index\
    \ = even_values.index(smallest_even_value)\n    smallest_value = arr[smallest_even_index]\n\
    \    return smallest_value, smallest_even_index\nend", "    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n     \
    \   smallest_index = find(even_values == smallest_value)[1]\n        return Vector{Int64}([smallest_value,\
    \ smallest_index])\n    end\nend\n</cell>\n<text>\nSolution\nLet's see how we\
    \ could solve this problem using Julia.", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = index(even_values,\
    \ smallest_value)\n    if smallest_index == -1 || length(even_values) == 0\n \
    \       return Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck", "    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n\
    \        return Vector{Int64}()\n    else\n        smallest_even_value = min(even_values)\n\
    \        index = find(even_values == smallest_even_value)[1]\n        return [\
    \ smallest_even_value, index ]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n", "  \
    \  \n    even_values = filter(x -> x % 2 == 0, arr)\n    if isempty(even_values)\n\
    \        return Vector{Int64}()\n    end", "    even_values = filter(x -> x %\
    \ 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if smallest_value == 0\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nPractice 3", "    \n    even_values = filter(x ->\
    \ x % 2 == 0, arr)\n    \n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = min(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    \n    if smallest_index == nothing\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = arr[smallest_index]\n    \n    return Vector{Int64}([smallest_value,\
    \ smallest_index])\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\n", "    even_values = filter(x -> x % 2 == 0, arr)\n  \
    \  if length(even_values) == 0\n        return Vector{Int64}()\n    end\n    smallest_value\
    \ = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    return Vector{Int64}([smallest_value, smallest_index])\nend\n\
    </cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    even_values = sort(even_values)\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[2:end]\n    even_values = even_values[2:end]\n",
  "    even_values = unique(arr).-arr\n    even_values = sort(even_values)\n    even_values\
    \ = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]\n\
    \    even_values = even_values[even_values..end]\n    even_values = even_values[even_values..end]",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    else \n        return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, ", "    \n    even_values = Set()\n\
    \    smallest_value = -Inf\n    smallest_index = 0\n    for node in arr\n    \
    \    if node % 2 == 0\n            even_values.add(node)\n            if node\
    \ < smallest_value\n                smallest_value = node\n                smallest_index\
    \ = i\n        end\n    end\n    if !isempty(even_values)\n        smallest_value\
    \ = min(even_values)\n        smallest_index = find(even_values == smallest_value)[1]\n\
    \    end\n    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\narr\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\n", "    \n    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    if isempty(even_values)\n        return Vector{Int64}()\n    else\n\
    \        smallest_value = min(even_values)\n        smallest_index = find(even_values\
    \ == smallest_value)[1]\n        return [smallest_value, smallest_index]\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if length(even_values) == 0 || smallest_value == 0\n        return\
    \ Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [4, 2, 3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1, 2, 3, 4, 5]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,\
    \ 2, 3, 4, 5, 6, 7]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3, 4, 5, 6, 7]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1, 2, 3, 4, 5, 6, 7]\n</cell>", "    even_values = findall(x -> x % 2 ==\
    \ 0, arr)\n    if isempty(even_values)\n        return [];\n    end\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, ", "    even_values = arr.filter(x -> x % 2 == 0)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    return\
    \ Vector{Int64}([smallest_value, smallest_index])\nend", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    smallest_value_index = find(even_values\
    \ == smallest_value)[1]\n    return smallest_value, smallest_value_index\nend",
  "    even = filter(x -> x % 2 == 0, arr)\n    even.sort()\n    even.push(0)\n  \
    \  even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n    even.push(0)\n\
    \    even.push(0)\n    even.", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    if length(even_values) == 0\n        return Vector{Int64}()\n    end\n  \
    \  smallest_value = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    return Vector{Int64}([smallest_value, smallest_index])\nend\n\
    </cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=juli", "    even_values = findall(x -> x % 2 == 0, arr)\n    if\
    \ isempty(even_values) || length(arr) == 0 \n        return [] \n    end\n   \
    \ \n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    return [smallest_value, smallest_index]\nend\n\
    </cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    smallest_value_index = find(even_values == smallest_value)[1]\n    return\
    \ [smallest_value, smallest_value_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, ", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    return smallest_value, smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(", "    \n    even_values\
    \ = Set()\n    smallest_value = -Inf \n    smallest_index = 0\n    \n    for node\
    \ in arr\n        if node.even?\n            even_values.add(node.value)\n   \
    \         if node.value < smallest_value\n                smallest_value = node.value\n\
    \                smallest_index = node\n            end\n        end\n    end\n\
    \    \n    if !even_values\n        return Vector{Int64}()\n    end\n    \n  \
    \  smallest_value = smallest_value.value\n    smallest_index = smallest_index.value\n\
    \    \n    even_values = Set()\n    \n    for node in arr\n        if node.even?\n\
    \            even_values.add(node.value)\n        end\n    end\n    \n    if !even_values\n\
    \        return Vector{Int64}()\n    end\n    \n    smallest_value = smallest_value.value\n\
    \    smallest_index = smallest_index.value\n    \n    even_values = Set()\n  \
    \  \n    for node in arr\n        if node.even?\n            even_values.add(node.value)\n\
    \        end\n    end\n    \n    if !even_values\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = smallest_value.value\n    smallest_index\
    \ = smallest_index.value\n    \n    even_values = Set()\n    \n    for node in\
    \ arr\n        if node.even?\n            even_values.add(node.value)\n      \
    \  end\n    end\n    \n    if !even_values\n        return Vector{Int64}()\n \
    \   end\n    \n    smallest_value = smallest_value.value\n    smallest_index =\
    \ smallest_index.value\n    \n    even_values = Set()\n    \n    for node in arr\n\
    \        if node.even?\n            even_values.add(node.value)\n        end\n\
    \    end\n    \n    if !even_values\n        return Vector{Int64}()\n    end\n\
    \    \n    smallest_value = smallest_value.value\n    smallest_index = smallest_index.value\n\
    \    \n    even_values = Set()\n    \n    for node in arr\n        if node.even?\n\
    \            even_values.add(node.value)\n        end\n    end\n    \n    if !even_values\n\
    \        return Vector{Int64}()\n    end\n    \n    smallest_value = smallest_value.value\n\
    \    smallest_index = smallest_index.value\n    \n    even_values = Set()\n  \
    \  \n    for node in arr\n        if node.even?\n            even_values.add(node.value)\n\
    \        end\n    end\n    \n    if !even_values\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = smallest_value.value\n    ", "    even_values\
    \ = unique(arr .% 2)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    \n    if smallest_index == 0 \n\
    \        smallest_value = arr[smallest_index]\n        smallest_index = 1\n  \
    \  end\n    \n    return smallest_value, smallest_index\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,2,3,0,4,2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,2,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,1,0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,1,0,1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,2,3,0,4,2,1,0,1,0,1,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,1,0,1,0,1,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,2,3,0,4,2,1,0,1,0,1,0,1,0,1,0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n", "    \n    even_values = Set()\n    smallest_value = -Inf \n  \
    \  smallest_index = 0\n    \n    for node in arr\n        if node.even?\n    \
    \        even_values.add(node.value)\n            if node.value < smallest_value\n\
    \                smallest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    \n    if !even_values\n   \
    \     return Vector{Int64}()\n    end\n    \n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    return\
    \ [ smallest_value, smallest_index ]\nend", "    even_values = filter(x -> x %\
    \ 2 == 0, arr)\n    smallest_even_value = min(even_values)\n    smallest_even_index\
    \ = even_values.index(smallest_even_value)\n    smallest_value = arr[smallest_even_index]\n\
    \    smallest_index = smallest_even_index\n    \n    smallest_value_index = 0\n\
    \    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n    smallest_value_index = 0\n    smallest_value_index\
    \ = 0\n    smallest_value_index = 0\n", "    even_values = filter(x -> x % 2 ==\
    \ 0, arr)\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    if length(even_values) == 0\n        return Vector{Int64}[]\n    else\n \
    \       smallest_value = even_values[1]\n        smallest_index = 1\n        for\
    \ value in even_values\n            if value < smallest_value\n              \
    \  smallest_value = value\n                smallest_index = index(value)\n   \
    \         end\n        end\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values. (ie, from left to right, level by level).",
  "    even_values = arr.filter(x -> x % 2 == 0)\n    if isempty(even_values)\n  \
    \      return [];\n    end\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=juli", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    return smallest_value, smallest_index\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(", "    even_values = Set()\n    smallest_value = -Inf \n    smallest_index\
    \ = -1\n    \n    for node in arr\n        if node.even\n            push!(even_values,\
    \ node.value)\n            if node.value < smallest_value\n                smallest_value\
    \ = node.value\n                smallest_index = i\n            end\n        end\n\
    \    end\n    \n    if !isempty(even_values)\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n    end\n  \
    \  \n    return [ smallest_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if length(even_values) == 0 || smallest_value\
    \ == 0\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=", "    even_values = filter(x -> x % 2 ==\
    \ 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if smallest_index == 0 \n        return []\
    \ \n    else \n        return [smallest_value, smallest_index]\nend", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    end\n    smallest_value = min(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    return [smallest_value, smallest_index]\nend", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = findfirst(x -> x == smallest_value, even_values)\n    \n    if smallest_index\
    \ == nothing\n        return []\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nProblem 4\nGiven a binary tree, return the level\
    \ order traversal of its nodes' values.", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n",
  "    even_values = unique(arr .% 2)\n    smallest_value = min(even_values)\n   \
    \ smallest_index = find(even_values == smallest_value)[1]\n    \n    if length(even_values)\
    \ == 0 || smallest_value == 0\n        return Vector{Int64}()\n    end", "   \
    \ even_values = Set{Int64}()\n    smallest_value = 0\n    smallest_index = 0\n\
    \    for node in arr\n        if node % 2 == 0\n            even_values.add(node)\n\
    \            if node < smallest_value\n                smallest_value = node\n\
    \                smallest_index = index\n            end\n        end\n    end\n\
    \    if length(even_values) == 0\n        return Vector{Int64}()\n    end\n  \
    \  smallest_value = min(even_values)\n    smallest_index = index(smallest_value)\n\
    \    return [ smallest_value, smallest_index ]\nend", "    even_values = Set{Int64}()\n\
    \    smallest_value = Int64(0)\n    smallest_index = -1\n    smallest_even_value\
    \ = Int64(0)\n    \n    for node in arr\n        if node.even?\n            even_values.add(node.value)\n\
    \            if node.value < smallest_value\n                smallest_value =\
    \ node.value\n                smallest_index = node\n            elseif node.value\
    \ == smallest_value\n                if node.index < smallest_index\n        \
    \            smallest_value = node.value\n                    smallest_index =\
    \ node\n                end\n            end\n        else\n            if node.value\
    \ < smallest_even_value\n                smallest_even_value = node.value\n  \
    \          end\n        end\n    end\n    \n    if !even_values.empty?\n     \
    \   smallest_value = smallest_value + 1\n        smallest_index = smallest_index\
    \ + 1\n    end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nPractice 3", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = index(even_values,\
    \ smallest_value)\n    \n    if smallest_index == -1 || length(even_values) ==\
    \ 0\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.4>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.4>\npluck(arr)\n</cell>\n<code language=julia-1.4>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.4>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.4>\narr = []\n</cell>\n<code language=julia-1.4>\npluck(arr)\n\
    </cell>\n<code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.4>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.4>\npluck(arr)\n</cell>\n<code language=julia-1.4>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.4>\npluck(arr)\n\
    </cell>\n<code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.4>\npluck(arr)\n</cell>\n<code language=julia-1.4>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.4>\npluck(arr)\n</cell>\n\
    <code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.4>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.4>\npluck(arr)\n</cell>\n<code language=julia-1.4>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.4>\npluck(arr)\n\
    </cell>\n<code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.4>\npluck(arr)\n</cell>\n<code language=julia-1.4>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.4>\npluck(arr)\n</cell>\n\
    <code language=julia-1.4>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.4>\n\
    pluck(arr)\n</cell>\n", "    even_values = filter(x -> x % 2 == 0, arr)\n    if\
    \ length(even_values) == 0\n        return Vector{Int64}()\n    elseif length(even_values)\
    \ == 1\n        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\n\
    Given a binary tree, return the level order traversal of its nodes' values. (ie,\
    \ from left to right, level by level).", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    return smallest_value, smallest_index\nend", "  \
    \  \n    even_values = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return Vector{Int64}([smallest_value, smallest_index])\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-", "    even_values = filter(x->mod(x,2)==0, arr)\n    even_values\
    \ = sort(even_values)\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]\n    even_values =\
    \ even_values[2:end]\n    even_values = even_values[2:end]", "    even = filter(x\
    \ -> x % 2 == 0, arr)\n    even = sort(even)\n    even = even[even.first:end]\n\
    \    even = unique(even)\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even", "    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index =\
    \ find(even_values == smallest_value)[1]\n    \n    if length(even_values) ==\
    \ 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n       \
    \ return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\narr\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, ", "    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nProblem 3\nGiven a binary\
    \ tree, return the level order traversal of its nodes' values. (i.e., the in-order\
    \ traversal of its nodes' values.)", "    \n    even_values = filter(x -> x %\
    \ 2 == 0, arr)\n    \n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = minimum(even_values)\n    \n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    \n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>",
  "    even = filter(x -> x % 2 == 0, arr)\n    even = sort(even)\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:", "    \n    even_values =\
    \ filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    plucked_value = arr[smallest_index]\n    \n    return Vector{Int64}([plucked_value,\
    \ smallest_index])\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nProblem 3\nGiven a binary tree, return the level order traversal of its\
    \ nodes' values.", "    \n    smallest_value::Int64 = arr[1]\n    smallest_index::Int64\
    \ = 1\n    \n    for index in 2:length(arr)\n        if arr[index] % 2 == 0\n\
    \            if smallest_value < arr[index]\n                smallest_value =\
    \ arr[index]\n                smallest_index = index\n            end\n      \
    \  end\n    end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,2,3,0,4,2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,2,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,5]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,5,0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,2,3,0,4,2,1,0,5,0,5]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,5,0,5,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,2,3,0,4,2,1,0,5,0,5,0,5]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5,0,2,3,0,4,2,1,0,5,0,5,0,5,0]", " \
    \   even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nPractice 3", "    \n    even_values = findall(x ->\
    \ mod(x,2) == 0, arr)\n    \n    if isempty(even_values) \n        return []\n\
    \    end\n    \n    smallest_value = min(even_values)\n    smallest_index = find(x\
    \ -> x == smallest_value, even_values)\n    \n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=juli", "    even_values = filter(x -> x % 2 == 0, arr)\n    even_values\
    \ = sort(even_values)\n    even_values = even_values[2:end]\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = even_values[1]\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-", "    even = filter(x -> x % 2 == 0, arr)\n    even = sort(even)\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n\
    \        return Vector{Int64}()\n    elseif length(even_values) == 1\n       \
    \ return even_values\n    else\n        smallest_value = minimum(even_values)\n\
    \        smallest_index = findfirst(x -> x == smallest_value, even_values)\n \
    \       return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice 3\nGiven an array\
    \ representing a branch of a tree that has non-negative integer nodes\nyour task\
    \ is to pluck one of the nodes and return it.\nThe plucked node should be the\
    \ node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.", "    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values) == 0\n    \
    \    return Vector{Int64}()\n    end\n    \n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ return [ smallest_value, smallest_index ]\nend", "    largest = Int64(0)\n \
    \   smallest = Int64(0)\n    largestIndex = Int64(0)\n    smallestIndex = Int64(0)\n\
    \    largestEven = Int64(0)\n    smallestEven = Int64(0)\n    largestEvenIndex\
    \ = Int64(0)\n    smallestEvenIndex = Int64(0)\n    largestEvenValue = Int64(0)\n\
    \    smallestEvenValue = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    smallestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int64(0)\n    largestEvenValueIndex\
    \ = Int64(0)\n    largestEvenValueIndex = Int", "    even_values = filter(x->mod(x,2)==0,\
    \ arr)\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[2:end]",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    end\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index += 1\n    \n    return smallest_value, smallest_index\nend\n\
    </cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,", "    even_values = filter(x -> x %\
    \ 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        smallest_value = min(even_values)\n        smallest_index =\
    \ find(even_values == smallest_value)[1]\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    smallest_even_value = min(even_values)\n    smallest_even_index = even_values.index(smallest_even_value)\n\
    \    return smallest_even_value,smallest_even_index\nend", "    even_values =\
    \ filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ []\n    else\n        smallest_value = min(even_values)\n        smallest_index\
    \ = find(even_values == smallest_value)[1]\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [4, 2, 3, 0, 5, 1, 6, 0, 7, 8, 0, 9, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [4, 2, 3, 0, 5, 1, 6, 0, 7, 8, 0, 9, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [4, 2, 3, 0, 5, 1, 6, 0,\
    \ 7, 8, 0, 9, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4, 2, 3, 0, 5, 1, 6, 0, 7, 8, 0, 9, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [4, 2, 3, 0, 5, 1, 6, 0, 7, 8, 0, 9, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [4, 2, 3, 0, 5, 1, 6, 0,\
    \ 7, 8, 0, 9, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4, 2, 3, 0, 5, 1, 6, 0, 7, 8, 0, 9, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [4, 2, 3, 0, 5, 1, 6, 0, 7, 8, 0, 9, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [4, 2, 3, 0, 5, 1, 6, 0,\
    \ 7, 8, 0, 9, 0]", "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [ smallest_value, smallest_index ]\n    end\nend\n</cell>\n<code language=julia-1.0>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.0>\narr = [1,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = []\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.0>\npluck(arr)\n</cell>\n<text>\nPractice 3", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    \n    if length(even_values) ==\
    \ 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n       \
    \ return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<text>\nProblem\
    \ 3\nGiven a binary tree, return the level order traversal of its nodes' values.\
    \ (ie, from left to right, level by level).", "    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index =\
    \ find(even_values == smallest_value)[1]\n    \n    if smallest_index == 0 \n\
    \        return [] \n    end\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    smallest_index = smallest_index - 1\n    \n    ", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_even_value = minimum(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_even_value, even_values)\n    \n    \n    return\
    \ [ smallest_even_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>", "    even_values = filter(x -> x % 2 == 0, arr)\n    if\
    \ length(even_values) == 0\n        return Vector{Int64}()\n    else\n       \
    \ smallest_value = min(even_values)\n        smallest_index = index(even_values,\
    \ smallest_value)\n        return [ smallest_value, smallest_index ]\n    end\n\
    end", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value\
    \ = min(even_values)\n    smallest_even_index = index(even_values, smallest_even_value)\n\
    \    \n    if smallest_even_index == -1 || length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    else\n        return [smallest_even_value,smallest_even_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = findfirst(x->x==smallest_value, even_values)\n     \
    \   return smallest_value, smallest_index\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice 3\nGiven a binary\
    \ tree and a node value, swap the node value with the node that results from traveling\
    \ down the tree starting from the given node. \nIf the given node has no children,\
    \ return the node unchanged.", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    if length(even_values) == 0\n        return Vector{Int64}()\n    end\n  \
    \  smallest_value = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    return [smallest_value, smallest_index]\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5", "    even_values\
    \ = arr.filter(x -> x % 2 == 0)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = even_values.index(smallest_value)\n    return smallest_value, smallest_index\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n", "    \n    even_values = Set()\n    smallest_value = Int64(Inf)\n\
    \    smallest_index = -1\n    \n    for node in arr\n        if node % 2 == 0\n\
    \            even_values.add(node)\n            if smallest_value == Int64(Inf)\n\
    \                smallest_value = node\n                smallest_index = -1\n\
    \            elseif node < smallest_value\n                smallest_value = node\n\
    \                smallest_index = -1\n            elseif node < smallest_value\n\
    \                smallest_index = smallest_index + 1\n            end\n      \
    \  end\n    end\n    \n    if smallest_value == Int64(Inf)\n        smallest_value\
    \ = -1\n        smallest_index = -1\n    end\n    \n    return smallest_value,\
    \ smallest_index\nend", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if length(even_values) == 0 || smallest_value == 0\n        return\
    \ Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    even_values = findall(x -> x % 2 == 0, arr)\n    if\
    \ length(even_values) == 0\n        return Vector{Int64}()\n    end\n    smallest_even_value\
    \ = min(even_values)\n    smallest_index = find(x -> x == smallest_even_value,\
    \ even_values)\n    return Vector{Int64}([smallest_even_value, smallest_index])\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    if smallest_index == nothing\n\
    \        return Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-", "    even_values = filter(x -> x % 2 == 0, arr)\n    if\
    \ length(even_values) == 0\n        return Vector{Int64}()\n    end\n    smallest_value\
    \ = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    \n    return [smallest_value, smallest_index]\nend", "   \
    \ even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        return [] \n    end\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    \n    smallest_value = arr[smallest_index]\n\
    \    \n    smallest_index = smallest_index - 1\n    ", "    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values) == 0\n    \
    \    return Vector{Int64}()\n    end", "    \n    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        smallest_even_value = min(even_values)\n        smallest_even_index\
    \ = find(even_values == smallest_even_value)[1]\n        return [smallest_even_value,\
    \ smallest_even_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr\
    \ = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nProblem 3", "    even_values = filter(x -> x % 2\
    \ == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    return [smallest_value, smallest_index]\nend", " \
    \   even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) ==\
    \ 0\n        return Vector{Int64}()\n    end\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    if\
    \ smallest_index == nothing\n        return Vector{Int64}()\n    end\n    return\
    \ [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice 3", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(x -> x == smallest_value, even_values)\n    if smallest_index == length(even_values)\n\
    \        smallest_index = []\n    end\n    return smallest_value, smallest_index\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\n", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    smallest_value = min(even_values)\n    smallest_index = index(even_values,\
    \ smallest_value)\n    \n    if smallest_index == -1 || length(even_values) ==\
    \ 0\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nPractice 3\nGiven a binary tree, return the levels\
    \ of the tree in order from top to bottom.", "    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index =\
    \ find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 0]\n</cell", "    largest = arr[1]\n    smallest = arr[1]\n\
    \    largestIndex = -1\n    smallestIndex = -1\n    for index in 2:length(arr)\n\
    \        if arr[index] >= largest\n            largest = arr[index]\n        \
    \    largestIndex = index\n        elseif arr[index] < smallest\n            smallest\
    \ = arr[index]\n            smallestIndex = index\n        end\n    end\n    \n\
    \    if largestIndex == -1\n        return Vector{Int64}[]\n    end\n    \n  \
    \  if smallestIndex == -1\n        return [largest, largestIndex]\n    end\n \
    \   \n    if arr[largestIndex] == smallest\n        return [largest, largestIndex]\n\
    \    end\n    \n    if arr[largestIndex] > smallest\n        return [largest,\
    \ largestIndex]\n    end\n    \n    return [smallest, smallestIndex]\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4, 2, 3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1, 2, 3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 1, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 1, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 1, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 1, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 1, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 1, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 1, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = findfirst(x -> x == smallest_value,\
    \ even_values)\n    return [smallest_value, smallest_index]\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [5,0,3,0,4,2,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1,0,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1,0,1,2,0,1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,3,0,4,2,1,0,1,0,1,2,0,1,2,0,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,1,0,1,2,0,1,2,0,1,2,0,1,2,0,1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,3,0,4,2,1,0,1,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1,2,0,1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck", "    \n    even_values = Set()\n    smallest_value\
    \ = -1\n    smallest_index = 0\n    \n    for node in arr\n        if node.even?\n\
    \            even_values.add(node.value)\n            if node.value < smallest_value\n\
    \                smallest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    \n    if even_values == Set()\n\
    \        return Vector{Int64}()\n    end\n    \n    smallest_value_index = find(even_values,\
    \ smallest_value)\n    \n    if smallest_value_index == nothing\n        return\
    \ Vector{Int64}()\n    end\n    \n    return [smallest_value, smallest_value_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=juli", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    return [smallest_value, smallest_index]\nend", " \
    \   even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend", "    even = filter(x -> x % 2 == 0, arr)\n    even = sort(even)\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:end]\n\
    \    even = even[even.first:end]\n    even = even[even.first:end]\n    even =\
    \ even[even.first:end]\n    even = even[even.first:end]\n    even = even[even.first:",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n\
    \        return Vector{Int64}()\n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    if smallest_index\
    \ == nothing\n        return Vector{Int64}()\n    end\n    \n    return Vector{Int64}([smallest_value,\
    \ smallest_index])\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    \n    even_values = filter(x -> x % 2 == 0, arr)\n \
    \   \n    if length(even_values) == 0\n        return Vector{Int64}()\n    end",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n\
    \        return Vector{Int64}()\n    end\n    smallest_even_value = min(even_values)\n\
    \    smallest_even_index = index(even_values, smallest_even_value)\n    return\
    \ [smallest_even_value, smallest_even_index]\nend\n</cell>\n<code language=julia-1.0>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.0>\narr = [1,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = []\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.0>\narr = [4,2,3]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = []\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <text>\nProblem 3\nGiven an array representing a binary tree, return the number\
    \ of nodes in the tree.", "    even_values = unique(arr .% 2)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if length(even_values) == 0 || smallest_value == 0\n        return\
    \ Vector{Int64}()\n    end\n    \n    smallest_value_index = find(even_values\
    \ == smallest_value)[1]\n    \n    smallest_value_index = smallest_value_index\
    \ == length(even_values) ? 1 : smallest_value_index\n    \n    plucked_value =\
    \ arr[smallest_value_index]\n    \n    return Vector{Int64}([plucked_value, smallest_value_index])\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 6, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 6, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 6, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(", "    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if smallest_index == 0 \n        smallest_value\
    \ = arr[1]\n        smallest_index = 1\n    end\n    \n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = index(even_values, smallest_value)\n\
    \    if smallest_index == -1\n        return []\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree,\
    \ return the level order traversal of its nodes' values. (ie, from left to right,\
    \ level by level).", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value\
    \ = min(even_values)\n    smallest_even_index = even_values.index(smallest_even_value)\n\
    \    smallest_value = arr[smallest_even_index]\n    smallest_value_index = arr.index(smallest_value)\n\
    \    return [smallest_value, smallest_value_index]\nend", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    smallest_value = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    if smallest_index == nothing\n        return Vector{Int64}()\n\
    \    end\n    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=", "    even_values = filter(x -> x % 2 == 0, arr)\n    even_values\
    \ = sort(even_values)\n    even_values = even_values[2:end]\n    even_values =\
    \ unique(even_values)\n    even_values = even_values[2:end]\n    even_values =\
    \ sort(even_values)\n    even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(even_values)\n \
    \   even_values = even_values[2:end]\n    even_values = unique(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = sort(", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value =\
    \ min(even_values)\n    smallest_index = find(x -> x == smallest_value, even_values)\n\
    \    if smallest_index == length(even_values)\n        return Vector{Int64}()\n\
    \    else\n        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n\
    <code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=juli", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_even_value\
    \ = min(even_values)\n    smallest_index = find(x -> x == smallest_even_value,\
    \ even_values)\n    if smallest_index == -1 || smallest_index == length(even_values)\n\
    \        return Vector{Int64}()\n    else\n        return [smallest_even_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>",
  "    even = findfirst(x -> x % 2 == 0, arr)\n    if even != nothing\n        smalest_value\
    \ = arr[even]\n        smalest_index = even\n        \n        for i in arr[even+1:end]\n\
    \            if i % 2 == 0\n                if smalest_value < i\n           \
    \         smalest_value = i\n                    smalest_index = i\n         \
    \       end\n            end\n        end\n        \n        return [smalest_value,\
    \ smalest_index]\n    else\n        return []\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice 3", "    largest\
    \ = arr[1]\n    smallest = arr[1]\n    smallest_index = 2\n    largest_index =\
    \ 1 \n    \n    for index in 2:length(arr)\n        if arr[index] >= largest\n\
    \            largest = arr[index]\n            largest_index = index\n       \
    \ elseif arr[index] < smallest\n            smallest = arr[index]\n          \
    \  smallest_index = index\n        end\n    end\n    \n    if smallest == largest\n\
    \        return smallest_index\n    else\n        return [smallest, smallest_index]\n\
    \    end\nend", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_even_value = min(even_values)\n\
    \    smallest_even_index = even_values.index(smallest_even_value)\n    smallest_value\
    \ = arr[smallest_even_index]\n    smallest_index = smallest_even_index\n    \n\
    \    if length(even_values) == 0\n        return Vector{Int64}()\n    elseif length(even_values)\
    \ == 1\n        return [smallest_value, smallest_index]\n    else\n        smallest_value\
    \ = arr[smallest_even_index]\n        smallest_index = smallest_even_index\n \
    \       \n        for index in 1:length(arr)\n            if arr[index] == smallest_value\n\
    \                smallest_value = arr[index]\n                smallest_index =\
    \ index\n            end\n        end\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]", "    even_values = filter(x->mod(x,2) == 0, arr)\n\
    \    if length(even_values) == 0\n        return []\n    else\n        smallest_even_value\
    \ = min(even_values)\n        smallest_even_index = findfirst(x->mod(x,2) == 0,\
    \ even_values)\n        return [smallest_even_value,smallest_even_index]\n   \
    \ end\nend\n</cell>\n<code language=julia-1.0>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = []\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <text>\nPractice 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if smallest_index == 0 \n        smallest_value = arr[smallest_index]\n\
    \        smallest_index = 1\n    end\n    \n    return [smallest_value, smallest_index]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell",
  "    \n    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_even_value\
    \ = minimum(even_values)\n    smallest_index = find(even_values == smallest_even_value)\
    \ \n    \n    if smallest_index == length(even_values)\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = arr[smallest_index]\n    \n    index_of_smallest_value\
    \ = find(arr == smallest_value)\n    \n    return [smallest_value, index_of_smallest_value]\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<text>\nProblem 3", "    \n    even_values = Set()\n    smallest_value\
    \ = -Inf\n    smallest_index = 0\n    \n    for node in arr\n        if node.even\n\
    \            push!(even_values, node.value)\n            if node.value < smallest_value\n\
    \                smallest_value = node.value\n                smallest_index =\
    \ node\n            end\n        end\n    end\n    \n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    \n    smallest_value_index\
    \ = find(even_values, smallest_value)\n    \n    if smallest_value_index == length(even_values)\n\
    \        return Vector{Int64}()\n    end\n    \n    return [ smallest_value, smallest_value_index\
    \ ]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=juli", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    return [smallest_value, smallest_index]\n\
    end", "    largest = arr[1]\n    smallest = arr[1]\n    largestIndex = 1\n   \
    \ smallestIndex = 1\n    for node in arr[2:end]\n        if node < smallest \n\
    \            smallest = node\n            smallestIndex = largestIndex\n     \
    \   elseif node > largest\n            largest = node\n            largestIndex\
    \ = smallestIndex\n        elseif smallestIndex == largestIndex\n            smallestIndex\
    \ = smallestIndex + 1\n        end\n    end\n    return [ smallest, smallestIndex\
    \ ]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 6, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 6, 0, 3, 0, 4, 2]\n</cell>\n<code\
    \ language=julia-1.5", "    even_values = filter(x -> x % 2 == 0, arr)\n    if\
    \ isempty(even_values)\n        return [] \n    end\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return [smallest_value,\
    \ smallest_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=juli", "    \n    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    \n    if length(even_values) == 0\n    \
    \    return Vector{Int64}()\n    end", "    even_values = filter(x -> x % 2 ==\
    \ 0, arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    smallest_value_index = find(even_values == smallest_value)[1]\n\
    \    return smallest_value, smallest_value_index\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, ", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    smallest_value_index = find(even_values == smallest_value)[1]\n    \n   \
    \ if smallest_value_index == length(even_values)\n        return smallest_value,\
    \ smallest_index\n    else\n        return smallest_value, smallest_index\n  \
    \  end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)", "    \n    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    \n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    \n    smallest_value = minimum(even_values)\n    smallest_index\
    \ = findfirst(x->x==smallest_value, even_values)\n    \n    plucked_value = arr[smallest_index]\n\
    \    \n    return Vector{Int64}([plucked_value, smallest_index])\nend", "    even_values\
    \ = filter(x->mod(x,2) == 0, arr)\n    if isempty(even_values) || length(even_values)\
    \ == 0\n        return [] \n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x == smallest_value, even_values)\n    return\
    \ [ smallest_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice Problems", " \
    \   even_values = filter(x->mod(x,2)==0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    if smallest_index\
    \ == nothing\n        return Vector{Int64}()\n    else\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.0>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.0>\narr = []\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [4, 2, 3]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1,\
    \ 2, 3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [1, 2, 3, 0]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <code language=julia-1.0>\narr = [1, 2, 3, 0]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1, 2, 3, 0]\n</cell>\n\
    <code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr\
    \ = [1, 2, 3, 0]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.0>\narr = [1, 2, 3, 0]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1, 2, 3, 0]\n</cell>\n\
    <code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr\
    \ = [1, 2, 3, 0]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.0>\narr = [1, 2, 3, 0]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1, 2, 3, 0]\n</cell>\n\
    <code language=julia-1.0>\npluck", "    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    if length(even_values) == 0\n        return [] \n    end\n    smallest_even_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_even_value)[0]\n\
    \    return [smallest_even_value,smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<text>\nPractice 3\nGiven an array\
    \ representing a branch of a tree that has non-negative integer nodes\nyour task\
    \ is to pluck one of the nodes and return it.\nThe plucked node should be the\
    \ node with the smallest odd value.\nIf multiple nodes with the same smallest\
    \ odd value are found return the node that has smallest index.", "    even_values\
    \ = findall(x -> mod(x,2) == 0, arr)\n    if length(even_values) == 0\n      \
    \  return Vector{Int64}()\n    elseif length(even_values) == 1\n        return\
    \ even_values\n    else\n        smallest_value = min(even_values)\n        smallest_index\
    \ = find(x -> x == smallest_value, even_values)\n        return smallest_value,\
    \ smallest_index\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    return smallest_value,\
    \ smallest_index\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(", "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    elseif length(even_values) == 1\n\
    \        return even_values\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ smallest_value, smallest_index\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [5,0,3,0,4,2,1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,0,0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,0,0,0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,3,0,4,2,1,0,0,0,0,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,0,0,0,0,0,0]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,0,0,0,0,0,0,0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5", "    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n    else\n\
    \        smallest_even_value = min(even_values)\n        smallest_index = find(x\
    \ -> x == smallest_even_value, even_values)\n        return [smallest_even_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<text>\nProblem 3\nGiven a binary tree,\
    \ return the level order traversal of its nodes' values. (ie, from left to right,\
    \ level by level).", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if smallest_index == 0 \n        smallest_value = arr[smallest_index]\n\
    \        smallest_index = smallest_index\n    end", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = index(even_values, smallest_value)\n    smallest_value = arr[smallest_index]\n\
    \    \n    if length(even_values) == 0 || smallest_value == 0\n        return\
    \ Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <text>\nProblem 3", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    \n    if smallest_index == 0 \n        return [] \n    else \n        return\
    \ [smallest_value, smallest_index]\nend", "    even_values = findall(x -> x %\
    \ 2 == 0, arr)\n    if isempty(even_values)\n        return Vector{Int64}()\n\
    \    else\n        smallest_value = min(even_values)\n        smallest_index =\
    \ find(even_values == smallest_value)[1]\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5,0,3,0,4,2,1,0,5,6]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5,6,7]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,0,3,0,4,2,1,0,5,6,7,8]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5,0,3,0,4,2,1,0,5,6,7,8,9]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [", "    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    if length(even_values) == 0\n        return [] \n    else\n\
    \        smallest_value = min(even_values)\n        smallest_index = find(even_values\
    \ == smallest_value)[1]\n        return [smallest_value, smallest_index]\n   \
    \ end\nend\n</cell>\n<code language=julia-1.5>\n# Test your function below\narr\
    \ = [4,2,3]\nout = pluck(arr)\n@test out == [2, 1]\n</cell>\n<text>\n4.3 Pluck\
    \ all nodes with even values\nGiven an array representing a branch of a tree that\
    \ has non-negative integer nodes\nyour task is to pluck all of the nodes and return\
    \ them in a list.\nThe plucked nodes should be returned in a list, [ smalest_value,\
    \ its index ],\nIf there are no even values or the given array is empty, return\
    \ [].", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value =\
    \ min(even_values)\n    smallest_index = find(x -> x == smallest_value, even_values)\n\
    \    \n    if smallest_index == -1 || length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    else\n        return [smallest_value, smallest_index]\n\
    \    end\nend\n</cell>\n<text>\nSolution\nLet's see how we could solve this problem\
    \ using a recursive approach.", "    even_values = filter(x -> x % 2 == 0, arr)\n\
    \    smallest_value = min(even_values)\n    smallest_index = find(x -> x == smallest_value,\
    \ even_values)\n    return [smallest_value, smallest_index]\nend", "    even_values\
    \ = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return\
    \ Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n     \
    \   smallest_index = find(even_values == smallest_value)[1]\n        return [smallest_value,\
    \ smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    elseif length(even_values) == 1\n        return even_values\n    else\n \
    \       smallest_value = min(even_values)\n        smallest_index = find(even_values\
    \ == smallest_value)[1]\n        return smallest_value, smallest_index\n    end\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    arr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-", "    even_values = filter(x -> x\
    \ % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        smallest_value = min(even_values)\n        smallest_index =\
    \ find(even_values == smallest_value)[1]\n        return smallest_value, smallest_index\n\
    \    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr", "    even_values = arr.filter(x -> x % 2 == 0)\n\
    \    if length(even_values) == 0\n        return Vector{Int64}()\n    else\n \
    \       smallest_value = min(even_values)\n        index = find(even_values ==\
    \ smallest_value)[1]\n        return [smallest_value, index]\n    end\nend", " \
    \   even_values = unique(arr .% 2)\n    smallest_even_value = min(even_values)\n\
    \    smallest_even_index = find(even_values == smallest_even_value)[1]\n    \n\
    \    if smallest_even_index == 0 \n        return [] \n    end\n    \n    smallest_value\
    \ = arr[smallest_even_index]\n    \n    smallest_value_index = find(arr == smallest_value)[1]\n\
    \    \n    smallest_value_index_in_even_values = arr[smallest_value_index] .%\
    \ 2\n    \n    if smallest_value_index_in_even_values == 0 \n        return []\
    \ \n    end\n    \n    smallest_value_index_in_even_values_index = find(arr ==\
    \ smallest_value_index_in_even_values)[1]\n    \n    smallest_value_index_in_even_values_index_in_even_values\
    \ = arr[smallest_value_index_in_even_values_index] .% 2\n    \n    if smallest_value_index_in_even_values_index_in_even_values\
    \ == 0 \n        return [] \n    end\n    \n    smallest_value_index_in_even_values_index_in_even_values_index\
    \ = find(arr == smallest_value_index_in_even_values_index_in_even_values)[1]\n\
    \    \n    smallest_value_index_in_even_values_index_in_even_values_index_in_even_values\
    \ = arr[smallest_value_index_in_even_values_index_in_even_values_index] .% 2\n\
    \    \n    if smallest_value_index_in_even_values_index_in_even_values_index_in_even_values\
    \ == 0 \n        return [] \n    end\n    \n    smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values\
    \ = arr[smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index]\
    \ .% 2\n    \n    if smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values\
    \ == 0 \n        return [] \n    end\n    \n    smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values\
    \ = arr[smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values_index]\
    \ .% 2\n    \n    if smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_values\
    \ == 0 \n        return [] \n    end\n    \n    smallest_value_index_in_even_values_index_in_even_values_index_in_even_values_index_in_even_value",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) == 0\n\
    \        return Vector{Int64}()\n    end\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ if smallest_index == nothing\n        return Vector{Int64}()\n    end\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    ", "    even_values\
    \ = filter(x->mod(x,2)==0, arr)\n    even_values = sort(even_values)\n    even_values\
    \ = even_values[2:end]\n    even_values = even_values[even_values mod 2 .== 0]\n\
    \    even_values = sort(even_values)\n    even_values = even_values[2:end]\n \
    \   even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[even_values\
    \ mod 2 .== 0]\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[even_values\
    \ mod 2 .== 0]\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[even_values\
    \ mod 2 .== 0]\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[even_values\
    \ mod 2 .== 0]\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[even_values\
    \ mod 2 .== 0]\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)\n\
    \    even_values = even_values[2:end]\n    even_values = even_values[even_values\
    \ mod 2 .== 0]\n    even_values = sort(even_values)\n    even_values = even_values[2:end]\n\
    \    even_values = even_values[even_values mod 2 .== 0]\n    even_values = sort(even_values)",
  "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_value)[1]\n    \n    if smallest_index\
    \ == 0 \n        smallest_value = arr[1]\n        smallest_index = 1\n    end\n\
    \    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\narr\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\narr\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    end\n    smallest_even_value = min(even_values)\n    smallest_even_index\
    \ = findfirst(x -> x == smallest_even_value, even_values)\n    return smallest_even_index\
    \ == nothing ? Vector{Int64}() : Vector{Int64}([smallest_even_value,smallest_even_index])\n\
    end", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n\
    \    smallest_index = findfirst(x -> x == smallest_value, even_values)\n    \n\
    \    if smallest_index == nothing\n        return Vector{Int64}()\n    else\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n", "    even_values\
    \ = Set()\n    smallest_value = -Inf \n    smallest_index = -1\n    for node in\
    \ arr\n        if node % 2 == 0\n            even_values.add(node)\n         \
    \   if smallest_value < node\n                smallest_value = node\n        \
    \        smallest_index = node\n            end\n        end\n    end\n    if\
    \ !even_values\n        return Vector{Int64}()\n    end\n    smallest_value =\
    \ min(even_values)\n    smallest_index = find(even_values == smallest_value)[1]\n\
    \    return [ smallest_value, smallest_index ]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>", "    \n    even_values\
    \ = Set()\n    smallest_value = Int64(Inf)\n    smallest_index = -1\n    \n  \
    \  for node in arr\n        if node.even?\n            even_values.add(node.value)\n\
    \            if node.value < smallest_value\n                smallest_value =\
    \ node.value\n                smallest_index = node\n            end\n       \
    \ end\n    end\n    \n    if !even_values\n        return Vector{Int64}()\n  \
    \  end\n    \n    smallest_value_index = -1\n    smallest_value_index = 0\n  \
    \  \n    for node in even_values\n        if node < smallest_value\n         \
    \   smallest_value_index = smallest_value_index + 1\n            smallest_value\
    \ = node\n        end\n    end\n    \n    smallest_value_index = smallest_value_index\
    \ + 1\n    \n    return Vector{Int64}([smallest_value, smallest_value_index])\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)", "    even_values = filter(x ->\
    \ x % 2 == 0, arr)\n    if length(even_values) == 0\n        return Vector{Int64}()\n\
    \    else\n        smallest_even_value = min(even_values)\n        smallest_even_index\
    \ = findfirst(x->x==smallest_even_value, even_values)\n        return [smallest_even_value,smallest_even_index]\n\
    \    end\nend\n</cell>\n<code language=julia-1.0>\narr = [4,2,3]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [1,2,3]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = []\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n\
    <code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.0>\npluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n", "    even_values\
    \ = Set()\n    smallest_value = -1\n    smallest_index = 0\n    for node in arr\n\
    \        if node % 2 == 0\n            even_values.add(node)\n            if smallest_value\
    \ == -1 || node < smallest_value\n                smallest_value = node\n    \
    \            smallest_index = length(arr)\n            end\n        end\n    end\n\
    \    \n    if length(even_values) == 0\n        return Vector{Int64}()\n    end\n\
    \    \n    smallest_value = min(even_values)\n    smallest_index = index(even_values,\
    \ smallest_value)\n    \n    \n    return Vector{Int64}([smallest_value, smallest_index])\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>", "    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    smallest_value = min(even_values)\n    smallest_index = find(even_values\
    \ == smallest_value)[1]\n    \n    if smallest_index == 0 \n        return []\
    \ \n    else \n        return [smallest_value, smallest_index]\nend", "    largest\
    \ = arr[1]\n    smallest = arr[1]\n    largestIndex = 1\n    smallestIndex = 1\n\
    \    \n    for i = 2:length(arr)\n        if arr[i] > largest\n            largest\
    \ = arr[i]\n            largestIndex = i\n        elseif arr[i] < smallest\n \
    \           smallest = arr[i]\n            smallestIndex = i\n        end\n  \
    \  end\n    \n    if smallest == largest\n        return largest\n    end\n  \
    \  \n    largestValue = arr[largestIndex]\n    smallestValue = arr[smallestIndex]\n\
    \    \n    if smallestValue % 2 == 0\n        return smallest\n    else\n    \
    \    return largest\n    end\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [", "    even_values = filter(x -> x % 2 == 0,\
    \ arr)\n    smallest_even_value = min(even_values)\n    smallest_even_index =\
    \ even_values.index(smallest_even_value)\n    smallest_value = arr[smallest_even_index]\n\
    \    smallest_value_index = arr.index(smallest_value)\n    return [smallest_value,\
    \ smallest_value_index]\nend\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-", "    even_values = findall(x -> x\
    \ % 2 == 0, arr)\n    if isempty(even_values) || length(even_values) == 0\n  \
    \      return Vector{Int64}()\n    end\n    \n    smallest_even_value = min(even_values)\n\
    \    smallest_index = find(even_values == smallest_even_value)[1]\n    \n    plucked_value\
    \ = arr[smallest_index]\n    return Vector{Int64}([smallest_even_value,smallest_index])\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, ", "    largest = Int64(0)\n    smallest = Int64(0)\n    largestIndex = 0\n\
    \    smallestIndex = 0\n    for node in arr\n        if node % 2 == 0\n      \
    \      if node > largest\n                largest = node\n                largestIndex\
    \ = largestIndex + 1\n            elseif node < smallest\n                smallest\
    \ = node\n                smallestIndex = smallestIndex + 1\n        end\n   \
    \ end\n    return [smallest, smallestIndex]\nend\n</cell>\n<code language=julia-1.0>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.0>\narr = [1,2,3]\n</cell>\n<code language=julia-1.0>\npluck(arr)\n\
    </cell>\n<code language=julia-1.0>\narr = []\n</cell>\n<code language=julia-1.0>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.0>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.0>\npluck(arr)\n</cell>\n<text>\nProblem 3", "    largest\
    \ = minimum(arr)\n    smallest = maximum(arr)\n    evens = filter(x -> x % 2 ==\
    \ 0, arr)\n    \n    if length(evens) == 0\n        return []\n    end\n    \n\
    \    smallest_even = minimum(evens)\n    smallest_index = index(evens, smallest_even)\n\
    \    \n    if smallest_index == length(evens)\n        return largest\n    end\n\
    \    \n    largest = arr[smallest_index]\n    \n    return largest, smallest_index\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n", "    even_values = filter(x ->\
    \ x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    \n    if length(even_values) ==\
    \ 0 || smallest_value == 0\n        return Vector{Int64}()\n    else\n       \
    \ return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=", "    even_values\
    \ = arr.filter(x -> x % 2 == 0)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = even_values.index(smallest_value)\n    \n    if smallest_index == 0 \n   \
    \     smallest_value = arr[smallest_index]\n        smallest_index = 1\n    end",
  "    even_values = Set{Int64}()\n    smallest_value = Int64(0)\n    smallest_index\
    \ = -1\n    for node in arr\n        if node % 2 == 0\n            even_values.add(node)\n\
    \            if smallest_value < node\n                smallest_value = node\n\
    \                smallest_index = length(arr)\n            end\n        end\n\
    \    end\n    if length(even_values) == 0\n        return Vector{Int64}()\n  \
    \  end\n    smallest_value_index = -1\n    for node in even_values\n        if\
    \ smallest_value_index == -1 || smallest_value < node\n            smallest_value_index\
    \ = node\n        end\n    end\n    return Vector{Int64}([smallest_value, smallest_value_index])\n\
    end", "    even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values)\
    \ == 0\n        return Vector{Int64}()\n    end\n    smallest_value = minimum(even_values)\n\
    \    smallest_index = findfirst(x->x==smallest_value, even_values)\n    \n   \
    \ \n    if smallest_index == nothing\n        return Vector{Int64}()\n    end\n\
    \    \n    \n    \n    \n    return Vector{Int64}([smallest_value, smallest_index])\n\
    end\n</cell>\n<code language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n", "    even_values = arr.filter(x->mod(x,2)\
    \ == 0)\n    if isempty(even_values)\n        return [];\n    else\n        smallest_value\
    \ = min(even_values)\n        smallest_index = even_values.indexof(smallest_value)\n\
    \        return [smallest_value, smallest_index]\n    end\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, ", "    \n    even_values = Set()\n    smallest_value = 0\n    smallest_index\
    \ = 0\n    \n    for node in arr\n        if node % 2 == 0\n            even_values.add(node)\n\
    \        end\n    end\n    \n    if !isempty(even_values)\n        smallest_value\
    \ = min(even_values)\n        smallest_index = find(even_values == smallest_value)[1]\n\
    \    end\n    \n    if smallest_value == 0\n        return []\n    end\n    \n\
    \    return [smallest_value, smallest_index]\nend\n</cell>\n<code language=julia-1.5>\n\
    arr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code\
    \ language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 0]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 0]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n", "    even = filter(x -> x % 2 == 0, arr)\n    even.sort()\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-even[end])\n    even.push(-even[end])\n    even.push(-even[end])\n\
    \    even.push(-", "    even_values = filter(x -> x % 2 == 0, arr)\n    smallest_value\
    \ = min(even_values)\n    smallest_index = index(even_values, smallest_value)\n\
    \    return smallest_value, smallest_index\nend", "    \n    even_values = filter(x->mod(x,2)==0,\
    \ arr)\n    \n    if length(even_values) == 0\n        return [] \n    end\n \
    \   \n    smallest_value = minimum(even_values)\n    smallest_index = findfirst(x->x==smallest_value,\
    \ even_values)\n    \n    if smallest_index == nothing\n        return [] \n \
    \   end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n", " \
    \   even_values = filter(x -> x % 2 == 0, arr)\n    if length(even_values) ==\
    \ 0\n        return Vector{Int64}()\n    else\n        smallest_value = min(even_values)\n\
    \        smallest_index = find(even_values == smallest_value)[1]\n        return\
    \ [smallest_value, smallest_index]\n    end\nend", "    even_values = filter(x\
    \ -> x % 2 == 0, arr)\n    smallest_value = min(even_values)\n    smallest_index\
    \ = find(even_values == smallest_value)[1]\n    \n    if smallest_index == 0 \n\
    \        smallest_value = arr[smallest_index]\n        smallest_index = 1\n  \
    \  end\n    \n    return [smallest_value, smallest_index]\nend\n</cell>\n<code\
    \ language=julia-1.5>\narr = [4,2,3]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [1,2,3]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = []\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2]\n</cell>\n\
    <code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr\
    \ = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5,\
    \ 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n\
    <code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\n\
    pluck(arr)\n</cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n\
    </cell>\n<code language=julia-1.5>\npluck(arr)\n</cell>\n<code language=julia-1.5>\n\
    arr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code language=julia-1.5>\npluck(arr)\n\
    </cell>\n<code language=julia-1.5>\narr = [5, 0, 3, 0, 4, 2, 1]\n</cell>\n<code\
    \ language=julia-1.5>\npluck(arr)\n</cell"]
stop_tokens:
- "\nfunction"
- "\nmacro"
- "\n\n"
