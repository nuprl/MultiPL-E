name: HumanEval_161_solve
language: julia
results:
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if s[0] == '#' \n        return reverse(s[2:]) \n    else if s[0] == '@' \n\
    \        return reverse(s[2:]) \n    else if isLetter(s) \n        return reverse(toUpper(s[2:]))\
    \ \n    else \n        return reverse(toLower(s[2:])) \nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"a@C\")\n</cell>\n\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqdg6op83.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqdg6op83.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0\n        return s\n \
    \   \n    if isLetter(s[1])\n        return reverse(s[1..end-1]) + reverse(s[end..end-1])\n\
    \    else\n        return reverse(s[1..end-1]) + s\nend\n</cell>\n<code language=julia-1.5>\n\
    # Run this cell to test your function.\n@test solve(\"1234\") == \"4321\"\n@test\
    \ solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns a string\
    \ with all duplicates removed.\nExamples\nremoveDuplicates(\"abba\") returns \"\
    aab\"\nremoveDuplicates(\"abb\") returns \"ab\"\nremoveDuplicates(\"ab\") returns\
    \ \"a\"\nremoveDuplicates(\"a\") returns \"\"\nremoveDuplicates(\"\") returns\
    \ \"\"\nremoveDuplicates(nothing) returns nothing\nremoveDuplicates(1) returns\
    \ nothing\nremoveDuplicates(rand(1:10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(randstring(10)) returns nothing\nremoveDuplicates(randstring(10))\
    \ returns nothing\nremoveDuplicates(\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp37ctt0r4.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp37ctt0r4.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\"\n    else if\
    \ length(s) == 1 \n        s[toupper(s[0])]\n    else \n        solve(reverse(s))\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=2 |>\nHere's a solution\
    \ using recursion:\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfoh22mpm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfoh22mpm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzixwuh7f.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzixwuh7f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    if length(s) <= 0\n        return\
    \ s\n    \n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n\
    \    \n    if isLetter(toUpper(s))\n        return reverse(toLower(s))\n    \n\
    \    \n    return s\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n\
    </cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of characters in the string that are letters.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2akph4tx.jl:28\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2akph4tx.jl:28\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3vuwdqa2.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3vuwdqa2.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1tyy_6za.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1tyy_6za.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    else\
    \ if isLetter(s) \n        upperCase(s)\n    else \n        lowerCase(s)\nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt0psmbq3.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt0psmbq3.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj4ygamc5.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj4ygamc5.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0 \n        return s \n\
    \    \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n \
    \   \n    if isLetter(toUpper(s)) \n        return reverse(toLower(s))\n    \n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    # test your code\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"\
    AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string and returns the number of times each character\
    \ appears in the string.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkc_xgmf2.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkc_xgmf2.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    \n\
    \    if isLetter(s[end-1]) \n        return reverse(s[end-1]) + s[end]\n    else\
    \ \n        return reverse(s[end-1]) + s[end-1]\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphingzaah.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphingzaah.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) <= 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvfqhpvxi.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvfqhpvxi.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm0zzzzy0.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm0zzzzy0.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) <= 0\n        return s\n \
    \   \n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n   \
    \ \n    if isLetter(toUpper(s))\n        return reverse(toLower(s))\n    \n  \
    \  \n    return s\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9wp8f8dc.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9wp8f8dc.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpu6aqdyu5.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpu6aqdyu5.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpu6aqdyu5.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string. \nThe function should ignore all non-letter\
    \ characters and return the number of letters in the string.\nExamples\ncount_letters(\"\
    1234\") = 4\ncount_letters(\"ab\") = 2\ncount_letters(\"#a@C\") = 3\nHint: Use\
    \ isLetter() function to check whether a character is a letter or not.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfl3wcbu8.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfl3wcbu8.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) == 1 \n        s \n    else if isLetter(s) \n        upperCase(solve(reverse(s)))\
    \ \n    else \n        solve(reverse(s)) \nend\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=string,julia,reverse |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpngaw19z7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpngaw19z7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpml1z0mhw.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpml1z0mhw.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpml1z0mhw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpgytp5hhb.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpgytp5hhb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpgytp5hhb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0\n        return s\n    if isLetter(s[1])\n\
    \        return reverse(s[1..end-1]) + reverse(s[end..end-1])\n    else\n    \
    \    return reverse(s[1..end-1]) + s\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1bga_uy.jl:19\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_1bga_uy.jl:19\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) <= 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.3>\n# Run this cell\
    \ to test your code\ns = solve(\"\"\"\n    You are given a string s.\n    if s[i]\
    \ is a letter, reverse its case from lower to upper or vise versa, \n    otherwise\
    \ keep it as it is.\n    If the string contains no letters, reverse the string.\n\
    \    The function should return the resulted string.\n    Examples\n    solve(\"\
    1234\") = \"4321\"\n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\
    \n    \"\"\")\n@test s == \"\"\"4321\nAB\n#A@c\"\"\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the number of characters\
    \ in the string that are uppercase letters.\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_l3s_rzj.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_l3s_rzj.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    if length(s) == 0\n        return\
    \ s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoygna4tb.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoygna4tb.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) == 1 \n        s \n    else if isLetter(s) \n        solve(reverse(s))\n\
    \    else \n        solve(reverse(s))\nend\n</code>\n<|/ a tags=string,julia,reverse\
    \ |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl4p6jqwl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl4p6jqwl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n# Test your code\n@test solve(\"1234\"\
    ) == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\
    \n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfeip43gr.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfeip43gr.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_grug6me.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_grug6me.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_grug6me.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjvvq9lx3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjvvq9lx3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjvvq9lx3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        lett =\
    \ toupper(s[0]) \n        res1 = solve(substring(s, 1, length(s)-1)) \n      \
    \  res2 = solve(substring(s, 2, length(s))) \n        return concat(res1, lett,\
    \ res2) \nend\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3n6l19k7.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3n6l19k7.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\n# test your code\n@assert solve(\"1234\"\
    ) == \"4321\"\n@assert solve(\"ab\") == \"AB\"\n@assert solve(\"#a@C\") == \"\
    #A@c\"\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as its\
    \ argument and returns the number of characters in the string that are uppercase\
    \ letters.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxme_8fhj.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxme_8fhj.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpv26opf30.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpv26opf30.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpv26opf30.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4o37j9j4.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4o37j9j4.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfl_05nyf.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfl_05nyf.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return \"#\" \n  \
    \  else if length(s) == 1 \n        return reverse(s,1) \n    else \n        return\
    \ reverse(s,0) \nend\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of vowels present in the string.\nExamples\n\
    vowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\")\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9mtkwbgc.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9mtkwbgc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.4>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnyve7zu9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnyve7zu9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s[end])\n        return reverse(s[end..end-1])\n    \n    return\
    \ reverse(s[end..end-1]) \nend\n</cell>\n<code language=julia-1.4>\n# test your\
    \ code\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test\
    \ solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 2\nWrite a function that\
    \ takes a string as input and returns a string where all characters have been\
    \ converted to lowercase letters.\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0sgr7cml.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0sgr7cml.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels contained in the string.\nExamples\nvowels(\"hello\") =\
    \ 2\nvowels(\"helloo\") = 1\nvowels(\"hellooo\") = 3\nvowels(\"helloooo\") = 4\n\
    vowels(\"helloooooo\") = 5\nvowels(\"hellooooooo\") = 6\nvowels(\"helloooooooo\"\
    ) = 7\nvowels(\"hellooooooooo\") = 8\nvowels(\"helloooooooooo\") = 9\nvowels(\"\
    hellooooooooooo\") = 10\nvowels(\"helloooooooooooo\") = 11\nvowels(\"hellooooooooooooo\"\
    ) = 12\nvowels(\"helloooooooooooooo\") = 13\nvowels(\"hellooooooooooooooo\") =\
    \ 14\nvowels(\"helloooooooooooooooo\") = 15\nvowels(\"hellooooooooooooooooo\"\
    ) = 16\nvowels(\"helloooooooooooooooooo\") = 17\nvowels(\"helloooooooooooooooooo\"\
    ) = 18\nvowels(\"hellooooooooooooooooooo\") = 19\nvowels(\"helloooooooooooooooooooo\"\
    ) = 20\nvowels(\"hellooooooooooooooooooooo\") = 21\nvowels(\"helloooooooooooooooooooooo\"\
    ) = 22\nvowels(\"hellooooooooooooooooooooooo\") = 23\nvowels(\"helloooooooooooooooooooooooo\"\
    ) = 24\nvowels(\"hellooooooooooooooooooooooooo\") = 25\nvowels(\"helloooooooooooooooooooooooooo\"\
    ) = 26\nvowels(\"hellooooooooooooooooooooooooooo\") = 27\nvowels(\"helloooooooooooooooooooooooooooo\"\
    ) = 28\nvowels(\"hellooooooooooooooooooooooooooooo\") = 29\nvowels(\"helloooooooooooooooooooooooooooooo\"\
    ) = 30\nvowels(\"hellooooooooooooooooooooooooooooooo\") = 31\nvowels(\"helloooooooooooooooooooooooooooooooo\"\
    ) = 32\nvowels(\"hellooooooooooooooooooooooooooooooooo\") = 33\nvowels(\"helloooooooooooooooooooooooooooooooooo\"\
    ) = 34\nvowels(\"hellooooooooooooooooooooooooooooooooooo\") = 35\nvowels(\"hellooooo\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4uglbn_o.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4uglbn_o.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(toUpper(s))\n    else \n        return\
    \ reverse(toLower(s))\nend\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work if you\
    \ have a string like \"#a@C\"\n<|/ c |>\n<| c |>\nI thought the question was about\
    \ reversing a string. My bad.\n<|/ c |>\n<| a dscore=2 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplskruoww.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplskruoww.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels contained in the string.\nExamples\nvowels(\"aba\") = 2\n\
    vowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"aba\")\nvowels(\"\
    ab\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpli2umivp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpli2umivp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp78e9rbqm.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp78e9rbqm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if s[0] == '#' \n        return reverse(s[2:end-1]) \n    else if s[0] == '@'\
    \ \n        return reverse(s[2:end-1]) \n    else if s[0] == '$' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '^' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '&' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '*' \n        return reverse(s[2:end-1]) \n    else if s[0] == '!' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '.' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '-' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '+' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '/' \n        return reverse(s[2:end-1]) \n    else if s[0] == '=' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '<' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '>' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '?' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '|' \n        return reverse(s[2:end-1]) \n    else if s[0] == '^' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '[' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == ']' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '{' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '}' \n        return reverse(s[2:end-1]) \n    else if s[0] == '\\''\
    \ \n        return reverse(s[2:end-1]) \n    else if s[0] == '\"' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '~' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '`' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '-' \n        return reverse(s[2:end-1]) \n    else if s[0] == '+' \n\
    \        return reverse(s[2:end-1]) \n    else if s[0] == '/' \n        return\
    \ reverse(s[2:end-1]) \n    else if s[0] == '=' \n        return reverse(s[2:end-1])\
    \ \n    else if s[0] == '<' \n        return reverse(s[2:end-1]) \n    else if\
    \ s[0] == '>' \n        return reverse(s[2:end-1]) \n    else if s[0] == '?' \n\
    \        return reverse(\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkcz5hdc2.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkcz5hdc2.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0w2zk4mw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0w2zk4mw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfp2qhleh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfp2qhleh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfp2qhleh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpniu_qjua.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpniu_qjua.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.3>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.3>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.3>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels \nin it.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbu7eq1k.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprbu7eq1k.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0 \n        return s \n\
    \    \n    if isLetter(s) \n        return reverse(upper(s))\n    \n    return\
    \ reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\n# Test your function\
    \ with the examples from above\n@test solve(\"1234\") == \"4321\"\n@test solve(\"\
    ab\") == \"AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string where all characters\
    \ have been capitalized.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmppegna2.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmppegna2.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(upper(s))\n    else \n        return\
    \ reverse(lower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphyyraief.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphyyraief.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        then return s\n \
    \   else if isLetter(s) \n        then return reverse(toUpper(s))\n        else\
    \ return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmppzvdlwhg.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmppzvdlwhg.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return \"#\" \n  \
    \  else if length(s) == 1 \n        return reverse(s,1) \n    else \n        return\
    \ reverse(s,0) \nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4wm3wsf1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4wm3wsf1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    if isLetter(s[end])\n\
    \        return reverse(s[end..end-1])\n    return reverse(s[end..end])\nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuxwwl62f.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuxwwl62f.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return \"\"\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr5z7sf2h.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr5z7sf2h.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        s \n    else if isLetter(s)\
    \ \n        solve(reverseCase(s))\n    else \n        solve(reverse(s))\nend\n\
    </code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptddj16a9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptddj16a9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.3>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.3>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.3>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nExamples\nvowels(\"hello\") = 3\nvowels(\"\
    helloooo\") = 2\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"\
    abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\n\
    vowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\") = 3\nvowels(\"abracadabra\"\
    ) = 3\nvowels(\"abracadabra\") = 3\nvowels(\"ab\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv9d75rv5.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv9d75rv5.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"#a@C\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.4>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"aBcD\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe6wwhjz6.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe6wwhjz6.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6q2anxl2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6q2anxl2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6q2anxl2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(s.toLowerCase()) \n    else \n     \
    \   return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=1 |>\n<| a dscore=1\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxhrwi8e.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsxhrwi8e.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa_9g4aqs.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa_9g4aqs.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpjmdsue2u.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpjmdsue2u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpjmdsue2u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if s[0] == '#' \n        return reverse(s[1..-1]) \n    else if s[0] == '@'\
    \ \n        return reverse(s[1..-1]) \n    else if isLetter(s) \n        return\
    \ reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoplfo0g5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoplfo0g5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string with all the characters in lower case and all the characters in upper\
    \ case.\nExamples\ntoLower(\"hello\") = \"hello\"\ntoUpper(\"HELLO\") = \"HELLO\"\
    \ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO\
    \ WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\"\
    ) = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello\
    \ World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"\
    Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\n\
    toUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello\
    \ world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\"\
    ) = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello\
    \ World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"\
    Hello World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\n\
    toLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\") = \"HELLO\
    \ WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello World\"\
    ) = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"Hello\
    \ World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\ntoUpper(\"\
    Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello world\"\n\
    toUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower(\"Hello World\") = \"hello\
    \ world\"\ntoUpper(\"Hello World\") = \"HELLO WORLD\"\ntoLower\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsdcjscnl.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsdcjscnl.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwi4t2fpy.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwi4t2fpy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if is_letter(s) \n        return reverse(s.toLowerCase()) \n    else \n    \
    \    return reverse(s.toUpperCase()) \nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe7lltx03.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe7lltx03.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp26q_3txq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp26q_3txq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp26q_3txq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp48k5r71d.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp48k5r71d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   \n    if isLetter(s)\n        return reverse(upper(s))\n    else\n       \
    \ return reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\n\"\"\"\n\
    \    solve(s::String)::String\n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8h33xrik.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8h33xrik.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxn9s2huu.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxn9s2huu.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxn9s2huu.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    else\n        return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppvwdyzdt.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppvwdyzdt.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0\n        return s\n    \n   \
    \ if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt7vbtdnu.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt7vbtdnu.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa1gm66wo.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa1gm66wo.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa1gm66wo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ \n        \n        if isLetter(s) \n            return reverse(toUpper(s))\n\
    \        else \n            return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.3>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptoliuj5g.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptoliuj5g.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    else\
    \ if isLetter(s) \n        upperCase(s)\n    else \n        lowerCase(s)\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp0k9lm36.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp0k9lm36.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s)==0\n        return s\n   \
    \ \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.3>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.3>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.3>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the string with all vowels replaced by an underscore.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5jm05i9l.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5jm05i9l.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwlnwes35.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwlnwes35.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpi1z0p3t9.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpi1z0p3t9.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpi1z0p3t9.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0\n        return \"\"\n    else\
    \ if length(s) mod 2==0\n        return reverse(s,1,length(s))\n    else\n   \
    \     return reverse(s,0,length(s))\nend\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn4dlb94d.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn4dlb94d.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi3miy3sg.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi3miy3sg.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp_ykk081g.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp_ykk081g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp_ykk081g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpnrkhhsff.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpnrkhhsff.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpnrkhhsff.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp475csv4o.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp475csv4o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp475csv4o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        \"\"\n    else if\
    \ length(s) == 1 \n        if isletter(s) \n            reverse(toupper(s))\n\
    \        else \n            reverse(tolower(s))\n    else \n        if isletter(s)\
    \ \n            reverse(tolower(s))\n        else \n            reverse(toupper(s))\n\
    end\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpjza8uq0a.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpjza8uq0a.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqkqr1t38.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqkqr1t38.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if s.length == 0 \n        \n        return\
    \ \"\"\n    \n    if isLetter(s) \n        \n        return reverse(toUpper(s))\n\
    \    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpguw9cj8r.jl:23\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpguw9cj8r.jl:23\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpriz77zx3.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpriz77zx3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpriz77zx3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpktr5hla7.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpktr5hla7.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpktr5hla7.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.4>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0xq0s6sa.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0xq0s6sa.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2gmeehiw.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2gmeehiw.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(toUpper(s))\n    else \n        return\
    \ reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis\
    \ does not work. `solve(\"ab\")` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c\
    \ |>\n<| c |>\nThis does not work. `solve(\"ab\")` returns `\"Ab\"` instead of\
    \ `\"Ab\"`.\n<|/ c |>\n<| c |>\nThis does not work. `solve(\"ab\")` returns `\"\
    Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c |>\nThis does not work. `solve(\"ab\"\
    )` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c |>\nThis does not work.\
    \ `solve(\"ab\")` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprug3es7l.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprug3es7l.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n\
    \        return reverse(s,1)\n    return s\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_6btqi97.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_6btqi97.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfzdvi6au.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfzdvi6au.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfzdvi6au.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpd8qeqqsf.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpd8qeqqsf.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpd8qeqqsf.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpwigivyoj.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpwigivyoj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpwigivyoj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0 \n        return \"#a@C\"\n  \
    \  else if contains(s,\"#\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"@\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"#\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"@\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"#\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"a\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"b\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"c\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"d\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"e\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"f\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"g\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"h\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"i\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"j\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"k\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"l\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"m\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"n\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"o\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"p\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"q\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"r\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"s\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"t\")==true \n        return reverse(solve(reverse(s)))\
    \ \n    else if contains(s,\"u\")\nusing Test\n\n@testset begin\n\ncandidate =\
    \ solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpaes3w4go.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpaes3w4go.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5xxseki6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5xxseki6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    else\n        return\
    \ reverse(toLower(s))\nend\n</code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwl3nur5q.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwl3nur5q.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvwo68muo.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvwo68muo.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) >= 1 \n        if isLetter(s) \n            reverse(toUpper(s))\n\
    \        else \n            reverse(toLower(s))\n    else \n        reverse(s)\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4eh2cxjz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4eh2cxjz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) == 1 \n        s \n    else if is_letter(s) \n        solve_reverse(s)\n\
    \    else \n        solve_reverse(tolower(s))\nend\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd6jrs9w6.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd6jrs9w6.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(\"1234\") == \"4321\"\n\
    @assert solve(\"ab\") == \"AB\"\n@assert solve(\"#a@C\") == \"#A@c\"\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ a string where all characters are converted to uppercase except for the first\
    \ character and all characters after the first character are converted to lowercase.\
    \ \nExamples\nupperExcept(\"hello\") = \"HELLO\"\nupperExcept(\"hello1\") = \"\
    hello1\"\nupperExcept(\"hello12\") = \"HELLO12\"\nupperExcept(\"hello123\") =\
    \ \"HELLO123\"\nupperExcept(\"hello1234\") = \"HELLO1234\"\nupperExcept(\"hello12345\"\
    ) = \"HELLO12345\"\nupperExcept(\"hello123456\") = \"HELLO123456\"\nupperExcept(\"\
    hello1234567\") = \"HELLO1234567\"\nupperExcept(\"hello12345678\") = \"HELLO12345678\"\
    \nupperExcept(\"hello123456789\") = \"HELLO123456789\"\nupperExcept(\"hello1234567890\"\
    ) = \"HELLO1234567890\"\nupperExcept(\"hello12345678901\") = \"HELLO12345678901\"\
    \nupperExcept(\"hello123456789012\") = \"HELLO123456789012\"\nupperExcept(\"hello1234567890123\"\
    ) = \"HELLO1234567890123\"\nupperExcept(\"hello12345678901234\") = \"HELLO12345678901234\"\
    \nupperExcept(\"hello123456789012345\") = \"HELLO123456789012345\"\nupperExcept(\"\
    hello1234567890123456\") = \"HELLO1234567890123456\"\nupperExcept(\"hello12345678901234567\"\
    ) = \"HELLO12345678901234567\"\nupperExcept(\"hello123456789012345678\") = \"\
    HELLO123456789012345678\"\nupperExcept(\"hello1234567890123456789\") = \"HELLO1234567890123456789\"\
    \nupperExcept(\"hello12345678901234567890\") = \"HELLO12345678901234567890\"\n\
    upperExcept(\"hello123456789012345678901\") = \"HELLO123456789012345678901\"\n\
    upperExcept(\"hello1234567890123456789012\") = \"HELLO1234567890123456789012\"\
    \nupperExcept(\"hello12345678901234567890123\") = \"HELLO12345678901234567890123\"\
    \nupperExcept(\"hello123456789012345678901234\") = \"HELLO123456789012345678901234\"\
    \nupperExcept(\"hello1234567890123456789012345\") = \"HEL\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5olh0ko5.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5olh0ko5.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\"\n    else if\
    \ length(s) == 1 \n        s[toupper(s[0])]\n    else if all(isLetter(s[i]))\n\
    \        solve(toupper(s))\n    else\n        solve(tolower(s))\n    end\nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| c |>\nThis doesn't work if you have a\
    \ string like `#a@C`\n<|/ c |>\n<| c |>\nI added a solution for that case as well\n\
    <|/ c |>\n<| c |>\nI added a solution for that case as well\n<|/ c |>\n<| a tags=string,julia\
    \ |>\nI wrote a recursive function which solves the problem of reversing a string\
    \ in Julia. \n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp34r65ljp.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp34r65ljp.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc0mcds2a.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc0mcds2a.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc0mcds2a.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp5pgqtwnx.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp5pgqtwnx.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp5pgqtwnx.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    \n\
    \    \n    if isLetter(s[end-1]) \n        return reverse(s[end-1:end]) + s[end]\n\
    \    \n    \n    return reverse(s[end-1:end]) + s[end-1:end]\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7j5lb3ys.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7j5lb3ys.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a tags=julia |>\n<| c |>\nThis doesn't work if there are non-letters in the\
    \ string. For example, `solve(\"ab\")` returns `\"B\"` instead of `\"AB\"`.\n\
    <|/ c |>\n<| c |>\nThanks for pointing that out. I've updated the answer to include\
    \ a solution for that case.\n<|/ c |>\n<| a tags=julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoa5le342.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoa5le342.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpmzw_9_fy.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpmzw_9_fy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpmzw_9_fy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    if length(s) == 0\n        return\
    \ s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcijjvdwr.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcijjvdwr.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s[end])\n        return reverse(s[end..end-1])\n    \n    return\
    \ reverse(s[1..end])\nend\n</cell>\n<code language=julia-1.0>\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp87_7qedl.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp87_7qedl.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(upper(s))\n    return reverse(lower(s))\nend\n</cell>\n\
    <code language=julia-1.3>\n\"\"\"\n    upper(s)\n    \n    Convert a string to\
    \ upper case.\n    \n    Parameters\n    ----------\n    s : str\n        Input\
    \ string\n    \n    Returns\n    -------\n    out : str\n        Upper case string\n\
    \    \n    Examples\n    --------\n    >>> upper(\"abc\")\n    \"ABC\"\n    >>>\
    \ upper(\"AaBbCc\")\n    \"ABC\"\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp80zawsz6.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp80zawsz6.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpdnwogx_u.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpdnwogx_u.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpdnwogx_u.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) == 1 \n        s[toupper(s[0])] \n    else \n        solve(s[toupper(s[0])])\
    \ + s[tolower(s[end])]\nend\n</code>\n<|/ a dscore=2 |>\n<| a tags=string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5b8zwjyl.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5b8zwjyl.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfbbxiaal.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfbbxiaal.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(upper(s))\n    return reverse(lower(s))\nend\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"abc\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnrnivf9e.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnrnivf9e.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) <= 0 \n        return s \n\
    \    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.4>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns a string where all characters are reversed.\nExamples\nreverse(\"\
    hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\")\
    \ = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\
    \nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"\
    hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\"\
    ) = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\
    \nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"\
    hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\")\
    \ = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\
    \nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"\
    hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\"\
    ) = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\
    \nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"\
    hello\") = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\")\
    \ = \"olleh\"\nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\
    \nreverse(\"hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"\
    hello123\") = \"321ello\"\nreverse(\"hello\") = \"olleh\"\nreverse(\"hello123\"\
    ) = \"321ello\"\nreverse(\"\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_spkwk4f.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_spkwk4f.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw3mo1oha.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw3mo1oha.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw3mo1oha.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    if length(s) <= 0\n        return\
    \ s\n    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.3>\n\"\"\"\n    solve2(s)\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5u_rc27l.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5u_rc27l.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0\n        return s\n    if isletter(s)\n\
    \        chars = split(s, \"\")\n        chars = chars[2:end]\n        chars =\
    \ chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n \
    \       chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = chars[2:end]\n        chars = chars[2:end]\n        chars = chars[2:end]\n\
    \        chars = char\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t\
    @test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf69s1fqz.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf69s1fqz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the string with all vowels replaced by \"*\".\nExamples\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\"\
    ) returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\
    \nvowels(\"abracadabra\") returns \"*a*b*c*a*b*c*a*b\"\nvowels(\"abracad\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpds3r3ypf.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpds3r3ypf.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6g6ugq12.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6g6ugq12.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6g6ugq12.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) <= 0\n        return s\n \
    \   \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of vowels present in the string.\nExamples\nvowels(\"\
    hello\") = 2\nvowels(\"hellooo\") = 3\nvowels(\"aba\") = 1\nvowels(\"abacaba\"\
    ) = 2\nvowels(\"abacabacaba\") = 3\nvowels(\"abacabacabacaba\") = 4\nvowels(\"\
    abacabacabacabacaba\") = 5\nvowels(\"abacabacabacabacabacaba\") = 6\nvowels(\"\
    abacabacabacabacabacabacaba\") = 7\nvowels(\"abacabacabacabacabacabacabacaba\"\
    ) = 8\nvowels(\"abacabacabacabacabacabacabacabacaba\") = 9\nvowels(\"abacabacabacabacabacabacabacabacabacaba\"\
    ) = 10\nvowels(\"abacabacabacabacabacabacabacabacabacabacaba\") = 11\nvowels(\"\
    abacabacabacabacabacabacabacabacabacabacabacaba\") = 12\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacaba\"\
    ) = 13\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacaba\") =\
    \ 14\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\")\
    \ = 15\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\"\
    ) = 16\nvowels(\"abacabacabacabacabacabacabacabacabacabacabacabacabacabacabacabacaba\"\
    ) = 17\nvowels(\"abacabacabacabacabac\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp35kmif0w.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp35kmif0w.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpg5tpzs1b.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpg5tpzs1b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpg5tpzs1b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7oiy8hlm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7oiy8hlm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5_5gliim.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5_5gliim.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nExamples\nvowels(\"abracadabra\") = 6\n\
    vowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\") = 6\nvowels(\"abracadabra\"\
    ) = 6\nvowels(\"abracadabra\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk3zw5ar9.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk3zw5ar9.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a tags=string,julia |>\n<| c |>\nThis doesn't work for \"#a@C\"\n<|/ c |>\n\
    <| c |>\nIt works for me. Are you sure you copied it correctly? I tested it on\
    \ Julia 0.6.2\n<|/ c |>\n<| c |>\nYes, I copied it correctly. I'm on 0.6.2\n<|/\
    \ c |>\n<| c |>\nI tested it on 0.6.2 too. Are you sure you copied it correctly?\
    \ I tested it on Julia 0.6.2\n<|/ c |>\n<| c |>\nI tested it on 0.6.2 too. Are\
    \ you sure you copied it correctly? I tested it on Julia 0.6.2\n<|/ c |>\n<| a\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprzkve257.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprzkve257.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        then return s\n \
    \   else if isLetter(s) \n        then return reverse(toUpper(s))\n        else\
    \ return reverse(toLower(s))\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmpx1m8oorf.jl:13\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpx1m8oorf.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if s.length == 0 \n        return s \n\
    \    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n# test your code\n\
    @test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"\
    #a@C\") == \"#A@c\"\n</cell>\n<text>\n4.2 Write a Julia function named isPalindrome\
    \ that takes a string as its argument and determines whether the string is a palindrome\
    \ or not.\nThe function should return a boolean value.\nThe function should only\
    \ use loops, no conditional statements.\nExamples\nisPalindrome(\"A man, a plan,\
    \ a canal: Panama\") = true\nisPalindrome(\"A man, a plan, a canal: Panama\")\
    \ = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"\
    A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal:\
    \ Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\n\
    isPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man,\
    \ a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\"\
    ) = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"\
    A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal:\
    \ Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\n\
    isPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man,\
    \ a plan, a canal: Panama\") = false\nisPalindrome(\"A man, a plan, a canal: Panama\"\
    ) = false\nisPalindrome(\"A man, a plan, a canal: Panama\") = false\nisPalindrome(\"\
    A man, a plan, a canal: Panama\") = false\nisPalindrome(\"A man\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphf60iojx.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphf60iojx.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return \"#\" \n  \
    \  else if length(s) == 1 \n        return toupper(s[0]) \n    else \n       \
    \ \n        \n        \n        \n        \n        \n        \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa0z18nmq.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa0z18nmq.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(toUpper(toLower(s))) \n    else \n \
    \       return reverse(toLower(s)) \nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_yat7mag.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_yat7mag.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        \n   \
    \     \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpskzwhhlz.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpskzwhhlz.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n\"\"\"\n    solve(s::String)::String\n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpazvqdc_y.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpazvqdc_y.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(upper(s))\n    else \n        return\
    \ reverse(lower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n<| c |>\nThis doesn't\
    \ work if there are multiple letters in the string. For example, `solve(\"ab\"\
    )` returns `\"A\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nYes, you are right.\
    \ I've edited my answer to fix this issue. Thanks!\n<|/ c |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9cysd4cm.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9cysd4cm.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0 then return s\n    else if isLetter(s)\
    \ then \n        upperCase(s)\n    else \n        lowerCase(s)\n    end\nend\n\
    </code>\n<|/ a tags=string,julia |>\n<| a tags=string,julia |>\nA simple solution:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmp52wi3kjj.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp52wi3kjj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpy6hvcn_e.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpy6hvcn_e.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpy6hvcn_e.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        return\
    \ reverse(toupper(s[0])) ++ reverse(tolower(s[1])) ++ reverse(tolower(s[2])) \n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl64cxbfj.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl64cxbfj.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    \n\
    \    \n    if isLetter(s[end-1]) \n        return reverse(s[end-1]) + reverse(s[end])\n\
    \    \n    \n    return reverse(s[end-1]) + s\nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string as input and returns the number of vowels contained\
    \ in the string.\nExamples\nvowels(\"hello\") = 2\nvowels(\"hellooo\") = 3\nvowels(\"\
    abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\n\
    vowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\"\
    ) = 7\nvowels(\"abracadabra\") = 7\nvowels(\"abracadabra\") = 7\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo2j1de4d.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo2j1de4d.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0 \n        return s \n\
    \    \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n \
    \   \n    if isLetter(toUpper(s)) \n        return reverse(toLower(s))\n    \n\
    \    \n    return s \nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n\
    @testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0u9pxza2.jl:27\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0u9pxza2.jl:27\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0\n        return \"\"\n    if isLetter(s[0])\n\
    \        return reverse(s,1)\n    return reverse(s,0)\nend\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe14d9z7c.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe14d9z7c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprcg8e8nu.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprcg8e8nu.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpc2pljtwb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpc2pljtwb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp6if2rv6b.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp6if2rv6b.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp6if2rv6b.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s)==0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</code>\n\
    <|/ a tags=string,julia,reverse |>\n<| a tags=string,julia,reverse |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpw_v_nqs6.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpw_v_nqs6.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if all(isLetter(s)) \n        return reverse(toUpper(s))\n    else \n      \
    \  return reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia |>\n<| a dscore=1\
    \ |>\nI wrote a package for solving this problem called ReverseStrings.jl\n<code>\n\
    julia> using ReverseStrings\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxlluia4h.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxlluia4h.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    \n\
    \    if isLetter(s[end-1]) \n        return reverse(s[end-1]) + reverse(s[end])\n\
    \    else \n        return reverse(s[end-1]) + s\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpireuanyh.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpireuanyh.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(toUpper(s))\n    else \n        return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ as input and returns the number of vowels present in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnj82uws4.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnj82uws4.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfz29v_vv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfz29v_vv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfz29v_vv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\n# Test your function with the example\n\
    @test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"\
    #a@C\") == \"#A@c\"\n</cell>\n<text>\n4.3 Write a function that takes a string\
    \ and returns a string where all characters have been capitalized.\nExamples\n\
    capitalize(\"hello\") = \"Hello\"\ncapitalize(\"hello world\") = \"Hello World\"\
    \ncapitalize(\"i love julia\") = \"I Love Julia\"\nHint: You may want to use replace()\
    \ with a regular expression to capitalize all letters.\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt0n7bh40.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt0n7bh40.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsnn5oal2.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsnn5oal2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s[1])\n        return reverse(s[1..end-1]) + reverse(s[end..end-1])\n\
    \    else\n        return reverse(s[1..end-1]) + s\nend\n</cell>\n<code language=julia-1.5>\n\
    # Test your code\n@test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"\
    AB\"\n@test solve(\"#a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite a\
    \ function that takes a string as input and returns the number of characters in\
    \ the string that are not letters.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj_csee6o.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj_csee6o.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels present in the string.\nExamples\nvowels(\"hello\") = 1\nvowels(\"\
    abracadabra\") = 3\nvowels(\"#a@C\") = 1\nvowels(\"#a@C#\") = 2\nvowels(\"#a@C#@\"\
    ) = 3\nvowels(\"#a@C#@#\") = 4\nvowels(\"#a@C#@#@\") = 5\nvowels(\"#a@C#@#@#\"\
    ) = 6\nvowels(\"#a@C#@#@#@\") = 7\nvowels(\"#a@C#@#@#@#\") = 8\nvowels(\"#a@C#@#@#@#\"\
    ) = 9\nvowels(\"#a@C#@#@#@#@\") = 10\nvowels(\"#a@C#@#@#@#@#\") = 11\nvowels(\"\
    #a@C#@#@#@#@#\") = 12\nvowels(\"#a@C#@#@#@#@#\") = 13\nvowels(\"#a@C#@#@#@#@#\"\
    ) = 14\nvowels(\"#a@C#@#@#@#@#\") = 15\nvowels(\"#a@C#@#@#@#@#\") = 16\nvowels(\"\
    #a@C#@#@#@#@#\") = 17\nvowels(\"#a@C#@#@#@#@#\") = 18\nvowels(\"#a@C#@#@#@#@#\"\
    ) = 19\nvowels(\"#a@C#@#@#@#@#\") = 20\nvowels(\"#a@C#@#@#@#@#\") = 21\nvowels(\"\
    #a@C#@#@#@#@#\") = 22\nvowels(\"#a@C#@#@#@#@#\") = 23\nvowels(\"#a@C#@#@#@#@#\"\
    ) = 24\nvowels(\"#a@C#@#@#@\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7o5dlb11.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7o5dlb11.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp7mzut421.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp7mzut421.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp7mzut421.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        return\
    \ reverse(solve(reverse(s))) \nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp25iw_8l9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp25iw_8l9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpt5myip2w.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpt5myip2w.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpt5myip2w.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    else\
    \ if all(isLetter(s[i]))\n        uppercase = reverse(upperCase(s))\n        lowercase\
    \ = reverse(lowerCase(s))\n        return uppercase + lowercase\n    else\n  \
    \      return reverse(upperCase(s))\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph_mqdtb1.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph_mqdtb1.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\"\n    elseif length(s)\
    \ <= 1 \n        s\n    elseif isLetter(s) \n        upperCase(solve(reverse(s)))\
    \ \n    else\n        solve(reverse(s))\n    end\nend\n</code>\n<|/ a tags=string,julia\
    \ |>\n<| a tags=string,julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0poxz_7n.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0poxz_7n.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(upper(s))\n    \n    return reverse(lower(s))\n\
    end\n</cell>\n<code language=julia-1.4>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.4>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.4>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nExamples\nvowels(\"hello\") = 2\nvowels(\"\
    abracadabra\") = 3\nvowels(\"abracadabra\")\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphs0mf5wm.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphs0mf5wm.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of vowels present in the string.\nExamples\nvowels(\"abracadabra\"\
    ) \u279E 5\nvowels(\"abracadabra\") \u279E 3\nvowels(\"abracadabra\") \u279E 0\n\
    vowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E\
    \ -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E\
    \ -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E\
    \ -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"\
    abracadabra\") \u279E -1\nvowels(\"abracadabra\") \u279E -1\nvowels(\"abracadabra\"\
    ) \u279E -1\nvowel\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkcianfay.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkcianfay.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(upper(s))\n    else \n        return\
    \ reverse(lower(s))\nend\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work.\
    \ Try it on `solve(\"ab\")`.\n<|/ c |>\n<| c |>\nThanks for pointing out. I've\
    \ fixed the code now.\n<|/ c |>\n<| a tags=string,julia,reverse |>\n<code>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxqz4uzut.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxqz4uzut.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0 then return \"\"\n    if isLetter(s)\
    \ then return reverse(toUpper(s))\n    else return reverse(toLower(s))\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=string,julia,reverse |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: extra token \"return\" after end of expression\n\
    Stacktrace:\n [1] top-level scope at /tmp/tmphkietl11.jl:12\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphkietl11.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    else\n        return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.5>\n# test your code\n\
    @test solve(\"1234\") == \"4321\"\n@test solve(\"ab\") == \"AB\"\n@test solve(\"\
    #a@C\") == \"#A@c\"\n</cell>\n<text>\nExercise 3\nWrite a function that takes\
    \ a string and returns the number of vowels \nin the string.\nExamples\nvowels(\"\
    abracadabra\") \u279E 5\nvowels(\"abra\") \u279E 3\nvowels(\"abraz\") \u279E 0\n\
    vowels(\"abra\") \u279E 3\nHint: You may want to use regular expressions.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmojgtc9m.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmojgtc9m.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpku55hxoy.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpku55hxoy.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpku55hxoy.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels contained in the string.\nExamples\nvowels(\"hello\") = 2\nvowels(\"\
    abracadabra\") = 3\nvowels(\"abracadabra\")\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9a8e7amo.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9a8e7amo.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp75q63ubb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp75q63ubb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\n@assert solve(\"1234\") == \"4321\"\n\
    @assert solve(\"ab\") == \"AB\"\n@assert solve(\"#a@C\") == \"#A@c\"\n</cell>\n\
    <text>\nExercise 3\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz71zlalp.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz71zlalp.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if s.length == 0\n        return \"\"\n\
    \    \n    if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return\
    \ reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"#a@C\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"aBcD\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"aBcD\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3qs3egds.jl:21\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3qs3egds.jl:21\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp52s0eaow.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp52s0eaow.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp52s0eaow.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        error(\"String is\
    \ empty\")\n    else if length(s) == 1 \n        return s\n    else if isLetter(s)\
    \ \n        return reverse(toUpper(s))\n    else \n        return reverse(toLower(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp32mnkzp9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp32mnkzp9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpea06gfms.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpea06gfms.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpm3g3kvrv.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpm3g3kvrv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpm3g3kvrv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(toUpper(s))\n    else \n        return\
    \ reverse(toLower(s))\nend\n</code>\n<|/ a tags=julia,string |>\n<| a tags=julia,string\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpktwjljxg.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpktwjljxg.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    if isLetter(s[end])\n\
    \        return reverse(s[end..end-1])\n    return s\nend\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptuwg_jfk.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptuwg_jfk.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s[end])\n        return reverse(s[end..end-1])\n    \n    return\
    \ reverse(s[end..end-1])\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpp41xzujr.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpp41xzujr.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) == 1 \n        s[toupper(s[0])] \n    else \n        solve(s[toupper(s[0])])\
    \ + s[tolower(s[end-1])]\nend\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx8ug4jj5.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx8ug4jj5.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if isletter(s) \n        return reverse(toupper(s))\n    else \n        return\
    \ reverse(tolower(s)) \nend\n</code>\n<|/ a tags=string,julia |>\n<| c |>\nThis\
    \ doesn't work if the string contains any non-letters. For example, `solve(\"\
    ab\")` returns `\"Ab\"` instead of `\"Ab\"`.\n<|/ c |>\n<| c |>\nYes, you are\
    \ right. I edited my answer to fix this problem.\n<|/ c |>\n<| a |>\n<code>\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzm_0x534.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzm_0x534.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(upper(s))\n    else \n        return\
    \ reverse(lower(s))\nend\n</cell>\n<code language=julia-1.0>\nsolve(\"1234\")\n\
    </cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ as input and returns the number of vowels present in the string.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpufubhwwt.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpufubhwwt.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpc5gr8uh_.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpc5gr8uh_.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpc5gr8uh_.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpvj_t3jr2.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpvj_t3jr2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpvj_t3jr2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbnwzb9h4.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbnwzb9h4.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbnwzb9h4.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return reverse(s,1) \n    else \n        \n    \
    \    \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \n        \n      \
    \  \n        \n        \n        \n        \n        \n        \n        \n  \
    \      \n        \n        \n        \n        \n        \n        \n        \n\
    \        \n        \n        \n        \n        \n        \nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpxqw5qkbc.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpxqw5qkbc.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpa00dqjzn.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpa00dqjzn.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpa00dqjzn.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpouypx651.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpouypx651.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp9vpdhglh.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp9vpdhglh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp9vpdhglh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    if length(s) == 0 \n        return\
    \ s \n    \n    if isLetter(s) \n        return reverse(toUpper(s))\n    \n  \
    \  return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.3>\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1nrqdtch.jl:22\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1nrqdtch.jl:22\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        local\
    \ result = \"\"\n        for c in s \n            local upper = toupper(c)\n \
    \           local lower = tolower(c)\n            if upper == lower \n       \
    \         then upper = upper\n                else upper = lower\n           \
    \ end\n            result = result .. upper\n        end\n        return result\n\
    \    end\nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,lowercase,uppercase,haskell\
    \ |>\n<code>\nimport Data.Char\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphw1zc3l9.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphw1zc3l9.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpaibnowwm.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpaibnowwm.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpaibnowwm.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0\n        return s\n    if isLetter(s)\n\
    \        return reverse(toUpper(s))\n    return reverse(toLower(s))\nend\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.0>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string and returns the number\
    \ of vowels in it.\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfh83p07a.jl:18\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfh83p07a.jl:18\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s[end])\n        return reverse(s[end..end-1])\n    \n    return\
    \ reverse(s[end..end-1])\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: premature end of input\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpckafl48m.jl:1\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpckafl48m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"ab\")\n</cell>\n<code language=julia-1.5>\nsolve(\"#a@C\")\n</cell>\n\
    <text>\nExercise 2\nWrite a function that takes a string as input and returns\
    \ the number of characters in the string that are uppercase letters.\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6d7y9kn5.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6d7y9kn5.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        error(\"String is\
    \ empty\")\n    elseif s[0] == '#' \n        error(\"String starts with #\")\n\
    \    elseif isLetter(s) \n        solve_reverse(s)\n    else\n        solve_reverse(toUpper(s))\n\
    \    end\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: "test set: Error During Test at /tmp/tmpt5fayn1x.jl:27\n  Test threw exception\n\
    \  Expression: candidate(\"AsDf\") == \"aSdF\"\n  BoundsError: attempt to access\
    \ String\n    at index [0]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194\
    \ [inlined]\n   [2] codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex\
    \ at ./strings/string.jl:210 [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n\
    \   [5] top-level scope at /tmp/tmpt5fayn1x.jl:27\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:28\n  Test threw exception\n  Expression: candidate(\"\
    1234\") == \"4321\"\n  BoundsError: attempt to access String\n    at index [0]\n\
    \  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n   [2]\
    \ codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n   [5] top-level\
    \ scope at /tmp/tmpt5fayn1x.jl:28\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:29\n  Test threw exception\n  Expression: candidate(\"\
    ab\") == \"AB\"\n  BoundsError: attempt to access String\n    at index [0]\n \
    \ Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n   [2]\
    \ codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n   [5] top-level\
    \ scope at /tmp/tmpt5fayn1x.jl:29\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:30\n  Test threw exception\n  Expression: candidate(\"\
    #a@C\") == \"#A@c\"\n  BoundsError: attempt to access String\n    at index [0]\n\
    \  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n   [2]\
    \ codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n   [5] top-level\
    \ scope at /tmp/tmpt5fayn1x.jl:30\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:31\n  Test threw exception\n  Expression: candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\"\n  BoundsError: attempt to access String\n    at\
    \ index [0]\n  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n\
    \   [2] codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n   [5] top-level\
    \ scope at /tmp/tmpt5fayn1x.jl:31\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:32\n  Test threw exception\n  Expression: candidate(\"\
    #6@2\") == \"2@6#\"\n  BoundsError: attempt to access String\n    at index [0]\n\
    \  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n   [2]\
    \ codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n   [5] top-level\
    \ scope at /tmp/tmpt5fayn1x.jl:32\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:33\n  Test threw exception\n  Expression: candidate(\"\
    #$(a)^D\") == \"#$(A)^d\"\n  UndefVarError: a not defined\n  Stacktrace:\n   [1]\
    \ top-level scope at /tmp/tmpt5fayn1x.jl:33\n   [2] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [3] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \ntest set: Error During\
    \ Test at /tmp/tmpt5fayn1x.jl:34\n  Test threw exception\n  Expression: candidate(\"\
    #ccc\") == \"#CCC\"\n  BoundsError: attempt to access String\n    at index [0]\n\
    \  Stacktrace:\n   [1] checkbounds at ./strings/basic.jl:194 [inlined]\n   [2]\
    \ codeunit at ./strings/string.jl:89 [inlined]\n   [3] getindex at ./strings/string.jl:210\
    \ [inlined]\n   [4] solve(::String) at /tmp/tmpt5fayn1x.jl:14\n   [5] top-level\
    \ scope at /tmp/tmpt5fayn1x.jl:34\n   [6] top-level scope at /build/julia-98cBbp/julia-1.4.1+dfsg/usr/share/julia/stdlib/v1.4/Test/src/Test.jl:1113\n\
    \   [7] top-level scope at /tmp/tmpt5fayn1x.jl:26\n  \nTest Summary: | Error \
    \ Total\ntest set      |     8      8\n"
  stderr: "ERROR: LoadError: Some tests did not pass: 0 passed, 0 failed, 8 errored,\
    \ 0 broken.\nin expression starting at /tmp/tmpt5fayn1x.jl:24\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if s[0] == '#' \n        return reverse(s[2:]) \n    else if s[0] == '@' \n\
    \        return reverse(s[2:]) \n    else if s[0] == 'a' \n        return reverse(s[2:])\
    \ \n    else if s[0] == 'b' \n        return reverse(s[2:]) \n    else if s[0]\
    \ == 'c' \n        return reverse(s[2:]) \n    else if s[0] == 'd' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'e' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'f' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'g' \n        return reverse(s[2:]) \n    else if s[0] == 'h' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'i' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'j' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'k' \n        return reverse(s[2:]) \n    else if s[0] == 'l' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'm' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'n' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'o' \n        return reverse(s[2:]) \n    else if s[0] == 'p' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'q' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'r' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 's' \n        return reverse(s[2:]) \n    else if s[0] == 't' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'u' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'v' \n        return reverse(s[2:]) \n    else if s[0] ==\
    \ 'w' \n        return reverse(s[2:]) \n    else if s[0] == 'x' \n        return\
    \ reverse(s[2:]) \n    else if s[0] == 'y' \n        return reverse(s[2:]) \n\
    \    else if s[0] == 'z' \n        return reverse(s[2:]) \n    else \n       \
    \ return reverse(s[2:]) \nend\n</cell>\n<code language=julia-1.4>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg1slgiyd.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg1slgiyd.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s[end])\n        return reverse(s[end..end-1])\n    \n    return\
    \ reverse(s[1..end])\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\"\
    )\n</cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string\
    \ and returns the number of characters in the string that are letters.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") ==\
    \ \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\"\
    ) == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\"\
    ) == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp43vto0qh.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp43vto0qh.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    \n\
    \    if isLetter(s) \n        return reverse(toUpper(s))\n    \n    return reverse(toLower(s))\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpydhu414u.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpydhu414u.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        \"\" \n    else if\
    \ length(s) == 1 \n        s[toupper(s[0])] \n    else \n        solve(reverse(s))\n\
    end\n</code>\n<|/ a dscore=0 |>\n<| c |>\nThis doesn't work. `solve(\"ab\")` returns\
    \ `\"A\"` instead of `\"AB\"`.\n<|/ c |>\n<| c |>\nI fixed the bug. Thanks for\
    \ pointing it out.\n<|/ c |>\n<| a tags=recursion,julia |>\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\"\
    )\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\"\
    )\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\")\
    \ == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqmt0l9ua.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqmt0l9ua.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpn4ui4xrj.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpn4ui4xrj.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpn4ui4xrj.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpfpktit0c.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpfpktit0c.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpfpktit0c.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(upper(s))\n    else \n        return\
    \ reverse(lower(s))\nend\n</code>\n<|/ a tags=string,julia |>\n<| a dscore=0 |>\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5obmippv.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5obmippv.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    if length(s) == 0 \n        \n        return\
    \ \"\"\n    \n    \n    if isLetter(s) \n        \n        return reverse(toUpper(s))\n\
    \    \n    \n    return reverse(toLower(s))\nend\n</cell>\n<code language=julia-1.0>\n\
    solve(\"1234\")\n</cell>\n<code language=julia-1.0>\nsolve(\"ab\")\n</cell>\n\
    <code language=julia-1.0>\nsolve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite\
    \ a function that takes a string and returns the number of characters in the string.\n\
    Examples\ncount(\"abc\") = 3\ncount(\"ab\") = 2\ncount(\"a\") = 1\ncount(\"\"\
    ) = 0\ncount(nothing) = 0\nHint: Use length() function\nusing Test\n\n@testset\
    \ begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9x3je8pg.jl:25\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9x3je8pg.jl:25\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 1 \n        return s\n    else\
    \ if isletter(s) \n        solve(s)\n    else\n        solve(reverse(s))\nend\n\
    </code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"\
    1234\") == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"\
    #a@C\") == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8h155t8r.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8h155t8r.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n    \n\
    \    \n\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuc899gwq.jl:11\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuc899gwq.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuc899gwq.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length==0 \n        return s \n    else\
    \ if length(filter(x -> x>='a' && x<='z',s)) == 0 \n        return reverse(s)\
    \ \n    else \n        return reverse(transform(s,toUpper)) \nend\n</cell>\n<code\
    \ language=julia-1.0>\n\"\"\"\n    transform(str::String, func::Function)\n  \
    \  Transforms the string str using the function func.\n    For example,\n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    transform(\"hello\", x -> x + 1) \n    transform(\"\
    hello\", x -> x + 1) \n    \nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp80_g3vu8.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp80_g3vu8.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(s.toLowerCase()) \n    else \n     \
    \   return reverse(s.toUpperCase()) \nend\n</code>\n<|/ a dscore=1 |>\n<| a tags=string,julia,reverse\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"\
    AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp90yw_1em.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp90yw_1em.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) <= 0\n        return s\n    \n \
    \   if isLetter(s)\n        return reverse(upper(s))\n    else\n        return\
    \ reverse(lower(s))\nend\n</cell>\n<code language=julia-1.5>\nsolve(\"1234\")\n\
    </cell>\n<code language=julia-1.5>\nsolve(\"ab\")\n</cell>\n<code language=julia-1.5>\n\
    solve(\"#a@C\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string\
    \ and returns the number of characters in the string.\nExamples\ncount(\"1234\"\
    ) = 4\ncount(\"ab\") = 2\ncount(\"#a@C\") = 3\nHint: use the length function.\n\
    using Test\n\n@testset begin\n\ncandidate = solve;\n\t@test(candidate(\"AsDf\"\
    ) == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\")\n\t@test(candidate(\"\
    ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\")\n\t@test(candidate(\"\
    #AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\") == \"2@6#\")\n\t@test(candidate(\"\
    #$a^D\") == \"#$A^d\")\n\t@test(candidate(\"#ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptdlobacl.jl:20\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptdlobacl.jl:20\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if s.length == 0 \n        return s \n    else\
    \ if isLetter(s) \n        return reverse(toUpper(s))\n    else \n        return\
    \ reverse(toLower(s))\nend\nusing Test\n\n@testset begin\n\ncandidate = solve;\n\
    \t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\") == \"4321\"\
    )\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\") == \"#A@c\"\
    )\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"#6@2\"\
    ) == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpi_l8insb.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpi_l8insb.jl:14\n"
  exit_code: 1
  status: Exception
- program: "\"\"\"You are given a string s.\n    if s[i] is a letter, reverse its\
    \ case from lower to upper or vise versa, \n    otherwise keep it as it is.\n\
    \    If the string contains no letters, reverse the string.\n    The function\
    \ should return the resulted string.\n    Examples\n    solve(\"1234\") = \"4321\"\
    \n    solve(\"ab\") = \"AB\"\n    solve(\"#a@C\") = \"#A@c\"\n    \"\"\"\nfunction\
    \ solve(s::String)::String \n    if length(s) == 0 \n        return s \n    else\
    \ if length(s) == 1 \n        return toupper(s[0]) \n    else \n        return\
    \ reverse(solve(reverse(s))) \nend\n</code>\n<|/ a tags=string,julia,reverse |>\n\
    <| c |>\nI like this solution, but I wonder if there is a more efficient way of\
    \ doing this without using recursion.\n<|/ c |>\n<| c |>\nI believe that there\
    \ is an efficient way of doing this without recursion, but I haven't thought it\
    \ through yet. I'll post it here if I figure it out.\n<|/ c |>\n<| c |>\nI added\
    \ a solution without recursion.\n<|/ c |>\n<| c |>\nI added a solution without\
    \ recursion.\n<|/ c |>\n<| a dscore=2 |>\nI believe that there is an efficient\
    \ way of doing this without recursion, but I haven't thought it through yet. I'll\
    \ post it here if I figure it out.\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = solve;\n\t@test(candidate(\"AsDf\") == \"aSdF\")\n\t@test(candidate(\"1234\"\
    ) == \"4321\")\n\t@test(candidate(\"ab\") == \"AB\")\n\t@test(candidate(\"#a@C\"\
    ) == \"#A@c\")\n\t@test(candidate(\"#AsdfW^45\") == \"#aSDFw^45\")\n\t@test(candidate(\"\
    #6@2\") == \"2@6#\")\n\t@test(candidate(\"#$a^D\") == \"#$A^d\")\n\t@test(candidate(\"\
    #ccc\") == \"#CCC\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: use \"elseif\" instead of \"else if\"\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1sb_4u7v.jl:14\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1sb_4u7v.jl:14\n"
  exit_code: 1
  status: Exception
