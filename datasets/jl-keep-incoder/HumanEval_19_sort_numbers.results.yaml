name: HumanEval_19_sort_numbers
language: julia
results:
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"one three five\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the string with all the\
    \ words capitalized.\n>>> capitalize_words(\"one two three\")\n'One Two Three'\n\
    >>> capitalize_words(\"one two three four\")\n'One Two Three Four'\n>>> capitalize_words(\"\
    one two three four five\")\n'One Two Three Four Five'\n>>> capitalize_words(\"\
    one two three four five six\")\n'One Two Three Four Five Six'\n>>> capitalize_words(\"\
    one two three four five six seven\")\n'One Two Three Four Five Six Seven'\n>>>\
    \ capitalize_words(\"one two three four five six seven eight\")\n'One Two Three\
    \ Four Five Six Seven Eight'\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine\")\n'One Two Three Four Five Six Seven Eight Nine'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten\")\n'One Two Three Four Five\
    \ Six Seven Eight Nine Ten'\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine ten eleven\")\n'One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven'\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten eleven twelve\")\n'One Two Three Four Five Six Seven Eight Nine Ten\
    \ Eleven Twelve'\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten eleven twelve thirteen\")\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_words(\"one two three four\
    \ five six seven eight nine ten eleven twelve thirteen fourteen\")\n'One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven T\nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbnlzsdaq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbnlzsdaq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case. \nThe string can contain any characters, including\
    \ spaces.\nThe function should ignore all non-alphabetic characters and only return\
    \ alphabetic characters.\nThe function should ignore all non-alphabetic characters\
    \ and only return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-alphabetic characters and only return alphabetic characters.\n\
    The function should ignore all non-alphabetic characters and only return alphabetic\
    \ characters.\nThe function should ignore all non-alphabetic characters and only\
    \ return alphabetic characters.\nThe function should ignore all non-alphabetic\
    \ characters and only return alphabetic characters.\nThe function should ignore\
    \ all non-alphabetic characters and only return alphabetic characters.\nThe function\
    \ should ignore all non-\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprzzdqfwl.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprzzdqfwl.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the number of words\
    \ in the string.\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three four five six seven eight\
    \ nine\")\n    7\n    >>> count_words(\"one two three \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps24wybzq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps24wybzq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all numbers in reverse order.\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four five six seven eight nine')\n'nine eight\
    \ seven six five four three two one'\n>>> reverse_numbers('one two three four\
    \ five six seven eight nine')\n'nine eight seven six five four three two one'\n\
    >>> reverse_numbers('one two three four \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsmb08x9i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsmb08x9i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with the first letter of each word capitalized.\n    >>> capitalize_first_letter(\"\
    one two three four five six seven eight nine\")\n    'One Two Three Four Five\
    \ Six Seven Eight Nine'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkmih1j6_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkmih1j6_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=1 |>\nI like using\
    \ sort! to sort a vector:\n<code>\njulia> sort!(\"one two three\")\n\"one two\
    \ three\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=0 |>\nI like\
    \ using sort! to sort a vector:\n<code>\njulia> sort!(\"one two three\")\n\"one\
    \ two three\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=0 |>\n\
    I like using sort! to sort a vector:\n<code>\njulia> sort!(\"one two three\")\n\
    \"one two three\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<| a dscore=0\
    \ |>\nI like using sort! to sort a vector:\n<code>\njulia> sort!(\"one two three\"\
    )\n\"one two three\"\n</code>\n<|/ a tags=julia,sorting,string |>\n<| c |>\nPlease\
    \ don't post only code as an answer, but also provide an explanation of what your\
    \ code does and how it solves the problem of the question. Answers with an explanation\
    \ are usually more helpful and of better quality, and are more likely to attract\
    \ upvotes.\n<|/ c |>\n<| c |>\nThis does not provide an answer to the question.\
    \ Once you have sufficient [reputation](https://stackoverflow.com/help/whats-reputation)\
    \ you will be able to [comment on any post](https://stackoverflow.com/help/privileges/comment);\
    \ instead, [provide answers that don't require clarification from the asker](https://meta.stackexchange.com/questions/214173/why-do-i-need-50-reputation-to-comment-what-can-i-do-instead).\
    \ - [From Review](/review/low-quality-posts/26825827)\n<|/ c |>\n<| c |>\nI thought\
    \ this was an answer. Maybe I misunderstood the question. I'll delete my answer\
    \ if that's not the case.\n<|/ c |>\n<| c |>\nI thought this was an answer. Maybe\
    \ I misunderstood the question. I'll delete my answer if that's not the case.\n\
    <|/ c |>\n<| c |>\nI thought this was an answer. Maybe I misundersto\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0oraej6c.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0oraej6c.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers = sort(numbers)\n    return join(numbers, ' ')\nend\n</cell>\n\
    <code language=julia-1.0>\nsort_numbers('three one five')\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in it sorted from smallest to largest.\n    Valid choices are 'zero', 'one',\
    \ 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    >>>\
    \ sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzx52xsz1.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzx52xsz1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=string,sorting,haskell,list |>\n<code>\nimport Data.List\nimport\
    \ Data.Ord\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzovmvg45.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzovmvg45.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the string with all\
    \ numbers in reverse order. For example, sort_numbers(\"one two three four five\
    \ six seven eight nine\") should return \"nine eight seven six five four three\
    \ two one\".\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj6ggb95_.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj6ggb95_.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpw4ng5b7o.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpw4ng5b7o.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpw4ng5b7o.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"\
    one two three\")\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\"\
    )\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three\")\n</cell>\n<code language=julia-1.5>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq8px87js.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq8px87js.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport\
    \ Data.List\nimport Data.Maybe\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_5ldapmd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_5ldapmd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n  \
    \  return numbers\nend\n</code>\n<|/ a dscore=1 |>\n<| a |>\nI wrote a function\
    \ that sorts numbers in ascending order and returns a list of sorted numbers.\
    \ \n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvvxkywae.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvvxkywae.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ dscore=2 |>\n<| a tags=julia,sorting,string |>\nIn Julia 1.5 you can do:\n<code>\n\
    julia> sort!(split(\" one two three four five six seven eight nine ten\"))\n\"\
    one two three four five six seven eight nine ten\"\n</code>\n<|/ a dscore=2 |>\n\
    <| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0q8_m0i8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0q8_m0i8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,haskell |>\n<code>\nimport Data.List\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmptcpc48y3.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmptcpc48y3.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyowcbxx4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyowcbxx4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with the\
    \ first letter of each word capitalized.\n>>> capitalize_first_letter(\"the quick\
    \ brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy\
    \ Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_first_letter(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_first_letter(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps O\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcvy8_2cc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcvy8_2cc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyvlvaiyv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyvlvaiyv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp8d7dldn3.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp8d7dldn3.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp8d7dldn3.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpd088rkta.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpd088rkta.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgrig05k7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgrig05k7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt9jf15_j.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt9jf15_j.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns a string with all the words capitalized.\n>>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n\"One Two Three Four Five Six\
    \ Seven Eight Nine\"\n>>> capitalize_words(\"one two three four five six seven\
    \ eight nine ten\")\n\"One Two Three Four Five Six Seven Eight Nine Ten\"\n>>>\
    \ capitalize_words(\"one two three four five six seven eight nine ten eleven twelve\"\
    )\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen\")\n\"\
    One Two Three Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen\"\n>>>\
    \ capitalize_words(\"one two three four five six seven eight nine ten eleven twelve\
    \ thirteen fourteen\")\n\"One Two Three Four Five Six Seven Eight Nine Ten Eleven\
    \ Twelve Thirteen Fourteen\"\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine ten eleven twelve thirteen fourteen fifteen\")\n\"One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen\"\
    \n>>> capitalize_words(\"one two three four five six seven eight nine ten eleven\
    \ twelve thirteen fourteen fifteen sixteen\")\n\"One Two Three Four Five Six Seven\
    \ Eight Nine Ten Eleven Twelve Thirteen Fourteen Fifteen Sixteen\"\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten eleven twelve thirteen fourteen\
    \ fifte\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoc2qhce5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoc2qhce5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns a string with all the words in lower case. \nFor example \"\
    The quick brown fox jumps over the lazy dog\" becomes \"the quick brown fox jumps\
    \ over the lazy dog\".\nMake sure you only use one space between words. \nMake\
    \ sure you do not use any punctuation marks.\nMake sure you do not use any capital\
    \ letters.\nMake sure you do not use any numbers. \nMake sure you do not use any\
    \ special characters. \nMake sure you do not use any spaces.\nMake sure you do\
    \ not use any special characters or capital letters.\nMake sure you do not use\
    \ any numbers or special characters or capital letters.\nMake sure you do not\
    \ use any numbers or special characters or capital letters.\nMake sure you do\
    \ not use any numbers or special characters or capital letters.\nMake sure you\
    \ do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capital letters.\nMake sure\
    \ you do not use any numbers or special characters or capit\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp720ao9h6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp720ao9h6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpl_ev_8eh.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl_ev_8eh.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmprp_dwzar.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmprp_dwzar.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </code>\n<|/ a tags=julia,sorting |>\n<| c |>\nThis doesn't work for me. `sort`\
    \ doesn't seem to exist in Julia 1.5.1. I get the error `ERROR: UndefVarError:\
    \ sort not defined`.\n<|/ c |>\n<| c |>\n`sort` was introduced in Julia 1.5.1.\
    \ See https://github.com/JuliaLang/julia/blob/master/CHANGELOG.md#1501-2015-07-29\n\
    <|/ c |>\n<| c |>\nAh, I see. Thanks for pointing that out. I'm still getting\
    \ used to the version numbering scheme.\n<|/ c |>\n<| a dscore=2 |>\nThe answer\
    \ by is correct, but I thought I'd add some explanation as to why it works.\n\
    The function sort() is a function that is defined in the Base package. As such,\
    \ it is available to all Julia packages. However, this does not mean that it is\
    \ available by default to all functions. In fact, it is only available to functions\
    \ that are defined in the Base package. \nIn your case, sort() is defined in the\
    \ Base package. As such, it is available to all Julia packages. However, this\
    \ does not mean that it is available by default to all functions. In fact, it\
    \ is only available to functions that are defined in the Base package. \nIn your\
    \ case, sort() is defined in the Base package. As such, it is available to all\
    \ Julia packages. However, this does not mean that it is available by default\
    \ to all functions. In fact, it is only available to functions that are defined\
    \ in the Base package. \nIn your case, sort() is defined in the Base package.\
    \ As such, it is available to all Julia packages. However, this does not mean\
    \ that it is available by default to all functions. In fact, it is only available\
    \ to functions that are defined in the Base package. \nIn your case, sort() is\
    \ defined in the Base package. As such, it is available to all Julia packages.\
    \ However, this does not mean that it is available by default to all functions.\
    \ In fact, it is only available to functions that are defined in the Base package.\
    \ \nIn your case, sort() is defined in the Base package. As such, it is available\
    \ to all Julia packages. However, this does not mean that it is available by default\
    \ to all functions. In fact, it is only available to functions that are defined\
    \ in the Base package. \nIn your case, sort() is defined in the Base package.\
    \ As such, it is available to all Julia packages. However, this does not mean\
    \ that it is available by default to all functions. In fact, it is only available\
    \ to functions that are defined in the Base package. \nIn your case, sort(\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmprbe_05ju.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmprbe_05ju.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmprmmfhcb2.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmprmmfhcb2.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmprmmfhcb2.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the string with all numbers in reverse order. \nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") returns \"nine eight seven six\
    \ five four three two one\".\nHint: Use a for loop to iterate over the string\
    \ and append each character to a new string.\nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8fybljbz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8fybljbz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq5edmoec.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq5edmoec.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp0upaqzw_.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp0upaqzw_.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns the string with\
    \ all numbers in sorted order.\nThe input string can contain any number of spaces\
    \ between the numbers, including none.\nThe output string should contain only\
    \ numbers, sorted from smallest to largest.\nFor example, sort_numbers(\"one two\
    \ three four five six seven eight nine\") should return \"one two three four five\
    \ six seven eight nine\".\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb9bxdebp.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb9bxdebp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ in alphabetical order.\n    Valid strings are 'one two three four five six seven\
    \ eight nine'.\n    >>> sort_words('one two three four five six seven eight nine')\n\
    \    'one two three four five six seven eight nine'\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp3z1jplhi.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp3z1jplhi.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n    numbers = numbers[2:-2]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpl1b4pov3.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpl1b4pov3.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcfylyynp.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcfylyynp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp5oh3tzec.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp5oh3tzec.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    >>> capitalize_words(\"The quick brown fox jumps over the\
    \ lazy dog\")\n    'The Quick Brown Fox Jumps Over The Lazy Dog'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpixrhy74w.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpixrhy74w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string as\
    \ input and returns the string with all 'o's replaced with 'x's.\n>>> replace_o(\"\
    one two three four five six seven eight nine\")\n\"one xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx\
    \ xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx xx \nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplqqvbcps.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplqqvbcps.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns a string with all\
    \ the characters in lower case separated by spaces.\ne.g. \"Hello World\" => \"\
    Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\" =>\
    \ \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"Hello World\"\ne.g. \"Hello World\" => \"Hello World\"\ne.g. \"Hello World\"\
    \ => \"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1xs7bx1f.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1xs7bx1f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp4dfjl0ns.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp4dfjl0ns.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp4dfjl0ns.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string as input and returns a string with the first letter of each\
    \ word capitalized.\n>>> capitalize_first_letter('one two three')\n'One Two Three'\n\
    >>> capitalize_first_letter('one two three four')\n'One Two Three Four'\n>>> capitalize_first_letter('one\
    \ two three four five')\n'One Two Three Four Five'\n>>> capitalize_first_letter('one\
    \ two three four five six')\n'One Two Three Four Five Six'\n>>> capitalize_first_letter('one\
    \ two three four five six seven')\n'One Two Three Four Five Six Seven'\n>>> capitalize_first_letter('one\
    \ two three four five six seven eight')\n'One Two Three Four Five Six Seven Eight'\n\
    >>> capitalize_first_letter('one two three four five six seven eight nine')\n\
    'One Two Three Four Five Six Seven Eight Nine'\n>>> capitalize_first_letter('one\
    \ two three four five six seven eight nine ten')\n'One Two Three Four Five Six\
    \ Seven Eight Nine Ten'\n>>> capitalize_first_letter('one two three four five\
    \ six seven eight nine ten eleven')\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven'\n>>> capitalize_first_letter('one two three four five six seven\
    \ eight nine ten eleven twelve')\n'One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven Twelve'\n>>> capitalize_first_letter('one two three four five six\
    \ seven eight nine ten eleven twelve thirteen')\n'One Two Three Four Five Six\
    \ Seven Eight Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_first_letter('one\
    \ two three four five six seven eight nine ten eleven twelve thirteen fourteen')\n\
    'One Two Three Four Fi\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8thmclcq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8thmclcq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqqotui8k.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqqotui8k.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbgujk25g.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbgujk25g.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbgujk25g.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd1z4sms9.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd1z4sms9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpozgnprpt.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpozgnprpt.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpozgnprpt.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq3h3b23c.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq3h3b23c.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort!\n    return numbers.join(' ')\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns the string with all the words capitalized. \n\
    \    >>> capitalize_words(\"the quick brown fox jumped over the lazy dog\")\n\
    \    'The Quick Brown Fox Jumped Over The Lazy Dog'\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4d_pbt59.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4d_pbt59.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers = sort(numbers)\n    numbers = join(numbers, ' ')\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp663_v4c7.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp663_v4c7.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkozau5e1.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkozau5e1.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the words capitalized.\n    For example, \"Hello\
    \ World\" returns \"Hello World\"\n    >>> capitalize_string(\"Hello World\")\n\
    \    \"Hello World\"\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate =\
    \ sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj9wbizw2.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj9wbizw2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with all\
    \ the words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick bro\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvdrpgiu7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvdrpgiu7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpu1hwiluo.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu1hwiluo.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\nWrite a function\
    \ that takes a string as input and returns a string with the first letter of each\
    \ word capitalized.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz4f541_h.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz4f541_h.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpg_3abe3s.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpg_3abe3s.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmplv7fhlup.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplv7fhlup.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns a string with all the characters in lower case.\nIf the input\
    \ string has any non-alphabetic characters, return an empty string.\nIf the input\
    \ string has only alphabetic characters, return the string with all the alphabetic\
    \ characters in lower case.\nIf the input string has both alphabetic and non-alphabetic\
    \ characters, return the string with all the alphabetic characters in lower case\
    \ and all the non-alphabetic characters in upper case.\nIf the input string has\
    \ only alphabetic characters, return the string with all the alphabetic characters\
    \ in lower case.\nIf the input string has only non-alphabetic characters, return\
    \ the string with all the non-alphabetic characters in upper case.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4rpgo40t.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4rpgo40t.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpwgq7a3dm.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpwgq7a3dm.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmptxo0gbig.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmptxo0gbig.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a |>\n<| c |>\nThis\
    \ doesn't work if you have a string like \"one two three four five\"\n<|/ c |>\n\
    <| c |>\nIt does work if you have a string like \"one two three four five\"\n\
    <|/ c |>\n<| c |>\nIt does work if you have a string like \"one two three four\
    \ five\"\n<|/ c |>\n<| a dscore=2 |>\n<code>\ndef sort_numbers(numbers):\n   \
    \ numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers = join(numbers,\
    \ \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,haskell |>\n<| a dscore=2\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp34bncoyt.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp34bncoyt.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6u3mxuuf.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6u3mxuuf.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>\nsort_numbers(\"one two three\
    \ four five six seven eight nine\")\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all numbers in reverse order.\
    \ \nFor example, sort_numbers(\"one two three four five six seven eight nine\"\
    ) returns \"nine eight seven six five four three two one\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph5g35jao.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph5g35jao.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppiyik6rx.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppiyik6rx.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx9d9ycnb.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx9d9ycnb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ in reverse order.\n    Valid choices are 'zero', 'one', 'two', 'three', 'four',\
    \ 'five', 'six', 'seven', 'eight' and 'nine'.\n    >>> sort_numbers(\"three one\
    \ five\")\n    'five three one'\n    \"\"\"\nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4ma9_x5w.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4ma9_x5w.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\nThis doesn't work if you have more than 9 numbers. For example,\
    \ `sort_numbers(\"one two three four five six seven eight nine\")` returns `\"\
    one two three four five six seven eight nine\"`.\n<|/ c |>\n<| c |>\nI added a\
    \ version that works with more than 9 numbers. Thanks for pointing that out.\n\
    <|/ c |>\n<| a tags=sorting,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2mg9eckh.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2mg9eckh.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,string,haskell |>\n<| c |>\nI like your\
    \ solution, but I feel like it could be improved by using [`sortBy`](http://hackage.haskell.org/package/base-4.8.0.0/docs/Data-List.html#v:sortBy)\
    \ instead of `sort`.  It would also make sense to define `sortNumbers` as a `sortBy\
    \ (comparing fst)` rather than a `sort` which would require an additional `map`\
    \ step.\n<|/ c |>\n<| c |>\nI agree with you. I was just trying to solve the problem\
    \ as it was presented. I'll edit my answer to include your suggestions.\n<|/ c\
    \ |>\n<| c |>\nI added a solution using `sortBy` which I think is more elegant.\n\
    <|/ c |>\n<| a dscore=3 |>\nHere's a solution using sortBy:\n<code>\nimport Data.List\
    \ (sortBy)\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpuvjkf3co.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpuvjkf3co.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nPlease add some explanation to your answer such that others can\
    \ learn from it\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| c |>\nPlease add some explanation to your answer\
    \ such that others can learn from it\n<|/ c |>\n<| a tags=sorting,python |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nPlease add some explanation to your answer such that others can learn\
    \ from it\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(' ')\n    numbers.sort()\n    return ' '.join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n    numbers.sort()\n\
    \    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7wn02g8c.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7wn02g8c.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the number of words in the\
    \ string. \nFor example, \n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog\")\n5\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown\
    \ fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps\
    \ over the lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the\
    \ lazy dog.\")\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\"\
    )\n4\n>>> count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>>\
    \ count_words(\"The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"\
    The quick brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick\
    \ brown fox jumps over the lazy dog.\")\n4\n>>> count_words(\"The quick brown\
    \ fox jump\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpe_e0x9zv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpe_e0x9zv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpz284feqe.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpz284feqe.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one three five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all spaces\
    \ replaced with underscores\n>>> replace_spaces(\"hello world\")\n\"hello_world\"\
    \n>>> replace_spaces(\"one two three\")\n\"one_two_three\"\n>>> replace_spaces(\"\
    one two three four\")\n\"one_two_three_four\"\n>>> replace_spaces(\"one two three\
    \ four  five\")\n\"one_two_three_four_five\"\n>>> replace_spaces(\"one two three\
    \ four  five six\")\n\"one_two_three_four_five_six\"\n>>> replace_spaces(\"one\
    \ two three four  five six seven\")\n\"one_two_three_four_five_six_seven\"\n>>>\
    \ replace_spaces(\"one two three four  five six seven eight\")\n\"one_two_three_four_five_six_seven_eight\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine\")\n\"one_two_three_four_five_six_seven_eight_nine\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten\")\n\"\
    one_two_three_four_five_six_seven_eight_nine_ten\"\n>>> replace_spaces(\"one two\
    \ three four  five six seven eight nine ten eleven\")\n\"one_two_three_four_five_six_seven_eight_nine_ten_eleven\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten eleven\
    \ twelve\")\n\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten eleven\
    \ twelve thirteen\")\n\"one_two_three_four_five_six_seven_eight_nine_ten_eleven_twelve_thirteen\"\
    \n>>> replace_spaces(\"one two three four  five six seven eight nine ten eleven\
    \ twelve thirteen fourteen\")\n\"one_two_three_four_five_\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpna2n92ck.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpna2n92ck.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2oolf9xe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2oolf9xe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmplgli4zzd.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmplgli4zzd.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all numbers in reverse order.\n    Valid choices are\
    \ 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n\
    \    >>> sort_numbers(\"three one five\")\n    'five one three'\n    \"\"\"\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphh1na1pq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphh1na1pq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")` returns\
    \ `[\"one\", \"two\", \"three\"]` instead of `[\"one\", \"three\", \"two\"]`.\n\
    <|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two three\")`\
    \ returns `[\"one\", \"two\", \"three\"]` instead of `[\"one\", \"three\", \"\
    two\"]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one two\
    \ three\")` returns `[\"one\", \"two\", \"three\"]` instead of `[\"one\", \"three\"\
    , \"two\"]`.\n<|/ c |>\n<| c |>\nThis doesn't work for me. `sort_numbers(\"one\
    \ two three\")` returns `[\"one\", \"two\", \"three\"]` instead of `[\"one\",\
    \ \"three\", \"two\"]`.\n<|/ c |>\n<| a dscore=2 |>\nThe accepted answer doesn't\
    \ work for me. sort_numbers(\"one two three\") returns [\"one\", \"two\", \"three\"\
    ] instead of [\"one\", \"three\", \"two\"]. \nI wrote my own version that works:\n\
    <code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp3cz3gpjl.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp3cz3gpjl.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| c |>\nThe `sort!` method modifies the array in-place, so the\
    \ return value is not useful. `sort!` returns a new array with the sorted elements.\n\
    <|/ c |>\n<| c |>\nThanks, I didn't know that. I've updated the answer.\n<|/ c\
    \ |>\n<| a dscore=2 |>\nThe simplest solution is to use sort!:\n<code>\njulia>\
    \ sort!(\"three one five\")\n\"one three five\"\n</code>\n<|/ a tags=julia |>\n\
    <| c |>\n`sort!` modifies the array in-place, so the return value is not useful.\
    \ `sort!` returns a new array with the sorted elements.\n<|/ c |>\n<| c |>\nThanks,\
    \ I didn't know that. I've updated the answer.\n<|/ c |>\n<| a dscore=2 |>\nI\
    \ like to use sort! for this:\n<code>\njulia> sort!(\"three one five\")\n\"one\
    \ three five\"\n</code>\n<|/ a tags=julia |>\n<| a dscore=2 |>\nI like to use\
    \ sort! for this:\n<code>\njulia> sort!(\"three one five\")\n\"one three five\"\
    \n</code>\n<|/ a tags=julia |>\n<| a tags=julia |>\n<code>\njulia> sort!(\"three\
    \ one five\")\n\"one three five\"\n</code>\n<|/ a dscore=1 |>\n<| c |>\n`sort!`\
    \ modifies the array in-place, so the return value is not useful. `sort!` returns\
    \ a new array with the sorted elements.\n<|/ c |>\n<| a tags=julia |>\n<code>\n\
    julia> sort!(\"three one five\")\n\"one three five\"\n</code>\n<|/ a dscore=1\
    \ |>\n<| c |>\n`sort!` modifies the array in-place, so the return value is not\
    \ useful. `sort!` returns a new array with the sorted elements.\n<|/ c |>\n<|\
    \ a tags=julia |>\n<code>\njulia> sort!(\"three one five\")\n\"one three five\"\
    \n</code>\n<|/ a dscore=1 |>\n<| a dscore=1 |>\n<code>\njulia> sort!(\"three one\
    \ five\")\n\"one three five\"\n</code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfgfgok9l.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfgfgok9l.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj83w0aca.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj83w0aca.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ numbers in reverse order. For example, sort_numbers(\"one two three four five\
    \ six seven eight nine\") should return \"nine eight seven six five four three\
    \ two one\".\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvoih8tbz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvoih8tbz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_dq0n9pc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_dq0n9pc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with the first letter of each word capitalized.\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpm8roi6su.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpm8roi6su.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    For example, sort_words(\"one two three\") should return \"\
    One Two Three\"\n    >>> sort_words(\"one two three\")\n    'One Two Three'\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2_rm30oe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2_rm30oe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpr1ar_k_s.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpr1ar_k_s.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the characters\
    \ in lower case. \nFor example,\n>>> capitalize(\"Hello World\")\n\"hello world\"\
    \n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"hello  world\")\n\"Hello\
    \ world\"\n>>> capitalize(\"hello world\")\n\"Hello World\"\n>>> capitalize(\"\
    hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\
    \n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \  \")\n\"Hello World\"\n>>> capitalize(\"hello world \")\n\"Hello World\"\n>>>\
    \ capitalize(\"hello world  \")\n\"Hello World\"\n>>> capitalize(\"hello world\
    \ \")\n\"Hello World\"\n>>> capitalize(\"hello world  \")\n\"Hello World\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv2kugflk.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv2kugflk.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns the string with all numbers\
    \ sorted from smallest to largest.\n    Valid choices are 'zero', 'one', 'two',\
    \ 'three', 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    For example,\
    \ sort_numbers(\"three one five\") returns \"one three five\".\n    Use sort_numbers\
    \ to solve the problem:\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpequmulyn.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpequmulyn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoy1c7pc_.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoy1c7pc_.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmps2veprt2.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmps2veprt2.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n\
    <| a tags=sorting,haskell,string |>\nHere's a solution that uses Data.List.sortBy\
    \ and Data.List.tails:\n<code>\nimport Data.List (sortBy)\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmploxvloow.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmploxvloow.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one three five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqhh6bo_v.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqhh6bo_v.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the words in the string sorted alphabetically.\nThe function should ignore punctuation\
    \ and capitalization.\nThe function should ignore numbers and spaces.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nThe function should ignore words that are only one character\
    \ long.\nThe function should ignore words that are only one character long.\n\
    The function should ignore words that are only one character long.\nThe function\
    \ should ignore words that are only one character long.\nThe function should ignore\
    \ words that are only one character long.\nThe function should ignore words that\
    \ are only one character long.\nThe function should ignore words that are only\
    \ one character long.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbtcqq4ud.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbtcqq4ud.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpakb7fj7s.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpakb7fj7s.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string as\
    \ input and returns the string with all numbers in reverse order.\nFor example,\
    \ sort_numbers(\"one two three four five six seven eight nine\") should return\
    \ \"nine eight seven six five four three two one\".\nThe function should ignore\
    \ non-numeric characters and return an empty string if there are no numbers.\n\
    >>> sort_numbers(\"one two three four five six seven eight nine\")\n\"nine eight\
    \ seven six five four three two one\"\n>>> sort_numbers(\"one two three four five\
    \ six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six\
    \ seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six seven\
    \ eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six seven eight\
    \ nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six seven eight nine\"\
    )\n\"\"\n>>> sort_numbers(\"one two three four five six seven eight nine\")\n\"\
    \"\n>>> sort_numbers(\"one two three four five six seven eight nine\")\n\"\"\n\
    >>> sort_numbers(\"one two three four five six seven eight nine\")\n\"\"\n>>>\
    \ sort_numbers(\"one two three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"\
    one two three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one\
    \ two three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two\
    \ three four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three\
    \ four five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four\
    \ five six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five\
    \ six seven eight nine\")\n\"\"\n>>> sort_numbers(\"one two three four five six\
    \ seven eight nine\")\n\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb0exzr29.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb0exzr29.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_yi20ich.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_yi20ich.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpp66auugk.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpp66auugk.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the string with\
    \ all the words capitalized. \nFor example, the input \"The quick brown fox jumps\
    \ over the lazy dog\" should return the string \"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\nHint: Use split() to split the string into an array of words,\
    \ and capitalize() to capitalize the first letter of each word. \nHint: Use join()\
    \ to join the array of words back into a string.\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp9mdtrqmz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp9mdtrqmz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq6nnwxze.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq6nnwxze.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbldelfkp.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbldelfkp.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpuflz4lwv.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpuflz4lwv.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpuflz4lwv.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 3\nWrite a function that takes a string and\
    \ returns the string with all non-alphabetic characters removed.\ne.g. \"hello,\
    \ world!\" -> \"helloworld\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsxiyr5ac.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsxiyr5ac.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\n\
    Write a function that takes a string as input and returns the string with all\
    \ numbers in descending order.\nFor example, sort_numbers(\"three one five\")\
    \ should return \"five one three\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpov77rcef.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpov77rcef.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpht8_vwbs.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpht8_vwbs.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in descending order.\nFor example, sort_numbers(\"three one five\") should return\
    \ \"five one three\".\nHint: Use a regular expression to find all the numbers\
    \ in the string.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t\
    @test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplilrzkos.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplilrzkos.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.0>\nsort_numbers(\"one two three four\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string and returns the string with all\
    \ the numbers in reverse order. For example, sort_numbers(\"one two three four\"\
    ) should return \"four three two one\".\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_1_fy2zj.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_1_fy2zj.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,julia |>\n<| c |>\nThis doesn't work for me.\
    \ `sort_numbers(\"one two three\")` returns `\"one two three\"`\n<|/ c |>\n<|\
    \ c |>\nIt works for me on Julia 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have\
    \ mentioned that I'm on 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have mentioned\
    \ that I'm on 0.6.2\n<|/ c |>\n<| c |>\nI guess I should have mentioned that I'm\
    \ on 0.6.2\n<|/ c |>\n<| a dscore=2 |>\nThe other answers here are great, but\
    \ I thought I'd add my own solution, since I find it more elegant and easier to\
    \ understand.\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplwqqe0zc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplwqqe0zc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.4>\n\
    sort_numbers(\"one two three four five six seven eight nine\")\n</cell>\n<text>\n\
    Exercise 3\nWrite a function that takes a string as input and returns the string\
    \ with all numbers in it sorted from smallest to largest.\nFor example, sort_numbers(\"\
    one two three four five six seven eight nine\") returns \"one two three four five\
    \ six seven eight nine\".\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7czp0aoi.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7czp0aoi.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns a string with all\
    \ the characters in lower case. \n>>> capitalize(\"hello world\")\n\"Hello World\"\
    \n>>> capitalize(\"hello\")\n\"Hello\"\n>>> capitalize(\"hello, world\")\n\"Hello,\
    \ World\"\n>>> capitalize(\"hello, world!\")\n\"Hello, World!\"\n>>> capitalize(\"\
    hello, world!\", \" \")\n\"Hello, World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"\
    hello, world!\", \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\",\
    \ \" -\")\n\"Hello-World!\"\n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello-World!\"\
    \n>>> capitalize(\"hello, world!\", \" -\")\n\"Hello\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpza9xj0u6.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpza9xj0u6.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a tags=sorting,haskell |>\n<| c |>\nThanks for your answer!\
    \ I understand that my code is not the most efficient way to solve this problem,\
    \ but I'm just trying to learn Haskell and I wanted to see how I could solve this\
    \ problem using only basic functions. I appreciate your help!\n<|/ c |>\n<| c\
    \ |>\nI added a more efficient solution that uses only basic functions. I hope\
    \ it helps.\n<|/ c |>\n<| a dscore=0 |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfo8cmc37.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfo8cmc37.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp09dp2k94.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp09dp2k94.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| c |>\nThis doesn't seem to work for me. `sort_numbers(\"one two three\"\
    )` returns `[\"one\", \"two\", \"three\"]`\n<|/ c |>\n<| c |>\nI fixed the bug\
    \ in the original code. Sorry about that. Now it works.\n<|/ c |>\n<| a dscore=2\
    \ |>\nI wrote a package for this: https://github.com/jamiewilson/sorting.jl\n\
    <code>\nusing Sorting\nsort(\"one two three\")\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a dscore=2 |>\nI wrote a package for this: https://github.com/jamiewilson/sorting.jl\n\
    <code>\nusing Sorting\nsort(\"one two three\")\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a tags=sorting,string,julia |>\n<code>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpftvomnfp.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpftvomnfp.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8mfev17f.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8mfev17f.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers.join(\" \")\nend\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=1 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphu5935gg.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphu5935gg.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</code>\n<|/ a\
    \ dscore=1 |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfvhzuj5e.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfvhzuj5e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpbxpnk7uz.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpbxpnk7uz.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpbxpnk7uz.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,haskell |>\n<code>\nimport Data.List\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmplou_8pbc.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmplou_8pbc.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpu21ya8wp.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpu21ya8wp.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\n</code>\n<|/ a dscore=1 |>\n<| a tags=sorting,haskell,string\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmp1ttk731t.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmp1ttk731t.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick bro\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpphbhpknc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpphbhpknc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</code>\n<|/ a dscore=2 |>\n<| c |>\nThis doesn't work if you have a string\
    \ like \"one two three\"\n<|/ c |>\n<| c |>\nIt does work if you have a string\
    \ like \"one two three\".  It doesn't work if you have a string like \"one two\
    \ three four\".\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"\
    one two three four\".  It doesn't work if you have a string like \"one two three\
    \ four\".\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"one two\
    \ three four\".  It doesn't work if you have a string like \"one two three four\"\
    .\n<|/ c |>\n<| c |>\nIt does work if you have a string like \"one two three four\"\
    .  It doesn't work if you have a string like \"one two three four\".\n<|/ c |>\n\
    <| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpugs92bcb.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpugs92bcb.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four\")\n</cell>\n<text>\n\
    Exercise 2\nWrite a function that takes a string and returns the string with all\
    \ vowels removed\n>>> remove_vowels(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick\
    \ brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n\
    >>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th quick\
    \ brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps over\
    \ the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"\
    The quick brown fox jumps over the lazy dog\")\n'Th quick brwn fx jumps ovr thy\
    \ lzy'\n>>> remove_vowels(\"The quick brown fox jumps over the lazy dog\")\n'Th\
    \ quick brwn fx jumps ovr thy lzy'\n>>> remove_vowels(\"The quick brown fox jumps\
    \ over the lazy dog\")\n'Th quick brwn fx jumps ovr thy l\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfogn7n_9.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfogn7n_9.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all the letters capitalized.\n    Valid strings are\
    \ 'hello', 'HELLO', 'HeLLo', 'hELLO', 'HeLlO', 'HellO', 'hello', 'HELLO', 'HeLLo',\
    \ 'hELLO', 'HeLlO', 'HellO'\n    >>> capitalize_letters(\"hello\")\n    'Hello'\n\
    \    >>> capitalize_letters(\"HELLO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HeLLo\")\n    'Hello'\n    >>> capitalize_letters(\"hELLO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HeLlO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HeLlO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n  \
    \  >>> capitalize_letters(\"HellO\")\n    'Hello'\n    >>> capitalize_letters(\"\
    HellO\")\n    'Hello'\n    >>> capitalize_letters(\"HellO\")\n    'Hello'\n\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpx37dtnew.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpx37dtnew.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n\
    </code>\n<|/ a tags=julia,sorting,string |>\n<| c |>\nThis doesn't seem to work.\
    \ `sort` doesn't seem to work on strings. `sort!` doesn't seem to work either.\
    \ `sort` seems to work only on arrays. `sort!` seems to work only on arrays. `sort`\
    \ seems to work only on arrays. `sort!` seems to work only on arrays. `sort` seems\
    \ to work only on arrays. `sort!` seems to work only on arrays. `sort` seems to\
    \ work only on arrays. `sort!` seems to work only on arrays. `sort` seems to work\
    \ only on arrays. `sort!` seems to work only on arrays. `sort` seems to work only\
    \ on arrays. `sort!` seems to work only on arrays. `sort` seems to work only on\
    \ arrays. `sort!` seems to work only on arrays. `sort` seems to work only on arrays.\
    \ `sort!` seems to work only on arrays. `sort` seems to work only on arrays. `sort!`\
    \ seems to work only on arrays. `sort` seems to work only on arrays. `sort!` seems\
    \ to work only on arrays. `sort` seems to work only on arrays. `sort!` seems to\
    \ work only on arrays. `sort` seems to work only on arrays. `sort!` seems to work\
    \ only on arrays. `sort` seems to work only on arrays. `sort!` seems to work only\
    \ on arrays. `sort` seems to work only on arrays. `sort!` seems to work only on\
    \ arrays. `sort` seems to work only on arrays. `sort!` seems to work only on arrays.\
    \ `sort` seems to work only on arrays. `sort!` seems to work only on arrays. `sort`\
    \ seems to work only on arrays. `sort!` seems to work only on arrays. `sort` seems\
    \ to work only on arrays. `sort!` seems to work only on arrays. `sort` seems to\
    \ work only on arrays. `sort!` seems to work only on arrays. `sort` seems to work\
    \ only on arrays. `sort!` seems to work only on arrays. `sort` seems to work only\
    \ on arrays. `sort!` seems to work only on arrays. `sort` seems to work only on\
    \ arrays. `sort!` seems to work only on arrays. `sort` seems to work only on arrays.\
    \ `sort!` seems to work only on arrays. `sort` seems to work only on arrays. `sort\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnq_3ema8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnq_3ema8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers(\"three one five\")\n</cell>\n<text>\nExercise: Write a function\
    \ that takes a string and returns a string with the first letter of each word\
    \ capitalized. For example, sort_caps(\"the quick brown fox jumped over the lazy\
    \ dog\") should return \"The Quick Brown Fox Jumped Over The Lazy Dog\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1dlk8zu8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1dlk8zu8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia,sorting,string |>\n<| a dscore=2 |>\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpr91j6v9p.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpr91j6v9p.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise\nWrite a function that takes a string and\
    \ returns the string with all numbers in descending order\ne.g. \"one two three\
    \ four five six seven eight nine\" -> \"nine eight seven six five four three two\
    \ one\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpq36oevcn.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpq36oevcn.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns the string with\
    \ all numbers in reverse order.\nFor example, the input \"one two three four five\
    \ six seven eight nine\" should return the string \"nine eight six five four three\
    \ two one\".\nWrite a test for this function.\nHint: Use a regular expression\
    \ to find all numbers in the string.\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsyzvibei.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsyzvibei.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    For example, \"The quick brown fox jumps over the lazy dog\"\
    \ becomes \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n    Make sure you handle\
    \ words that are less than 3 characters long.\n    Use a regular expression to\
    \ capitalize each word in the string.\n    Make sure you handle words that are\
    \ more than 3 characters long.\n    Use a regular expression to capitalize each\
    \ word in the string.\n    Make sure you handle words that are more than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Make sure you handle words that\
    \ are more than 3 characters long.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Make sure you handle words that are more than\
    \ 3 characters long.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Make sure you handle words that are more than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Make sure you handle words that\
    \ are more than 3 characters long.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Make sure you handle words that are more than\
    \ 3 characters long.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Make sure you handle words that are more than 3 characters\
    \ long.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Make sure you handle words that are more than 3 characters long.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Make sure you\
    \ handle words that are more than 3 characters long.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Make sure you handle words that\
    \ are more than 3 characters long.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Make sure you handle words that are more than\
    \ 3 characters long.\n    Use a regular expression to capitalize each word in\
    \ the string.\n    Make sure you handle words that are more than 3 characters\
    \ long\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpvkdwssff.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpvkdwssff.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = numbers.join(\" \")\n    return numbers\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6amj9o2u.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6amj9o2u.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpet1li16m.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpet1li16m.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpet1li16m.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n\
    <| a |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t\
    @test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t\
    @test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk36bveue.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk36bveue.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpj69m51we.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpj69m51we.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpj69m51we.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| c |>\nI believe this does\
    \ answer the question. OP wants to sort numbers in string format. Your answer\
    \ doesn't do that.\n<|/ c |>\n<| c |>\nThis doesn't answer the question. OP wants\
    \ to sort numbers in string format. Your answer doesn't do that.\n<|/ c |>\n<|\
    \ c |>\nThis doesn't answer the question. OP wants to sort numbers in string format.\
    \ Your answer doesn't do that.\n<|/ c |>\n<| c |>\nThis doesn't answer the question.\
    \ OP wants to sort numbers in string format. Your answer doesn't do that.\n<|/\
    \ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,string,python\
    \ |>\n<| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(' ')\n \
    \   numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| c |>\nThis doesn't answer the question. OP wants to sort numbers in string\
    \ format. Your answer doesn't do that.\n<|/ c |>\n<| a tags=sorting,string,python\
    \ |>\n<code>\ndef sort_numbers(\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2effopjs.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2effopjs.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with all numbers\
    \ reversed.\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ six seven eight nine\")\n\"nine eight six five four three two one \"\n>>> reverse(\"\
    one two three four five six seven eight nine\")\n\"nine eight six five four three\
    \ two one \"\n>>> reverse(\"one two three four five six seven eight nine\")\n\"\
    nine eight six five four three two one \"\n>>> reverse(\"one two three four five\
    \ si\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8g96j7hw.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8g96j7hw.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    numbers = \" \".join(numbers)\n    return numbers\n\
    </code>\n<|/ a tags=sorting,string,haskell |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpa1gx5r9b.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpa1gx5r9b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the words capitalized. \nThe input string may contain any number of words and\
    \ spaces.\nThe output string should not contain any spaces.\nThe output string\
    \ should not contain any punctuation marks.\nThe output string should not contain\
    \ any numbers.\nThe output string should not contain any special characters.\n\
    The output string should not contain any words that are longer than two characters.\n\
    The output string should not contain any words that are shorter than three characters.\n\
    The output string should not contain any words that are longer than five characters.\n\
    The output string should not contain any words that are shorter than three characters.\n\
    The output string should not contain any words that are longer than ten characters.\n\
    The output string should not contain any words that are shorter than five characters.\n\
    The output string should not contain any words that are shorter than ten characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any words that are longer than twenty characters.\n\
    The output string should not contain any words that are shorter than twenty characters.\n\
    The output string should not contain any \nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpyu0_0p0d.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpyu0_0p0d.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp40jhbkzb.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp40jhbkzb.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp40jhbkzb.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words in lowercase.\n    >>> sort_words(\"one\
    \ two three four five six seven eight nine\")\n    'one two three four five six\
    \ seven eight nine'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmq5yiysq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmq5yiysq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers = sort(numbers)\n    return join(numbers, ' ')\nend\n</cell>\n\
    <code language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphhemflrc.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphhemflrc.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = split(numbers,\
    \ \" \")\n    numbers.sort!\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the characters in lower case. \n    For example, sort_characters(\"\
    one two three four five six seven eight nine\") should return \"one two three\
    \ four five six seven eight nine\".\n    Use a for loop to iterate through the\
    \ characters in the string.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with an empty string.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use a regular expression to replace all non-alphanumeric characters with\
    \ a single space.\n    Use a regular expression to replace all non-alphanumeric\
    \ characters with a single space.\n    Use a regular expression to replace all\
    \ non-alphanumeric characters with a single space.\n    Use a regular expression\
    \ to replace all non-alphanumeric characters with a single space.\n    Use a regular\
    \ expression to replace all non-alphanumeric characters with a single space.\n\
    \    Use \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_h6iakbe.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_h6iakbe.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzw77kgs7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzw77kgs7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort!\n    numbers.join(' ')\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the string with all lowercase letters replaced with\
    \ uppercase letters.\n    Valid choices are 'hello' and 'HELLO'\n    >>> replace_lowercase('hello')\n\
    \    'HELLO'\n    >>> replace_lowercase('HELLO')\n    'HELLO'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpnio0nnj5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpnio0nnj5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all the\
    \ words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the\
    \ lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgu40jnxi.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgu40jnxi.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with all the characters\
    \ in lower case. \n>>> capitalize_string(\"hello world\")\n\"Hello World\"\n>>>\
    \ capitalize_string(\"hello\")\n\"Hello\"\n>>> capitalize_string(\"hello, world\"\
    )\n\"Hello, World\"\n>>> capitalize_string(\"hello, world!\")\n\"Hello, World!\"\
    \n>>> capitalize_string(\"hello, world! \")\n\"Hello, World! \" \n>>> capitalize_string(\"\
    hello, world! !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? \")\n\"\
    Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !\")\n\"Hello, World!\
    \ !\"\n>>> capitalize_string(\"hello, world! !? !?\")\n\"Hello, World! !\"\n>>>\
    \ capitalize_string(\"hello, world! !? !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"\
    hello, world! !? !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello,\
    \ world! !? !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !?\
    \ !? !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !?\
    \ !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !? !?\
    \ !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !? !?\
    \ !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !? !?\
    \ !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !? !?\
    \ !? !? \")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !? !?\
    \ !? !? !? !\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world! !?\
    \ !? !? !? !? !?\")\n\"Hello, World! !\"\n>>> capitalize_string(\"hello, world!\
    \ !? !? !\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp0kxqu14m.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp0kxqu14m.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| c |>\nWhile this code may answer the question, providing additional context\
    \ regarding why and/or how this code answers the question improves its long-term\
    \ value.\n<|/ c |>\n<| c |>\nWhile this code may answer the question, providing\
    \ additional context regarding why and/or how this code answers the question improves\
    \ its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a dscore=0\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 tags=sorting,python |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1kpxz7nl.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1kpxz7nl.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words capitalized.\n    For example, sort_words(\"\
    the quick brown fox jumped over the lazy dog\") should return the string \"The\
    \ Quick Brown Fox Jumped Over The Lazy Dog\"\n    >>> sort_words(\"the quick brown\
    \ fox jumped over the lazy dog\")\n    'The Quick Brown Fox Jumped Over The Lazy\
    \ Dog'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpmsxyxee7.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpmsxyxee7.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise 2\nWrite a function\
    \ that takes a string and returns the string with all lowercase letters replaced\
    \ by uppercase letters.\n>>> replace_letters('Hello World')\n'HELLO WORLD'\n>>>\
    \ replace_letters('Hello World!')\n'HELLO WORLD!'\n>>> replace_letters('Hello\
    \ World!!')\n'HELLO WORLD!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n\
    >>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello\
    \ World!!!')\n'HELLO WORLD!!!'\n>>> replace_letters('Hello World!!!')\n'HELLO\
    \ WORLD!!!'\n\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpexjzsd7z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpexjzsd7z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns the string with each word\
    \ capitalized.\n>>> capitalize_words(\"one two three\")\n'One Two Three'\n>>>\
    \ capitalize_words(\"one two three four\")\n'One Two Three Four'\n>>> capitalize_words(\"\
    one two three four five\")\n'One Two Three Four Five'\n>>> capitalize_words(\"\
    one two three four five six\")\n'One Two Three Four Five Six'\n>>> capitalize_words(\"\
    one two three four five six seven\")\n'One Two Three Four Five Six Seven'\n>>>\
    \ capitalize_words(\"one two three four five six seven eight\")\n'One Two Three\
    \ Four Five Six Seven Eight'\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine\")\n'One Two Three Four Five Six Seven Eight Nine'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten\")\n'One Two Three Four Five\
    \ Six Seven Eight Nine Ten'\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine ten eleven\")\n'One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven'\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten eleven twelve\")\n'One Two Three Four Five Six Seven Eight Nine Ten\
    \ Eleven Twelve'\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten eleven twelve thirteen\")\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_words(\"one two three four\
    \ five six seven eight nine ten eleven twelve thirteen fourteen\")\n'One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twel\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsx61683y.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsx61683y.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a dscore=2 |>\nI like using sort! for this:\n<code>\njulia> sort!(\"\
    one two three\")\n\"one two three\"\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| a |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two three\"\
    )\n\"one two three\"\n</code>\n<|/ a dscore=2 tags=sorting,string,julia |>\n<|\
    \ a dscore=2 |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two\
    \ three\")\n\"one two three\"\n</code>\n<|/ a tags=sorting,string,julia |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=2 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a dscore=1 |>\nI like using sort! for this:\n<code>\njulia> sort!(\"one two\
    \ three\")\n\"one two three\"\n</code>\n<|/ a tags=sorting,string,julia |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/ a dscore=1 |>\n<|\
    \ a tags=sorting,string,julia |>\nI like using sort! for this:\n<code>\njulia>\
    \ sort!(\"one two three\")\n\"one two three\"\n</code>\n<|/\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpv91xaat9.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpv91xaat9.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns the string with all numbers\
    \ in reverse order. \nFor example, sort_numbers(\"three one five\") should return\
    \ \"five one three\".\nHint: Use a regular expression to find all numbers in the\
    \ string.\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpot9qp9qr.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpot9qp9qr.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a tags=sorting,python,string |>\n<| a tags=sorting,python,string\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a dscore=0 |>\n<| c |>\nWhile this code may answer the\
    \ question, providing additional context regarding why and/or how this code answers\
    \ the question improves its long-term value.\n<|/ c |>\n<| a dscore=0 |>\n<code>\n\
    def sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers =\
    \ map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n\
    </code>\n<|/ a tags=sorting,python,string |>\n<| a tags=sorting,python,string\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python,string |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers\
    \ = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers = map(int, numbers)\n    numbers.sort()\n\
    \    return \" \".join(map(str, numbers))\n</code>\n<|/ a tags=sorting,python,string\
    \ |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers = map(int, numbers)\n    numbers.sort()\n    return \" \".join(map(str,\
    \ numbers))\n</code>\n<|/ a tags=sorting,python,string |>\n<| a |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers = map(int,\
    \ numbers)\n    numbers.sort()\n    return \" \".join(map(str, numbers))\n</code>\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpnea_fap7.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpnea_fap7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpsu8eqdz8.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpsu8eqdz8.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string as input and returns a string with all\
    \ the words capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The \nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpqjek6yve.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpqjek6yve.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers \"one two three\"` returns\
    \ `\"one two three\"`.\n<|/ c |>\n<| c |>\nIt works for me in GHCi 6.12.3 on OS\
    \ X 10.8.5\n<|/ c |>\n<| c |>\nI tested this in GHCi 6.12.3 on OS X 10.8.5 and\
    \ it works fine.\n<|/ c |>\n<| c |>\nI tested this in GHCi 6.12.3 on OS X 10.8.5\
    \ and it works fine.\n<|/ c |>\n<| c |>\nI tested this in GHCi 6.12.3 on OS X\
    \ 10.8.5 and it works fine.\n<|/ c |>\n<| a dscore=3 |>\n<code>\nimport Data.List\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdu90dme5.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdu90dme5.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6bafr4__.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6bafr4__.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    return join(numbers, \" \")\nend\n</cell>\n\
    <code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu_cuagl5.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu_cuagl5.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized.\n    For example, \"The quick brown fox jumps over the lazy dog\"\
    \ becomes \"The Quick Brown Fox Jumps Over The Lazy Dog\"\n    Your function should\
    \ ignore numbers and punctuation marks.\n    Use a regular expression to ignore\
    \ non-alphabetic characters (numbers and punctuation marks).\n    Use a regular\
    \ expression to ignore non-alphabetic characters (numbers and punctuation marks).\n\
    \    Use a regular expression to ignore non-alphabetic characters (numbers and\
    \ punctuation marks).\n    Use a regular expression to ignore non-alphabetic characters\
    \ (numbers and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-alphabetic characters (numbers and punctuation marks).\n    Use a\
    \ regular expression to ignore non-alphabetic characters (numbers and punctuation\
    \ marks).\n    Use a regular expression to ignore non-alphabetic characters (numbers\
    \ and punctuation marks).\n    Use a regular expression to ignore non-alphabetic\
    \ characters (numbers and punctuation marks).\n    Use a regular expression to\
    \ ignore non-\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdwpc1mrd.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdwpc1mrd.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ dscore=0 |>\n<| c |>\nWhile this code may answer the question, providing additional\
    \ context regarding how and/or why it solves the problem would improve the answer's\
    \ long-term value.\n<|/ c |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \"\
    )\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 tags=sorting,python |>\n<| a tags=sorting,python \nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpd42dkqgu.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpd42dkqgu.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp972lhz2u.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp972lhz2u.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmp96459n8x.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmp96459n8x.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmp96459n8x.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a tags=sorting,haskell,string |>\n<code>\nimport Data.List\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmph97ts479.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmph97ts479.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    sort_numbers('one three five')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string as input and returns a string with all the letters sorted from\
    \ smallest to largest.\n    Valid choices are 'a', 'b', 'c', 'd', 'e', 'f', 'g',\
    \ 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w',\
    \ 'x', 'y', 'z'.\n    >>> sort_letters('a b c d e f g h i j k l m n o p q r s\
    \ t u v w x y z')\n    'a b c d e f g h i j k l m n o p q r s t u v w x y z'\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj7x535ge.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj7x535ge.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpn53p8v06.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpn53p8v06.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\n</code>\n<|/ a |>\n<| c |>\nThanks for your answer! I tried to run\
    \ your code, but I got an error: `Error: No function clause matching in sort/2`\n\
    <|/ c |>\n<| c |>\nI edited my answer to include the full code I tested with.\
    \ Hope it helps!\n<|/ c |>\n<| c |>\nThanks for your answer! I tried to run your\
    \ code, but I got an error: `Error: No function clause matching in sort/2`\n<|/\
    \ c |>\n<| c |>\nI edited my answer to include the full code I tested with. Hope\
    \ it helps!\n<|/ c |>\n<| c |>\nThanks for your answer! I tried to run your code,\
    \ but I got an error: `Error: No function clause matching in sort/2`\n<|/ c |>\n\
    <| a dscore=2 |>\nHere's a solution that uses recursion:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_g09_8cv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_g09_8cv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = sort(numbers)\n    numbers\
    \ = join(numbers, \" \")\n    return numbers\n</code>\n<|/ a dscore=0 |>\n<| a\
    \ tags=sorting,haskell |>\nI wrote a function that sorts numbers from smallest\
    \ to largest:\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpe9qpvpn7.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpe9qpvpn7.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</code>\n<|/ a\
    \ tags=julia |>\n<| a tags=julia |>\n<code>\nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk9uy3_ir.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk9uy3_ir.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers = sort(numbers)\n    numbers = join(numbers, \" \")\n    return\
    \ numbers\nend\n</cell>\n<code language=julia-1.5>\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmppg0asiuv.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmppg0asiuv.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2dagd45v.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2dagd45v.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string and returns a string with the first\
    \ letter of each word capitalized.\n>>> capitalize_first_letter(\"hello world\"\
    )\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n\
    >>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n>>>\
    \ capitalize_first_letter(\"hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"\
    hello world\")\n'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n\
    'Hello World'\n>>> capitalize_first_letter(\"hello world\")\n'Hello World'\n\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpf6iemv6k.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpf6iemv6k.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string as input and returns the string with all\
    \ numbers in descending order.\n    Valid choices are 'zero', 'one', 'two', 'three',\
    \ 'four', 'five', 'six', 'seven', 'eight' and 'nine'.\n    >>> sort_numbers(\"\
    three one five\")\n    'five three one'\n    \"\"\"\nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp37wxche4.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp37wxche4.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return join(numbers, \" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ in lower case\n    separated by spaces.\n    \n    For example, \"The quick\
    \ brown fox jumps over the lazy dog\" becomes \"the quick brown fox jumps over\
    \ the\n    lazy dog\"\n    \n    Use split() to split a string into an array of\
    \ words.\n    Use map() to apply a function to each element of an array.\n   \
    \ Use join() to concatenate all the elements of the array into a string.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\n   \
    \ \n    You may use split() and map() and join() from Base or from Base.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp8_t1kpmo.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp8_t1kpmo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three\")\n</cell>\n<text>\nExercise\
    \ 4\nWrite a function that takes a string and returns the string with all the\
    \ words capitalized.\n>>> capitalize_words(\"one two three\")\n'One Two Three'\n\
    >>> capitalize_words(\"one two three four\")\n'One Two Three Four'\n>>> capitalize_words(\"\
    one two three four five\")\n'One Two Three Four Five'\n>>> capitalize_words(\"\
    one two three four five six\")\n'One Two Three Four Five Six'\n>>> capitalize_words(\"\
    one two three four five six seven\")\n'One Two Three Four Five Six Seven'\n>>>\
    \ capitalize_words(\"one two three four five six seven eight\")\n'One Two Three\
    \ Four Five Six Seven Eight'\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine\")\n'One Two Three Four Five Six Seven Eight Nine'\n>>> capitalize_words(\"\
    one two three four five six seven eight nine ten\")\n'One Two Three Four Five\
    \ Six Seven Eight Nine Ten'\n>>> capitalize_words(\"one two three four five six\
    \ seven eight nine ten eleven\")\n'One Two Three Four Five Six Seven Eight Nine\
    \ Ten Eleven'\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten eleven twelve\")\n'One Two Three Four Five Six Seven Eight Nine Ten\
    \ Eleven Twelve'\n>>> capitalize_words(\"one two three four five six seven eight\
    \ nine ten eleven twelve thirteen\")\n'One Two Three Four Five Six Seven Eight\
    \ Nine Ten Eleven Twelve Thirteen'\n>>> capitalize_words(\"one two three four\
    \ five six seven eight nine ten eleven twelve thirteen fourteen\")\n'One Two Three\
    \ Four Five Six Seven Eight Nine Ten Eleven Twelve \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpk1w3blxs.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpk1w3blxs.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words capitalized.\n    >>> capitalize_words(\"\
    one two three four five six seven eight nine\")\n    'One Two Three Four Five\
    \ Six Seven Eight Nine'\n    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6g2ofo2m.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6g2ofo2m.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers = numbers[2:]\n    numbers =\
    \ numbers.sort()\n    numbers = numbers.reverse()\n    numbers = \" \".join(numbers)\n\
    \    return numbers\n</code>\n<|/ a tags=sorting,string,julia |>\n<| a dscore=0\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpvrpkkdte.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpvrpkkdte.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four\")\n</cell>\n<text>\n\
    Exercise: Write a function that takes a string as input and returns a string with\
    \ all the words capitalized.\n    For example, sort_words(\"one two three four\"\
    ) should return \"One Two Three Four\".\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \    Use a regular expression to capitalize each word in the string.\n    Use\
    \ a regular expression to capitalize each word in the string.\n    Use a regular\
    \ expression to capitalize each word in the string.\n    Use a regular expression\
    \ to capitalize each word in the string.\n    Use a regular expression to capitalize\
    \ each word in the string.\n    Use a regular expression to capitalize each word\
    \ in the string.\n    Use a regular expression to capitalize each word in the\
    \ string.\n    Use a regular expression to capitalize each word in the string.\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbw942nfv.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbw942nfv.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    sort_numbers('three one five')\n</cell>\n<text>\nExercise: Write a function that\
    \ takes a string and returns the string with all numbers in reverse order. For\
    \ example, sort_numbers('three one five') should return 'five three one'.\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpfpk9fghz.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpfpk9fghz.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.1>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpkna_66c8.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpkna_66c8.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a dscore=0\
    \ |>\n<| a tags=sorting,string,haskell |>\n<code>\nimport Data.List (sortBy)\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpgo3wi3g0.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpgo3wi3g0.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise 2\nWrite a function that takes a string and\
    \ returns the string with all numbers in it sorted from smallest to largest.\n\
    For example, sort_numbers(\"one two three four five six seven eight nine\") should\
    \ return \"one two three four five six seven eight nine\".\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpo53czh9e.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpo53czh9e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise:\
    \ Write a function that takes a string and returns a string with all the words\
    \ capitalized\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n\
    \    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love Julia\" -> \"\
    I Love Julia\"\n    e.g. \"I love Julia\" -> \"I Love Julia\"\n    e.g. \"I love\
    \ Julia\" -> \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpl2h3w_qm.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpl2h3w_qm.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.4>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmped1cxfwm.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmped1cxfwm.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpdpmyv_1b.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpdpmyv_1b.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpxjsmq5lh.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpxjsmq5lh.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpxjsmq5lh.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers = sort(numbers)\n    return join(numbers, ' ')\nend\n</code>\n\
    <|/ a tags=julia,sorting,string |>\n<| a |>\nA more general solution that will\
    \ work with any number of numbers in any order:\n<code>\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp2zr2s5nh.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp2zr2s5nh.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\n</code>\n<|/ a |>\n<|\
    \ a |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \"\
    )\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python\
    \ dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a |>\n<code>\ndef sort_numbers(numbers):\n    numbers\
    \ = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python\
    \ |>\n<code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n\
    \    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n\
    <| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n    numbers =\
    \ numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n\
    <|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a tags=sorting,python |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n<code>\ndef sort_numbers(numbers):\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    </code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,python |>\n<code>\ndef\
    \ sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a dscore=0 |>\n<| a dscore=0 |>\n\
    <code>\ndef sort_numbers(numbers):\n    numbers = numbers.split(\" \")\n    numbers.sort()\n\
    \    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,python |>\n<| a tags=sorting,\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpb1v1tmi6.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpb1v1tmi6.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpzqc2uvcq.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpzqc2uvcq.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers.split(\" \")\n    numbers.sort()\n    return \" \".join(numbers)\n\
    end\n</cell>\n<code language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate\
    \ = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\"\
    ) == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five nine\"\
    )\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four five\
    \ seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmphtr4m9_o.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmphtr4m9_o.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a dscore=1\
    \ |>\n<| a dscore=0 |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpt19u8kbo.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpt19u8kbo.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.5>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphnkq8tr0.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphnkq8tr0.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| c |>\nI like your solution, but I wonder why you used `sort` instead\
    \ of `sortBy`?\n<|/ c |>\n<| c |>\nI used `sort` because I wanted to show how\
    \ to use `sortBy`. I didn't want to confuse the OP with `sortBy`.\n<|/ c |>\n\
    <| c |>\nI see. Thanks for your answer.\n<|/ c |>\n<| a tags=sorting,string,haskell\
    \ |>\n<code>\nimport Data.List\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp4xwlln33.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp4xwlln33.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_3_idp8e.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_3_idp8e.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\n</code>\n<|/ a tags=sorting,string,haskell\
    \ |>\n<| c |>\nThis doesn't work for me. `sort_numbers` returns `one three five`\
    \ instead of `one three five`.\n<|/ c |>\n<| c |>\nI tested it and it works. I\
    \ used the function you provided in your question. Are you sure you used the function\
    \ I provided? I tested it with `sort_numbers \"three one five\"` and it returned\
    \ `one three five`.\n<|/ c |>\n<| c |>\nYes, I used the function you provided\
    \ in your question. Are you sure you used the function I provided? I tested it\
    \ with `sort_numbers \"three one five\"` and it returned `one three five`.\n<|/\
    \ c |>\n<| c |>\nI used the function you provided in your question. Are you sure\
    \ you used the function I provided? I tested it with `sort_numbers \"three one\
    \ five\"` and it returned `one three five`.\n<|/ c |>\n<| c |>\nI used the function\
    \ you provided in your question. Are you sure you used the function I provided?\
    \ I tested it with `sort_numbers \"three one five\"` and it returned `one three\
    \ five`.\n<|/ c |>\n<| a dscore=1 |>\nI believe this should work:\n<code>\nimport\
    \ Data.List\nimport Data.Ord\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp6a5dhugk.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp6a5dhugk.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \    numbers = numbers[2:]\n    numbers = numbers[2:]\n    numbers = numbers[2:]\n\
    \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: missing last argument in \"2:\" range expression\
    \ \nStacktrace:\n [1] top-level scope at /tmp/tmpmyxo9qi0.jl:8\n [2] include(::Module,\
    \ ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n\
    \ [4] _start() at ./client.jl:484\nin expression starting at /tmp/tmpmyxo9qi0.jl:8\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\
    \t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\
    \t@test(candidate(\"three five nine\") == \"three five nine\")\n\t@test(candidate(\"\
    five zero four seven nine eight\") == \"zero four five seven eight nine\")\n\t\
    @test(candidate(\"six five four three two one zero\") == \"zero one two three\
    \ four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpu9exlsql.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpu9exlsql.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.5>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with each word capitalized.\n    For example, sort_words(\"\
    one two three four five six seven eight nine\") should return \"One Two Three\
    \ Four Five Six Seven Eight Nine\"\n    >>> sort_words(\"one two three four five\
    \ six seven eight nine\")\n    'One Two Three Four Five Six Seven Eight Nine'\n\
    \    \"\"\"\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp7cnwz27y.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp7cnwz27y.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    \"\"\"\n    Input\
    \ is a space-delimited string of numberals from 'zero' to 'nine'.\n    Valid choices\
    \ are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven', 'eight' and\
    \ 'nine'.\n    Return the string with numbers sorted from smallest to largest\n\
    \    >>> sort_numbers('three one five')\n    'one three five'\n    \"\"\"\nusing\
    \ Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\"\
    ) == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three\
    \ five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven\
    \ nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: incomplete: \"function\" at /tmp/tmpedosgk5f.jl:7\
    \ requires end\nStacktrace:\n [1] top-level scope at /tmp/tmpedosgk5f.jl:1\n [2]\
    \ include(::Module, ::String) at ./Base.jl:377\n [3] exec_options(::Base.JLOptions)\
    \ at ./client.jl:288\n [4] _start() at ./client.jl:484\nin expression starting\
    \ at /tmp/tmpedosgk5f.jl:1\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns a string with all the words in lower case\n    separated by spaces.\n\
    \    >>> sort_words(\"one two three four five six seven eight nine\")\n    'one\
    \ two three four five six seven eight nine'\n    \"\"\"\nusing Test\n\n@testset\
    \ begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp_pv0xjsb.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp_pv0xjsb.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.3>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 3\nWrite a function that takes a string as input and returns a string with all\
    \ the words capitalized.\n>>> capitalize_words(\"the quick brown fox jumps over\
    \ the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    the quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"the quick \nusing Test\n\n@testset begin\n\
    \ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpcyu8df89.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpcyu8df89.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split('\
    \ ')\n    numbers.sort()\n    return ' '.join(numbers)\n</code>\n<|/ a tags=sorting,string,julia\
    \ |>\n<| c |>\nThanks for your answer! I tried to run your code, but I got this\
    \ error `ERROR: LoadError: UndefVarError: sort_numbers not defined`. Any ideas\
    \ why?\n<|/ c |>\n<| c |>\nI forgot to add `sort_numbers` as a function to the\
    \ `sort` function. I edited my answer to include it.\n<|/ c |>\n<| c |>\nThanks\
    \ for your answer! I tried to run your code, but I got this error `ERROR: LoadError:\
    \ UndefVarError: sort_numbers not defined`. Any ideas why?\n<|/ c |>\n<| c |>\n\
    I forgot to add `sort_numbers` as a function to the `sort` function. I edited\
    \ my answer to include it.\n<|/ c |>\n<| c |>\nThanks for your answer! I tried\
    \ to run your code, but I got this error `ERROR: LoadError: UndefVarError: sort_numbers\
    \ not defined`. Any ideas why?\n<|/ c |>\n<| a tags=sorting,string,julia |>\n\
    I believe that this is what you are looking for:\n<code>\njulia> sort_numbers(\"\
    three one five\")\n\"one three five\"\n</code>\n<|/ a dscore=2 |>\n<| a tags=sorting,string,julia\
    \ |>\n<code>\nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpoi6uqhto.jl:11\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpoi6uqhto.jl:11\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    return numbers.join(\" \")\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ in the string capitalized.\n>>> capitalize_words(\"The quick brown fox jumps\
    \ over the lazy dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n\"The Quick Brown Fox Jumps Over The Lazy Dog\"\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n\"The Quick Brown Fox Jumps Over\
    \ The Lazy Dog\"\n>>> capitalize_words(\"The \nusing Test\n\n@testset begin\n\n\
    candidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\t@test(candidate(\"\
    three\") == \"three\")\n\t@test(candidate(\"three five nine\") == \"three five\
    \ nine\")\n\t@test(candidate(\"five zero four seven nine eight\") == \"zero four\
    \ five seven eight nine\")\n\t@test(candidate(\"six five four three two one zero\"\
    ) == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpj2xerr2z.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpj2xerr2z.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"one two three four five six seven eight\
    \ nine\")\n</cell>\n<text>\nExercise: Write a function that takes a string and\
    \ returns the string with all numbers in sorted order\n    separated by commas\n\
    \    >>> sort_numbers(\"one two three four five six seven eight nine\")\n    'one,\
    \ two, three, four, five, six, seven, eight, nine'\n    \"\"\"\nusing Test\n\n\
    @testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\")\n\
    \t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five nine\"\
    ) == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine eight\"\
    ) == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five four three\
    \ two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp1pudlc0i.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp1pudlc0i.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort!\n    numbers = join(numbers, \" \")\n    return numbers\n\
    end\n</code>\n<|/ a |>\n<| c |>\nThis doesn't work. `sort!` modifies the original\
    \ array, so the original string will be sorted as well.\n<|/ c |>\n<| c |>\nYes,\
    \ I noticed that after I posted my answer. I've edited my answer to fix it.\n\
    <|/ c |>\n<| a dscore=0 |>\nI came up with this solution:\n<code>\nusing Test\n\
    \n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\") == \"\"\
    )\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"three five\
    \ nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four seven nine\
    \ eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"six five\
    \ four three two one zero\") == \"zero one two three four five six\")\nend\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmp06v_kxib.jl:13\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmp06v_kxib.jl:13\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort\n    return \" \".join(numbers)\nend\n</cell>\n<code language=julia-1.0>\n\
    using Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmphagnq1qo.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmphagnq1qo.jl:12\n"
  exit_code: 1
  status: Exception
- program: "\"\"\" Input is a space-delimited string of numberals from 'zero' to 'nine'.\n\
    \    Valid choices are 'zero', 'one', 'two', 'three', 'four', 'five', 'six', 'seven',\
    \ 'eight' and 'nine'.\n    Return the string with numbers sorted from smallest\
    \ to largest\n    >>> sort_numbers('three one five')\n    'one three five'\n \
    \   \"\"\"\nfunction sort_numbers(numbers::String)::String \n    numbers = numbers.split(\"\
    \ \")\n    numbers.sort()\n    return \" \".join(numbers)\nend\n</cell>\n<code\
    \ language=julia-1.0>\nsort_numbers(\"three one five\")\n</cell>\n<text>\nExercise\
    \ 2\nWrite a function that takes a string and returns a string with all the words\
    \ capitalized.\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over\
    \ The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over\
    \ The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over\
    \ The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over\
    \ The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over\
    \ The Lazy Dog'\n>>> capitalize_words(\"The quick brown fox jumps over the lazy\
    \ dog\")\n'The Quick Brown Fox Jumps Over The Lazy Dog'\n>>> capitalize_words(\"\
    The quick brown fox jumps over the lazy dog\")\n'The Quick Brown Fox Jumps Over\
    \ The Lazy \nusing Test\n\n@testset begin\n\ncandidate = sort_numbers;\n\t@test(candidate(\"\
    \") == \"\")\n\t@test(candidate(\"three\") == \"three\")\n\t@test(candidate(\"\
    three five nine\") == \"three five nine\")\n\t@test(candidate(\"five zero four\
    \ seven nine eight\") == \"zero four five seven eight nine\")\n\t@test(candidate(\"\
    six five four three two one zero\") == \"zero one two three four five six\")\n\
    end\n"
  stdout: ''
  stderr: "ERROR: LoadError: syntax: \"<\" is not a unary operator\nStacktrace:\n\
    \ [1] top-level scope at /tmp/tmpbo2a06wg.jl:12\n [2] include(::Module, ::String)\
    \ at ./Base.jl:377\n [3] exec_options(::Base.JLOptions) at ./client.jl:288\n [4]\
    \ _start() at ./client.jl:484\nin expression starting at /tmp/tmpbo2a06wg.jl:12\n"
  exit_code: 1
  status: Exception
