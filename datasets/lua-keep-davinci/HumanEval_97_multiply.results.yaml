name: HumanEval_97_multiply
language: lua
results:
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n\treturn (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a_unit = a % 10\n    local b_unit = b\
    \ % 10\n    return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a1 = a % 10\n    local b1 = b % 10\n\
    \    return a1 * b1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local function unit(n)\n    return n % 10\n \
    \ end\n  return unit(a) * unit(b)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = tostring(a)\n  local b = tostring(b)\n\
    \  return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a_unit = a % 10\n    local b_unit = b\
    \ % 10\n    return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a, b = tostring(a), tostring(b)\n   \
    \ return tonumber(a:sub(-1, -1)) * tonumber(b:sub(-1, -1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local x = a % 10\n  local y = b % 10\n  return\
    \ x * y\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a, b = tostring(a), tostring(b)\n  return\
    \ tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = math.abs(a)\n    local b = math.abs(b)\n\
    \    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = tostring(a)\n  local b = tostring(b)\n\
    \  return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = math.abs(a)\n  local b = math.abs(b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = a % 10\n  local b = b % 10\n  return\
    \ a * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a_unit = a % 10\n    local b_unit = b\
    \ % 10\n    return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a%10) * (b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return tonumber(tostring(a):sub(-1)) * tonumber(tostring(b):sub(-1))\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = multiply\n\
    \    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a, b = tostring(a), tostring(b)\n   \
    \ return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = a % 10\n  local b = b % 10\n  return\
    \ a * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a_unit = a % 10\n  local b_unit = b % 10\n\
    \  return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = math.abs(a)\n  local b = math.abs(b)\n\
    \  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a_unit = a % 10\n  local b_unit = b % 10\n\
    \  return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = tostring(a)\n  local b = tostring(b)\n\
    \  return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a_unit = a % 10\n    local b_unit = b\
    \ % 10\n    return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = a % 10\n    local b = b % 10\n  \
    \  return a * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a, b = tostring(a), tostring(b)\n   \
    \ return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a, b = math.abs(a), math.abs(b)\n  return\
    \ (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a, b = tostring(a), tostring(b)\n  return\
    \ tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a_unit = a % 10\n  local b_unit = b % 10\n\
    \  return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a_unit = a % 10\n  local b_unit = b % 10\n\
    \  return a_unit * b_unit\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a, b = tostring(a), tostring(b)\n   \
    \ return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a, b = tostring(a), tostring(b)\n  return\
    \ tonumber(a:sub(-1, -1)) * tonumber(b:sub(-1, -1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a = tostring(a)\n  local b = tostring(b)\n\
    \  local a = tonumber(a:sub(-1))\n  local b = tonumber(b:sub(-1))\n  return a\
    \ * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a1 = a % 10\n    local b1 = b % 10\n\
    \    return a1 * b1\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  local a, b = math.abs(a), math.abs(b)\n  return\
    \ (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n   \
    \ lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = a % 10\n    local b = b % 10\n  \
    \  return a * b\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = multiply\n    lu.assertEquals(candidate(148, 412), 16)\n    lu.assertEquals(candidate(19,\
    \ 28), 72)\n    lu.assertEquals(candidate(2020, 1851), 0)\n    lu.assertEquals(candidate(14,\
    \ -15), 20)\n    lu.assertEquals(candidate(76, 67), 42)\n    lu.assertEquals(candidate(17,\
    \ 27), 49)\n    lu.assertEquals(candidate(0, 1), 0)\n    lu.assertEquals(candidate(0,\
    \ 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a%10)*(b%10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n  return (a % 10) * (b % 10)\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Complete the function that takes two integers and returns \n-- the\
    \ product of their unit digits.\n-- Assume the input is always valid.\n-- Examples:\n\
    -- multiply(148, 412) should return 16.\n-- multiply(19, 28) should return 72.\n\
    -- multiply(2020, 1851) should return 0.\n-- multiply(14,-15) should return 20.\n\
    local function multiply(a, b)\n    local a = tostring(a)\n    local b = tostring(b)\n\
    \    return tonumber(a:sub(-1)) * tonumber(b:sub(-1))\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = multiply\n    lu.assertEquals(candidate(148,\
    \ 412), 16)\n    lu.assertEquals(candidate(19, 28), 72)\n    lu.assertEquals(candidate(2020,\
    \ 1851), 0)\n    lu.assertEquals(candidate(14, -15), 20)\n    lu.assertEquals(candidate(76,\
    \ 67), 42)\n    lu.assertEquals(candidate(17, 27), 49)\n    lu.assertEquals(candidate(0,\
    \ 1), 0)\n    lu.assertEquals(candidate(0, 0), 0)\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
