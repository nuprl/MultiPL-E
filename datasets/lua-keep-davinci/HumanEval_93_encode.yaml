name: HumanEval_93_encode
language: lua
prompt: "-- Write a function that takes a message, and encodes in such a \n-- way\
  \ that it swaps case of all letters, replaces all vowels in \n-- the message with\
  \ the letter that appears 2 places ahead of that \n-- vowel in the english alphabet.\
  \ \n-- Assume only letters. \n-- Examples:\n-- >>> encode('test')\n-- 'TGST'\n--\
  \ >>> encode('This is a message')\n-- 'tHKS KS C MGSSCGG'\nlocal function encode(message)\n"
tests: "lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = encode\n\
  \    lu.assertEquals(candidate('TEST'), 'tgst')\n    lu.assertEquals(candidate('Mudasir'),\
  \ 'mWDCSKR')\n    lu.assertEquals(candidate('YES'), 'ygs')\n    lu.assertEquals(candidate('This\
  \ is a message'), 'tHKS KS C MGSSCGG')\n    lu.assertEquals(candidate('I DoNt KnOw\
  \ WhAt tO WrItE'), 'k dQnT kNqW wHcT Tq wRkTg')\nend\n\nos.exit(lu.LuaUnit.run())"
completions: ["    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        local is_upper = char:upper() == char\n       \
    \ local is_vowel = char:lower() == 'a' or char:lower() == 'e' or char:lower()\
    \ == 'i' or char:lower() == 'o' or char:lower() == 'u'\n        if is_vowel then\n\
    \            local next_char = message:sub(i + 1, i + 1)\n            local next_next_char\
    \ = message:sub(i + 2, i + 2)\n            if next_char and next_next_char then\n\
    \                char = next_char .. next_next_char\n            end\n       \
    \ end\n        if is_upper then\n            char = char:lower()\n        else\n\
    \            char = char:upper()\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[j\
    \ + 2]\n                break\n            end\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[j + 2]\n      \
    \      if next_vowel == nil then\n                next_vowel = vowels[1]\n   \
    \         end\n            encoded = encoded .. next_vowel\n        else\n   \
    \         if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "  local result = ''\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    if char:match('[a-z]')\
    \ then\n      char = char:upper()\n    elseif char:match('[A-Z]') then\n     \
    \ char = char:lower()\n    end\n    if char:match('[aeiou]') then\n      local\
    \ index = string.find('aeiou', char)\n      char = string.sub('aeiou', index +\
    \ 2, index + 2)\n    end\n    result = result .. char\n  end\n  return result\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[j + 2]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        local is_vowel = false\n        for j = 1, #vowels do\n       \
    \     if char == vowels[j] then\n                is_vowel = true\n           \
    \     char = vowels[(j + 2) % #vowels]\n            end\n        end\n       \
    \ if not is_vowel then\n            char = char:lower()\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - string.byte('a') + 2) % 26\n          \
    \  encoded = encoded .. string.char(string.byte('a') + index)\n        else\n\
    \            if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "  -- TODO:\
    \ Implement this function\nend", "  -- TODO: implement\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c == c:upper() then\n  \
    \          c = c:lower()\n        else\n            c = c:upper()\n        end\n\
    \        if table.indexof(vowels, c) then\n            local index = table.indexof(vowels,\
    \ c)\n            if index == #vowels then\n                index = 1\n      \
    \      else\n                index = index + 1\n            end\n            c\
    \ = vowels[index]\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char\
    \ == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n      end\n   \
    \ end\n    encoded = encoded .. char\n  end\n  return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    local\
    \ is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n\
    \        is_vowel = true\n        break\n      end\n    end\n    if is_vowel then\n\
    \      local next_vowel = vowels[((j + 2) % #vowels) + 1]\n      encoded = encoded\
    \ .. next_vowel\n    else\n      encoded = encoded .. char\n    end\n  end\n \
    \ return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for _, vowel\
    \ in ipairs(vowels) do\n            if char == vowel then\n                char\
    \ = vowels[(vowels[vowel] + 2) % 5]\n            end\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    for j = 1, #vowels do\n   \
    \   if char == vowels[j] then\n        char = vowels[(j + 2) % #vowels]\n    \
    \  end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        local is_vowel = false\n       \
    \ for j = 1, #vowels do\n            if char == vowels[j] then\n             \
    \   is_vowel = true\n                break\n            end\n        end\n   \
    \     if is_vowel then\n            local index = j + 2\n            if index\
    \ > #vowels then\n                index = index - #vowels\n            end\n \
    \           char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local index = (vowels[j] + 2) % #vowels\n      encoded\
    \ = encoded .. vowels[index]\n    else\n      encoded = encoded .. char:upper()\n\
    \    end\n  end\n  return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if vowels:find(char) then\n            local index = vowels:find(char)\n\
    \            char = vowels:sub(index + 2, index + 2)\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            char =\
    \ vowels[(table.indexOf(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexof(vowels, char) then\n            char =\
    \ vowels[(table.indexof(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            char =\
    \ vowels[(table.indexOf(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local isVowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        isVowel = true\n        break\n\
    \      end\n    end\n    if isVowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then\n        index = #vowels\n  \
    \    end\n      encoded = encoded .. vowels[index]\n    else\n      encoded =\
    \ encoded .. char\n    end\n  end\n  return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local c = message:sub(i, i)\n        if c == c:upper() then\n       \
    \     c = c:lower()\n        else\n            c = c:upper()\n        end\n  \
    \      for j = 1, #vowels do\n            if c == vowels[j] then\n           \
    \     c = vowels[(j + 2) % #vowels]\n            end\n        end\n        encoded\
    \ = encoded .. c\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    -- TODO: implement\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        char = vowels[(j + 2) % #vowels]\n      end\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local lower = char:lower()\n  \
    \      local upper = char:upper()\n        if lower == upper then\n          \
    \  encoded = encoded .. char\n        elseif lower == char then\n            encoded\
    \ = encoded .. upper\n        else\n            encoded = encoded .. lower\n \
    \       end\n        for j = 1, #vowels do\n            if lower == vowels[j]\
    \ then\n                local next = vowels[j + 2]\n                if next ==\
    \ nil then\n                    next = vowels[1]\n                end\n      \
    \          encoded = encoded:sub(1, -2) .. next\n            end\n        end\n\
    \    end\n    return encoded\nend", "\tlocal encoded = ''\n\tfor i = 1, #message\
    \ do\n\t\tlocal char = message:sub(i, i)\n\t\tif char:match('[a-z]') then\n\t\t\
    \tchar = char:upper()\n\t\telseif char:match('[A-Z]') then\n\t\t\tchar = char:lower()\n\
    \t\tend\n\t\tif char:match('[aeiou]') then\n\t\t\tlocal index = string.find('aeiou',\
    \ char)\n\t\t\tif index == 5 then\n\t\t\t\tchar = 'a'\n\t\t\telse\n\t\t\t\tchar\
    \ = 'aeiou':sub(index + 2, index + 2)\n\t\t\tend\n\t\tend\n\t\tencoded = encoded\
    \ .. char\n\tend\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 26 + 1\n        \
    \    char = string.char(index + 96)\n        end\n        if char:match('%a')\
    \ then\n            char = char:lower() == char and char:upper() or char:lower()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    local isVowel =\
    \ false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n        isVowel\
    \ = true\n        break\n      end\n    end\n    if isVowel then\n      local\
    \ nextVowel = vowels[j + 2]\n      if nextVowel == nil then\n        nextVowel\
    \ = vowels[1]\n      end\n      encoded = encoded .. nextVowel\n    else\n   \
    \   encoded = encoded .. char:lower()\n    end\n  end\n  return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if vowels:find(char) then\n            local index = vowels:find(char)\n\
    \            char = vowels:sub(index + 2, index + 2)\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    if char == char:upper() then\n      char = char:lower()\n\
    \    else\n      char = char:upper()\n    end\n    if table.contains(vowels, char)\
    \ then\n      local index = table.indexOf(vowels, char)\n      if index == #vowels\
    \ then\n        char = vowels[1]\n      else\n        char = vowels[index + 1]\n\
    \      end\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c:match('%a') then\n   \
    \         if c:match('%l') then\n                c = c:upper()\n            else\n\
    \                c = c:lower()\n            end\n            if vowels:find(c)\
    \ then\n                c = vowels:sub((vowels:find(c) + 2) % 5 + 1, (vowels:find(c)\
    \ + 2) % 5 + 1)\n            end\n        end\n        encoded = encoded .. c\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local c = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if c == vowels[j]\
    \ then\n        is_vowel = true\n        break\n      end\n    end\n    if is_vowel\
    \ then\n      local index = (c:byte() - 96) % 5 + 1\n      encoded = encoded ..\
    \ vowels[index]\n    else\n      if c == c:upper() then\n        encoded = encoded\
    \ .. c:lower()\n      else\n        encoded = encoded .. c:upper()\n      end\n\
    \    end\n  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i=1, #message do\n        local char =\
    \ message:sub(i, i)\n        local is_vowel = false\n        for j=1, #vowels\
    \ do\n            if char == vowels[j] then\n                is_vowel = true\n\
    \                break\n            end\n        end\n        if is_vowel then\n\
    \            local index = (string.find(vowels, char) + 2) % #vowels\n       \
    \     if index == 0 then\n                index = #vowels\n            end\n \
    \           char = vowels[index]\n        end\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ c = message:sub(i, i)\n        if c == c:upper() then\n            c = c:lower()\n\
    \        else\n            c = c:upper()\n        end\n        if table.contains(vowels,\
    \ c) then\n            local index = table.indexof(vowels, c)\n            c =\
    \ vowels[(index + 2) % #vowels + 1]\n        end\n        encoded = encoded ..\
    \ c\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local index = (string.find(vowels, char) + 2) % #vowels\n\
    \      encoded = encoded .. vowels[index]\n    else\n      encoded = encoded ..\
    \ char:upper()\n    end\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[j + 2]\n                break\n        \
    \    end\n        end\n        encoded = encoded .. char\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    char = vowels[(index + 2) % #vowels]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = {}\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded[#encoded + 1] = char\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  -- TODO: Implement this function\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for _, v in ipairs(vowels)\
    \ do\n            if char == v then\n                local index = (vowels[v]\
    \ + 2) % #vowels\n                char = vowels[index]\n            end\n    \
    \    end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local isVowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            local nextChar = message:sub(i\
    \ + 1, i + 1)\n            local nextNextChar = message:sub(i + 2, i + 2)\n  \
    \          if nextChar and nextNextChar then\n                encoded = encoded\
    \ .. nextNextChar\n            else\n                encoded = encoded .. char\n\
    \            end\n        else\n            if char == char:upper() then\n   \
    \             encoded = encoded .. char:lower()\n            else\n          \
    \      encoded = encoded .. char:upper()\n            end\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local isVowel = false\n        for j = 1, #vowels do\n         \
    \   if char == vowels[j] then\n                isVowel = true\n              \
    \  break\n            end\n        end\n        if isVowel then\n            local\
    \ index = (string.find(vowels, char) + 2) % #vowels\n            if index == 0\
    \ then\n                index = #vowels\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char:upper()\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[j + 2]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ c = message:sub(i, i)\n        local is_vowel = false\n        for j = 1, #vowels\
    \ do\n            if c == vowels[j] then\n                is_vowel = true\n  \
    \              break\n            end\n        end\n        if is_vowel then\n\
    \            local next_vowel = vowels[(j % #vowels) + 1]\n            encoded\
    \ = encoded .. next_vowel\n        else\n            encoded = encoded .. c\n\
    \        end\n    end\n    return encoded:upper()\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[j % #vowels + 1]\n\
    \            encoded = encoded .. next_vowel\n        else\n            encoded\
    \ = encoded .. char\n        end\n    end\n    return encoded\nend", "  local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    local isVowel = false\n    for j\
    \ = 1, #vowels do\n      if char == vowels[j] then\n        isVowel = true\n \
    \       break\n      end\n    end\n    if isVowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then index = #vowels end\n      encoded\
    \ = encoded .. vowels[index]\n    else\n      encoded = encoded .. char\n    end\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexof(vowels, char) then\n            char = vowels[(table.indexof(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = (string.byte(char) - 96) % 5 + 1\n         \
    \   encoded = encoded .. vowels[index]\n        else\n            if string.byte(char)\
    \ >= 97 and string.byte(char) <= 122 then\n                encoded = encoded ..\
    \ string.char(string.byte(char) - 32)\n            elseif string.byte(char) >=\
    \ 65 and string.byte(char) <= 90 then\n                encoded = encoded .. string.char(string.byte(char)\
    \ + 32)\n            else\n                encoded = encoded .. char\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local is_vowel = false\n    \
    \    for j = 1, #vowels do\n            if char == vowels[j] then\n          \
    \      is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = string.find(vowels, char)\n\
    \            if index == #vowels then\n                index = 1\n           \
    \ else\n                index = index + 1\n            end\n            char =\
    \ vowels[index]\n        end\n        if char == char:upper() then\n         \
    \   char = char:lower()\n        else\n            char = char:upper()\n     \
    \   end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local\
    \ encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n\
    \    if char == char:upper() then\n      char = char:lower()\n    else\n     \
    \ char = char:upper()\n    end\n    if table.indexOf(vowels, char) then\n    \
    \  char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n    end\n    encoded\
    \ = encoded .. char\n  end\n  return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local c = message:sub(i, i)\n        if c:match('%a')\
    \ then\n            if c:match('%l') then\n                c = c:upper()\n   \
    \         else\n                c = c:lower()\n            end\n            if\
    \ table.indexOf(vowels, c:lower()) then\n                local index = table.indexOf(vowels,\
    \ c:lower())\n                c = vowels[(index + 2) % 5 + 1]\n            end\n\
    \        end\n        encoded = encoded .. c\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % 5 + 1]\n        break\n      end\n    end\n    encoded = encoded .. char\n\
    \  end\n  return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local is_upper = char:upper()\
    \ == char\n        local is_vowel = vowels:find(char:lower())\n        if is_vowel\
    \ then\n            local index = alphabet:find(char:lower())\n            local\
    \ next_index = index + 2\n            if next_index > #alphabet then\n       \
    \         next_index = next_index - #alphabet\n            end\n            char\
    \ = alphabet:sub(next_index, next_index)\n        end\n        if is_upper then\n\
    \            char = char:upper()\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local encoded = ''\n  for i = 1, #message\
    \ do\n    local char = message:sub(i, i)\n    if char:match('[a-z]') then\n  \
    \    char = char:lower()\n      local index = string.find(alphabet, char)\n  \
    \    if char:match('[aeiou]') then\n        index = index + 2\n        if index\
    \ > #alphabet then\n          index = index - #alphabet\n        end\n      end\n\
    \      char = alphabet:sub(index, index)\n    end\n    encoded = encoded .. char:upper()\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            local index = table.indexOf(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 2\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local c = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if c == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local v = c:byte() + 2\n \
    \           if v > 122 then\n                v = v - 26\n            end\n   \
    \         c = string.char(v)\n        end\n        if c == c:upper() then\n  \
    \          c = c:lower()\n        else\n            c = c:upper()\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexOf(vowels, char) then\n            local index\
    \ = table.indexOf(vowels, char)\n            char = vowels[index + 2]\n      \
    \  end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % 5 + 1]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_char = message:sub(i + 1, i\
    \ + 1)\n            local next_next_char = message:sub(i + 2, i + 2)\n       \
    \     if next_char == 'z' then\n                next_char = 'a'\n            elseif\
    \ next_char == 'Z' then\n                next_char = 'A'\n            else\n \
    \               next_char = string.char(next_char:byte() + 1)\n            end\n\
    \            if next_next_char == 'z' then\n                next_next_char = 'a'\n\
    \            elseif next_next_char == 'Z' then\n                next_next_char\
    \ = 'A'\n            else\n                next_next_char = string.char(next_next_char:byte()\
    \ + 1)\n            end\n            result = result .. next_next_char\n     \
    \   else\n            if char == char:upper() then\n                result = result\
    \ .. char:lower()\n            else\n                result = result .. char:upper()\n\
    \            end\n        end\n    end\n    return result\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local index = (string.byte(char) - 96)\
    \ % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n    \
    \        if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "  local alphabet =\
    \ 'ABCDEFGHIJKLMNOPQRSTUVWXYZ'\n  local vowels = 'AEIOU'\n  local encoded = ''\n\
    \  for i = 1, #message do\n    local c = message:sub(i, i)\n    if c == c:upper()\
    \ then\n      c = c:lower()\n    else\n      c = c:upper()\n    end\n    if vowels:find(c)\
    \ then\n      local index = vowels:find(c)\n      c = vowels:sub((index % #vowels)\
    \ + 1, (index % #vowels) + 1)\n    end\n    encoded = encoded .. c\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[j +\
    \ 2]\n                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local result = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        if c == c:upper() then\n  \
    \          result = result .. c:lower()\n        else\n            result = result\
    \ .. c:upper()\n        end\n        for _, v in ipairs(vowels) do\n         \
    \   if c == v then\n                result = result .. v\n            end\n  \
    \      end\n    end\n    return result\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        local is_vowel = false\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local is_vowel = false\n    \
    \    for j = 1, #vowels do\n            if char == vowels[j] then\n          \
    \      is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[j + 2]\n    \
    \        if next_vowel == nil then\n                next_vowel = vowels[1]\n \
    \           end\n            encoded = encoded .. next_vowel\n        else\n \
    \           encoded = encoded .. char:upper()\n        end\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % 5 + 1]\n                break\n            end\n        end\n       \
    \ encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local new_message = ''\n    for i = 1, #message\
    \ do\n        local c = message:sub(i, i)\n        local is_vowel = false\n  \
    \      for j = 1, #vowels do\n            if c == vowels[j] then\n           \
    \     is_vowel = true\n                break\n            end\n        end\n \
    \       if is_vowel then\n            local index = (string.byte(c) - string.byte('a')\
    \ + 2) % 26\n            new_message = new_message .. string.char(string.byte('a')\
    \ + index)\n        else\n            new_message = new_message .. c\n       \
    \ end\n    end\n    return new_message\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels do\n \
    \     if char == vowels[j] then\n        is_vowel = true\n        break\n    \
    \  end\n    end\n    if is_vowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then index = #vowels end\n      encoded\
    \ = encoded .. vowels[index]\n    else\n      encoded = encoded .. char\n    end\n\
    \  end\n  return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local is_vowel = false\n    \
    \    for j = 1, #vowels do\n            if char == vowels:sub(j, j) then\n   \
    \             is_vowel = true\n                break\n            end\n      \
    \  end\n        if is_vowel then\n            local index = alphabet:find(char)\n\
    \            if index + 2 > #alphabet then\n                index = index + 2\
    \ - #alphabet\n            else\n                index = index + 2\n         \
    \   end\n            encoded = encoded .. alphabet:sub(index, index)\n       \
    \ else\n            if char == char:upper() then\n                encoded = encoded\
    \ .. char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % 5 + 1]\n                break\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            char = next_vowel:upper()\n\
    \        else\n            char = char:lower()\n        end\n        encoded[#encoded\
    \ + 1] = char\n    end\n    return table.concat(encoded)\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local lower = char:lower()\n    if lower\
    \ == char then\n      char = char:upper()\n    end\n    if table.indexOf(vowels,\
    \ lower) then\n      local index = table.indexOf(vowels, lower)\n      char =\
    \ vowels[(index + 2) % 5 + 1]\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) + 2) % 122\n            if index < 97 then\n\
    \                index = index + 96\n            end\n            char = string.char(index)\n\
    \        end\n        encoded[i] = char:upper()\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = ((string.byte(char)\
    \ - 96) + 2) % 26\n            if index == 0 then\n                index = 26\n\
    \            end\n            encoded = encoded .. string.char(index + 96)\n \
    \       else\n            if char == char:upper() then\n                encoded\
    \ = encoded .. char:lower()\n            else\n                encoded = encoded\
    \ .. char:upper()\n            end\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = {'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            for j = 1, #alphabet do\n   \
    \             if char == alphabet[j] then\n                    if j + 2 > #alphabet\
    \ then\n                        encoded = encoded .. alphabet[j + 2 - #alphabet]\n\
    \                    else\n                        encoded = encoded .. alphabet[j\
    \ + 2]\n                    end\n                    break\n                end\n\
    \            end\n        else\n            if char == char:upper() then\n   \
    \             encoded = encoded .. char:lower()\n            else\n          \
    \      encoded = encoded .. char:upper()\n            end\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local char = message:sub(i, i)\n    if char == char:upper()\
    \ then\n      char = char:lower()\n    else\n      char = char:upper()\n    end\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        char = vowels[(j\
    \ + 2) % #vowels]\n      end\n    end\n    encoded = encoded .. char\n  end\n\
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    char = vowels[(index + 2) % #vowels]\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexOf(vowels, char) then\n            char = vowels[(table.indexOf(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        local index = alphabet:find(lower)\n        if index then\n         \
    \   if lower == char then\n                encoded = encoded .. alphabet:sub(index,\
    \ index):upper()\n            else\n                encoded = encoded .. alphabet:sub(index,\
    \ index)\n            end\n        else\n            encoded = encoded .. char\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        local is_vowel = false\n        for\
    \ j = 1, #vowels do\n            if char == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local next_vowel = vowels[(j % #vowels) + 1]\n           \
    \ encoded = encoded .. next_vowel\n        else\n            encoded = encoded\
    \ .. char:upper()\n        end\n    end\n    return encoded\nend", "\tlocal vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n\tlocal encoded = ''\n\tfor i = 1, #message do\n\
    \t\tlocal char = message:sub(i, i)\n\t\tlocal lower = char:lower()\n\t\tif lower\
    \ == char then\n\t\t\tchar = char:upper()\n\t\tend\n\t\tif lower == 'z' then\n\
    \t\t\tlower = 'a'\n\t\telseif lower == 'y' then\n\t\t\tlower = 'z'\n\t\telse\n\
    \t\t\tlower = string.char(lower:byte() + 2)\n\t\tend\n\t\tfor _, vowel in ipairs(vowels)\
    \ do\n\t\t\tif lower == vowel then\n\t\t\t\tchar = lower\n\t\t\t\tbreak\n\t\t\t\
    end\n\t\tend\n\t\tencoded = encoded .. char\n\tend\n\treturn encoded\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        table.insert(encoded, char)\n    end\n    return table.concat(encoded)\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        local isVowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          isVowel = true\n                break\n            end\n        end\n\
    \        if isVowel then\n            local index = j + 2\n            if index\
    \ > #vowels then\n                index = index - #vowels\n            end\n \
    \           char = vowels[index]\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local result = ''\n    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    for i = 1, #message do\n        local char =\
    \ message:sub(i, i)\n        if char == char:upper() then\n            char =\
    \ char:lower()\n        else\n            char = char:upper()\n        end\n \
    \       if table.indexOf(vowels, char) then\n            char = vowels[(table.indexOf(vowels,\
    \ char) + 2) % 5]\n        end\n        result = result .. char\n    end\n   \
    \ return result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n\
    \        if c:lower() == c then\n            c = c:upper()\n        else\n   \
    \         c = c:lower()\n        end\n        for j = 1, #vowels do\n        \
    \    if c == vowels[j] then\n                c = vowels[(j + 2) % #vowels]\n \
    \           end\n        end\n        encoded = encoded .. c\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n     \
    \   end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[j + 2]\n      \
    \      if next_vowel == nil then\n                next_vowel = vowels[1]\n   \
    \         end\n            encoded = encoded .. next_vowel\n        else\n   \
    \         encoded = encoded .. char:upper()\n        end\n    end\n    return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[(j + 2) % #vowels]\n            encoded = encoded .. next_vowel\n \
    \       else\n            encoded = encoded .. char:upper()\n        end\n   \
    \ end\n    return encoded\nend", end, "    local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        local isVowel = false\n        for j = 1, #vowels\
    \ do\n            if char == vowels[j] then\n                isVowel = true\n\
    \                break\n            end\n        end\n        if isVowel then\n\
    \            local index = (string.find(vowels, char) + 2) % #vowels\n       \
    \     if index == 0 then\n                index = #vowels\n            end\n \
    \           char = vowels[index]\n        end\n        encoded = encoded .. char:upper()\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char:match('[a-z]') then\n            encoded\
    \ = encoded .. char:upper()\n        elseif char:match('[A-Z]') then\n       \
    \     encoded = encoded .. char:lower()\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if char == 'a' then\n            char = 'c'\n        elseif\
    \ char == 'e' then\n            char = 'g'\n        elseif char == 'i' then\n\
    \            char = 'k'\n        elseif char == 'o' then\n            char = 'm'\n\
    \        elseif char == 'u' then\n            char = 'q'\n        end\n      \
    \  encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = {}\n    local index = 1\n \
    \   for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local next_index = table.index_of(vowels, char) + 2\n\
    \            if next_index > #vowels then\n                next_index = next_index\
    \ - #vowels\n            end\n            char = vowels[next_index]\n        end\n\
    \        encoded[index] = char\n        index = index + 1\n    end\n    return\
    \ table.concat(encoded)\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match('%a') then\n  \
    \          local is_upper = char:match('%u')\n            local is_vowel = char:match('[aeiou]')\n\
    \            local index = alphabet:find(char:lower())\n            if is_vowel\
    \ then\n                index = index + 2\n                if index > #alphabet\
    \ then\n                    index = index - #alphabet\n                end\n \
    \           end\n            char = alphabet:sub(index, index)\n            if\
    \ is_upper then\n                char = char:upper()\n            end\n      \
    \  end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = {'a', 'b', 'c',\
    \ 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's',\
    \ 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local encoded_message = ''\n    for\
    \ i=1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j=1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = 0\n           \
    \ for j=1, #alphabet do\n                if char == alphabet[j] then\n       \
    \             index = j\n                    break\n                end\n    \
    \        end\n            local new_index = index + 2\n            if new_index\
    \ > #alphabet then\n                new_index = new_index - #alphabet\n      \
    \      end\n            char = alphabet[new_index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded_message = encoded_message\
    \ .. char\n    end\n    return encoded_message\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        local isVowel = false\n        for j = 1, #vowels do\n \
    \           if char == vowels[j] then\n                isVowel = true\n      \
    \          break\n            end\n        end\n        if isVowel then\n    \
    \        local index = j + 2\n            if index > #vowels then\n          \
    \      index = index - #vowels\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = {}\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local next_vowel = vowels[j + 2]\n      if not next_vowel\
    \ then\n        next_vowel = vowels[1]\n      end\n      table.insert(encoded,\
    \ next_vowel)\n    else\n      table.insert(encoded, char:upper())\n    end\n\
    \  end\n  return table.concat(encoded)\nend", "  local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char =\
    \ message:sub(i, i)\n    local isVowel = false\n    for j = 1, #vowels do\n  \
    \    if char == vowels[j] then\n        isVowel = true\n        break\n      end\n\
    \    end\n    if isVowel then\n      local index = (string.find(vowels, char)\
    \ + 2) % 5\n      if index == 0 then index = 5 end\n      char = vowels[index]\n\
    \    end\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded\
    \ = ''\n  for i = 1, #message do\n    local char = message:sub(i, i)\n    local\
    \ is_vowel = false\n    for j = 1, #vowels do\n      if char == vowels[j] then\n\
    \        is_vowel = true\n        break\n      end\n    end\n    if is_vowel then\n\
    \      local next_vowel = vowels[j + 2]\n      if not next_vowel then\n      \
    \  next_vowel = vowels[1]\n      end\n      encoded = encoded .. next_vowel\n\
    \    else\n      encoded = encoded .. char:upper()\n    end\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            char = vowels[(table.indexof(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % 5 + 1]\n                break\n            end\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "  local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local\
    \ char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1, #vowels\
    \ do\n      if char == vowels[j] then\n        is_vowel = true\n        break\n\
    \      end\n    end\n    if is_vowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then\n        index = #vowels\n  \
    \    end\n      char = vowels[index]\n    end\n    encoded = encoded .. char:upper()\n\
    \  end\n  return encoded\nend", "    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char:match('[aeiou]')\
    \ then\n            local index = string.find(vowels, char)\n            encoded\
    \ = encoded .. vowels:sub(index + 2, index + 2)\n        elseif char:match('[AEIOU]')\
    \ then\n            local index = string.find(vowels:upper(), char)\n        \
    \    encoded = encoded .. vowels:sub(index + 2, index + 2):upper()\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            char = vowels[index]\n        end\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        encoded = encoded .. char\n \
    \   end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexOf(vowels,\
    \ char) then\n            char = vowels[(table.indexOf(vowels, char) + 2) % 5]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local letter = message:sub(i, i)\n      \
    \  local is_vowel = false\n        for j = 1, #vowels do\n            if letter\
    \ == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local next_vowel\
    \ = vowels[((j + 2) % #vowels) + 1]\n            encoded = encoded .. next_vowel\n\
    \        else\n            encoded = encoded .. letter\n        end\n    end\n\
    \    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n   \
    \ local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.indexof(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                char = vowels[1]\n            else\n\
    \                char = vowels[index + 1]\n            end\n        end\n    \
    \    encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encodedMessage = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local isVowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                isVowel = true\n                break\n            end\n    \
    \    end\n        if isVowel then\n            char = string.char(string.byte(char)\
    \ + 2)\n        end\n        if char == 'z' then\n            char = 'b'\n   \
    \     elseif char == 'Z' then\n            char = 'B'\n        end\n        if\
    \ char == 'y' then\n            char = 'a'\n        elseif char == 'Y' then\n\
    \            char = 'A'\n        end\n        if char == 'x' then\n          \
    \  char = 'Z'\n        elseif char == 'X' then\n            char = 'z'\n     \
    \   end\n        if char == 'w' then\n            char = 'Y'\n        elseif char\
    \ == 'W' then\n            char = 'y'\n        end\n        if char == 'v' then\n\
    \            char = 'X'\n        elseif char == 'V' then\n            char = 'x'\n\
    \        end\n        if char == 'u' then\n            char = 'W'\n        elseif\
    \ char == 'U' then\n            char = 'w'\n        end\n        if char == 't'\
    \ then\n            char = 'V'\n        elseif char == 'T' then\n            char\
    \ = 'v'\n        end\n        if char == 's' then\n            char = 'U'\n  \
    \      elseif char == 'S' then\n            char = 'u'\n        end\n        if\
    \ char == 'r' then\n            char = 'T'\n        elseif char == 'R' then\n\
    \            char = 't'\n        end\n        if char == 'q' then\n          \
    \  char = 'S'\n        elseif char == 'Q' then\n            char = 's'\n     \
    \   end\n        if char == 'p' then\n            char = 'R'\n        elseif char\
    \ ==", "    local encoded = ''\n    for i = 1, #message do\n        local char\
    \ = message:sub(i, i)\n        if char:match('[a-z]') then\n            encoded\
    \ = encoded .. char:upper()\n        elseif char:match('[A-Z]') then\n       \
    \     encoded = encoded .. char:lower()\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       if char == char:upper() then\n            char = char:lower()\n      \
    \  else\n            char = char:upper()\n        end\n        if char == 'a'\
    \ then\n            char = 'c'\n        elseif char == 'e' then\n            char\
    \ = 'g'\n        elseif char == 'i' then\n            char = 'k'\n        elseif\
    \ char == 'o' then\n            char = 'q'\n        elseif char == 'u' then\n\
    \            char = 'y'\n        end\n        encoded = encoded .. char\n    end\n\
    \    return encoded\nend", "    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match('[a-z]') then\n\
    \            encoded = encoded .. char:upper()\n        elseif char:match('[A-Z]')\
    \ then\n            encoded = encoded .. char:lower()\n        else\n        \
    \    encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = (string.byte(char)\
    \ - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n\
    \            if string.byte(char) >= 65 and string.byte(char) <= 90 then\n   \
    \             encoded = encoded .. string.char(string.byte(char) + 32)\n     \
    \       elseif string.byte(char) >= 97 and string.byte(char) <= 122 then\n   \
    \             encoded = encoded .. string.char(string.byte(char) - 32)\n     \
    \       else\n                encoded = encoded .. char\n            end\n   \
    \     end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ letter = message:sub(i, i)\n        local is_vowel = false\n        for j =\
    \ 1, #vowels do\n            if letter == vowels[j] then\n                is_vowel\
    \ = true\n                break\n            end\n        end\n        if is_vowel\
    \ then\n            local index = string.find(vowels, letter)\n            local\
    \ next_index = index + 2\n            if next_index > #vowels then\n         \
    \       next_index = next_index - #vowels\n            end\n            encoded\
    \ = encoded .. vowels[next_index]\n        else\n            encoded = encoded\
    \ .. letter\n        end\n    end\n    return encoded\nend", "  local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        is_vowel = true\n     \
    \   break\n      end\n    end\n    if is_vowel then\n      local index = string.find(vowels,\
    \ char)\n      local next_index = index + 2\n      if next_index > #vowels then\n\
    \        next_index = next_index - #vowels\n      end\n      char = vowels[next_index]\n\
    \    end\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local c = message:sub(i, i)\n    \
    \    local is_vowel = false\n        for j = 1, #vowels do\n            if c ==\
    \ vowels[j] then\n                is_vowel = true\n                break\n   \
    \         end\n        end\n        if is_vowel then\n            local index\
    \ = (c:byte() - 96) % 5 + 1\n            encoded = encoded .. vowels[index]\n\
    \        else\n            if c:byte() >= 97 and c:byte() <= 122 then\n      \
    \          encoded = encoded .. string.char(c:byte() - 32)\n            elseif\
    \ c:byte() >= 65 and c:byte() <= 90 then\n                encoded = encoded ..\
    \ string.char(c:byte() + 32)\n            else\n                encoded = encoded\
    \ .. c\n            end\n        end\n    end\n    return encoded\nend", "   \
    \ local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local c = message:sub(i, i)\n        if c == c:upper()\
    \ then\n            c = c:lower()\n        else\n            c = c:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if c == vowels[j] then\n\
    \                c = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. c\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "\tlocal vowels = {'a', 'e', 'i', 'o', 'u'}\n\tlocal\
    \ encoded = ''\n\tfor i = 1, #message do\n\t\tlocal char = message:sub(i, i)\n\
    \t\tlocal is_vowel = false\n\t\tfor j = 1, #vowels do\n\t\t\tif char == vowels[j]\
    \ then\n\t\t\t\tis_vowel = true\n\t\t\t\tbreak\n\t\t\tend\n\t\tend\n\t\tif is_vowel\
    \ then\n\t\t\tlocal next_vowel = vowels[(j % #vowels) + 1]\n\t\t\tencoded = encoded\
    \ .. next_vowel\n\t\telse\n\t\t\tencoded = encoded .. char:lower()\n\t\tend\n\t\
    end\n\treturn encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n \
    \   local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    if index == #vowels then\n                index = 1\n            else\n \
    \               index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('%a') then\n            local index = alphabet:find(char:lower())\n\
    \            if index then\n                local new_index = index + 2\n    \
    \            if new_index > #alphabet then\n                    new_index = new_index\
    \ - #alphabet\n                end\n                local new_char = alphabet:sub(new_index,\
    \ new_index)\n                if vowels:find(new_char) then\n                \
    \    new_char = new_char:upper()\n                end\n                encoded\
    \ = encoded .. new_char\n            end\n        else\n            encoded =\
    \ encoded .. char\n        end\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded[#encoded + 1]\
    \ = char\n    end\n    return table.concat(encoded)\nend", "  local result = ''\n\
    \  for i = 1, #message do\n    local char = message:sub(i, i)\n    local is_upper\
    \ = char:upper() == char\n    local is_lower = char:lower() == char\n    local\
    \ is_vowel = char:lower() == 'a' or char:lower() == 'e' or char:lower() == 'i'\
    \ or char:lower() == 'o' or char:lower() == 'u'\n    if is_upper then\n      char\
    \ = char:lower()\n    elseif is_lower then\n      char = char:upper()\n    end\n\
    \    if is_vowel then\n      local next_char = char:byte() + 2\n      if next_char\
    \ > 122 then\n        next_char = next_char - 26\n      end\n      char = string.char(next_char)\n\
    \    end\n    result = result .. char\n  end\n  return result\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[j + 2]\n    \
    \        if next_vowel == nil then\n                next_vowel = vowels[1]\n \
    \           end\n            encoded = encoded .. next_vowel\n        else\n \
    \           if char == char:upper() then\n                encoded = encoded ..\
    \ char:lower()\n            else\n                encoded = encoded .. char:upper()\n\
    \            end\n        end\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[j + 2]\n       \
    \         break\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        for j = 1,\
    \ #vowels do\n            if char == vowels[j] then\n                char = vowels[(j\
    \ + 2) % #vowels]\n            end\n        end\n        encoded = encoded ..\
    \ char\n    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o',\
    \ 'u'}\n  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local next_vowel = vowels[j + 2]\n      if next_vowel\
    \ == nil then\n        next_vowel = vowels[1]\n      end\n      encoded = encoded\
    \ .. next_vowel\n    else\n      encoded = encoded .. char\n    end\n  end\n \
    \ return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[j + 2]\n            if next_vowel == nil then\n\
    \                next_vowel = vowels[1]\n            end\n            encoded\
    \ = encoded .. next_vowel\n        else\n            if char == char:upper() then\n\
    \                encoded = encoded .. char:lower()\n            else\n       \
    \         encoded = encoded .. char:upper()\n            end\n        end\n  \
    \  end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local index = j + 2\n       \
    \     if index > #vowels then\n                index = index - #vowels\n     \
    \       end\n            char = vowels[index]\n        end\n        encoded =\
    \ encoded .. char\n    end\n    return encoded\nend", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n\
    \    local vowels = 'aeiou'\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        local index = alphabet:find(char:lower())\n\
    \        if index then\n            local is_upper = char == char:upper()\n  \
    \          local is_vowel = vowels:find(char:lower())\n            if is_vowel\
    \ then\n                index = index + 2\n                if index > #alphabet\
    \ then\n                    index = index - #alphabet\n                end\n \
    \           end\n            char = alphabet:sub(index, index)\n            if\
    \ is_upper then\n                char = char:upper()\n            end\n      \
    \  end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    if char:match('[a-z]') then\n      encoded = encoded .. char:upper()\n\
    \    elseif char:match('[A-Z]') then\n      encoded = encoded .. char:lower()\n\
    \    else\n      encoded = encoded .. char\n    end\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local alphabet = {'a',\
    \ 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q',\
    \ 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        local index\
    \ = table.indexOf(alphabet, char:lower())\n        if index then\n           \
    \ if table.indexOf(vowels, char:lower()) then\n                index = index +\
    \ 2\n                if index > #alphabet then\n                    index = index\
    \ - #alphabet\n                end\n                encoded = encoded .. alphabet[index]\n\
    \            else\n                encoded = encoded .. alphabet[index]\n    \
    \        end\n        else\n            encoded = encoded .. char\n        end\n\
    \    end\n    return encoded\nend", "    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if char == 'a' then\n            char = 'c'\n        elseif\
    \ char == 'e' then\n            char = 'g'\n        elseif char == 'i' then\n\
    \            char = 'k'\n        elseif char == 'o' then\n            char = 'q'\n\
    \        elseif char == 'u' then\n            char = 'y'\n        end\n      \
    \  encoded = encoded .. char\n    end\n    return encoded\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % #vowels]\n\
    \            end\n        end\n        encoded = encoded .. char\n    end\n  \
    \  return encoded\nend", "    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char:match('[a-z]') then\n\
    \            char = char:upper()\n        elseif char:match('[A-Z]') then\n  \
    \          char = char:lower()\n        end\n        if char:match('[aeiou]')\
    \ then\n            local index = string.find('aeiou', char)\n            char\
    \ = 'aeiou':sub(index + 2, index + 2)\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        if table.indexof(vowels, char) then\n            char = vowels[(table.indexof(vowels,\
    \ char) + 2) % 5]\n        end\n        encoded = encoded .. char\n    end\n \
    \   return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local\
    \ encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n\
    \        end\n        if char:match('%a') then\n            char = char:lower()\
    \ == char and char:upper() or char:lower()\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local result = ''\n    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local vowels_map = {'c', 'f', 'j', 'n',\
    \ 'r'}\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local char_lower = char:lower()\n        if char_lower == char then\n\
    \            char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char_lower == vowels[j] then\n                char = vowels_map[j]\n\
    \            end\n        end\n        result = result .. char\n    end\n    return\
    \ result\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = ''\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 5 + 1\n            char = vowels[index]\n     \
    \   end\n        if string.byte(char) >= 97 and string.byte(char) <= 122 then\n\
    \            char = string.char(string.byte(char) - 32)\n        elseif string.byte(char)\
    \ >= 65 and string.byte(char) <= 90 then\n            char = string.char(string.byte(char)\
    \ + 32)\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local result = {}\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local next_vowel = vowels[(j % #vowels) + 1]\n            result[#result +\
    \ 1] = next_vowel:upper()\n        else\n            result[#result + 1] = char:lower()\n\
    \        end\n    end\n    return table.concat(result)\nend", "  local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1, #message do\n\
    \    local char = message:sub(i, i)\n    local is_vowel = false\n    for j = 1,\
    \ #vowels do\n      if char == vowels[j] then\n        is_vowel = true\n     \
    \   break\n      end\n    end\n    if is_vowel then\n      local index = (string.find(vowels,\
    \ char) + 2) % #vowels\n      if index == 0 then\n        index = #vowels\n  \
    \    end\n      char = vowels[index]\n    end\n    encoded = encoded .. char:upper()\n\
    \  end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = (string.byte(char) - 96) % 5 + 1\n            encoded = encoded\
    \ .. vowels[index]\n        else\n            if string.byte(char) >= 97 and string.byte(char)\
    \ <= 122 then\n                encoded = encoded .. string.char(string.byte(char)\
    \ - 32)\n            elseif string.byte(char) >= 65 and string.byte(char) <= 90\
    \ then\n                encoded = encoded .. string.char(string.byte(char) + 32)\n\
    \            else\n                encoded = encoded .. char\n            end\n\
    \        end\n    end\n    return encoded\nend", "    local vowels = {'a', 'e',\
    \ 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n       \
    \ local char = message:sub(i, i)\n        if char == char:upper() then\n     \
    \       char = char:lower()\n        else\n            char = char:upper()\n \
    \       end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexOf(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 2\n            end\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local next_vowel = vowels[(j % #vowels) +\
    \ 1]\n            encoded = encoded .. next_vowel\n        else\n            encoded\
    \ = encoded .. char:upper()\n        end\n    end\n    return encoded\nend", " \
    \   local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for\
    \ i = 1, #message do\n        local char = message:sub(i, i)\n        if char\
    \ == char:upper() then\n            char = char:lower()\n        else\n      \
    \      char = char:upper()\n        end\n        if table.contains(vowels, char)\
    \ then\n            local index = table.indexof(vowels, char)\n            if\
    \ index == #vowels then\n                index = 1\n            else\n       \
    \         index = index + 1\n            end\n            char = vowels[index]\n\
    \        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "    local alphabet = 'abcdefghijklmnopqrstuvwxyz'\n    local vowels = 'aeiou'\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels:sub(j, j) then\n                is_vowel = true\n     \
    \           break\n            end\n        end\n        if is_vowel then\n  \
    \          local index = alphabet:find(char)\n            local next_index = index\
    \ + 2\n            if next_index > #alphabet then\n                next_index\
    \ = next_index - #alphabet\n            end\n            encoded = encoded ..\
    \ alphabet:sub(next_index, next_index)\n        else\n            if char == char:upper()\
    \ then\n                encoded = encoded .. char:lower()\n            else\n\
    \                encoded = encoded .. char:upper()\n            end\n        end\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local isVowel = false\n    for j = 1, #vowels do\n      if char == vowels[j]\
    \ then\n        isVowel = true\n        local nextVowel = vowels[j + 2]\n    \
    \    if not nextVowel then\n          nextVowel = vowels[1]\n        end\n   \
    \     char = nextVowel\n      end\n    end\n    if char:match('[A-Z]') then\n\
    \      char = char:lower()\n    elseif char:match('[a-z]') then\n      char =\
    \ char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        local\
    \ is_vowel = false\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                is_vowel = true\n                break\n            end\n\
    \        end\n        if is_vowel then\n            local offset = (string.byte(char)\
    \ + 2) - string.byte('a')\n            if offset > 26 then\n                offset\
    \ = offset - 26\n            end\n            encoded = encoded .. string.char(string.byte('a')\
    \ + offset)\n        else\n            encoded = encoded .. char\n        end\n\
    \    end\n    return encoded\nend", "    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local lower = char:lower()\n\
    \        if lower == 'a' then\n            encoded = encoded .. 'c'\n        elseif\
    \ lower == 'e' then\n            encoded = encoded .. 'g'\n        elseif lower\
    \ == 'i' then\n            encoded = encoded .. 'k'\n        elseif lower == 'o'\
    \ then\n            encoded = encoded .. 'q'\n        elseif lower == 'u' then\n\
    \            encoded = encoded .. 's'\n        elseif lower == 'y' then\n    \
    \        encoded = encoded .. 'a'\n        elseif lower == char then\n       \
    \     encoded = encoded .. char:upper()\n        else\n            encoded = encoded\
    \ .. char\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for _, vowel in ipairs(vowels) do\n\
    \            if char == vowel then\n                char = vowels[((vowels[vowel]\
    \ or 0) + 2) % 5 + 1]\n                break\n            end\n        end\n \
    \       encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        local is_vowel = false\n\
    \        for j = 1, #vowels do\n            if char == vowels[j] then\n      \
    \          is_vowel = true\n                break\n            end\n        end\n\
    \        if is_vowel then\n            local next_vowel = vowels[(j % #vowels)\
    \ + 1]\n            encoded = encoded .. next_vowel\n        else\n          \
    \  encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char:match('[a-z]') then\n            char = char:upper()\n \
    \       elseif char:match('[A-Z]') then\n            char = char:lower()\n   \
    \     end\n        if char:match('[aeiou]') then\n            local index = string.find('aeiou',\
    \ char)\n            char = 'aeiou':sub(index + 2, index + 2)\n        end\n \
    \       encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        if char ==\
    \ char:upper() then\n            char = char:lower()\n        else\n         \
    \   char = char:upper()\n        end\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                char = vowels[(j + 2) % 5 + 1]\n\
    \                break\n            end\n        end\n        encoded = encoded\
    \ .. char\n    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i',\
    \ 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n        local\
    \ char = message:sub(i, i)\n        if char == char:upper() then\n           \
    \ char = char:lower()\n        else\n            char = char:upper()\n       \
    \ end\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                char = vowels[(j + 2) % #vowels]\n            end\n        end\n\
    \        encoded = encoded .. char\n    end\n    return encoded\nend", "    local\
    \ vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 1\n            end\n            char = vowels[index]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        local is_vowel = false\n      \
    \  for j = 1, #vowels do\n            if char == vowels[j] then\n            \
    \    is_vowel = true\n                break\n            end\n        end\n  \
    \      if is_vowel then\n            local index = (string.byte(char) - 96) %\
    \ 5 + 1\n            encoded = encoded .. vowels[index]\n        else\n      \
    \      if char == char:upper() then\n                encoded = encoded .. char:lower()\n\
    \            else\n                encoded = encoded .. char:upper()\n       \
    \     end\n        end\n    end\n    return encoded\nend", "    local vowels =\
    \ {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n\
    \        local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.indexof(vowels, char) then\n            char =\
    \ vowels[(table.indexof(vowels, char) + 2) % 5]\n        end\n        encoded\
    \ = encoded .. char\n    end\n    return encoded\nend", "    local vowels = {'a',\
    \ 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message do\n  \
    \      local char = message:sub(i, i)\n        if char == char:upper() then\n\
    \            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        if table.contains(vowels, char) then\n            local\
    \ index = table.indexof(vowels, char)\n            if index == #vowels then\n\
    \                index = 0\n            end\n            char = vowels[index +\
    \ 2]\n        end\n        encoded = encoded .. char\n    end\n    return encoded\n\
    end", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for\
    \ i = 1, #message do\n    local letter = message:sub(i, i)\n    local is_vowel\
    \ = false\n    for j = 1, #vowels do\n      if letter == vowels[j] then\n    \
    \    is_vowel = true\n        break\n      end\n    end\n    if is_vowel then\n\
    \      local next_vowel = vowels[j + 2]\n      if next_vowel == nil then\n   \
    \     next_vowel = vowels[1]\n      end\n      encoded = encoded .. next_vowel\n\
    \    else\n      encoded = encoded .. letter:upper()\n    end\n  end\n  return\
    \ encoded\nend", "    local encoded = \"\"\n    for i = 1, #message do\n     \
    \   local char = message:sub(i, i)\n        if char:match(\"[A-Z]\") then\n  \
    \          encoded = encoded .. char:lower()\n        elseif char:match(\"[a-z]\"\
    ) then\n            encoded = encoded .. char:upper()\n        else\n        \
    \    encoded = encoded .. char\n        end\n    end\n    return encoded\nend",
  "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n  local encoded = ''\n  for i = 1,\
    \ #message do\n    local char = message:sub(i, i)\n    local is_vowel = false\n\
    \    for j = 1, #vowels do\n      if char == vowels[j] then\n        is_vowel\
    \ = true\n        break\n      end\n    end\n    if is_vowel then\n      local\
    \ next_vowel = vowels[j + 2]\n      if next_vowel == nil then\n        next_vowel\
    \ = vowels[1]\n      end\n      encoded = encoded .. next_vowel\n    else\n  \
    \    if char == char:upper() then\n        encoded = encoded .. char:lower()\n\
    \      else\n        encoded = encoded .. char:upper()\n      end\n    end\n \
    \ end\n  return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        local is_vowel = false\n        for j = 1, #vowels do\n        \
    \    if char == vowels[j] then\n                is_vowel = true\n            \
    \    break\n            end\n        end\n        if is_vowel then\n         \
    \   local index = string.find(vowels, char)\n            if index == #vowels then\n\
    \                index = 1\n            else\n                index = index +\
    \ 1\n            end\n            char = vowels[index]\n        end\n        if\
    \ char:match('[a-z]') then\n            char = char:upper()\n        else\n  \
    \          char = char:lower()\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "  local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \  local encoded = ''\n  for i = 1, #message do\n    local char = message:sub(i,\
    \ i)\n    local is_vowel = false\n    for j = 1, #vowels do\n      if char ==\
    \ vowels[j] then\n        is_vowel = true\n        break\n      end\n    end\n\
    \    if is_vowel then\n      local index = (string.find(vowels, char) + 2) % #vowels\n\
    \      if index == 0 then\n        index = #vowels\n      end\n      char = vowels[index]\n\
    \    end\n    if char == char:upper() then\n      char = char:lower()\n    else\n\
    \      char = char:upper()\n    end\n    encoded = encoded .. char\n  end\n  return\
    \ encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded\
    \ = {}\n    for i = 1, #message do\n        local char = message:sub(i, i)\n \
    \       local is_vowel = false\n        for j = 1, #vowels do\n            if\
    \ char == vowels[j] then\n                is_vowel = true\n                break\n\
    \            end\n        end\n        if is_vowel then\n            local index\
    \ = (string.byte(char) - 96) % 26 + 1\n            char = string.char(index +\
    \ 96)\n        end\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        encoded[#encoded\
    \ + 1] = char\n    end\n    return table.concat(encoded)\nend", "    local vowels\
    \ = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i = 1, #message\
    \ do\n        local char = message:sub(i, i)\n        if char == char:upper()\
    \ then\n            char = char:lower()\n        else\n            char = char:upper()\n\
    \        end\n        for j = 1, #vowels do\n            if char == vowels[j]\
    \ then\n                char = vowels[(j + 2) % #vowels]\n            end\n  \
    \      end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local letter = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if letter == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local new_letter = letter:byte()\
    \ + 2\n            if new_letter > 122 then\n                new_letter = new_letter\
    \ - 26\n            end\n            encoded = encoded .. string.char(new_letter)\n\
    \        else\n            if letter == letter:upper() then\n                encoded\
    \ = encoded .. letter:lower()\n            else\n                encoded = encoded\
    \ .. letter:upper()\n            end\n        end\n    end\n    return encoded\n\
    end", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n\
    \    for i = 1, #message do\n        local char = message:sub(i, i)\n        if\
    \ char == char:upper() then\n            char = char:lower()\n        else\n \
    \           char = char:upper()\n        end\n        for j = 1, #vowels do\n\
    \            if char == vowels[j] then\n                char = vowels[(j + 2)\
    \ % #vowels]\n            end\n        end\n        encoded = encoded .. char\n\
    \    end\n    return encoded\nend", "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n\
    \    local encoded = ''\n    for i = 1, #message do\n        local char = message:sub(i,\
    \ i)\n        if char == char:upper() then\n            char = char:lower()\n\
    \        else\n            char = char:upper()\n        end\n        if table.contains(vowels,\
    \ char) then\n            local index = table.indexof(vowels, char)\n        \
    \    index = index + 2\n            if index > #vowels then\n                index\
    \ = index - #vowels\n            end\n            char = vowels[index]\n     \
    \   end\n        encoded = encoded .. char\n    end\n    return encoded\nend",
  "    local vowels = {'a', 'e', 'i', 'o', 'u'}\n    local encoded = ''\n    for i\
    \ = 1, #message do\n        local char = message:sub(i, i)\n        local is_vowel\
    \ = false\n        for j = 1, #vowels do\n            if char == vowels[j] then\n\
    \                is_vowel = true\n                break\n            end\n   \
    \     end\n        if is_vowel then\n            local next_vowel = vowels[(j\
    \ % #vowels) + 1]\n            encoded = encoded .. next_vowel\n        else\n\
    \            encoded = encoded .. char\n        end\n    end\n    return encoded\n\
    end"]
stop_tokens:
- "\nlocal"
- "\nfunction"
- "\n--"
- "\n\n"
