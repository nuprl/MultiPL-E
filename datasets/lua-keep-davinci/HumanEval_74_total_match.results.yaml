name: HumanEval_74_total_match
language: lua
results:
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local l1, l2 = 0, 0\n    for _, v in ipairs(lst1) do\n        l1 = l1 + #v\n\
    \    end\n    for _, v in ipairs(lst2) do\n        l2 = l2 + #v\n    end\n   \
    \ if l1 < l2 then\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp381uq7rf.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp381uq7rf.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8k3e07hm.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp8k3e07hm.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj3xt0chd.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpj3xt0chd.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for _, v in ipairs(lst1) do\n    sum1 = sum1 + #v\n\
    \  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n  end\n  if sum1\
    \ < sum2 then\n    return lst1\n  elseif sum1 > sum2 then\n    return lst2\n \
    \ else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpyq9dgwl6.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpyq9dgwl6.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 == sum2 then\n        return lst1\n    elseif sum1 < sum2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpuayiotez.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpuayiotez.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for _, v in ipairs(lst1)\
    \ do\n        lst1_total = lst1_total + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        lst2_total = lst2_total + #v\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8o5pwn2w.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp8o5pwn2w.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1i8asaws.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp1i8asaws.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_fjbrrna.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp_fjbrrna.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplicnpiks.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmplicnpiks.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    elseif total1 > total2 then\n        return lst2\n    else\n     \
    \   return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe_4x7mkv.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpe_4x7mkv.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfg79p0m9.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpfg79p0m9.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_zkx_aaw.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp_zkx_aaw.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb54_am33.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpb54_am33.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_n0na44v.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp_n0na44v.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 > sum2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = 0\n    local len2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     len1 = len1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        len2\
    \ = len2 + #v\n    end\n    if len1 < len2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpq6vp2jim.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpq6vp2jim.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5dhzlags.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp5dhzlags.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2w7j0dqq.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp2w7j0dqq.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptxvp5py9.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmptxvp5py9.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsrp0k330.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpsrp0k330.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpjvofevjt.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpjvofevjt.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4hxi2_f_.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp4hxi2_f_.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpqm2566xe.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpqm2566xe.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7bx7d0jb.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp7bx7d0jb.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpacyk1dab.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpacyk1dab.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local count1 = 0\n  local count2 = 0\n  for i = 1, #lst1 do\n    count1 = count1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    count2 = count2 + #lst2[i]\n \
    \ end\n  if count1 < count2 then\n    return lst1\n  elseif count1 > count2 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_giby9wr.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp_giby9wr.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7qrn7gvv.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp7qrn7gvv.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpigawcnng.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpigawcnng.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    elseif lst1_total > lst2_total then\n       \
    \ return lst2\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \tlocal sum1, sum2 = 0, 0\n\tfor _, v in ipairs(lst1) do\n\t\tsum1 = sum1 + #v\n\
    \tend\n\tfor _, v in ipairs(lst2) do\n\t\tsum2 = sum2 + #v\n\tend\n\tif sum1 <\
    \ sum2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpndg0cq6y.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpndg0cq6y.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcnorn0wf.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpcnorn0wf.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpsbunmdcu.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpsbunmdcu.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpfklh4jj7.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpfklh4jj7.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for _, v in ipairs(lst1)\
    \ do\n        lst1_len = lst1_len + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        lst2_len = lst2_len + #v\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for _, v in ipairs(lst1) do\n    sum1 = sum1 + #v\n\
    \  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n  end\n  if sum1\
    \ < sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf22d99cn.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpf22d99cn.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxggdptog.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpxggdptog.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for _, v in ipairs(lst1)\
    \ do\n        lst1_len = lst1_len + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        lst2_len = lst2_len + #v\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvvfqnp2k.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpvvfqnp2k.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i,v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for i,v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpupbcin8g.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpupbcin8g.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpho3qn1yz.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpho3qn1yz.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ykh9qb0.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp3ykh9qb0.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    elseif total1 > total2 then\n        return lst2\n    else\n     \
    \   return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local function count(lst)\n        local cnt = 0\n        for _, v in ipairs(lst)\
    \ do\n            cnt = cnt + #v\n        end\n        return cnt\n    end\n \
    \   local cnt1, cnt2 = count(lst1), count(lst2)\n    if cnt1 == cnt2 then\n  \
    \      return lst1\n    elseif cnt1 < cnt2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        count1 = count1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    count2 = count2 + #v\n    end\n    if count1 < count2 then\n        return\
    \ lst1\n    elseif count1 > count2 then\n        return lst2\n    else\n     \
    \   return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpltp_tl89.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpltp_tl89.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpd6s8o3i8.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpd6s8o3i8.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \tlocal t1, t2 = 0, 0\n\tfor _, v in ipairs(lst1) do\n\t\tt1 = t1 + #v\n\tend\n\
    \tfor _, v in ipairs(lst2) do\n\t\tt2 = t2 + #v\n\tend\n\tif t1 < t2 then\n\t\t\
    return lst1\n\telse\n\t\treturn lst2\n\tend\nend\nlu = require('luaunit')\n\n\
    function test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppd1ce884.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmppd1ce884.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local lst1_len = 0\n  local lst2_len = 0\n  for _, v in ipairs(lst1) do\n \
    \   lst1_len = lst1_len + #v\n  end\n  for _, v in ipairs(lst2) do\n    lst2_len\
    \ = lst2_len + #v\n  end\n  if lst1_len < lst2_len then\n    return lst1\n  else\n\
    \    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp0hau6zov.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp0hau6zov.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_chars = 0\n    local lst2_chars = 0\n    for i = 1, #lst1 do\n\
    \        lst1_chars = lst1_chars + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_chars = lst2_chars + #lst2[i]\n    end\n    if lst1_chars < lst2_chars\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpe7k7f6gs.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpe7k7f6gs.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \tlocal lst1_total = 0\n\tlocal lst2_total = 0\n\tfor i,v in ipairs(lst1) do\n\
    \t\tlst1_total = lst1_total + #v\n\tend\n\tfor i,v in ipairs(lst2) do\n\t\tlst2_total\
    \ = lst2_total + #v\n\tend\n\tif lst1_total < lst2_total then\n\t\treturn lst1\n\
    \telseif lst1_total > lst2_total then\n\t\treturn lst2\n\telse\n\t\treturn lst1\n\
    \tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6mbzlmgn.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp6mbzlmgn.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpnf5_f6zx.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpnf5_f6zx.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1ewsfsjc.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp1ewsfsjc.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmbvjrf4d.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpmbvjrf4d.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp8griwz7q.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp8griwz7q.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplyeu_83c.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmplyeu_83c.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6wiiaci8.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp6wiiaci8.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpcmpudo51.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpcmpudo51.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4ingi2yu.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp4ingi2yu.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    elseif total1 > total2 then\n        return lst2\n    else\n     \
    \   return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    elseif total1 > total2 then\n        return lst2\n    else\n     \
    \   return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for _, v in ipairs(lst1) do\n    sum1 = sum1 + #v\n\
    \  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n  end\n  if sum1\
    \ > sum2 then\n    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp331dipcm.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp331dipcm.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp69pl7mf8.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp69pl7mf8.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7cs1r5du.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp7cs1r5du.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpj9l5wu2l.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpj9l5wu2l.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for i = 1, #lst1 do\n    sum1 = sum1 + #lst1[i]\n\
    \  end\n  for i = 1, #lst2 do\n    sum2 = sum2 + #lst2[i]\n  end\n  if sum1 <\
    \ sum2 then\n    return lst1\n  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpddzs8e6g.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpddzs8e6g.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpvq4gs66v.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpvq4gs66v.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp9ytnedzm.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp9ytnedzm.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmps7o8v2uq.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmps7o8v2uq.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpb8xskprd.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpb8xskprd.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7yikm0t0.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp7yikm0t0.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpkoe63bcx.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpkoe63bcx.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp5xonp0fk.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp5xonp0fk.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpksdfpgiz.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpksdfpgiz.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp1aa3p07b.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp1aa3p07b.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 == sum2 then\n        return lst1\n    elseif sum1 < sum2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7b0rsrqw.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp7b0rsrqw.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6g0orbcl.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp6g0orbcl.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4vu8jri5.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp4vu8jri5.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 == sum2 then\n        return lst1\n    elseif\
    \ sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for _, v in ipairs(lst1) do\n    total1\
    \ = total1 + #v\n  end\n  for _, v in ipairs(lst2) do\n    total2 = total2 + #v\n\
    \  end\n  if total1 < total2 then\n    return lst1\n  else\n    return lst2\n\
    \  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpc612iu8n.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpc612iu8n.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _,v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _,v in ipairs(lst2) do\n     \
    \   total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwnfwv4da.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpwnfwv4da.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _,v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _,v in ipairs(lst2) do\n     \
    \   total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp7v9_3g1b.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp7v9_3g1b.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmptgddzdtz.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmptgddzdtz.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for _, v in ipairs(lst1)\
    \ do\n        lst1_len = lst1_len + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        lst2_len = lst2_len + #v\n    end\n    if lst1_len == lst2_len then\n\
    \        return lst1\n    elseif lst1_len < lst2_len then\n        return lst1\n\
    \    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for _, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprw3vq_qs.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmprw3vq_qs.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 == total2 then\n        return\
    \ lst1\n    elseif total1 < total2 then\n        return lst1\n    else\n     \
    \   return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for _, v in ipairs(lst1) do\n    sum1 = sum1 + #v\n\
    \  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n  end\n  if sum1\
    \ < sum2 then\n    return lst1\n  elseif sum1 > sum2 then\n    return lst2\n \
    \ else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local total1 = 0\n  local total2 = 0\n  for i = 1, #lst1 do\n    total1 = total1\
    \ + #lst1[i]\n  end\n  for i = 1, #lst2 do\n    total2 = total2 + #lst2[i]\n \
    \ end\n  if total1 < total2 then\n    return lst1\n  elseif total2 < total1 then\n\
    \    return lst2\n  else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for _, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for _, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    else\n        return lst2\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpycm3tsd0.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpycm3tsd0.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpin8z46qc.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpin8z46qc.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = 0\n    local len2 = 0\n    for i = 1, #lst1 do\n        len1\
    \ = len1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        len2 = len2 + #lst2[i]\n\
    \    end\n    if len1 < len2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpndh7pesg.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpndh7pesg.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i, v in ipairs(lst1) do\n\
    \        total1 = total1 + #v\n    end\n    for i, v in ipairs(lst2) do\n    \
    \    total2 = total2 + #v\n    end\n    if total1 < total2 then\n        return\
    \ lst1\n    elseif total1 > total2 then\n        return lst2\n    else\n     \
    \   return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = 0\n    local len2 = 0\n    for i = 1, #lst1 do\n        len1\
    \ = len1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        len2 = len2 + #lst2[i]\n\
    \    end\n    if len1 < len2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmphlyaviov.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmphlyaviov.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = 0\n    local len2 = 0\n    for i = 1, #lst1 do\n        len1\
    \ = len1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        len2 = len2 + #lst2[i]\n\
    \    end\n    if len1 < len2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpwm2qjtcg.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpwm2qjtcg.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpxcpllrg7.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpxcpllrg7.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp68_nmy44.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp68_nmy44.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmppw85cd92.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmppw85cd92.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local function total_chars(lst)\n        local total = 0\n        for _,\
    \ v in ipairs(lst) do\n            total = total + #v\n        end\n        return\
    \ total\n    end\n    local total1, total2 = total_chars(lst1), total_chars(lst2)\n\
    \    if total1 == total2 then\n        return lst1\n    elseif total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp2x1dvm7q.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp2x1dvm7q.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \tlocal total1, total2 = 0, 0\n\tfor _, v in ipairs(lst1) do\n\t\ttotal1 = total1\
    \ + #v\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\ttotal2 = total2 + #v\n\tend\n\
    \tif total1 < total2 then\n\t\treturn lst1\n\telse\n\t\treturn lst2\n\tend\nend\n\
    lu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpf7pdu0tb.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpf7pdu0tb.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for _, v in ipairs(lst1) do\n    sum1 = sum1 + #v\n\
    \  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n  end\n  if sum1\
    \ == sum2 then\n    return lst1\n  elseif sum1 < sum2 then\n    return lst1\n\
    \  else\n    return lst2\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i,v in ipairs(lst1) do\n\
    \        total1 = total1 + string.len(v)\n    end\n    for i,v in ipairs(lst2)\
    \ do\n        total2 = total2 + string.len(v)\n    end\n    if total1 < total2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpn8adloaa.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpn8adloaa.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp_hgckccx.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp_hgckccx.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = 0\n    local len2 = 0\n    for i, v in ipairs(lst1) do\n   \
    \     len1 = len1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        len2\
    \ = len2 + #v\n    end\n    if len1 < len2 then\n        return lst1\n    else\n\
    \        return lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp3ddhpbp2.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp3ddhpbp2.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for _, v in ipairs(lst1)\
    \ do\n        lst1_total = lst1_total + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        lst2_total = lst2_total + #v\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmplnuqzm8j.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmplnuqzm8j.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for _, v in ipairs(lst1)\
    \ do\n        lst1_len = lst1_len + #v\n    end\n    for _, v in ipairs(lst2)\
    \ do\n        lst2_len = lst2_len + #v\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \  local sum1, sum2 = 0, 0\n  for _, v in ipairs(lst1) do\n    sum1 = sum1 + #v\n\
    \  end\n  for _, v in ipairs(lst2) do\n    sum2 = sum2 + #v\n  end\n  if sum1\
    \ < sum2 then\n    return lst1\n  elseif sum1 > sum2 then\n    return lst2\n \
    \ else\n    return lst1\n  end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i, v in ipairs(lst1) do\n   \
    \     sum1 = sum1 + #v\n    end\n    for i, v in ipairs(lst2) do\n        sum2\
    \ = sum2 + #v\n    end\n    if sum1 < sum2 then\n        return lst1\n    elseif\
    \ sum1 > sum2 then\n        return lst2\n    else\n        return lst1\n    end\n\
    end\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local len1 = 0\n    local len2 = 0\n    for i = 1, #lst1 do\n        len1\
    \ = len1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        len2 = len2 + #lst2[i]\n\
    \    end\n    if len1 < len2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6809e5dn.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp6809e5dn.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local count1 = 0\n    local count2 = 0\n    for i = 1, #lst1 do\n       \
    \ count1 = count1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        count2\
    \ = count2 + #lst2[i]\n    end\n    if count1 < count2 then\n        return lst1\n\
    \    elseif count1 > count2 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1 = 0\n    local sum2 = 0\n    for i = 1, #lst1 do\n        sum1\
    \ = sum1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    elseif sum1 > sum2\
    \ then\n        return lst2\n    else\n        return lst1\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_len = 0\n    local lst2_len = 0\n    for i = 1, #lst1 do\n   \
    \     lst1_len = lst1_len + #lst1[i]\n    end\n    for i = 1, #lst2 do\n     \
    \   lst2_len = lst2_len + #lst2[i]\n    end\n    if lst1_len < lst2_len then\n\
    \        return lst1\n    elseif lst1_len > lst2_len then\n        return lst2\n\
    \    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\nfunction\
    \ test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local total1 = 0\n    local total2 = 0\n    for i = 1, #lst1 do\n       \
    \ total1 = total1 + #lst1[i]\n    end\n    for i = 1, #lst2 do\n        total2\
    \ = total2 + #lst2[i]\n    end\n    if total1 < total2 then\n        return lst1\n\
    \    elseif total2 < total1 then\n        return lst2\n    else\n        return\
    \ lst1\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpmzbxzohk.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpmzbxzohk.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local function count_chars(lst)\n        local count = 0\n        for _,\
    \ v in ipairs(lst) do\n            count = count + #v\n        end\n        return\
    \ count\n    end\n    local count1, count2 = count_chars(lst1), count_chars(lst2)\n\
    \    if count1 == count2 then\n        return lst1\n    elseif count1 < count2\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp018oxu8b.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp018oxu8b.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    elseif lst1_total > lst2_total then\n       \
    \ return lst2\n    else\n        return lst1\n    end\nend\nlu = require('luaunit')\n\
    \nfunction test_humaneval()\nlocal candidate = total_match\n    lu.assertEquals(candidate({},\
    \ {}), {})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi',\
    \ 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin',\
    \ 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2',\
    \ '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI',\
    \ 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}),\
    \ {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: b''
  stderr: b'.\nRan 1 tests in 0.000 seconds, 1 success, 0 failures\nOK\n'
  exit_code: 0
  status: OK
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for _, v in ipairs(lst1) do\n        sum1 =\
    \ sum1 + #v\n    end\n    for _, v in ipairs(lst2) do\n        sum2 = sum2 + #v\n\
    \    end\n    if sum1 < sum2 then\n        return lst1\n    else\n        return\
    \ lst2\n    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal\
    \ candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmprffuizvs.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmprffuizvs.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local lst1_total = 0\n    local lst2_total = 0\n    for i = 1, #lst1 do\n\
    \        lst1_total = lst1_total + #lst1[i]\n    end\n    for i = 1, #lst2 do\n\
    \        lst2_total = lst2_total + #lst2[i]\n    end\n    if lst1_total < lst2_total\
    \ then\n        return lst1\n    else\n        return lst2\n    end\nend\nlu =\
    \ require('luaunit')\n\nfunction test_humaneval()\nlocal candidate = total_match\n\
    \    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp6gtpebrd.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp6gtpebrd.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \    local sum1, sum2 = 0, 0\n    for i = 1, #lst1 do\n        sum1 = sum1 + #lst1[i]\n\
    \    end\n    for i = 1, #lst2 do\n        sum2 = sum2 + #lst2[i]\n    end\n \
    \   if sum1 < sum2 then\n        return lst1\n    else\n        return lst2\n\
    \    end\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\nlocal candidate\
    \ = total_match\n    lu.assertEquals(candidate({}, {}), {})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hi', 'hi', 'admin', 'project'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'},\
    \ {'1', '2', '3', '4', '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'Hi'}), {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'},\
    \ {'hI', 'hi', 'hi'}), {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi',\
    \ 'admin'}, {'hI', 'hi', 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({},\
    \ {'this'}), {})\n    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmpi5r_kzcn.lua:34:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmpi5r_kzcn.lua:34: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.000 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
- program: "-- Write a function that accepts two lists of strings and returns the\
    \ list that has \n-- total number of chars in the all strings of the list less\
    \ than the other list.\n-- if the two lists have the same number of chars, return\
    \ the first list.\n-- Examples\n-- total_match([], []) \u279E []\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'Hi']) \u279E ['hI', 'Hi']\n-- total_match(['hi', 'admin'],\
    \ ['hi', 'hi', 'admin', 'project']) \u279E ['hi', 'admin']\n-- total_match(['hi',\
    \ 'admin'], ['hI', 'hi', 'hi']) \u279E ['hI', 'hi', 'hi']\n-- total_match(['4'],\
    \ ['1', '2', '3', '4', '5']) \u279E ['4']\nlocal function total_match(lst1, lst2)\n\
    \tlocal lst1_total = 0\n\tlocal lst2_total = 0\n\tfor _, v in ipairs(lst1) do\n\
    \t\tlst1_total = lst1_total + #v\n\tend\n\tfor _, v in ipairs(lst2) do\n\t\tlst2_total\
    \ = lst2_total + #v\n\tend\n\tif lst1_total < lst2_total then\n\t\treturn lst1\n\
    \telse\n\t\treturn lst2\n\tend\nend\nlu = require('luaunit')\n\nfunction test_humaneval()\n\
    local candidate = total_match\n    lu.assertEquals(candidate({}, {}), {})\n  \
    \  lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi'}), {'hi', 'hi'})\n \
    \   lu.assertEquals(candidate({'hi', 'admin'}, {'hi', 'hi', 'admin', 'project'}),\
    \ {'hi', 'admin'})\n    lu.assertEquals(candidate({'4'}, {'1', '2', '3', '4',\
    \ '5'}), {'4'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'Hi'}),\
    \ {'hI', 'Hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi', 'hi'}),\
    \ {'hI', 'hi', 'hi'})\n    lu.assertEquals(candidate({'hi', 'admin'}, {'hI', 'hi',\
    \ 'hii'}), {'hi', 'admin'})\n    lu.assertEquals(candidate({}, {'this'}), {})\n\
    \    lu.assertEquals(candidate({'this'}, {}), {})\nend\n\nos.exit(lu.LuaUnit.run())"
  stdout: "b'F\\nFailed tests:\\n-------------\\n1) test_humaneval\\n/tmp/tmp4bpck9zo.lua:35:\
    \ expected: {\"hi\", \"admin\"}\\nactual: {\"hI\", \"hi\", \"hii\"}\\nstack traceback:\\\
    n\\t/tmp/tmp4bpck9zo.lua:35: in function \\'test_humaneval\\'\\n\\nRan 1 tests\
    \ in 0.001 seconds, 0 successes, 1 failure\\n'"
  stderr: b''
  exit_code: 1
  status: Exception
